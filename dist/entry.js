var Entry = {block:{}, TEXT_ALIGN_CENTER:0, TEXT_ALIGN_LEFT:1, TEXT_ALIGN_RIGHT:2, TEXT_ALIGNS:["center", "left", "right"], clipboard:null, loadProject:function(c) {
  c || (c = Entry.getStartProject(Entry.mediaFilePath));
  "workspace" == this.type && Entry.stateManager.startIgnore();
  Entry.projectId = c._id;
  Entry.variableContainer.setVariables(c.variables);
  Entry.variableContainer.setMessages(c.messages);
  Entry.scene.addScenes(c.scenes);
  Entry.stage.initObjectContainers();
  Entry.variableContainer.setFunctions(c.functions);
  Entry.container.setObjects(c.objects);
  Entry.FPS = c.speed ? c.speed : 60;
  createjs.Ticker.setFPS(Entry.FPS);
  Entry.engine.projectTimer || Entry.variableContainer.generateTimer();
  0 === Object.keys(Entry.container.inputValue).length && Entry.variableContainer.generateAnswer();
  Entry.start();
  if (this.options.programmingMode) {
    var b = this.options.programmingMode;
    if (Entry.Utils.isNumber(b)) {
      var d = b;
      this.mode = b = {};
      0 == d ? (b.boardType = Entry.Workspace.MODE_BOARD, b.textType = -1) : 1 == d ? (b.boardType = Entry.Workspace.MODE_VIMBOARD, b.textType = Entry.Vim.TEXT_TYPE_PY, b.runType = Entry.Vim.WORKSPACE_MODE) : 2 == d && (b.boardType = Entry.Workspace.MODE_VIMBOARD, b.textType = Entry.Vim.TEXT_TYPE_JS, b.runType = Entry.Vim.MAZE_MODE);
      Entry.getMainWS().setMode(b);
    }
  }
  Entry.Loader.isLoaded() && Entry.Loader.handleLoad();
  "workspace" == this.type && Entry.stateManager.endIgnore();
  c.interface && Entry.options.loadInterface && Entry.loadInterfaceState(c.interface);
  window.parent && window.parent.childIframeLoaded && window.parent.childIframeLoaded();
  return c;
}, clearProject:function() {
  Entry.stop();
  Entry.projectId = null;
  "invisible" !== Entry.type && Entry.playground && Entry.playground.changeViewMode("code");
  Entry.variableContainer.clear();
  Entry.container.clear();
  Entry.scene.clear();
}, exportProject:function(c) {
  c || (c = {});
  Entry.engine.isState("stop") || Entry.engine.toggleStop();
  Entry.Func && Entry.Func.workspace && Entry.Func.workspace.visible && Entry.Func.cancelEdit();
  c.objects = Entry.container.toJSON();
  c.scenes = Entry.scene.toJSON();
  c.variables = Entry.variableContainer.getVariableJSON();
  c.messages = Entry.variableContainer.getMessageJSON();
  c.functions = Entry.variableContainer.getFunctionJSON();
  c.scenes = Entry.scene.toJSON();
  c.speed = Entry.FPS;
  c.interface = Entry.captureInterfaceState();
  return c;
}, setBlockByText:function(c, b) {
  c = [];
  b = jQuery.parseXML(b).getElementsByTagName("category");
  for (var d = 0; d < b.length; d++) {
    for (var e = b[d], f = {category:e.getAttribute("id"), blocks:[]}, e = e.childNodes, g = 0; g < e.length; g++) {
      var h = e[g];
      !h.tagName || "BLOCK" != h.tagName.toUpperCase() && "BTN" != h.tagName.toUpperCase() || f.blocks.push(h.getAttribute("type"));
    }
    c.push(f);
  }
  Entry.playground.setBlockMenu(c);
}, setBlock:function(c, b) {
  Entry.playground.setMenuBlock(c, b);
}, enableArduino:function() {
}, initSound:function(c) {
  c && c.duration && 0 != c.duration && (c.path = c.fileurl || Entry.defaultPath + "/uploads/" + c.filename.substring(0, 2) + "/" + c.filename.substring(2, 4) + "/" + c.filename + c.ext, Entry.soundQueue.loadFile({id:c.id, src:c.path, type:createjs.LoadQueue.SOUND}));
}, beforeUnload:function(c) {
  Entry.hw.closeConnection();
  Entry.variableContainer.updateCloudVariables();
  if ("workspace" == Entry.type && (localStorage && Entry.interfaceState && localStorage.setItem("workspace-interface", JSON.stringify(Entry.captureInterfaceState())), !Entry.stateManager.isSaved())) {
    return Lang.Workspace.project_changed;
  }
}, captureInterfaceState:function() {
  var c = JSON.parse(JSON.stringify(Entry.interfaceState)), b = Entry.playground;
  "workspace" == Entry.type && b && b.object && (c.object = b.object.id);
  return c;
}, loadInterfaceState:function(c) {
  "workspace" == Entry.type && (c ? Entry.container.selectObject(c.object, !0) : localStorage && localStorage.getItem("workspace-interface") ? (c = localStorage.getItem("workspace-interface"), c = JSON.parse(c)) : c = {menuWidth:280, canvasWidth:480}, this.resizeElement(c));
}, resizeElement:function(c) {
  var b = Entry.getMainWS();
  if (b) {
    c || (c = this.interfaceState);
    if ("workspace" == Entry.type) {
      var d = this.interfaceState;
      !c.canvasWidth && d.canvasWidth && (c.canvasWidth = d.canvasWidth);
      !c.menuWidth && this.interfaceState.menuWidth && (c.menuWidth = d.menuWidth);
      Entry.engine.speedPanelOn && Entry.engine.toggleSpeedPanel();
      (d = c.canvasWidth) ? 325 > d ? d = 325 : 720 < d && (d = 720) : d = 400;
      c.canvasWidth = d;
      var e = 9 * d / 16;
      Entry.engine.view_.style.width = d + "px";
      Entry.engine.view_.style.height = e + "px";
      Entry.engine.view_.style.top = "40px";
      Entry.stage.canvas.canvas.style.width = d + "px";
      400 <= d ? Entry.engine.view_.removeClass("collapsed") : Entry.engine.view_.addClass("collapsed");
      Entry.playground.view_.style.left = d + 0.5 + "px";
      Entry.propertyPanel.resize(d);
      var f = Entry.engine.view_.getElementsByClassName("entryAddButtonWorkspace_w")[0];
      f && Entry.objectAddable && (f.style.top = e + 25 + "px", f.style.width = 0.7 * d + "px");
      (f = Entry.engine.view_.getElementsByClassName("entryPauseButtonWorkspace_w")[0]) && Entry.objectAddable && (f.style.top = e + 25 + "px", f.style.width = 0.7 * d + "px");
      if (f = Entry.engine.view_.getElementsByClassName("entryRunButtonWorkspace_w")[0]) {
        Entry.objectAddable ? (f.style.top = e + 25 + "px", f.style.left = 0.7 * d + "px", f.style.width = 0.3 * d + "px") : (f.style.left = "2px", f.style.top = e + 25 + "px", f.style.width = d - 4 + "px");
      }
      if (f = Entry.engine.view_.getElementsByClassName("entryStopButtonWorkspace_w")[0]) {
        Entry.objectAddable ? (f.style.top = e + 25 + "px", f.style.left = 0.7 * d + "px", f.style.width = 0.3 * d + "px") : (f.style.left = "2px", f.style.top = e + 25 + "px", f.style.width = d + "px");
      }
      (d = c.menuWidth) ? 244 > d ? d = 244 : 400 < d && (d = 400) : d = 264;
      c.menuWidth = d;
      b = b.blockMenu;
      e = b.hasCategory() ? -64 : 0;
      $(".blockMenuContainer").css({width:d + e + "px"});
      $(".blockMenuContainer>svg").css({width:d + e + "px"});
      b.setWidth();
      $(".entryWorkspaceBoard").css({left:d + "px"});
      Entry.playground.resizeHandle_.style.left = d + "px";
      Entry.playground.variableViewWrapper_.style.width = d + "px";
      this.interfaceState = c;
    }
    Entry.windowResized.notify();
  }
}, getUpTime:function() {
  return (new Date).getTime() - this.startTime;
}, addActivity:function(c) {
  Entry.stateManager && Entry.stateManager.addActivity(c);
}, startActivityLogging:function() {
  Entry.reporter && Entry.reporter.start(Entry.projectId, window.user ? window.user._id : null, Entry.startTime);
}, getActivityLog:function() {
  var c = {};
  Entry.stateManager && (c.activityLog = Entry.stateManager.activityLog_);
  return c;
}, DRAG_MODE_NONE:0, DRAG_MODE_MOUSEDOWN:1, DRAG_MODE_DRAG:2, cancelObjectEdit:function(c) {
  var b = Entry.playground.object;
  if (b) {
    var d = c.target, e = 0 !== $(b.view_).find(d).length, d = d.tagName.toUpperCase();
    c = c.type;
    !b.isEditing || "INPUT" === d && e || "touchstart" === c || b.editObjectValues(!1);
  }
}, generateFunctionSchema:function(c) {
  c = "func_" + c;
  if (!Entry.block[c]) {
    var b = function() {
    };
    b.prototype = Entry.block.function_general;
    b = new b;
    b.changeEvent = new Entry.Event;
    b.template = Lang.template.function_general;
    Entry.block[c] = b;
  }
}, getMainWS:function() {
  if (Entry.mainWorkspace) {
    var c = Entry.mainWorkspace;
  } else {
    Entry.playground && Entry.playground.mainWorkspace && (c = Entry.playground.mainWorkspace);
  }
  return c;
}, getDom:function(c) {
  if (!c) {
    return this.view_;
  }
  c = JSON.parse(JSON.stringify(c));
  if (1 < c.length) {
    return this[c.shift()].getDom(c);
  }
}};
window.Entry = Entry;
Entry.Albert = {PORT_MAP:{leftWheel:0, rightWheel:0, buzzer:0, leftEye:0, rightEye:0, note:0, bodyLed:0, frontLed:0, padWidth:0, padHeight:0}, setZero:function() {
  var c = Entry.Albert.PORT_MAP, b = Entry.hw.sendQueue, d;
  for (d in c) {
    b[d] = c[d];
  }
  Entry.hw.update();
  c = Entry.Albert;
  c.tempo = 60;
  c.removeAllTimeouts();
}, monitorTemplate:{imgPath:"hw/albert.png", width:387, height:503, listPorts:{temperature:{name:Lang.Blocks.ALBERT_sensor_temperature, type:"input", pos:{x:0, y:0}}, accelerationX:{name:Lang.Blocks.ALBERT_sensor_acceleration_x, type:"input", pos:{x:0, y:0}}, accelerationY:{name:Lang.Blocks.ALBERT_sensor_acceleration_y, type:"input", pos:{x:0, y:0}}, accelerationZ:{name:Lang.Blocks.ALBERT_sensor_acceleration_z, type:"input", pos:{x:0, y:0}}, frontOid:{name:Lang.Blocks.ALBERT_sensor_front_oid, type:"input", 
pos:{x:0, y:0}}, backOid:{name:Lang.Blocks.ALBERT_sensor_back_oid, type:"input", pos:{x:0, y:0}}, positionX:{name:Lang.Blocks.ALBERT_sensor_position_x, type:"input", pos:{x:0, y:0}}, positionY:{name:Lang.Blocks.ALBERT_sensor_position_y, type:"input", pos:{x:0, y:0}}, orientation:{name:Lang.Blocks.ALBERT_sensor_orientation, type:"input", pos:{x:0, y:0}}, buzzer:{name:Lang.Hw.buzzer, type:"output", pos:{x:0, y:0}}, note:{name:Lang.Hw.note, type:"output", pos:{x:0, y:0}}}, ports:{leftProximity:{name:Lang.Blocks.ALBERT_sensor_left_proximity, 
type:"input", pos:{x:178, y:401}}, rightProximity:{name:Lang.Blocks.ALBERT_sensor_right_proximity, type:"input", pos:{x:66, y:359}}, battery:{name:Lang.Blocks.ALBERT_sensor_battery, type:"input", pos:{x:88, y:368}}, light:{name:Lang.Blocks.ALBERT_sensor_light, type:"input", pos:{x:127, y:391}}, leftWheel:{name:Lang.Hw.leftWheel, type:"output", pos:{x:299, y:406}}, rightWheel:{name:Lang.Hw.rightWheel, type:"output", pos:{x:22, y:325}}, leftEye:{name:Lang.Hw.leftEye, type:"output", pos:{x:260, y:26}}, 
rightEye:{name:Lang.Hw.rightEye, type:"output", pos:{x:164, y:13}}, bodyLed:{name:Lang.Hw.body + " " + Lang.Hw.led_en, type:"output", pos:{x:367, y:308}}, frontLed:{name:Lang.Hw.front + " " + Lang.Hw.led_en, pos:{x:117, y:410}}}, mode:"both"}, tempo:60, timeouts:[], removeTimeout:function(c) {
  clearTimeout(c);
  var b = this.timeouts;
  c = b.indexOf(c);
  0 <= c && b.splice(c, 1);
}, removeAllTimeouts:function() {
  var c = this.timeouts, b;
  for (b in c) {
    clearTimeout(c[b]);
  }
  this.timeouts = [];
}, controller:{PI:3.14159265, PI2:6.2831853, prevDirection:0, prevDirectionFine:0, directionFineCount:0, positionCount:0, finalPositionCount:0, GAIN_ANGLE:30, GAIN_ANGLE_FINE:30, GAIN_POSITION_FINE:30, STRAIGHT_SPEED:20, MAX_BASE_SPEED:20, GAIN_BASE_SPEED:1.0, GAIN_POSITION:35, POSITION_TOLERANCE_FINE:3, POSITION_TOLERANCE_FINE_LARGE:5, POSITION_TOLERANCE_ROUGH:5, POSITION_TOLERANCE_ROUGH_LARGE:10, ORIENTATION_TOLERANCE_FINE:0.08, ORIENTATION_TOLERANCE_ROUGH:0.09, ORIENTATION_TOLERANCE_ROUGH_LARGE:0.18, 
MINIMUM_WHEEL_SPEED:18, MINIMUM_WHEEL_SPEED_FINE:15, clear:function() {
  this.finalPositionCount = this.positionCount = this.directionFineCount = this.prevDirectionFine = this.prevDirection = 0;
}, controlAngleFine:function(c, b) {
  var d = Entry.hw.sendQueue;
  c = this.validateRadian(b - c);
  b = Math.abs(c);
  if (b < this.ORIENTATION_TOLERANCE_FINE) {
    return !1;
  }
  var e = 0 < c ? 1 : -1;
  if (0 > e * this.prevDirectionFine && 5 < ++this.directionFineCount) {
    return !1;
  }
  this.prevDirectionFine = e;
  0 < c ? (c = Math.log(1 + b) * this.GAIN_ANGLE_FINE, c < this.MINIMUM_WHEEL_SPEED && (c = this.MINIMUM_WHEEL_SPEED)) : (c = -Math.log(1 + b) * this.GAIN_ANGLE_FINE, c > -this.MINIMUM_WHEEL_SPEED && (c = -this.MINIMUM_WHEEL_SPEED));
  c = parseInt(c);
  d.leftWheel = -c;
  d.rightWheel = c;
  return !0;
}, controlAngle:function(c, b) {
  var d = Entry.hw.sendQueue;
  c = this.validateRadian(b - c);
  b = Math.abs(c);
  if (b < this.ORIENTATION_TOLERANCE_ROUGH) {
    return !1;
  }
  var e = 0 < c ? 1 : -1;
  if (b < this.ORIENTATION_TOLERANCE_ROUGH_LARGE && 0 > e * this.prevDirection) {
    return !1;
  }
  this.prevDirection = e;
  0 < c ? (c = Math.log(1 + b) * this.GAIN_ANGLE, c < this.MINIMUM_WHEEL_SPEED && (c = this.MINIMUM_WHEEL_SPEED)) : (c = -Math.log(1 + b) * this.GAIN_ANGLE, c > -this.MINIMUM_WHEEL_SPEED && (c = -this.MINIMUM_WHEEL_SPEED));
  c = parseInt(c);
  d.leftWheel = -c;
  d.rightWheel = c;
  return !0;
}, controlPositionFine:function(c, b, d, e, f) {
  var g = Entry.hw.sendQueue;
  d = this.validateRadian(Math.atan2(f - b, e - c) - d);
  var h = Math.abs(d);
  c = e - c;
  b = f - b;
  b = Math.sqrt(c * c + b * b);
  if (b < this.POSITION_TOLERANCE_FINE) {
    return !1;
  }
  if (b < this.POSITION_TOLERANCE_FINE_LARGE && 5 < ++this.finalPositionCount) {
    return this.finalPositionCount = 0, !1;
  }
  d = 0 < d ? Math.log(1 + h) * this.GAIN_POSITION_FINE : -Math.log(1 + h) * this.GAIN_POSITION_FINE;
  d = parseInt(d);
  g.leftWheel = this.MINIMUM_WHEEL_SPEED_FINE - d;
  g.rightWheel = this.MINIMUM_WHEEL_SPEED_FINE + d;
  return !0;
}, controlPosition:function(c, b, d, e, f) {
  var g = Entry.hw.sendQueue;
  d = this.validateRadian(Math.atan2(f - b, e - c) - d);
  var h = Math.abs(d);
  c = e - c;
  b = f - b;
  b = Math.sqrt(c * c + b * b);
  if (b < this.POSITION_TOLERANCE_ROUGH) {
    return !1;
  }
  if (b < this.POSITION_TOLERANCE_ROUGH_LARGE) {
    if (10 < ++this.positionCount) {
      return this.positionCount = 0, !1;
    }
  } else {
    this.positionCount = 0;
  }
  0.01 > h ? (g.leftWheel = this.STRAIGHT_SPEED, g.rightWheel = this.STRAIGHT_SPEED) : (b = (this.MINIMUM_WHEEL_SPEED + 0.5 / h) * this.GAIN_BASE_SPEED, b > this.MAX_BASE_SPEED && (b = this.MAX_BASE_SPEED), d = 0 < d ? Math.log(1 + h) * this.GAIN_POSITION : -Math.log(1 + h) * this.GAIN_POSITION, b = parseInt(b), d = parseInt(d), g.leftWheel = b - d, g.rightWheel = b + d);
  return !0;
}, validateRadian:function(c) {
  return c > this.PI ? c - this.PI2 : c < -this.PI ? c + this.PI2 : c;
}, toRadian:function(c) {
  return 3.14159265 * c / 180.0;
}}, name:"albert"};
Blockly.Blocks.albert_hand_found = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_hand_found);
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Entry.block.albert_hand_found = function(c, b) {
  c = Entry.hw.portData;
  return 40 < c.leftProximity || 40 < c.rightProximity;
};
Blockly.Blocks.albert_is_oid_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_is_oid_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_front_oid, "FRONT"], [Lang.Blocks.ALBERT_back_oid, "BACK"]]), "OID").appendField(Lang.Blocks.ALBERT_is_oid_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_is_oid_3);
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Entry.block.albert_is_oid_value = function(c, b) {
  c = Entry.hw.portData;
  var d = b.getField("OID", b);
  b = b.getNumberValue("VALUE");
  return "FRONT" == d ? c.frontOid == b : c.backOid == b;
};
Blockly.Blocks.albert_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_sensor_left_proximity, "leftProximity"], [Lang.Blocks.ALBERT_sensor_right_proximity, "rightProximity"], [Lang.Blocks.ALBERT_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.ALBERT_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.ALBERT_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.ALBERT_sensor_front_oid, "frontOid"], [Lang.Blocks.ALBERT_sensor_back_oid, "backOid"], [Lang.Blocks.ALBERT_sensor_position_x, 
  "positionX"], [Lang.Blocks.ALBERT_sensor_position_y, "positionY"], [Lang.Blocks.ALBERT_sensor_orientation, "orientation"], [Lang.Blocks.ALBERT_sensor_light, "light"], [Lang.Blocks.ALBERT_sensor_temperature, "temperature"], [Lang.Blocks.ALBERT_sensor_battery, "battery"], [Lang.Blocks.ALBERT_sensor_signal_strength, "signalStrength"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.albert_value = function(c, b) {
  c = Entry.hw.portData;
  b = b.getField("DEVICE");
  return c[b];
};
Blockly.Blocks.albert_move_forward_for_secs = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_forward_for_secs_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_forward_for_secs_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_move_forward_for_secs = function(c, b) {
  c = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    c.leftWheel = 0;
    c.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  c.leftWheel = 30;
  c.rightWheel = 30;
  c = 1000 * b.getNumberValue("VALUE");
  var d = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(d);
  }, c);
  Entry.Albert.timeouts.push(d);
  return b;
};
Blockly.Blocks.albert_move_backward_for_secs = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_backward_for_secs_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_backward_for_secs_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_move_backward_for_secs = function(c, b) {
  c = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    c.leftWheel = 0;
    c.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  c.leftWheel = -30;
  c.rightWheel = -30;
  c = 1000 * b.getNumberValue("VALUE");
  var d = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(d);
  }, c);
  Entry.Albert.timeouts.push(d);
  return b;
};
Blockly.Blocks.albert_turn_for_secs = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_turn_for_secs_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_turn_left, "LEFT"], [Lang.Blocks.ALBERT_turn_right, "RIGHT"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_turn_for_secs_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_turn_for_secs_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_turn_for_secs = function(c, b) {
  c = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    c.leftWheel = 0;
    c.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  "LEFT" == b.getField("DIRECTION", b) ? (c.leftWheel = -30, c.rightWheel = 30) : (c.leftWheel = 30, c.rightWheel = -30);
  c = 1000 * b.getNumberValue("VALUE");
  var d = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(d);
  }, c);
  Entry.Albert.timeouts.push(d);
  return b;
};
Blockly.Blocks.albert_change_both_wheels_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_both_wheels_by_1);
  this.appendValueInput("LEFT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_both_wheels_by_2);
  this.appendValueInput("RIGHT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_both_wheels_by_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_change_both_wheels_by = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getNumberValue("LEFT"), e = b.getNumberValue("RIGHT");
  c.leftWheel = void 0 != c.leftWheel ? c.leftWheel + d : d;
  c.rightWheel = void 0 != c.rightWheel ? c.rightWheel + e : e;
  return b.callReturn();
};
Blockly.Blocks.albert_set_both_wheels_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_both_wheels_to_1);
  this.appendValueInput("LEFT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_both_wheels_to_2);
  this.appendValueInput("RIGHT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_both_wheels_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_both_wheels_to = function(c, b) {
  c = Entry.hw.sendQueue;
  c.leftWheel = b.getNumberValue("LEFT");
  c.rightWheel = b.getNumberValue("RIGHT");
  return b.callReturn();
};
Blockly.Blocks.albert_change_wheel_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_wheel_by_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_left_wheel, "LEFT"], [Lang.Blocks.ALBERT_right_wheel, "RIGHT"], [Lang.Blocks.ALBERT_both_wheels, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_change_wheel_by_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_wheel_by_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_change_wheel_by = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getField("DIRECTION"), e = b.getNumberValue("VALUE");
  "LEFT" == d ? c.leftWheel = void 0 != c.leftWheel ? c.leftWheel + e : e : ("RIGHT" != d && (c.leftWheel = void 0 != c.leftWheel ? c.leftWheel + e : e), c.rightWheel = void 0 != c.rightWheel ? c.rightWheel + e : e);
  return b.callReturn();
};
Blockly.Blocks.albert_set_wheel_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_wheel_to_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_left_wheel, "LEFT"], [Lang.Blocks.ALBERT_right_wheel, "RIGHT"], [Lang.Blocks.ALBERT_both_wheels, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_set_wheel_to_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_wheel_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_wheel_to = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getField("DIRECTION"), e = b.getNumberValue("VALUE");
  "LEFT" == d ? c.leftWheel = e : ("RIGHT" != d && (c.leftWheel = e), c.rightWheel = e);
  return b.callReturn();
};
Blockly.Blocks.albert_stop = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_stop).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_stop = function(c, b) {
  c = Entry.hw.sendQueue;
  c.leftWheel = 0;
  c.rightWheel = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_set_pad_size_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_board_size_to_1);
  this.appendValueInput("WIDTH").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_board_size_to_2);
  this.appendValueInput("HEIGHT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_board_size_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_pad_size_to = function(c, b) {
  c = Entry.hw.sendQueue;
  c.padWidth = b.getNumberValue("WIDTH");
  c.padHeight = b.getNumberValue("HEIGHT");
  return b.callReturn();
};
Blockly.Blocks.albert_move_to_x_y_on_board = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_to_x_y_1);
  this.appendValueInput("X").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_to_x_y_2);
  this.appendValueInput("Y").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_to_x_y_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_move_to_x_y_on_board = function(c, b) {
  var d = Entry.hw.sendQueue, e = Entry.hw.portData;
  c = Entry.Albert.controller;
  if (b.isStart) {
    if (b.isMoving) {
      0 <= e.positionX && (b.x = e.positionX);
      0 <= e.positionY && (b.y = e.positionY);
      b.theta = e.orientation;
      switch(b.boardState) {
        case 1:
          if (0 == b.initialized) {
            if (0 > b.x || 0 > b.y) {
              d.leftWheel = 20;
              d.rightWheel = -20;
              break;
            }
            b.initialized = !0;
          }
          d = c.toRadian(b.theta);
          0 == c.controlAngle(d, Math.atan2(b.targetY - b.y, b.targetX - b.x)) && (b.boardState = 2);
          break;
        case 2:
          0 == c.controlPosition(b.x, b.y, c.toRadian(b.theta), b.targetX, b.targetY) && (b.boardState = 3);
          break;
        case 3:
          0 == c.controlPositionFine(b.x, b.y, c.toRadian(b.theta), b.targetX, b.targetY) && (d.leftWheel = 0, d.rightWheel = 0, b.isMoving = !1);
      }
      return b;
    }
    delete b.isStart;
    delete b.isMoving;
    delete b.initialized;
    delete b.boardState;
    delete b.x;
    delete b.y;
    delete b.theta;
    delete b.targetX;
    delete b.targetY;
    Entry.engine.isContinue = !1;
    d.leftWheel = 0;
    d.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.isMoving = !0;
  b.initialized = !1;
  b.boardState = 1;
  b.x = -1;
  b.y = -1;
  b.theta = -200;
  b.targetX = b.getNumberValue("X");
  b.targetY = b.getNumberValue("Y");
  c.clear();
  d.leftWheel = 0;
  d.rightWheel = 0;
  return b;
};
Blockly.Blocks.albert_set_orientation_on_board = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_orientation_to_1);
  this.appendValueInput("ORIENTATION").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_orientation_to_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_orientation_on_board = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = Entry.hw.portData;
  var e = Entry.Albert.controller;
  if (b.isStart) {
    if (b.isMoving) {
      b.theta = d.orientation;
      switch(b.boardState) {
        case 1:
          var f = e.toRadian(b.theta);
          d = e.toRadian(b.targetTheta);
          0 == e.controlAngle(f, d) && (b.boardState = 2);
          break;
        case 2:
          f = e.toRadian(b.theta), d = e.toRadian(b.targetTheta), 0 == e.controlAngleFine(f, d) && (c.leftWheel = 0, c.rightWheel = 0, b.isMoving = !1);
      }
      return b;
    }
    delete b.isStart;
    delete b.isMoving;
    delete b.boardState;
    delete b.theta;
    delete b.targetTheta;
    Entry.engine.isContinue = !1;
    c.leftWheel = 0;
    c.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.isMoving = !0;
  b.boardState = 1;
  b.theta = -200;
  b.targetTheta = b.getNumberValue("ORIENTATION");
  e.clear();
  c.leftWheel = 0;
  c.rightWheel = 0;
  return b;
};
Blockly.Blocks.albert_set_eye_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_eye_to_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_left_eye, "LEFT"], [Lang.Blocks.ALBERT_right_eye, "RIGHT"], [Lang.Blocks.ALBERT_both_eyes, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_set_eye_to_2).appendField(new Blockly.FieldDropdown([[Lang.General.red, "4"], [Lang.General.yellow, "6"], [Lang.General.green, "2"], [Lang.Blocks.ALBERT_color_cyan, "3"], [Lang.General.blue, "1"], [Lang.Blocks.ALBERT_color_magenta, 
  "5"], [Lang.Blocks.ALBERT_color_white, "7"]]), "COLOR").appendField(Lang.Blocks.ALBERT_set_eye_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_eye_to = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getField("DIRECTION", b), e = Number(b.getField("COLOR", b));
  "LEFT" == d ? c.leftEye = e : ("RIGHT" != d && (c.leftEye = e), c.rightEye = e);
  return b.callReturn();
};
Blockly.Blocks.albert_clear_eye = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_clear_eye_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_left_eye, "LEFT"], [Lang.Blocks.ALBERT_right_eye, "RIGHT"], [Lang.Blocks.ALBERT_both_eyes, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_clear_eye_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_clear_eye = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getField("DIRECTION", b);
  "LEFT" == d ? c.leftEye = 0 : ("RIGHT" != d && (c.leftEye = 0), c.rightEye = 0);
  return b.callReturn();
};
Blockly.Blocks.albert_body_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_turn_body_led_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_turn_on, "ON"], [Lang.Blocks.ALBERT_turn_off, "OFF"]]), "STATE").appendField(Lang.Blocks.ALBERT_turn_body_led_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_body_led = function(c, b) {
  c = Entry.hw.sendQueue;
  "ON" == b.getField("STATE", b) ? c.bodyLed = 1 : c.bodyLed = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_front_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_turn_front_led_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_turn_on, "ON"], [Lang.Blocks.ALBERT_turn_off, "OFF"]]), "STATE").appendField(Lang.Blocks.ALBERT_turn_front_led_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_front_led = function(c, b) {
  c = Entry.hw.sendQueue;
  "ON" == b.getField("STATE", b) ? c.frontLed = 1 : c.frontLed = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_beep = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_beep).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_beep = function(c, b) {
  c = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    c.buzzer = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  c.buzzer = 440;
  c.note = 0;
  var d = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(d);
  }, 200);
  Entry.Albert.timeouts.push(d);
  return b;
};
Blockly.Blocks.albert_change_buzzer_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_buzzer_by_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_buzzer_by_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_change_buzzer_by = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getNumberValue("VALUE");
  c.buzzer = void 0 != c.buzzer ? c.buzzer + d : d;
  c.note = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_set_buzzer_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_buzzer_to_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_buzzer_to_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_buzzer_to = function(c, b) {
  c = Entry.hw.sendQueue;
  c.buzzer = b.getNumberValue("VALUE");
  c.note = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_clear_buzzer = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_clear_buzzer).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_clear_buzzer = function(c, b) {
  c = Entry.hw.sendQueue;
  c.buzzer = 0;
  c.note = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_play_note_for = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_play_note_for_1).appendField(new Blockly.FieldDropdown([[Lang.General.note_c + "", "4"], [Lang.General.note_c + "#", "5"], [Lang.General.note_d + "", "6"], [Lang.General.note_e + "b", "7"], [Lang.General.note_e + "", "8"], [Lang.General.note_f + "", "9"], [Lang.General.note_f + "#", "10"], [Lang.General.note_g + "", "11"], [Lang.General.note_g + "#", "12"], [Lang.General.note_a + "", "13"], [Lang.General.note_b + "b", "14"], [Lang.General.note_b + 
  "", "15"]]), "NOTE").appendField(Lang.Blocks.ALBERT_play_note_for_2).appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]]), "OCTAVE").appendField(Lang.Blocks.ALBERT_play_note_for_3);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_play_note_for_4).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_play_note_for = function(c, b) {
  var d = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    d.note = 0;
    return b.callReturn();
  }
  c = b.getNumberField("NOTE", b);
  var e = b.getNumberField("OCTAVE", b), f = 6E4 * b.getNumberValue("VALUE", b) / Entry.Albert.tempo;
  b.isStart = !0;
  b.timeFlag = 1;
  d.buzzer = 0;
  d.note = c + 12 * (e - 1);
  if (100 < f) {
    var g = setTimeout(function() {
      d.note = 0;
      Entry.Albert.removeTimeout(g);
    }, f - 100);
    Entry.Albert.timeouts.push(g);
  }
  var h = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(h);
  }, f);
  Entry.Albert.timeouts.push(h);
  return b;
};
Blockly.Blocks.albert_rest_for = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_rest_for_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_rest_for_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_rest_for = function(c, b) {
  c = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  var d = b.getNumberValue("VALUE"), d = 6E4 * d / Entry.Albert.tempo;
  c.buzzer = 0;
  c.note = 0;
  var e = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(e);
  }, d);
  Entry.Albert.timeouts.push(e);
  return b;
};
Blockly.Blocks.albert_change_tempo_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_tempo_by_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_tempo_by_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_change_tempo_by = function(c, b) {
  Entry.Albert.tempo += b.getNumberValue("VALUE");
  1 > Entry.Albert.tempo && (Entry.Albert.tempo = 1);
  return b.callReturn();
};
Blockly.Blocks.albert_set_tempo_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_tempo_to_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_tempo_to_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_tempo_to = function(c, b) {
  Entry.Albert.tempo = b.getNumberValue("VALUE");
  1 > Entry.Albert.tempo && (Entry.Albert.tempo = 1);
  return b.callReturn();
};
Entry.Altino = {PORT_MAP:{rightWheel:0, leftWheel:0, steering:0, ascii:0, led:0, led2:0, note:0, dot1:0, dot2:0, dot3:0, dot4:0, dot5:0, dot6:0, dot7:0, dot8:0}, setZero:function() {
  var c = Entry.Altino.PORT_MAP, b = Entry.hw.sendQueue, d;
  for (d in c) {
    b[d] = c[d];
  }
  Entry.hw.update();
  Entry.Altino.removeAllTimeouts();
}, timeouts:[], removeTimeout:function(c) {
  clearTimeout(c);
  var b = this.timeouts;
  c = b.indexOf(c);
  0 <= c && b.splice(c, 1);
}, removeAllTimeouts:function() {
  var c = this.timeouts, b;
  for (b in c) {
    clearTimeout(c[b]);
  }
  this.timeouts = [];
}, name:"altino"};
Entry.Arduino = {name:"arduino", setZero:function() {
  Entry.hw.sendQueue.readablePorts = [];
  for (var c = 0; 20 > c; c++) {
    Entry.hw.sendQueue[c] = 0, Entry.hw.sendQueue.readablePorts.push(c);
  }
  Entry.hw.update();
}, monitorTemplate:{imgPath:"hw/arduino.png", width:605, height:434, listPorts:{2:{name:Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 3:{name:Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 4:{name:Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 5:{name:Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 6:{name:Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 7:{name:Lang.Hw.port_en + 
" 7 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 8:{name:Lang.Hw.port_en + " 8 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 9:{name:Lang.Hw.port_en + " 9 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 10:{name:Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 11:{name:Lang.Hw.port_en + " 11 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 12:{name:Lang.Hw.port_en + " 12 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 13:{name:Lang.Hw.port_en + " 13 " + 
Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a0:{name:Lang.Hw.port_en + " A0 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a1:{name:Lang.Hw.port_en + " A1 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a2:{name:Lang.Hw.port_en + " A2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a3:{name:Lang.Hw.port_en + " A3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a4:{name:Lang.Hw.port_en + " A4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a5:{name:Lang.Hw.port_en + " A5 " + 
Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Entry.ArduinoExt = {name:"ArduinoExt", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(c) {
    Entry.hw.sendQueue.SET[c].data = 0;
    Entry.hw.sendQueue.SET[c].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8}, toneTable:{0:0, C:1, CS:2, D:3, DS:4, E:5, F:6, FS:7, G:8, GS:9, A:10, AS:11, B:12}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 5588], 7:[46, 92, 185, 370, 740, 1480, 
2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, highList:["high", "1", "on"], lowList:["low", "0", "off"], BlockState:{}};
Entry.ArduinoNano = $.extend(!0, {}, Entry.ArduinoExt, {name:"ArduinoNano"});
Entry.SmartBoard = {name:"smartBoard", setZero:function() {
  Entry.hw.sendQueue.readablePorts = [];
  for (var c = 0; 20 > c; c++) {
    if (9 != c || 10 != c || 11 != c) {
      Entry.hw.sendQueue[c] = 0, Entry.hw.sendQueue.readablePorts.push(c);
    }
  }
  Entry.hw.update();
}, monitorTemplate:{listPorts:{2:{name:Lang.Hw.port_en + " GS2 ", type:"output", pos:{x:0, y:0}}, 3:{name:Lang.Hw.port_en + " GS1 ", type:"output", pos:{x:0, y:0}}, 4:{name:Lang.Hw.port_en + " MT1 \ud68c\uc804 \ubc29\ud5a5 ", type:"output", pos:{x:0, y:0}}, 5:{name:Lang.Hw.port_en + " MT1 PWM ", type:"output", pos:{x:0, y:0}}, 6:{name:Lang.Hw.port_en + " MT2 PWM ", type:"output", pos:{x:0, y:0}}, 7:{name:Lang.Hw.port_en + " MT2 \ud68c\uc804 \ubc29\ud5a5 ", type:"output", pos:{x:0, y:0}}, 8:{name:Lang.Hw.port_en + 
" RELAY ", type:"output", pos:{x:0, y:0}}, 9:{name:Lang.Hw.port_en + " SM3 \uac01\ub3c4 ", type:"output", pos:{x:0, y:0}}, 10:{name:Lang.Hw.port_en + " SM2 \uac01\ub3c4 ", type:"output", pos:{x:0, y:0}}, 11:{name:Lang.Hw.port_en + "SM1 \uac01\ub3c4 ", type:"output", pos:{x:0, y:0}}, 12:{name:Lang.Hw.port_en + " \ube68\uac04 " + Lang.Hw.button, type:"input", pos:{x:0, y:0}}, 13:{name:Lang.Hw.port_en + " \ub178\ub780 " + Lang.Hw.button, type:"input", pos:{x:0, y:0}}, 14:{name:Lang.Hw.port_en + " \ucd08\ub85d " + 
Lang.Hw.button, type:"input", pos:{x:0, y:0}}, 15:{name:Lang.Hw.port_en + " \ud30c\ub780 " + Lang.Hw.button, type:"input", pos:{x:0, y:0}}, a2:{name:Lang.Hw.port_en + " 1\ubc88 " + Lang.Hw.sensor, type:"input", pos:{x:0, y:0}}, a3:{name:Lang.Hw.port_en + " 2\ubc88 " + Lang.Hw.sensor, type:"input", pos:{x:0, y:0}}, a4:{name:Lang.Hw.port_en + " 3\ubc88 " + Lang.Hw.sensor, type:"input", pos:{x:0, y:0}}, a5:{name:Lang.Hw.port_en + " 4\ubc88 " + Lang.Hw.sensor, type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Entry.SensorBoard = {name:"sensorBoard", setZero:Entry.Arduino.setZero};
Entry.ardublock = {name:"ardublock", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(c) {
    Entry.hw.sendQueue.SET[c].data = 0;
    Entry.hw.sendQueue.SET[c].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8, MOTOR_LEFT:9, MOTOR_RIGHT:10}, toneTable:{0:0, C:1, CS:2, D:3, DS:4, E:5, F:6, FS:7, G:8, GS:9, A:10, AS:11, B:12}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 5588], 
7:[46, 92, 185, 370, 740, 1480, 2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, directionTable:{Forward:0, Backward:1}, highList:["high", "1", "on"], lowList:["low", "0", "off"], BlockState:{}};
Entry.mkboard = {name:"mkboard", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(c) {
    Entry.hw.sendQueue.SET[c].data = 0;
    Entry.hw.sendQueue.SET[c].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8, DC_MOTOR_LEFT:9, DC_MOTOR_RIGHT:10}, toneTable:{0:0, C:1, CS:2, D:3, DS:4, E:5, F:6, FS:7, G:8, GS:9, A:10, AS:11, B:12}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 
5588], 7:[46, 92, 185, 370, 740, 1480, 2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, directionTable:{Forward:0, Backward:1}, highList:["high", "1", "on"], lowList:["low", "0", "off"], BlockState:{}};
Entry.dplay = {name:"dplay", vel_value:255, Left_value:255, Right_value:255, setZero:Entry.Arduino.setZero, timeouts:[], removeTimeout:function(c) {
  clearTimeout(c);
  var b = this.timeouts;
  c = b.indexOf(c);
  0 <= c && b.splice(c, 1);
}, removeAllTimeouts:function() {
  var c = this.timeouts, b;
  for (b in c) {
    clearTimeout(c[b]);
  }
  this.timeouts = [];
}, monitorTemplate:{imgPath:"hw/dplay.png", width:500, height:600, listPorts:{2:{name:Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 3:{name:Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 4:{name:Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 5:{name:Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 6:{name:Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 7:{name:Lang.Hw.port_en + 
" 7 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 8:{name:Lang.Hw.port_en + " 8 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 9:{name:Lang.Hw.port_en + " 9 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 10:{name:Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 11:{name:Lang.Hw.port_en + " 11 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 12:{name:Lang.Hw.port_en + " 12 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 13:{name:Lang.Hw.port_en + " 13 " + 
Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a0:{name:Lang.Hw.port_en + " A0 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a1:{name:Lang.Hw.port_en + " A1 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a2:{name:Lang.Hw.port_en + " A2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a3:{name:Lang.Hw.port_en + " A3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a4:{name:Lang.Hw.port_en + " A4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a5:{name:Lang.Hw.port_en + " A5 " + 
Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Entry.nemoino = {name:"nemoino", setZero:Entry.Arduino.setZero};
Entry.joystick = {name:"joystick", setZero:Entry.Arduino.setZero};
Entry.CODEino = {name:"CODEino", getSensorKey:function() {
  return "xxxxxxxx".replace(/[xy]/g, function(c) {
    var b = 16 * Math.random() | 0;
    return ("x" == c ? b : b & 0 | 0).toString(16);
  }).toUpperCase();
}, getSensorTime:function(c) {
  return (new Date).getTime() + c;
}, monitorTemplate:Entry.Arduino.monitorTemplate, setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(c) {
    Entry.hw.sendQueue.SET[c].data = 0;
    Entry.hw.sendQueue.TIME = Entry.CODEino.getSensorTime(Entry.hw.sendQueue.SET[c].type);
    Entry.hw.sendQueue.KEY = Entry.CODEino.getSensorKey();
  }) : Entry.hw.sendQueue = {SET:{0:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 1:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 2:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 3:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 4:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 5:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 6:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 7:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 8:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 
  9:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 10:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 11:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 12:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 13:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}}, TIME:Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL), KEY:Entry.CODEino.getSensorKey()};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, RGBLED_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8, ADDCOLOR:9}, BlockState:{}};
Blockly.Blocks.arduino_text = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldTextInput("Arduino"), "NAME");
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.arduino_text = function(c, b) {
  return b.getStringField("NAME");
};
Blockly.Blocks.arduino_send = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_send_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_send_2);
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.arduino_send = function(c, b) {
  c = b.getValue("VALUE", b);
  var d = new XMLHttpRequest;
  d.open("POST", "http://localhost:23518/arduino/", !1);
  d.send(String(c));
  Entry.assert(200 == d.status, "arduino is not connected");
  return b.callReturn();
};
Blockly.Blocks.arduino_get_string = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_get_string_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_get_string_2);
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_number = function(c, b) {
  c = b.getValue("VALUE", b);
  b = new XMLHttpRequest;
  b.open("POST", "http://localhost:23518/arduino/", !1);
  b.send(String(c));
  Entry.assert(200 == b.status, "arduino is not connected");
  return Number(b.responseText);
};
Blockly.Blocks.arduino_get_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_get_number_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_get_number_2);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_string = function(c, b) {
  c = b.getValue("VALUE", b);
  b = new XMLHttpRequest;
  b.open("POST", "http://localhost:23518/arduino/", !1);
  b.send(String(c));
  Entry.assert(200 == b.status, "arduino is not connected");
  return b.responseText;
};
Blockly.Blocks.arduino_get_sensor_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.ARDUINO_arduino_get_sensor_number_0, "A0"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_1, "A1"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_2, "A2"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_3, "A3"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_4, "A4"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_5, "A5"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_sensor_number = function(c, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.arduino_get_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_port_number = function(c, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.arduino_get_pwm_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["3", "3"], ["5", "5"], ["6", "6"], ["9", "9"], ["10", "10"], ["11", "11"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_pwm_port_number = function(c, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.arduino_get_number_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_sensor_value_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_sensor_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.arduino_get_number_sensor_value = function(c, b) {
  c = b.getValue("VALUE", b);
  return Entry.hw.getAnalogPortValue(c[1]);
};
Blockly.Blocks.arduino_get_digital_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_get_digital_value_1);
  this.appendValueInput("VALUE").setCheck("Number");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_sensor_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.arduino_get_digital_value = function(c, b) {
  c = b.getNumberValue("VALUE", b);
  return Entry.hw.getDigitalPortValue(c);
};
Blockly.Blocks.arduino_toggle_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_pin_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_pin_2);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.arduino_toggle_led = function(c, b) {
  c = b.getNumberValue("VALUE");
  var d = b.getField("OPERATOR");
  Entry.hw.setDigitalPortValue(c, "on" == d ? 255 : 0);
  return b.callReturn();
};
Blockly.Blocks.arduino_toggle_pwm = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_toggle_pwm_1);
  this.appendValueInput("PORT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_toggle_pwm_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_toggle_pwm_3);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.arduino_toggle_pwm = function(c, b) {
  c = b.getNumberValue("PORT");
  var d = b.getNumberValue("VALUE"), d = Math.round(d), d = Math.max(d, 0), d = Math.min(d, 255);
  Entry.hw.setDigitalPortValue(c, d);
  return b.callReturn();
};
Blockly.Blocks.arduino_convert_scale = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_1);
  this.appendValueInput("VALUE1").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_2);
  this.appendValueInput("VALUE2").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_3);
  this.appendValueInput("VALUE3").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_4);
  this.appendValueInput("VALUE4").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_5);
  this.appendValueInput("VALUE5").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_6);
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_convert_scale = function(c, b) {
  var d = b.getNumberValue("VALUE1", b), e = b.getNumberValue("VALUE2", b), f = b.getNumberValue("VALUE3", b);
  c = b.getNumberValue("VALUE4", b);
  b = b.getNumberValue("VALUE5", b);
  if (e > f) {
    var g = e;
    e = f;
    f = g;
  }
  c > b && (g = c, c = b, b = g);
  d = (b - c) / (f - e) * (d - e);
  d += c;
  d = Math.min(b, d);
  d = Math.max(c, d);
  return Math.round(d);
};
Blockly.Blocks.sensorBoard_get_named_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["\uc18c\ub9ac", "0"], ["\ube5b \uac10\uc9c0", "1"], ["\uc2ac\ub77c\uc774\ub354", "2"], ["\uc628\ub3c4", "3"]]), "PORT").appendField(" \uc13c\uc11c\uac12");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.sensorBoard_get_named_sensor_value = function(c, b) {
  return Entry.hw.getAnalogPortValue(b.getField("PORT", b));
};
Blockly.Blocks.sensorBoard_is_button_pressed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["\ube68\uac04", "8"], ["\ud30c\ub780", "9"], ["\ub178\ub780", "10"], ["\ucd08\ub85d", "11"]]), "PORT");
  this.appendDummyInput().appendField(" \ubc84\ud2bc\uc744 \ub20c\ub800\ub294\uac00?");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.sensorBoard_is_button_pressed = function(c, b) {
  return Entry.hw.getDigitalPortValue(b.getNumberField("PORT", b));
};
Blockly.Blocks.sensorBoard_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["\ube68\uac04", "2"], ["\ucd08\ub85d", "3"], ["\ud30c\ub780", "4"], ["\ud770\uc0c9", "5"]]), "PORT").appendField(" LED").appendField(new Blockly.FieldDropdown([["\ucf1c\uae30", "255"], ["\ub044\uae30", "0"]]), "OPERATOR").appendField(" ").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.sensorBoard_led = function(c, b) {
  Entry.hw.setDigitalPortValue(b.getField("PORT"), b.getNumberField("OPERATOR"));
  return b.callReturn();
};
Entry.block.arduino_download_connector = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\uc5f0\uacb0 \ud504\ub85c\uadf8\ub7a8 \ub2e4\uc6b4\ub85c\ub4dc", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download connector");
}]}};
Entry.block.download_guide = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\uc5f0\uacb0 \uc548\ub0b4 \ub2e4\uc6b4\ub85c\ub4dc", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download guide");
}]}};
Entry.block.arduino_download_source = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\uc5d4\ud2b8\ub9ac \uc544\ub450\uc774\ub178 \uc18c\uc2a4", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download source");
}]}};
Entry.block.arduino_connected = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\uc5f0\uacb0 \ub428", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download source");
}]}};
Entry.block.arduino_reconnect = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\ub2e4\uc2dc \uc5f0\uacb0\ud558\uae30", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download source");
}]}};
Blockly.Blocks.CODEino_get_sensor_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_get_sensor_number_0, "A0"], [Lang.Blocks.CODEino_get_sensor_number_1, "A1"], [Lang.Blocks.CODEino_get_sensor_number_2, "A2"], [Lang.Blocks.CODEino_get_sensor_number_3, "A3"], [Lang.Blocks.CODEino_get_sensor_number_4, "A4"], [Lang.Blocks.CODEino_get_sensor_number_5, "A5"], [Lang.Blocks.CODEino_get_sensor_number_6, "A6"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.CODEino_get_sensor_number = function(c, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.CODEino_get_named_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(" ").appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_sensor_name_0, "0"], [Lang.Blocks.CODEino_sensor_name_1, "1"], [Lang.Blocks.CODEino_sensor_name_2, "2"], [Lang.Blocks.CODEino_sensor_name_3, "3"], [Lang.Blocks.CODEino_sensor_name_4, "4"], [Lang.Blocks.CODEino_sensor_name_5, "5"], [Lang.Blocks.CODEino_sensor_name_6, "6"]]), "PORT").appendField(Lang.Blocks.CODEino_string_1);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.CODEino_get_named_sensor_value = function(c, b) {
  return Entry.hw.getAnalogPortValue(b.getField("PORT", b));
};
Blockly.Blocks.CODEino_get_sound_status = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_10).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_string_11, "GREAT"], [Lang.Blocks.CODEino_string_12, "SMALL"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.CODEino_get_sound_status = function(c, b) {
  return "GREAT" == b.getField("STATUS", b) ? 600 < Entry.hw.getAnalogPortValue(0) ? 1 : 0 : 600 > Entry.hw.getAnalogPortValue(0) ? 1 : 0;
};
Blockly.Blocks.CODEino_get_light_status = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_13).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_string_14, "BRIGHT"], [Lang.Blocks.CODEino_string_15, "DARK"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.CODEino_get_light_status = function(c, b) {
  return "DARK" == b.getField("STATUS", b) ? 800 < Entry.hw.getAnalogPortValue(1) ? 1 : 0 : 800 > Entry.hw.getAnalogPortValue(1) ? 1 : 0;
};
Blockly.Blocks.CODEino_is_button_pressed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_2).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_string_3, "4"], [Lang.Blocks.CODEino_string_4, "17"], [Lang.Blocks.CODEino_string_5, "18"], [Lang.Blocks.CODEino_string_6, "19"], [Lang.Blocks.CODEino_string_7, "20"]]), "PORT").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.CODEino_is_button_pressed = function(c, b) {
  c = b.getNumberField("PORT", b);
  return 14 < c ? !Entry.hw.getAnalogPortValue(c - 14) : !Entry.hw.getDigitalPortValue(c);
};
Blockly.Blocks.CODEino_get_accelerometer_direction = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_8).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_string_16, "LEFT"], [Lang.Blocks.CODEino_string_17, "RIGHT"], [Lang.Blocks.CODEino_string_18, "FRONT"], [Lang.Blocks.CODEino_string_19, "REAR"], [Lang.Blocks.CODEino_string_20, "REVERSE"]]), "DIRECTION");
  this.appendDummyInput().appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.CODEino_get_accelerometer_direction = function(c, b) {
  c = b.getField("DIRECTION", b);
  b = 0;
  "LEFT" == c || "RIGHT" == c ? b = 3 : "FRONT" == c || "REAR" == c ? b = 4 : "REVERSE" == c && (b = 5);
  b = Entry.hw.getAnalogPortValue(b) - 265;
  b = Math.min(90, 180 / 137 * b + -90);
  b = Math.max(-90, b);
  b = Math.round(b);
  if ("LEFT" == c || "REAR" == c) {
    return -30 > b ? 1 : 0;
  }
  if ("RIGHT" == c || "FRONT" == c) {
    return 30 < b ? 1 : 0;
  }
  if ("REVERSE" == c) {
    return -50 > b ? 1 : 0;
  }
};
Blockly.Blocks.CODEino_get_accelerometer_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_8).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_accelerometer_X, "3"], [Lang.Blocks.CODEino_accelerometer_Y, "4"], [Lang.Blocks.CODEino_accelerometer_Z, "5"]]), "PORT").appendField(Lang.Blocks.CODEino_string_9);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.CODEino_get_accelerometer_value = function(c, b) {
  var d = Entry.hw.getAnalogPortValue(b.getField("PORT", b)), e = 265, f = 402;
  c = -90;
  b = 90;
  if (e > f) {
    var g = e;
    e = f;
    f = g;
  }
  c > b && (g = c, c = b, b = g);
  g = (b - c) / (f - e) * (d - e);
  g += c;
  g = Math.min(b, g);
  g = Math.max(c, g);
  return Math.round(g);
};
Blockly.Blocks.dplay_select_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_pin_1);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]]), "PORT");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_num_pin_1);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.dplay_select_led = function(c, b) {
  var d = b.getField("PORT");
  c = 7;
  "7" == d ? c = 7 : "8" == d ? c = 8 : "9" == d ? c = 9 : "10" == d && (c = 10);
  d = b.getField("OPERATOR");
  Entry.hw.setDigitalPortValue(c, "on" == d ? 255 : 0);
  return b.callReturn();
};
Blockly.Blocks.dplay_get_switch_status = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ub514\uc9c0\ud138 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["2", "2"], ["4", "4"]]), "PORT");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_num_pin_2).appendField(new Blockly.FieldDropdown([[Lang.Blocks.dplay_string_5, "ON"], [Lang.Blocks.dplay_string_6, "OFF"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.dplay_get_switch_status = function(c, b) {
  c = b.getField("PORT");
  var d = 2;
  "2" == c ? d = 2 : "4" == c && (d = 4);
  return "OFF" == b.getField("STATUS") ? 1 == Entry.hw.getDigitalPortValue(d) ? 1 : 0 : 0 == Entry.hw.getDigitalPortValue(d) ? 1 : 0;
};
Blockly.Blocks.dplay_get_light_status = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_light).appendField(new Blockly.FieldDropdown([[Lang.Blocks.dplay_string_3, "BRIGHT"], [Lang.Blocks.dplay_string_4, "DARK"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.dplay_get_light_status = function(c, b) {
  return "DARK" == b.getField("STATUS", b) ? 800 < Entry.hw.getAnalogPortValue(1) ? 1 : 0 : 800 > Entry.hw.getAnalogPortValue(1) ? 1 : 0;
};
Blockly.Blocks.dplay_get_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_num_pin_3);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField("\ubc88 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["\uac00\ubcc0\uc800\ud56d", "ADJU"], ["\ube5b\uc13c\uc11c", "LIGHT"], ["\uc628\ub3c4\uc13c\uc11c", "TEMP"], ["\uc870\uc774\uc2a4\ud2f1 X", "JOYS"], ["\uc870\uc774\uc2a4\ud2f1 Y", "JOYS"], ["\uc801\uc678\uc120", "INFR"]]), "OPERATOR");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_num_pin_5);
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.dplay_get_value = function(c, b) {
  c = b.getValue("VALUE", b);
  return Entry.hw.getAnalogPortValue(c[1]);
};
Blockly.Blocks.dplay_get_tilt = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_tilt).appendField(new Blockly.FieldDropdown([["\uc67c\ucabd \uae30\uc6b8\uc784", "LEFT"], ["\uc624\ub978\ucabd \uae30\uc6b8\uc784", "LIGHT"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.dplay_get_tilt = function(c, b) {
  return "LIGHT" == b.getField("STATUS", b) ? 1 == Entry.hw.getDigitalPortValue(12) ? 1 : 0 : 0 == Entry.hw.getDigitalPortValue(12) ? 1 : 0;
};
Blockly.Blocks.dplay_DCmotor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["\uc67c\ucabd", "3"], ["\uc624\ub978\ucabd", "6"]]), "PORT");
  this.appendDummyInput().appendField(" DC\ubaa8\ud130 \uc0c1\ud0dc\ub97c");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["\uc815\ubc29\ud5a5", "FRONT"], ["\uc5ed\ubc29\ud5a5", "REAR"], ["\uc815\uc9c0", "OFF"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.dplay_DCmotor = function(c, b) {
  c = b.getField("PORT");
  var d = 0;
  "3" == c ? d = 5 : "6" == c && (d = 11);
  var e = b.getField("OPERATOR"), f = 0, g = 0;
  "FRONT" == e ? (f = 255, g = 0) : "REAR" == e ? (f = 0, g = 255) : "OFF" == e && (g = f = 0);
  Entry.hw.setDigitalPortValue(c, f);
  Entry.hw.setDigitalPortValue(d, g);
  return b.callReturn();
};
Blockly.Blocks.dplay_buzzer = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubd80\uc800\ub97c ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["\ub3c4", "1"], ["\ub808", "2"], ["\ubbf8", "3"]]), "PORT");
  this.appendDummyInput().appendField("\ub85c");
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField("\ubc15\uc790\ub85c \uc5f0\uc8fc\ud558\uae30");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.dplay_buzzer = function(c, b) {
  var d = b.getField("PORT");
  c = 2;
  "1" == d ? c = 2 : "2" == d ? c = 4 : "3" == d && (c = 7);
  d = b.getNumberValue("VALUE");
  d = Math.round(d);
  d = Math.max(d, 0);
  d = Math.min(d, 100);
  Entry.hw.setDigitalPortValue(c, d);
  return b.callReturn();
};
Blockly.Blocks.dplay_servo = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc11c\ubcf4\ubaa8\ud130 \uac01\ub3c4\ub97c");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub85c \uc774\ub3d9");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.dplay_servo = function(c, b) {
  c = b.getNumberValue("VALUE");
  c = Math.round(c);
  c = Math.max(c, 0);
  c = Math.min(c, 180);
  Entry.hw.setDigitalPortValue(9, c);
  return b.callReturn();
};
Entry.rokoboard = {name:"rokoboard", setZero:Entry.Arduino.setZero, monitorTemplate:Entry.Arduino.monitorTemplate};
Entry.Bitbrick = {SENSOR_MAP:{1:"light", 2:"IR", 3:"touch", 4:"potentiometer", 5:"MIC", 21:"UserSensor", 11:"UserInput", 20:"LED", 19:"SERVO", 18:"DC"}, PORT_MAP:{buzzer:2, 5:4, 6:6, 7:8, 8:10, LEDR:12, LEDG:14, LEDB:16}, sensorList:function() {
  for (var c = [], b = Entry.hw.portData, d = 1; 5 > d; d++) {
    var e = b[d];
    e && (e.value || 0 === e.value) && c.push([d + " - " + Lang.Blocks["BITBRICK_" + e.type], d.toString()]);
  }
  return 0 == c.length ? [[Lang.Blocks.no_target, "null"]] : c;
}, touchList:function() {
  for (var c = [], b = Entry.hw.portData, d = 1; 5 > d; d++) {
    var e = b[d];
    e && "touch" === e.type && c.push([d.toString(), d.toString()]);
  }
  return 0 == c.length ? [[Lang.Blocks.no_target, "null"]] : c;
}, servoList:function() {
  for (var c = [], b = Entry.hw.portData, d = 5; 9 > d; d++) {
    var e = b[d];
    e && "SERVO" === e.type && c.push(["ABCD"[d - 5], d.toString()]);
  }
  return 0 == c.length ? [[Lang.Blocks.no_target, "null"]] : c;
}, dcList:function() {
  for (var c = [], b = Entry.hw.portData, d = 5; 9 > d; d++) {
    var e = b[d];
    e && "DC" === e.type && c.push(["ABCD"[d - 5], d.toString()]);
  }
  return 0 == c.length ? [[Lang.Blocks.no_target, "null"]] : c;
}, setZero:function() {
  var c = Entry.hw.sendQueue, b;
  for (b in Entry.Bitbrick.PORT_MAP) {
    c[b] = 0;
  }
  Entry.hw.update();
}, name:"bitbrick", servoMaxValue:181, servoMinValue:1, dcMaxValue:100, dcMinValue:-100, monitorTemplate:{keys:["value"], imgPath:"hw/bitbrick.png", width:400, height:400, listPorts:{1:{name:Lang.Hw.port_en + " 1 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 2:{name:Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 3:{name:Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 4:{name:Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, 
y:0}}, A:{name:Lang.Hw.port_en + " A " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, B:{name:Lang.Hw.port_en + " B " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, C:{name:Lang.Hw.port_en + " C " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, D:{name:Lang.Hw.port_en + " D " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Blockly.Blocks.bitbrick_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.sensorList), "PORT").appendField(" \uac12");
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_sensor_value = function(c, b) {
  c = b.getStringField("PORT");
  return Entry.hw.portData[c].value;
};
Blockly.Blocks.bitbrick_is_touch_pressed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.BITBRICK_touch).appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.touchList), "PORT").appendField("\uc774(\uac00) \ub20c\ub838\ub294\uac00?");
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_is_touch_pressed = function(c, b) {
  return 0 === Entry.hw.portData[b.getStringField("PORT")].value;
};
Blockly.Blocks.bitbrick_turn_off_color_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uceec\ub7ec LED \ub044\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_off_color_led = function(c, b) {
  Entry.hw.sendQueue.LEDR = 0;
  Entry.hw.sendQueue.LEDG = 0;
  Entry.hw.sendQueue.LEDB = 0;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_turn_on_color_led_by_rgb = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uceec\ub7ec LED \ucf1c\uae30 R");
  this.appendValueInput("rValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("G");
  this.appendValueInput("gValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("B");
  this.appendValueInput("bValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_on_color_led_by_rgb = function(c, b) {
  c = b.getNumberValue("rValue");
  var d = b.getNumberValue("gValue"), e = b.getNumberValue("bValue"), f = Entry.adjustValueWithMaxMin, g = Entry.hw.sendQueue;
  g.LEDR = f(c, 0, 255);
  g.LEDG = f(d, 0, 255);
  g.LEDB = f(e, 0, 255);
  return b.callReturn();
};
Blockly.Blocks.bitbrick_turn_on_color_led_by_picker = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uceec\ub7ec LED \uc0c9 ").appendField(new Blockly.FieldColour("#ff0000"), "VALUE").appendField("\ub85c \uc815\ud558\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_on_color_led_by_picker = function(c, b) {
  c = b.getStringField("VALUE");
  Entry.hw.sendQueue.LEDR = parseInt(c.substr(1, 2), 16);
  Entry.hw.sendQueue.LEDG = parseInt(c.substr(3, 2), 16);
  Entry.hw.sendQueue.LEDB = parseInt(c.substr(5, 2), 16);
  return b.callReturn();
};
Blockly.Blocks.bitbrick_turn_on_color_led_by_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uceec\ub7ec LED \ucf1c\uae30 \uc0c9");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub85c \uc815\ud558\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_on_color_led_by_value = function(c, b) {
  c = b.getNumberValue("VALUE");
  c %= 200;
  if (67 > c) {
    var d = 200 - 3 * c;
    var e = 3 * c;
    var f = 0;
  } else {
    134 > c ? (c -= 67, d = 0, e = 200 - 3 * c, f = 3 * c) : 201 > c && (c -= 134, d = 3 * c, e = 0, f = 200 - 3 * c);
  }
  Entry.hw.sendQueue.LEDR = d;
  Entry.hw.sendQueue.LEDG = e;
  Entry.hw.sendQueue.LEDB = f;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_buzzer = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubc84\uc800\uc74c ");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub0b4\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_buzzer = function(c, b) {
  if (b.isStart) {
    return Entry.hw.sendQueue.buzzer = 0, delete b.isStart, b.callReturn();
  }
  c = b.getNumberValue("VALUE");
  Entry.hw.sendQueue.buzzer = c;
  b.isStart = !0;
  return b;
};
Blockly.Blocks.bitbrick_turn_off_all_motors = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubaa8\ub4e0 \ubaa8\ud130 \ub044\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_off_all_motors = function(c, b) {
  var d = Entry.hw.sendQueue;
  c = Entry.Bitbrick;
  c.servoList().map(function(b) {
    d[b[1]] = 0;
  });
  c.dcList().map(function(b) {
    d[b[1]] = 128;
  });
  return b.callReturn();
};
Blockly.Blocks.bitbrick_dc_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("DC \ubaa8\ud130").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.dcList), "PORT").appendField(" \uc18d\ub3c4");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_dc_speed = function(c, b) {
  c = b.getNumberValue("VALUE");
  c = Math.min(c, Entry.Bitbrick.dcMaxValue);
  c = Math.max(c, Entry.Bitbrick.dcMinValue);
  Entry.hw.sendQueue[b.getStringField("PORT")] = c + 128;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_dc_direction_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("DC \ubaa8\ud130").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.dcList), "PORT").appendField(" ").appendField(new Blockly.FieldDropdown([[Lang.Blocks.BITBRICK_dc_direction_cw, "CW"], [Lang.Blocks.BITBRICK_dc_direction_ccw, "CCW"]]), "DIRECTION").appendField(" \ubc29\ud5a5").appendField(" \uc18d\ub825");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_dc_direction_speed = function(c, b) {
  c = "CW" === b.getStringField("DIRECTION");
  var d = b.getNumberValue("VALUE"), d = Math.min(d, Entry.Bitbrick.dcMaxValue), d = Math.max(d, 0);
  Entry.hw.sendQueue[b.getStringField("PORT")] = c ? d + 128 : 128 - d;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_servomotor_angle = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc11c\ubcf4 \ubaa8\ud130").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.servoList), "PORT").appendField(" \uac01\ub3c4");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_servomotor_angle = function(c, b) {
  c = b.getNumberValue("VALUE") + 1;
  c = Math.min(c, Entry.Bitbrick.servoMaxValue);
  c = Math.max(c, Entry.Bitbrick.servoMinValue);
  Entry.hw.sendQueue[b.getStringField("PORT")] = c;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_convert_scale = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubcc0\ud658");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.sensorList), "PORT");
  this.appendDummyInput().appendField("\uac12");
  this.appendValueInput("VALUE2").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_3);
  this.appendValueInput("VALUE3").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField("\uc5d0\uc11c");
  this.appendValueInput("VALUE4").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_5);
  this.appendValueInput("VALUE5").setCheck(["Number", "String", null]);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_convert_scale = function(c, b) {
  c = b.getNumberField("PORT");
  var d = Entry.hw.portData[c].value, e = b.getNumberValue("VALUE2", b), f = b.getNumberValue("VALUE3", b);
  c = b.getNumberValue("VALUE4", b);
  b = b.getNumberValue("VALUE5", b);
  if (c > b) {
    var g = c;
    c = b;
    b = g;
  }
  d = (b - c) / (f - e) * (d - e);
  d += c;
  d = Math.min(b, d);
  d = Math.max(c, d);
  return Math.round(d);
};
Entry.Blacksmith = {name:"blacksmith", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(c) {
    Entry.hw.sendQueue.SET[c].data = 0;
    Entry.hw.sendQueue.SET[c].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, toByte:function(c) {
  switch(c) {
    case " ":
      c = 32;
      break;
    case "!":
      c = 33;
      break;
    case '"':
      c = 34;
      break;
    case "#":
      c = 35;
      break;
    case "$":
      c = 36;
      break;
    case "%":
      c = 37;
      break;
    case "&":
      c = 38;
      break;
    case "'":
      c = 39;
      break;
    case "(":
      c = 40;
      break;
    case ")":
      c = 41;
      break;
    case "*":
      c = 42;
      break;
    case "+":
      c = 43;
      break;
    case ",":
      c = 44;
      break;
    case "-":
      c = 45;
      break;
    case ".":
      c = 46;
      break;
    case "/":
      c = 47;
      break;
    case "0":
      c = 48;
      break;
    case "1":
      c = 49;
      break;
    case "2":
      c = 50;
      break;
    case "3":
      c = 51;
      break;
    case "4":
      c = 52;
      break;
    case "5":
      c = 53;
      break;
    case "6":
      c = 54;
      break;
    case "7":
      c = 55;
      break;
    case "8":
      c = 56;
      break;
    case "9":
      c = 57;
      break;
    case ":":
      c = 58;
      break;
    case ";":
      c = 59;
      break;
    case "<":
      c = 60;
      break;
    case "=":
      c = 61;
      break;
    case ">":
      c = 62;
      break;
    case "?":
      c = 63;
      break;
    case "@":
      c = 64;
      break;
    case "A":
      c = 65;
      break;
    case "B":
      c = 66;
      break;
    case "C":
      c = 67;
      break;
    case "D":
      c = 68;
      break;
    case "E":
      c = 69;
      break;
    case "F":
      c = 70;
      break;
    case "G":
      c = 71;
      break;
    case "H":
      c = 72;
      break;
    case "I":
      c = 73;
      break;
    case "J":
      c = 74;
      break;
    case "K":
      c = 75;
      break;
    case "L":
      c = 76;
      break;
    case "M":
      c = 77;
      break;
    case "N":
      c = 78;
      break;
    case "O":
      c = 79;
      break;
    case "P":
      c = 80;
      break;
    case "Q":
      c = 81;
      break;
    case "R":
      c = 82;
      break;
    case "S":
      c = 83;
      break;
    case "T":
      c = 84;
      break;
    case "U":
      c = 85;
      break;
    case "V":
      c = 86;
      break;
    case "W":
      c = 87;
      break;
    case "X":
      c = 88;
      break;
    case "Y":
      c = 89;
      break;
    case "Z":
      c = 90;
      break;
    case "[":
      c = 91;
      break;
    case "\\":
      c = 92;
      break;
    case "]":
      c = 93;
      break;
    case "^":
      c = 94;
      break;
    case "_":
      c = 95;
      break;
    case "`":
      c = 96;
      break;
    case "a":
      c = 97;
      break;
    case "b":
      c = 98;
      break;
    case "c":
      c = 99;
      break;
    case "d":
      c = 100;
      break;
    case "e":
      c = 101;
      break;
    case "f":
      c = 102;
      break;
    case "g":
      c = 103;
      break;
    case "h":
      c = 104;
      break;
    case "i":
      c = 105;
      break;
    case "j":
      c = 106;
      break;
    case "k":
      c = 107;
      break;
    case "l":
      c = 108;
      break;
    case "m":
      c = 109;
      break;
    case "n":
      c = 110;
      break;
    case "o":
      c = 111;
      break;
    case "p":
      c = 112;
      break;
    case "q":
      c = 113;
      break;
    case "r":
      c = 114;
      break;
    case "s":
      c = 115;
      break;
    case "t":
      c = 116;
      break;
    case "u":
      c = 117;
      break;
    case "v":
      c = 118;
      break;
    case "w":
      c = 119;
      break;
    case "x":
      c = 120;
      break;
    case "y":
      c = 121;
      break;
    case "z":
      c = 122;
      break;
    case "{":
      c = 123;
      break;
    case "|":
      c = 124;
      break;
    case "}":
      c = 125;
      break;
    case "~":
      c = 126;
  }
  return c;
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8, rxBLUETOOTH:9, LCD:10, txBLUETOOTH:11}, toneTable:{0:0, C:1, CS:2, D:3, DS:4, E:5, F:6, FS:7, G:8, GS:9, A:10, AS:11, B:12}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 
5588], 7:[46, 92, 185, 370, 740, 1480, 2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, highList:["high", "1", "on"], lowList:["low", "0", "off"], BlockState:{}};
Entry.byrobot_dronefighter_controller = {name:"byrobot_dronefighter_controller", setZero:function() {
  for (var c = 0; 1 > c; c++) {
    this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(17, 255, 0), this.transferCommand(17, 129, 0);
  }
}, monitorTemplate:{imgPath:"hw/byrobot_dronefighter_controller.png", width:500, height:500, listPorts:{joystick_left_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, type:"input", pos:{x:0, y:0}}, joystick_left_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, type:"input", pos:{x:0, y:0}}, joystick_left_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, type:"input", pos:{x:0, y:0}}, joystick_left_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, 
type:"input", pos:{x:0, y:0}}, joystick_left_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, type:"input", pos:{x:0, y:0}}, joystick_right_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, type:"input", pos:{x:0, y:0}}, joystick_right_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, type:"input", pos:{x:0, y:0}}, joystick_right_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, type:"input", 
pos:{x:0, y:0}}, joystick_right_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, type:"input", pos:{x:0, y:0}}, joystick_right_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, type:"input", pos:{x:0, y:0}}, button_button:{name:Lang.Blocks.byrobot_dronefighter_controller_button_button, type:"input", pos:{x:0, y:0}}, button_event:{name:Lang.Blocks.byrobot_dronefighter_controller_button_event, type:"input", pos:{x:0, y:0}}, entryhw_countTransferReserved:{name:Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved, 
type:"output", pos:{x:0, y:0}}}, ports:{}, mode:"both"}, checkFinish:function(c, b) {
  if (c.isStart) {
    if (1 == c.timeFlag) {
      return "Running";
    }
    delete c.timeFlag;
    delete c.isStart;
    Entry.engine.isContinue = !1;
    return "Finish";
  }
  c.isStart = !0;
  c.timeFlag = 1;
  setTimeout(function() {
    c.timeFlag = 0;
  }, 60 / (Entry.FPS || 60) * b);
  return "Start";
}, transferLightManual:function(c, b, d) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 255);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_manual_flags", b);
  Entry.hw.setDigitalPortValue("light_manual_brightness", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_manual_flags;
  delete Entry.hw.sendQueue.light_manual_brightness;
}, transferbuzzer:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("buzzer_mode", c);
  Entry.hw.setDigitalPortValue("buzzer_value", b);
  Entry.hw.setDigitalPortValue("buzzer_time", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.buzzer_mode;
  delete Entry.hw.sendQueue.buzzer_value;
  delete Entry.hw.sendQueue.buzzer_time;
}, transferVibrator:function(c, b, d, e) {
  b = Math.max(b, 1);
  b = Math.min(b, 60000);
  d = Math.max(d, 1);
  d = Math.min(d, 60000);
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("vibrator_mode", c);
  Entry.hw.setDigitalPortValue("vibrator_on", b);
  Entry.hw.setDigitalPortValue("vibrator_off", d);
  Entry.hw.setDigitalPortValue("vibrator_total", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.vibrator_mode;
  delete Entry.hw.sendQueue.vibrator_on;
  delete Entry.hw.sendQueue.vibrator_off;
  delete Entry.hw.sendQueue.vibrator_total;
}, transferCommand:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("command_command", b);
  Entry.hw.setDigitalPortValue("command_option", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.command_command;
  delete Entry.hw.sendQueue.command_option;
}, transferUserInterface:function(c, b) {
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("userinterface_command", c);
  Entry.hw.setDigitalPortValue("userinterface_function", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.userinterface_command;
  delete Entry.hw.sendQueue.userinterface_function;
}, getData:function(c, b) {
  return Entry.hw.portData[b];
}, setLightManual:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferLightManual(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferbuzzer(0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerMute:function(c, b, d, e) {
  b = Math.max(b, 0);
  b = Math.min(b, 60000);
  var f = 40;
  d && (f = b);
  switch(this.checkFinish(c, f)) {
    case "Start":
      return d = 2, e && (d = 1), this.transferbuzzer(d, 238, b), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerScale:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 4, g && (f = 3), this.transferbuzzer(f, 12 * b + d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerHz:function(c, b, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 60000);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return e = 6, f && (e = 5), b = Math.max(b, 1), b = Math.min(b, 63999), this.transferbuzzer(e, b, d), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibratorStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferVibrator(0, 0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibrator:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 2, g && (f = 1), this.transferVibrator(f, b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendCommand:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setUserInterface:function(c, b, d) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferUserInterface(b, d), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}};
Entry.byrobot_dronefighter_drive = {name:"byrobot_dronefighter_drive", setZero:function() {
  for (var c = 0; 1 > c; c++) {
    this.transferCommand(16, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(16, 255, 0), this.transferLightManual(17, 255, 0);
  }
}, monitorTemplate:{imgPath:"hw/byrobot_dronefighter_drive.png", width:500, height:500, listPorts:{state_modeVehicle:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle, type:"input", pos:{x:0, y:0}}, state_modeDrive:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_drive, type:"input", pos:{x:0, y:0}}, state_battery:{name:Lang.Blocks.byrobot_dronefighter_drone_state_battery, type:"input", pos:{x:0, y:0}}, attitude_roll:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_roll, 
type:"input", pos:{x:0, y:0}}, attitude_pitch:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch, type:"input", pos:{x:0, y:0}}, attitude_yaw:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw, type:"input", pos:{x:0, y:0}}, irmessage_irdata:{name:Lang.Blocks.byrobot_dronefighter_drone_irmessage, type:"input", pos:{x:0, y:0}}, joystick_left_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, type:"input", pos:{x:0, y:0}}, joystick_left_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, 
type:"input", pos:{x:0, y:0}}, joystick_left_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, type:"input", pos:{x:0, y:0}}, joystick_left_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, type:"input", pos:{x:0, y:0}}, joystick_left_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, type:"input", pos:{x:0, y:0}}, joystick_right_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, type:"input", 
pos:{x:0, y:0}}, joystick_right_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, type:"input", pos:{x:0, y:0}}, joystick_right_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, type:"input", pos:{x:0, y:0}}, joystick_right_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, type:"input", pos:{x:0, y:0}}, joystick_right_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, type:"input", pos:{x:0, 
y:0}}, button_button:{name:Lang.Blocks.byrobot_dronefighter_controller_button_button, type:"input", pos:{x:0, y:0}}, button_event:{name:Lang.Blocks.byrobot_dronefighter_controller_button_event, type:"input", pos:{x:0, y:0}}, entryhw_countTransferReserved:{name:Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved, type:"output", pos:{x:0, y:0}}}, ports:{}, mode:"both"}, checkFinish:function(c, b) {
  if (c.isStart) {
    if (1 == c.timeFlag) {
      return "Running";
    }
    delete c.timeFlag;
    delete c.isStart;
    Entry.engine.isContinue = !1;
    return "Finish";
  }
  c.isStart = !0;
  c.timeFlag = 1;
  setTimeout(function() {
    c.timeFlag = 0;
  }, 60 / (Entry.FPS || 60) * b);
  return "Start";
}, transferLightManual:function(c, b, d) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 255);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_manual_flags", b);
  Entry.hw.setDigitalPortValue("light_manual_brightness", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_manual_flags;
  delete Entry.hw.sendQueue.light_manual_brightness;
}, transferbuzzer:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("buzzer_mode", c);
  Entry.hw.setDigitalPortValue("buzzer_value", b);
  Entry.hw.setDigitalPortValue("buzzer_time", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.buzzer_mode;
  delete Entry.hw.sendQueue.buzzer_value;
  delete Entry.hw.sendQueue.buzzer_time;
}, transferVibrator:function(c, b, d, e) {
  b = Math.max(b, 1);
  b = Math.min(b, 60000);
  d = Math.max(d, 1);
  d = Math.min(d, 60000);
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("vibrator_mode", c);
  Entry.hw.setDigitalPortValue("vibrator_on", b);
  Entry.hw.setDigitalPortValue("vibrator_off", d);
  Entry.hw.setDigitalPortValue("vibrator_total", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.vibrator_mode;
  delete Entry.hw.sendQueue.vibrator_on;
  delete Entry.hw.sendQueue.vibrator_off;
  delete Entry.hw.sendQueue.vibrator_total;
}, transferIrMessage:function(c) {
  c = Math.max(c, 0);
  c = Math.min(c, 127);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("irmessage_data", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.irmessage_data;
}, transferMotorSingle:function(c, b, d) {
  d = Math.max(d, 0);
  d = Math.min(d, 4096);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("motorsingle_target", c);
  Entry.hw.setDigitalPortValue("motorsingle_direction", b);
  Entry.hw.setDigitalPortValue("motorsingle_value", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.motorsingle_target;
  delete Entry.hw.sendQueue.motorsingle_direction;
  delete Entry.hw.sendQueue.motorsingle_value;
}, transferCommand:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("command_command", b);
  Entry.hw.setDigitalPortValue("command_option", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.command_command;
  delete Entry.hw.sendQueue.command_option;
}, transferControlDouble:function(c, b) {
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  b = Math.max(b, 0);
  b = Math.min(b, 100);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("control_wheel", c);
  Entry.hw.setDigitalPortValue("control_accel", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_wheel;
  delete Entry.hw.sendQueue.control_accel;
}, transferControlQuad:function(c, b, d, e) {
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  b = Math.max(b, -100);
  b = Math.min(b, 100);
  d = Math.max(d, -100);
  d = Math.min(d, 100);
  e = Math.max(e, -100);
  e = Math.min(e, 100);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("control_roll", c);
  Entry.hw.setDigitalPortValue("control_pitch", b);
  Entry.hw.setDigitalPortValue("control_yaw", d);
  Entry.hw.setDigitalPortValue("control_throttle", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_roll;
  delete Entry.hw.sendQueue.control_pitch;
  delete Entry.hw.sendQueue.control_yaw;
  delete Entry.hw.sendQueue.control_throttle;
}, getData:function(c, b) {
  return Entry.hw.portData[b];
}, setLightManual:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferLightManual(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferbuzzer(0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerMute:function(c, b, d, e) {
  b = Math.max(b, 0);
  b = Math.min(b, 60000);
  var f = 40;
  d && (f = b);
  switch(this.checkFinish(c, f)) {
    case "Start":
      return d = 2, e && (d = 1), this.transferbuzzer(d, 238, b), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerScale:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 4, g && (f = 3), this.transferbuzzer(f, 12 * b + d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerHz:function(c, b, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 60000);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return e = 6, f && (e = 5), b = Math.max(b, 1), b = Math.min(b, 63999), this.transferbuzzer(e, b, d), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibratorStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferVibrator(0, 0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibrator:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 2, g && (f = 1), this.transferVibrator(f, b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendIrMessage:function(c, b) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferIrMessage(b), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendStop:function(c) {
  return this.sendCommand(c, 16, 36, 0);
}, sendCommand:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setMotorSingle:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferMotorSingle(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setModeVehicle:function(c, b) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(16, 16, b), this.transferControlDouble(0, 0), this.transferControlQuad(0, 0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendControlDoubleSingle:function(c, b, d, e, f) {
  var g = 40;
  f && (g = e);
  switch(this.checkFinish(c, g)) {
    case "Start":
      switch(b) {
        case "control_wheel":
          d = Math.max(d, -100);
          d = Math.min(d, 100);
          break;
        case "control_accel":
          d = Math.max(d, 0), d = Math.min(d, 100);
      }Entry.hw.setDigitalPortValue("target", 16);
      Entry.hw.setDigitalPortValue(b, d);
      Entry.hw.update();
      delete Entry.hw.sendQueue.target;
      delete Entry.hw.sendQueue[b];
      return c;
    case "Running":
      return c;
    case "Finish":
      return f && (Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(b, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[b]), c.callReturn();
    default:
      return c.callReturn();
  }
}, sendControlDouble:function(c, b, d, e, f) {
  var g = 40;
  f && (g = e);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return this.transferControlDouble(b, d), c;
    case "Running":
      return c;
    case "Finish":
      return f && this.transferControlDouble(0, 0), c.callReturn();
    default:
      return c.callReturn();
  }
}};
Entry.byrobot_dronefighter_flight = {name:"byrobot_dronefighter_flight", setZero:function() {
  for (var c = 0; 1 > c; c++) {
    this.transferCommand(16, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(16, 255, 0), this.transferLightManual(17, 255, 0);
  }
}, monitorTemplate:{imgPath:"hw/byrobot_dronefighter_flight.png", width:500, height:500, listPorts:{state_modeVehicle:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle, type:"input", pos:{x:0, y:0}}, state_modeFlight:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_flight, type:"input", pos:{x:0, y:0}}, state_coordinate:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_coordinate, type:"input", pos:{x:0, y:0}}, state_battery:{name:Lang.Blocks.byrobot_dronefighter_drone_state_battery, 
type:"input", pos:{x:0, y:0}}, attitude_roll:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_roll, type:"input", pos:{x:0, y:0}}, attitude_pitch:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch, type:"input", pos:{x:0, y:0}}, attitude_yaw:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw, type:"input", pos:{x:0, y:0}}, irmessage_irdata:{name:Lang.Blocks.byrobot_dronefighter_drone_irmessage, type:"input", pos:{x:0, y:0}}, joystick_left_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, 
type:"input", pos:{x:0, y:0}}, joystick_left_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, type:"input", pos:{x:0, y:0}}, joystick_left_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, type:"input", pos:{x:0, y:0}}, joystick_left_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, type:"input", pos:{x:0, y:0}}, joystick_left_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, type:"input", 
pos:{x:0, y:0}}, joystick_right_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, type:"input", pos:{x:0, y:0}}, joystick_right_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, type:"input", pos:{x:0, y:0}}, joystick_right_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, type:"input", pos:{x:0, y:0}}, joystick_right_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, type:"input", pos:{x:0, y:0}}, 
joystick_right_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, type:"input", pos:{x:0, y:0}}, button_button:{name:Lang.Blocks.byrobot_dronefighter_controller_button_button, type:"input", pos:{x:0, y:0}}, button_event:{name:Lang.Blocks.byrobot_dronefighter_controller_button_event, type:"input", pos:{x:0, y:0}}, entryhw_countTransferReserved:{name:Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved, type:"output", pos:{x:0, y:0}}}, ports:{}, mode:"both"}, 
checkFinish:function(c, b) {
  if (c.isStart) {
    if (1 == c.timeFlag) {
      return "Running";
    }
    delete c.timeFlag;
    delete c.isStart;
    Entry.engine.isContinue = !1;
    return "Finish";
  }
  c.isStart = !0;
  c.timeFlag = 1;
  setTimeout(function() {
    c.timeFlag = 0;
  }, 60 / (Entry.FPS || 60) * b);
  return "Start";
}, transferLightManual:function(c, b, d) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 255);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_manual_flags", b);
  Entry.hw.setDigitalPortValue("light_manual_brightness", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_manual_flags;
  delete Entry.hw.sendQueue.light_manual_brightness;
}, transferbuzzer:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("buzzer_mode", c);
  Entry.hw.setDigitalPortValue("buzzer_value", b);
  Entry.hw.setDigitalPortValue("buzzer_time", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.buzzer_mode;
  delete Entry.hw.sendQueue.buzzer_value;
  delete Entry.hw.sendQueue.buzzer_time;
}, transferVibrator:function(c, b, d, e) {
  b = Math.max(b, 1);
  b = Math.min(b, 60000);
  d = Math.max(d, 1);
  d = Math.min(d, 60000);
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("vibrator_mode", c);
  Entry.hw.setDigitalPortValue("vibrator_on", b);
  Entry.hw.setDigitalPortValue("vibrator_off", d);
  Entry.hw.setDigitalPortValue("vibrator_total", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.vibrator_mode;
  delete Entry.hw.sendQueue.vibrator_on;
  delete Entry.hw.sendQueue.vibrator_off;
  delete Entry.hw.sendQueue.vibrator_total;
}, transferIrMessage:function(c) {
  c = Math.max(c, 0);
  c = Math.min(c, 127);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("irmessage_data", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.irmessage_data;
}, transferMotorSingle:function(c, b, d) {
  d = Math.max(d, 0);
  d = Math.min(d, 4096);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("motorsingle_target", c);
  Entry.hw.setDigitalPortValue("motorsingle_direction", b);
  Entry.hw.setDigitalPortValue("motorsingle_value", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.motorsingle_target;
  delete Entry.hw.sendQueue.motorsingle_direction;
  delete Entry.hw.sendQueue.motorsingle_value;
}, transferCommand:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("command_command", b);
  Entry.hw.setDigitalPortValue("command_option", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.command_command;
  delete Entry.hw.sendQueue.command_option;
}, transferControlDouble:function(c, b) {
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  b = Math.max(b, 0);
  b = Math.min(b, 100);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("control_wheel", c);
  Entry.hw.setDigitalPortValue("control_accel", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_wheel;
  delete Entry.hw.sendQueue.control_accel;
}, transferControlQuad:function(c, b, d, e) {
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  b = Math.max(b, -100);
  b = Math.min(b, 100);
  d = Math.max(d, -100);
  d = Math.min(d, 100);
  e = Math.max(e, -100);
  e = Math.min(e, 100);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("control_roll", c);
  Entry.hw.setDigitalPortValue("control_pitch", b);
  Entry.hw.setDigitalPortValue("control_yaw", d);
  Entry.hw.setDigitalPortValue("control_throttle", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_roll;
  delete Entry.hw.sendQueue.control_pitch;
  delete Entry.hw.sendQueue.control_yaw;
  delete Entry.hw.sendQueue.control_throttle;
}, getData:function(c, b) {
  return Entry.hw.portData[b];
}, setLightManual:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferLightManual(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferbuzzer(0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerMute:function(c, b, d, e) {
  b = Math.max(b, 0);
  b = Math.min(b, 60000);
  var f = 40;
  d && (f = b);
  switch(this.checkFinish(c, f)) {
    case "Start":
      return d = 2, e && (d = 1), this.transferbuzzer(d, 238, b), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerScale:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 4, g && (f = 3), this.transferbuzzer(f, 12 * b + d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerHz:function(c, b, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 60000);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return e = 6, f && (e = 5), b = Math.max(b, 1), b = Math.min(b, 63999), this.transferbuzzer(e, b, d), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibratorStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferVibrator(0, 0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibrator:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 2, g && (f = 1), this.transferVibrator(f, b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendIrMessage:function(c, b) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferIrMessage(b), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendStop:function(c) {
  return this.sendCommand(c, 16, 36, 0);
}, sendCommand:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setMotorSingle:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferMotorSingle(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setModeVehicle:function(c, b) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(16, 16, b), this.transferControlQuad(0, 0, 0, 0), this.transferControlDouble(0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setEventFlight:function(c, b, d) {
  switch(this.checkFinish(c, d)) {
    case "Start":
      return this.transferCommand(16, 34, b), this.transferControlQuad(0, 0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendControlQuadSingle:function(c, b, d, e, f) {
  var g = 40;
  f && (g = e);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return d = Math.max(d, -100), d = Math.min(d, 100), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(b, d), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[b], c;
    case "Running":
      return c;
    case "Finish":
      return f && (Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(b, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[b]), c.callReturn();
    default:
      return c.callReturn();
  }
}, sendControlQuad:function(c, b, d, e, f, g, h) {
  var k = 40;
  h && (k = g);
  switch(this.checkFinish(c, k)) {
    case "Start":
      return this.transferControlQuad(b, d, e, f), c;
    case "Running":
      return c;
    case "Finish":
      return h && this.transferControlQuad(0, 0, 0, 0), c.callReturn();
    default:
      return c.callReturn();
  }
}};
Entry.byrobot_petrone_v2_controller = {name:"byrobot_petrone_v2_controller", setZero:function() {
  for (var c = 0; 1 > c; c++) {
    this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(49, 255, 0), this.transferCommand(49, 128, 0);
  }
}, monitorTemplate:{imgPath:"hw/byrobot_petrone_v2_controller.png", width:500, height:500, listPorts:{joystick_left_x:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x, type:"input", pos:{x:0, y:0}}, joystick_left_y:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y, type:"input", pos:{x:0, y:0}}, joystick_left_direction:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction, type:"input", pos:{x:0, y:0}}, joystick_left_event:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event, 
type:"input", pos:{x:0, y:0}}, joystick_right_x:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x, type:"input", pos:{x:0, y:0}}, joystick_right_y:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y, type:"input", pos:{x:0, y:0}}, joystick_right_direction:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction, type:"input", pos:{x:0, y:0}}, joystick_right_event:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event, type:"input", pos:{x:0, 
y:0}}, button_button:{name:Lang.Blocks.byrobot_petrone_v2_controller_button_button, type:"input", pos:{x:0, y:0}}, button_event:{name:Lang.Blocks.byrobot_petrone_v2_controller_button_event, type:"input", pos:{x:0, y:0}}, entryhw_countTransferReserved:{name:Lang.Blocks.byrobot_petrone_v2_entryhw_count_transfer_reserved, type:"output", pos:{x:0, y:0}}}, ports:{}, mode:"both"}, checkFinish:function(c, b) {
  if (c.isStart) {
    if (1 == c.timeFlag) {
      return "Running";
    }
    delete c.timeFlag;
    delete c.isStart;
    Entry.engine.isContinue = !1;
    return "Finish";
  }
  c.isStart = !0;
  c.timeFlag = 1;
  setTimeout(function() {
    c.timeFlag = 0;
  }, 60 / (Entry.FPS || 60) * b);
  return "Start";
}, transferLightManual:function(c, b, d) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 255);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_manual_flags", b);
  Entry.hw.setDigitalPortValue("light_manual_brightness", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_manual_flags;
  delete Entry.hw.sendQueue.light_manual_brightness;
}, transferLightColorRgb:function(c, b, d, e) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 255);
  e = Math.max(e, 0);
  e = Math.min(e, 255);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_color_r", b);
  Entry.hw.setDigitalPortValue("light_color_g", d);
  Entry.hw.setDigitalPortValue("light_color_b", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_color_r;
  delete Entry.hw.sendQueue.light_color_g;
  delete Entry.hw.sendQueue.light_color_b;
}, transferDisplayClear:function(c, b, d, e, f, g, h) {
  d ? (Entry.hw.setDigitalPortValue("target", c), Entry.hw.setDigitalPortValue("display_clearall_pixel", b), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clearall_pixel) : (e = Math.max(e, 0), e = Math.min(e, 128), f = Math.max(f, 0), f = Math.min(f, 64), g = Math.max(g, 0), g = Math.min(g, 128), h = Math.max(h, 0), h = Math.min(h, 64), Entry.hw.setDigitalPortValue("target", c), Entry.hw.setDigitalPortValue("display_clear_x", e), Entry.hw.setDigitalPortValue("display_clear_y", 
  f), Entry.hw.setDigitalPortValue("display_clear_width", g), Entry.hw.setDigitalPortValue("display_clear_height", h), Entry.hw.setDigitalPortValue("display_clear_pixel", b), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clear_x, delete Entry.hw.sendQueue.display_clear_y, delete Entry.hw.sendQueue.display_clear_width, delete Entry.hw.sendQueue.display_clear_height, delete Entry.hw.sendQueue.display_clear_pixel);
}, transferDisplayInvert:function(c, b, d, e, f) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  e = Math.max(e, 0);
  e = Math.min(e, 128);
  f = Math.max(f, 0);
  f = Math.min(f, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_invert_x", b);
  Entry.hw.setDigitalPortValue("display_invert_y", d);
  Entry.hw.setDigitalPortValue("display_invert_width", e);
  Entry.hw.setDigitalPortValue("display_invert_height", f);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_invert_x;
  delete Entry.hw.sendQueue.display_invert_y;
  delete Entry.hw.sendQueue.display_invert_width;
  delete Entry.hw.sendQueue.display_invert_height;
}, transferDisplayDrawPoint:function(c, b, d, e) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_point_x", b);
  Entry.hw.setDigitalPortValue("display_draw_point_y", d);
  Entry.hw.setDigitalPortValue("display_draw_point_pixel", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_point_x;
  delete Entry.hw.sendQueue.display_draw_point_y;
  delete Entry.hw.sendQueue.display_draw_point_pixel;
}, transferDisplayDrawLine:function(c, b, d, e, f, g, h) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  e = Math.max(e, 0);
  e = Math.min(e, 128);
  f = Math.max(f, 0);
  f = Math.min(f, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_line_x1", b);
  Entry.hw.setDigitalPortValue("display_draw_line_y1", d);
  Entry.hw.setDigitalPortValue("display_draw_line_x2", e);
  Entry.hw.setDigitalPortValue("display_draw_line_y2", f);
  Entry.hw.setDigitalPortValue("display_draw_line_pixel", g);
  Entry.hw.setDigitalPortValue("display_draw_line_line", h);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_line_x1;
  delete Entry.hw.sendQueue.display_draw_line_y1;
  delete Entry.hw.sendQueue.display_draw_line_x2;
  delete Entry.hw.sendQueue.display_draw_line_y2;
  delete Entry.hw.sendQueue.display_draw_line_pixel;
  delete Entry.hw.sendQueue.display_draw_line_line;
}, transferDisplayDrawRect:function(c, b, d, e, f, g, h, k) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  e = Math.max(e, 0);
  e = Math.min(e, 128);
  f = Math.max(f, 0);
  f = Math.min(f, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_rect_x", b);
  Entry.hw.setDigitalPortValue("display_draw_rect_y", d);
  Entry.hw.setDigitalPortValue("display_draw_rect_width", e);
  Entry.hw.setDigitalPortValue("display_draw_rect_height", f);
  Entry.hw.setDigitalPortValue("display_draw_rect_pixel", g);
  Entry.hw.setDigitalPortValue("display_draw_rect_flagfill", h);
  Entry.hw.setDigitalPortValue("display_draw_rect_line", k);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_rect_x;
  delete Entry.hw.sendQueue.display_draw_rect_y;
  delete Entry.hw.sendQueue.display_draw_rect_width;
  delete Entry.hw.sendQueue.display_draw_rect_height;
  delete Entry.hw.sendQueue.display_draw_rect_pixel;
  delete Entry.hw.sendQueue.display_draw_rect_flagfill;
  delete Entry.hw.sendQueue.display_draw_rect_line;
}, transferDisplayDrawCircle:function(c, b, d, e, f, g) {
  b = Math.max(b, -50);
  b = Math.min(b, 178);
  d = Math.max(d, -50);
  d = Math.min(d, 114);
  e = Math.max(e, 1);
  e = Math.min(e, 200);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_circle_x", b);
  Entry.hw.setDigitalPortValue("display_draw_circle_y", d);
  Entry.hw.setDigitalPortValue("display_draw_circle_radius", e);
  Entry.hw.setDigitalPortValue("display_draw_circle_pixel", f);
  Entry.hw.setDigitalPortValue("display_draw_circle_flagfill", g);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_circle_x;
  delete Entry.hw.sendQueue.display_draw_circle_y;
  delete Entry.hw.sendQueue.display_draw_circle_radius;
  delete Entry.hw.sendQueue.display_draw_circle_pixel;
  delete Entry.hw.sendQueue.display_draw_circle_flagfill;
}, transferDisplayDrawString:function(c, b, d, e, f, g) {
  b = Math.max(b, 0);
  b = Math.min(b, 120);
  d = Math.max(d, 0);
  d = Math.min(d, 60);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_string_x", b);
  Entry.hw.setDigitalPortValue("display_draw_string_y", d);
  Entry.hw.setDigitalPortValue("display_draw_string_font", e);
  Entry.hw.setDigitalPortValue("display_draw_string_pixel", f);
  Entry.hw.setDigitalPortValue("display_draw_string_string", g);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_string_x;
  delete Entry.hw.sendQueue.display_draw_string_y;
  delete Entry.hw.sendQueue.display_draw_string_font;
  delete Entry.hw.sendQueue.display_draw_string_pixel;
  delete Entry.hw.sendQueue.display_draw_string_string;
}, transferDisplayDrawStringAlign:function(c, b, d, e, f, g, h, k) {
  b = Math.max(b, 0);
  b = Math.min(b, 124);
  d = Math.max(d, 4);
  d = Math.min(d, 128);
  e = Math.max(e, 0);
  e = Math.min(e, 60);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_string_align_x_start", b);
  Entry.hw.setDigitalPortValue("display_draw_string_align_x_end", d);
  Entry.hw.setDigitalPortValue("display_draw_string_align_y", e);
  Entry.hw.setDigitalPortValue("display_draw_string_align_align", f);
  Entry.hw.setDigitalPortValue("display_draw_string_align_font", g);
  Entry.hw.setDigitalPortValue("display_draw_string_align_pixel", h);
  Entry.hw.setDigitalPortValue("display_draw_string_align_string", k);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_string_align_x_start;
  delete Entry.hw.sendQueue.display_draw_string_align_x_end;
  delete Entry.hw.sendQueue.display_draw_string_align_y;
  delete Entry.hw.sendQueue.display_draw_string_align_align;
  delete Entry.hw.sendQueue.display_draw_string_align_font;
  delete Entry.hw.sendQueue.display_draw_string_align_pixel;
  delete Entry.hw.sendQueue.display_draw_string_align_string;
}, transferbuzzer:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", 49);
  Entry.hw.setDigitalPortValue("buzzer_mode", c);
  Entry.hw.setDigitalPortValue("buzzer_value", b);
  Entry.hw.setDigitalPortValue("buzzer_time", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.buzzer_mode;
  delete Entry.hw.sendQueue.buzzer_value;
  delete Entry.hw.sendQueue.buzzer_time;
}, transferVibrator:function(c, b, d, e) {
  b = Math.max(b, 1);
  b = Math.min(b, 60000);
  d = Math.max(d, 1);
  d = Math.min(d, 60000);
  Entry.hw.setDigitalPortValue("target", 49);
  Entry.hw.setDigitalPortValue("vibrator_mode", c);
  Entry.hw.setDigitalPortValue("vibrator_on", b);
  Entry.hw.setDigitalPortValue("vibrator_off", d);
  Entry.hw.setDigitalPortValue("vibrator_total", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.vibrator_mode;
  delete Entry.hw.sendQueue.vibrator_on;
  delete Entry.hw.sendQueue.vibrator_off;
  delete Entry.hw.sendQueue.vibrator_total;
}, transferCommand:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("command_command", b);
  Entry.hw.setDigitalPortValue("command_option", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.command_command;
  delete Entry.hw.sendQueue.command_option;
}, getData:function(c, b) {
  return Entry.hw.portData[b];
}, setLightManual:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferLightManual(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setLightColorRgb:function(c, b, d, e, f) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferLightColorRgb(b, d, e, f), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayClear:function(c, b, d, e, f, g, h, k) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayClear(b, d, e, f, g, h, k), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayInvert:function(c, b, d, e, f, g) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayInvert(b, d, e, f, g), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawPoint:function(c, b, d, e, f) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawPoint(b, d, e, f), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawLine:function(c, b, d, e, f, g, h, k) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawLine(b, d, e, f, g, h, k), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawRect:function(c, b, d, e, f, g, h, k, l) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawRect(b, d, e, f, g, h, k, l), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawCircle:function(c, b, d, e, f, g, h) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawCircle(b, d, e, f, g, h), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawString:function(c, b, d, e, f, g, h) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawString(b, d, e, f, g, h), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawStringAlign:function(c, b, d, e, f, g, h, k, l) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawStringAlign(b, d, e, f, g, h, k, l), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferbuzzer(0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerMute:function(c, b, d, e) {
  b = Math.max(b, 0);
  b = Math.min(b, 60000);
  var f = 40;
  d && (f = b);
  switch(this.checkFinish(c, f)) {
    case "Start":
      return d = 2, e && (d = 1), this.transferbuzzer(d, 238, b), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerScale:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 4, g && (f = 3), this.transferbuzzer(f, 12 * b + d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerHz:function(c, b, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 60000);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return e = 6, f && (e = 5), b = Math.max(b, 1), b = Math.min(b, 63999), this.transferbuzzer(e, b, d), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibratorStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferVibrator(0, 0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibrator:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 2, g && (f = 1), this.transferVibrator(f, b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendCommand:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}};
Entry.byrobot_petrone_v2_drive = {name:"byrobot_petrone_v2_drive", setZero:function() {
  this.transferBufferClear();
  for (var c = 0; 1 > c; c++) {
    this.transferCommand(48, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(48, 255, 0), this.transferLightManual(49, 255, 0), this.transferLightMode(48, 67, 2000), this.transferMotorSingle(0, 1, 0), this.transferMotorSingle(1, 2, 0);
  }
}, monitorTemplate:{imgPath:"hw/byrobot_petrone_v2_drive.png", width:256, height:256, listPorts:{state_modeVehicle:{name:Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle, type:"input", pos:{x:0, y:0}}, state_modeDrive:{name:Lang.Blocks.byrobot_petrone_v2_drone_state_mode_drive, type:"input", pos:{x:0, y:0}}, state_battery:{name:Lang.Blocks.byrobot_petrone_v2_drone_state_battery, type:"input", pos:{x:0, y:0}}, imu_angleRoll:{name:Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll, type:"input", 
pos:{x:0, y:0}}, imu_anglePitch:{name:Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch, type:"input", pos:{x:0, y:0}}, imu_angleYaw:{name:Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw, type:"input", pos:{x:0, y:0}}, imu_accX:{name:Lang.Blocks.byrobot_petrone_v2_drone_accel_x, type:"input", pos:{x:0, y:0}}, imu_accY:{name:Lang.Blocks.byrobot_petrone_v2_drone_accel_y, type:"input", pos:{x:0, y:0}}, imu_accZ:{name:Lang.Blocks.byrobot_petrone_v2_drone_accel_z, type:"input", pos:{x:0, y:0}}, imu_gyroRoll:{name:Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll, 
type:"input", pos:{x:0, y:0}}, imu_gyroPitch:{name:Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch, type:"input", pos:{x:0, y:0}}, imu_gyroYaw:{name:Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw, type:"input", pos:{x:0, y:0}}, pressure_temperature:{name:Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature, type:"input", pos:{x:0, y:0}}, pressure_pressure:{name:Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure, type:"input", pos:{x:0, y:0}}, imageflow_positionX:{name:Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX, 
type:"input", pos:{x:0, y:0}}, imageflow_positionY:{name:Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY, type:"input", pos:{x:0, y:0}}, range_bottom:{name:Lang.Blocks.byrobot_petrone_v2_drone_range_bottom, type:"input", pos:{x:0, y:0}}, irmessage_direction:{name:Lang.Blocks.byrobot_petrone_v2_drone_irmessage_direction, type:"input", pos:{x:0, y:0}}, irmessage_irdata:{name:Lang.Blocks.byrobot_petrone_v2_drone_irmessage, type:"input", pos:{x:0, y:0}}, joystick_left_x:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x, 
type:"input", pos:{x:0, y:0}}, joystick_left_y:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y, type:"input", pos:{x:0, y:0}}, joystick_left_direction:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction, type:"input", pos:{x:0, y:0}}, joystick_left_event:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event, type:"input", pos:{x:0, y:0}}, joystick_right_x:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x, type:"input", pos:{x:0, y:0}}, 
joystick_right_y:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y, type:"input", pos:{x:0, y:0}}, joystick_right_direction:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction, type:"input", pos:{x:0, y:0}}, joystick_right_event:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event, type:"input", pos:{x:0, y:0}}, button_button:{name:Lang.Blocks.byrobot_petrone_v2_controller_button_button, type:"input", pos:{x:0, y:0}}, button_event:{name:Lang.Blocks.byrobot_petrone_v2_controller_button_event, 
type:"input", pos:{x:0, y:0}}, entryhw_countTransferReserved:{name:Lang.Blocks.byrobot_petrone_v2_entryhw_count_transfer_reserved, type:"output", pos:{x:0, y:0}}}, ports:{}, mode:"both"}, checkFinish:function(c, b) {
  if (c.isStart) {
    if (1 == c.timeFlag) {
      return "Running";
    }
    delete c.timeFlag;
    delete c.isStart;
    Entry.engine.isContinue = !1;
    return "Finish";
  }
  c.isStart = !0;
  c.timeFlag = 1;
  setTimeout(function() {
    c.timeFlag = 0;
  }, 60 / (Entry.FPS || 60) * b);
  return "Start";
}, transferBufferClear:function() {
  Entry.hw.setDigitalPortValue("buffer_clear", 0);
  Entry.hw.update();
  delete Entry.hw.sendQueue.buffer_clear;
}, transferLightManual:function(c, b, d) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 255);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_manual_flags", b);
  Entry.hw.setDigitalPortValue("light_manual_brightness", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_manual_flags;
  delete Entry.hw.sendQueue.light_manual_brightness;
}, transferLightMode:function(c, b, d) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 65535);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_mode_mode", b);
  Entry.hw.setDigitalPortValue("light_mode_interval", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_mode_mode;
  delete Entry.hw.sendQueue.light_mode_interval;
}, transferLightColorRgb:function(c, b, d, e, f) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 255);
  e = Math.max(e, 0);
  e = Math.min(e, 255);
  f = Math.max(f, 0);
  f = Math.min(f, 255);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_mode_mode", b);
  Entry.hw.setDigitalPortValue("light_color_r", d);
  Entry.hw.setDigitalPortValue("light_color_g", e);
  Entry.hw.setDigitalPortValue("light_color_b", f);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_mode_mode;
  delete Entry.hw.sendQueue.light_color_r;
  delete Entry.hw.sendQueue.light_color_g;
  delete Entry.hw.sendQueue.light_color_b;
}, transferDisplayClear:function(c, b, d, e, f, g, h) {
  d ? (Entry.hw.setDigitalPortValue("target", c), Entry.hw.setDigitalPortValue("display_clearall_pixel", b), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clearall_pixel) : (e = Math.max(e, 0), e = Math.min(e, 128), f = Math.max(f, 0), f = Math.min(f, 64), g = Math.max(g, 0), g = Math.min(g, 128), h = Math.max(h, 0), h = Math.min(h, 64), Entry.hw.setDigitalPortValue("target", c), Entry.hw.setDigitalPortValue("display_clear_x", e), Entry.hw.setDigitalPortValue("display_clear_y", 
  f), Entry.hw.setDigitalPortValue("display_clear_width", g), Entry.hw.setDigitalPortValue("display_clear_height", h), Entry.hw.setDigitalPortValue("display_clear_pixel", b), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clear_x, delete Entry.hw.sendQueue.display_clear_y, delete Entry.hw.sendQueue.display_clear_width, delete Entry.hw.sendQueue.display_clear_height, delete Entry.hw.sendQueue.display_clear_pixel);
}, transferDisplayInvert:function(c, b, d, e, f) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  e = Math.max(e, 0);
  e = Math.min(e, 128);
  f = Math.max(f, 0);
  f = Math.min(f, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_invert_x", b);
  Entry.hw.setDigitalPortValue("display_invert_y", d);
  Entry.hw.setDigitalPortValue("display_invert_width", e);
  Entry.hw.setDigitalPortValue("display_invert_height", f);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_invert_x;
  delete Entry.hw.sendQueue.display_invert_y;
  delete Entry.hw.sendQueue.display_invert_width;
  delete Entry.hw.sendQueue.display_invert_height;
}, transferDisplayDrawPoint:function(c, b, d, e) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_point_x", b);
  Entry.hw.setDigitalPortValue("display_draw_point_y", d);
  Entry.hw.setDigitalPortValue("display_draw_point_pixel", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_point_x;
  delete Entry.hw.sendQueue.display_draw_point_y;
  delete Entry.hw.sendQueue.display_draw_point_pixel;
}, transferDisplayDrawLine:function(c, b, d, e, f, g, h) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  e = Math.max(e, 0);
  e = Math.min(e, 128);
  f = Math.max(f, 0);
  f = Math.min(f, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_line_x1", b);
  Entry.hw.setDigitalPortValue("display_draw_line_y1", d);
  Entry.hw.setDigitalPortValue("display_draw_line_x2", e);
  Entry.hw.setDigitalPortValue("display_draw_line_y2", f);
  Entry.hw.setDigitalPortValue("display_draw_line_pixel", g);
  Entry.hw.setDigitalPortValue("display_draw_line_line", h);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_line_x1;
  delete Entry.hw.sendQueue.display_draw_line_y1;
  delete Entry.hw.sendQueue.display_draw_line_x2;
  delete Entry.hw.sendQueue.display_draw_line_y2;
  delete Entry.hw.sendQueue.display_draw_line_pixel;
  delete Entry.hw.sendQueue.display_draw_line_line;
}, transferDisplayDrawRect:function(c, b, d, e, f, g, h, k) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  e = Math.max(e, 0);
  e = Math.min(e, 128);
  f = Math.max(f, 0);
  f = Math.min(f, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_rect_x", b);
  Entry.hw.setDigitalPortValue("display_draw_rect_y", d);
  Entry.hw.setDigitalPortValue("display_draw_rect_width", e);
  Entry.hw.setDigitalPortValue("display_draw_rect_height", f);
  Entry.hw.setDigitalPortValue("display_draw_rect_pixel", g);
  Entry.hw.setDigitalPortValue("display_draw_rect_flagfill", h);
  Entry.hw.setDigitalPortValue("display_draw_rect_line", k);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_rect_x;
  delete Entry.hw.sendQueue.display_draw_rect_y;
  delete Entry.hw.sendQueue.display_draw_rect_width;
  delete Entry.hw.sendQueue.display_draw_rect_height;
  delete Entry.hw.sendQueue.display_draw_rect_pixel;
  delete Entry.hw.sendQueue.display_draw_rect_flagfill;
  delete Entry.hw.sendQueue.display_draw_rect_line;
}, transferDisplayDrawCircle:function(c, b, d, e, f, g) {
  b = Math.max(b, -50);
  b = Math.min(b, 178);
  d = Math.max(d, -50);
  d = Math.min(d, 114);
  e = Math.max(e, 1);
  e = Math.min(e, 200);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_circle_x", b);
  Entry.hw.setDigitalPortValue("display_draw_circle_y", d);
  Entry.hw.setDigitalPortValue("display_draw_circle_radius", e);
  Entry.hw.setDigitalPortValue("display_draw_circle_pixel", f);
  Entry.hw.setDigitalPortValue("display_draw_circle_flagfill", g);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_circle_x;
  delete Entry.hw.sendQueue.display_draw_circle_y;
  delete Entry.hw.sendQueue.display_draw_circle_radius;
  delete Entry.hw.sendQueue.display_draw_circle_pixel;
  delete Entry.hw.sendQueue.display_draw_circle_flagfill;
}, transferDisplayDrawString:function(c, b, d, e, f, g) {
  b = Math.max(b, 0);
  b = Math.min(b, 120);
  d = Math.max(d, 0);
  d = Math.min(d, 60);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_string_x", b);
  Entry.hw.setDigitalPortValue("display_draw_string_y", d);
  Entry.hw.setDigitalPortValue("display_draw_string_font", e);
  Entry.hw.setDigitalPortValue("display_draw_string_pixel", f);
  Entry.hw.setDigitalPortValue("display_draw_string_string", g);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_string_x;
  delete Entry.hw.sendQueue.display_draw_string_y;
  delete Entry.hw.sendQueue.display_draw_string_font;
  delete Entry.hw.sendQueue.display_draw_string_pixel;
  delete Entry.hw.sendQueue.display_draw_string_string;
}, transferDisplayDrawStringAlign:function(c, b, d, e, f, g, h, k) {
  b = Math.max(b, 0);
  b = Math.min(b, 124);
  d = Math.max(d, 4);
  d = Math.min(d, 128);
  e = Math.max(e, 0);
  e = Math.min(e, 60);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_string_align_x_start", b);
  Entry.hw.setDigitalPortValue("display_draw_string_align_x_end", d);
  Entry.hw.setDigitalPortValue("display_draw_string_align_y", e);
  Entry.hw.setDigitalPortValue("display_draw_string_align_align", f);
  Entry.hw.setDigitalPortValue("display_draw_string_align_font", g);
  Entry.hw.setDigitalPortValue("display_draw_string_align_pixel", h);
  Entry.hw.setDigitalPortValue("display_draw_string_align_string", k);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_string_align_x_start;
  delete Entry.hw.sendQueue.display_draw_string_align_x_end;
  delete Entry.hw.sendQueue.display_draw_string_align_y;
  delete Entry.hw.sendQueue.display_draw_string_align_align;
  delete Entry.hw.sendQueue.display_draw_string_align_font;
  delete Entry.hw.sendQueue.display_draw_string_align_pixel;
  delete Entry.hw.sendQueue.display_draw_string_align_string;
}, transferbuzzer:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", 49);
  Entry.hw.setDigitalPortValue("buzzer_mode", c);
  Entry.hw.setDigitalPortValue("buzzer_value", b);
  Entry.hw.setDigitalPortValue("buzzer_time", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.buzzer_mode;
  delete Entry.hw.sendQueue.buzzer_value;
  delete Entry.hw.sendQueue.buzzer_time;
}, transferVibrator:function(c, b, d, e) {
  b = Math.max(b, 1);
  b = Math.min(b, 60000);
  d = Math.max(d, 1);
  d = Math.min(d, 60000);
  Entry.hw.setDigitalPortValue("target", 49);
  Entry.hw.setDigitalPortValue("vibrator_mode", c);
  Entry.hw.setDigitalPortValue("vibrator_on", b);
  Entry.hw.setDigitalPortValue("vibrator_off", d);
  Entry.hw.setDigitalPortValue("vibrator_total", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.vibrator_mode;
  delete Entry.hw.sendQueue.vibrator_on;
  delete Entry.hw.sendQueue.vibrator_off;
  delete Entry.hw.sendQueue.vibrator_total;
}, transferIrMessage:function(c, b) {
  b = Math.max(b, -2147483647);
  b = Math.min(b, 2147483647);
  Entry.hw.setDigitalPortValue("target", 48);
  Entry.hw.setDigitalPortValue("irmessage_direction", c);
  Entry.hw.setDigitalPortValue("irmessage_irdata", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.irmessage_direction;
  delete Entry.hw.sendQueue.irmessage_irdata;
}, transferMotorSingle:function(c, b, d) {
  d = Math.max(d, 0);
  d = Math.min(d, 4096);
  Entry.hw.setDigitalPortValue("target", 48);
  Entry.hw.setDigitalPortValue("motorsingle_target", c);
  Entry.hw.setDigitalPortValue("motorsingle_rotation", b);
  Entry.hw.setDigitalPortValue("motorsingle_value", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.motorsingle_target;
  delete Entry.hw.sendQueue.motorsingle_rotation;
  delete Entry.hw.sendQueue.motorsingle_value;
}, transferCommand:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("command_command", b);
  Entry.hw.setDigitalPortValue("command_option", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.command_command;
  delete Entry.hw.sendQueue.command_option;
}, transferControlDouble:function(c, b) {
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  b = Math.max(b, -100);
  b = Math.min(b, 100);
  Entry.hw.setDigitalPortValue("target", 48);
  Entry.hw.setDigitalPortValue("control_wheel", c);
  Entry.hw.setDigitalPortValue("control_accel", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_wheel;
  delete Entry.hw.sendQueue.control_accel;
}, transferControlQuad:function(c, b, d, e) {
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  b = Math.max(b, -100);
  b = Math.min(b, 100);
  d = Math.max(d, -100);
  d = Math.min(d, 100);
  e = Math.max(e, -100);
  e = Math.min(e, 100);
  Entry.hw.setDigitalPortValue("target", 48);
  Entry.hw.setDigitalPortValue("control_roll", c);
  Entry.hw.setDigitalPortValue("control_pitch", b);
  Entry.hw.setDigitalPortValue("control_yaw", d);
  Entry.hw.setDigitalPortValue("control_throttle", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_roll;
  delete Entry.hw.sendQueue.control_pitch;
  delete Entry.hw.sendQueue.control_yaw;
  delete Entry.hw.sendQueue.control_throttle;
}, getData:function(c, b) {
  return Entry.hw.portData[b];
}, setLightManual:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferLightManual(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setLightColorRgb:function(c, b, d, e, f, g) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferLightColorRgb(b, d, e, f, g), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayClear:function(c, b, d, e, f, g, h, k) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayClear(b, d, e, f, g, h, k), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayInvert:function(c, b, d, e, f, g) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayInvert(b, d, e, f, g), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawPoint:function(c, b, d, e, f) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawPoint(b, d, e, f), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawLine:function(c, b, d, e, f, g, h, k) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawLine(b, d, e, f, g, h, k), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawRect:function(c, b, d, e, f, g, h, k, l) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawRect(b, d, e, f, g, h, k, l), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawCircle:function(c, b, d, e, f, g, h) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawCircle(b, d, e, f, g, h), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawString:function(c, b, d, e, f, g, h) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawString(b, d, e, f, g, h), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawStringAlign:function(c, b, d, e, f, g, h, k, l) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawStringAlign(b, d, e, f, g, h, k, l), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferbuzzer(0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerMute:function(c, b, d, e) {
  b = Math.max(b, 0);
  b = Math.min(b, 60000);
  var f = 40;
  d && (f = b);
  switch(this.checkFinish(c, f)) {
    case "Start":
      return d = 2, e && (d = 1), this.transferbuzzer(d, 238, b), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerScale:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 4, g && (f = 3), this.transferbuzzer(f, 12 * b + d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerHz:function(c, b, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 60000);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return e = 6, f && (e = 5), b = Math.max(b, 1), b = Math.min(b, 63999), this.transferbuzzer(e, b, d), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibratorStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferVibrator(0, 0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibrator:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 2, g && (f = 1), this.transferVibrator(f, b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendIrMessage:function(c, b, d) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferIrMessage(b, d), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendStop:function(c) {
  return this.sendCommand(c, 48, 36, 0);
}, sendCommand:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setMotorSingle:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferMotorSingle(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setModeVehicle:function(c, b) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(48, 16, b), this.transferControlDouble(0, 0), this.transferControlQuad(0, 0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendControlDoubleSingle:function(c, b, d, e, f) {
  var g = 40;
  f && (g = e);
  switch(this.checkFinish(c, g)) {
    case "Start":
      switch(b) {
        case "control_wheel":
          d = Math.max(d, -100);
          d = Math.min(d, 100);
          break;
        case "control_accel":
          d = Math.max(d, -100), d = Math.min(d, 100);
      }Entry.hw.setDigitalPortValue("target", 48);
      Entry.hw.setDigitalPortValue(b, d);
      Entry.hw.update();
      delete Entry.hw.sendQueue.target;
      delete Entry.hw.sendQueue[b];
      return c;
    case "Running":
      return c;
    case "Finish":
      return f && (Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue(b, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[b]), c.callReturn();
    default:
      return c.callReturn();
  }
}, sendControlDouble:function(c, b, d, e, f) {
  var g = 40;
  f && (g = e);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return this.transferControlDouble(b, d), c;
    case "Running":
      return c;
    case "Finish":
      return f && this.transferControlDouble(0, 0), c.callReturn();
    default:
      return c.callReturn();
  }
}};
Entry.byrobot_petrone_v2_flight = {name:"byrobot_petrone_v2_flight", setZero:function() {
  this.transferBufferClear();
  for (var c = 0; 1 > c; c++) {
    this.transferCommand(48, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(48, 255, 0), this.transferLightManual(49, 255, 0), this.transferLightMode(48, 67, 2000), this.transferMotorSingle(0, 1, 0), this.transferMotorSingle(1, 2, 0);
  }
}, monitorTemplate:{imgPath:"hw/byrobot_petrone_v2_flight.png", width:256, height:256, listPorts:{state_modeVehicle:{name:Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle, type:"input", pos:{x:0, y:0}}, state_modeFlight:{name:Lang.Blocks.byrobot_petrone_v2_drone_state_mode_flight, type:"input", pos:{x:0, y:0}}, state_coordinate:{name:Lang.Blocks.byrobot_petrone_v2_drone_state_mode_coordinate, type:"input", pos:{x:0, y:0}}, state_battery:{name:Lang.Blocks.byrobot_petrone_v2_drone_state_battery, 
type:"input", pos:{x:0, y:0}}, imu_angleRoll:{name:Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll, type:"input", pos:{x:0, y:0}}, imu_anglePitch:{name:Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch, type:"input", pos:{x:0, y:0}}, imu_angleYaw:{name:Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw, type:"input", pos:{x:0, y:0}}, imu_accX:{name:Lang.Blocks.byrobot_petrone_v2_drone_accel_x, type:"input", pos:{x:0, y:0}}, imu_accY:{name:Lang.Blocks.byrobot_petrone_v2_drone_accel_y, type:"input", 
pos:{x:0, y:0}}, imu_accZ:{name:Lang.Blocks.byrobot_petrone_v2_drone_accel_z, type:"input", pos:{x:0, y:0}}, imu_gyroRoll:{name:Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll, type:"input", pos:{x:0, y:0}}, imu_gyroPitch:{name:Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch, type:"input", pos:{x:0, y:0}}, imu_gyroYaw:{name:Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw, type:"input", pos:{x:0, y:0}}, pressure_temperature:{name:Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature, type:"input", 
pos:{x:0, y:0}}, pressure_pressure:{name:Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure, type:"input", pos:{x:0, y:0}}, imageflow_positionX:{name:Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX, type:"input", pos:{x:0, y:0}}, imageflow_positionY:{name:Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY, type:"input", pos:{x:0, y:0}}, range_bottom:{name:Lang.Blocks.byrobot_petrone_v2_drone_range_bottom, type:"input", pos:{x:0, y:0}}, irmessage_direction:{name:Lang.Blocks.byrobot_petrone_v2_drone_irmessage_direction, 
type:"input", pos:{x:0, y:0}}, irmessage_irdata:{name:Lang.Blocks.byrobot_petrone_v2_drone_irmessage, type:"input", pos:{x:0, y:0}}, joystick_left_x:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x, type:"input", pos:{x:0, y:0}}, joystick_left_y:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y, type:"input", pos:{x:0, y:0}}, joystick_left_direction:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction, type:"input", pos:{x:0, y:0}}, joystick_left_event:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event, 
type:"input", pos:{x:0, y:0}}, joystick_right_x:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x, type:"input", pos:{x:0, y:0}}, joystick_right_y:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y, type:"input", pos:{x:0, y:0}}, joystick_right_direction:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction, type:"input", pos:{x:0, y:0}}, joystick_right_event:{name:Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event, type:"input", pos:{x:0, 
y:0}}, button_button:{name:Lang.Blocks.byrobot_petrone_v2_controller_button_button, type:"input", pos:{x:0, y:0}}, button_event:{name:Lang.Blocks.byrobot_petrone_v2_controller_button_event, type:"input", pos:{x:0, y:0}}, entryhw_countTransferReserved:{name:Lang.Blocks.byrobot_petrone_v2_entryhw_count_transfer_reserved, type:"output", pos:{x:0, y:0}}}, ports:{}, mode:"both"}, checkFinish:function(c, b) {
  if (c.isStart) {
    if (1 == c.timeFlag) {
      return "Running";
    }
    delete c.timeFlag;
    delete c.isStart;
    Entry.engine.isContinue = !1;
    return "Finish";
  }
  c.isStart = !0;
  c.timeFlag = 1;
  setTimeout(function() {
    c.timeFlag = 0;
  }, 60 / (Entry.FPS || 60) * b);
  return "Start";
}, transferBufferClear:function() {
  Entry.hw.setDigitalPortValue("buffer_clear", 0);
  Entry.hw.update();
  delete Entry.hw.sendQueue.buffer_clear;
}, transferLightManual:function(c, b, d) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 255);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_manual_flags", b);
  Entry.hw.setDigitalPortValue("light_manual_brightness", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_manual_flags;
  delete Entry.hw.sendQueue.light_manual_brightness;
}, transferLightMode:function(c, b, d) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 65535);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_mode_mode", b);
  Entry.hw.setDigitalPortValue("light_mode_interval", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_mode_mode;
  delete Entry.hw.sendQueue.light_mode_interval;
}, transferLightColorRgb:function(c, b, d, e, f) {
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  d = Math.max(d, 0);
  d = Math.min(d, 255);
  e = Math.max(e, 0);
  e = Math.min(e, 255);
  f = Math.max(f, 0);
  f = Math.min(f, 255);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("light_mode_mode", b);
  Entry.hw.setDigitalPortValue("light_color_r", d);
  Entry.hw.setDigitalPortValue("light_color_g", e);
  Entry.hw.setDigitalPortValue("light_color_b", f);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_mode_mode;
  delete Entry.hw.sendQueue.light_color_r;
  delete Entry.hw.sendQueue.light_color_g;
  delete Entry.hw.sendQueue.light_color_b;
}, transferDisplayClear:function(c, b, d, e, f, g, h) {
  d ? (Entry.hw.setDigitalPortValue("target", c), Entry.hw.setDigitalPortValue("display_clearall_pixel", b), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clearall_pixel) : (e = Math.max(e, 0), e = Math.min(e, 128), f = Math.max(f, 0), f = Math.min(f, 64), g = Math.max(g, 0), g = Math.min(g, 128), h = Math.max(h, 0), h = Math.min(h, 64), Entry.hw.setDigitalPortValue("target", c), Entry.hw.setDigitalPortValue("display_clear_x", e), Entry.hw.setDigitalPortValue("display_clear_y", 
  f), Entry.hw.setDigitalPortValue("display_clear_width", g), Entry.hw.setDigitalPortValue("display_clear_height", h), Entry.hw.setDigitalPortValue("display_clear_pixel", b), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clear_x, delete Entry.hw.sendQueue.display_clear_y, delete Entry.hw.sendQueue.display_clear_width, delete Entry.hw.sendQueue.display_clear_height, delete Entry.hw.sendQueue.display_clear_pixel);
}, transferDisplayInvert:function(c, b, d, e, f) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  e = Math.max(e, 0);
  e = Math.min(e, 128);
  f = Math.max(f, 0);
  f = Math.min(f, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_invert_x", b);
  Entry.hw.setDigitalPortValue("display_invert_y", d);
  Entry.hw.setDigitalPortValue("display_invert_width", e);
  Entry.hw.setDigitalPortValue("display_invert_height", f);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_invert_x;
  delete Entry.hw.sendQueue.display_invert_y;
  delete Entry.hw.sendQueue.display_invert_width;
  delete Entry.hw.sendQueue.display_invert_height;
}, transferDisplayDrawPoint:function(c, b, d, e) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_point_x", b);
  Entry.hw.setDigitalPortValue("display_draw_point_y", d);
  Entry.hw.setDigitalPortValue("display_draw_point_pixel", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_point_x;
  delete Entry.hw.sendQueue.display_draw_point_y;
  delete Entry.hw.sendQueue.display_draw_point_pixel;
}, transferDisplayDrawLine:function(c, b, d, e, f, g, h) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  e = Math.max(e, 0);
  e = Math.min(e, 128);
  f = Math.max(f, 0);
  f = Math.min(f, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_line_x1", b);
  Entry.hw.setDigitalPortValue("display_draw_line_y1", d);
  Entry.hw.setDigitalPortValue("display_draw_line_x2", e);
  Entry.hw.setDigitalPortValue("display_draw_line_y2", f);
  Entry.hw.setDigitalPortValue("display_draw_line_pixel", g);
  Entry.hw.setDigitalPortValue("display_draw_line_line", h);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_line_x1;
  delete Entry.hw.sendQueue.display_draw_line_y1;
  delete Entry.hw.sendQueue.display_draw_line_x2;
  delete Entry.hw.sendQueue.display_draw_line_y2;
  delete Entry.hw.sendQueue.display_draw_line_pixel;
  delete Entry.hw.sendQueue.display_draw_line_line;
}, transferDisplayDrawRect:function(c, b, d, e, f, g, h, k) {
  b = Math.max(b, 0);
  b = Math.min(b, 128);
  d = Math.max(d, 0);
  d = Math.min(d, 64);
  e = Math.max(e, 0);
  e = Math.min(e, 128);
  f = Math.max(f, 0);
  f = Math.min(f, 64);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_rect_x", b);
  Entry.hw.setDigitalPortValue("display_draw_rect_y", d);
  Entry.hw.setDigitalPortValue("display_draw_rect_width", e);
  Entry.hw.setDigitalPortValue("display_draw_rect_height", f);
  Entry.hw.setDigitalPortValue("display_draw_rect_pixel", g);
  Entry.hw.setDigitalPortValue("display_draw_rect_flagfill", h);
  Entry.hw.setDigitalPortValue("display_draw_rect_line", k);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_rect_x;
  delete Entry.hw.sendQueue.display_draw_rect_y;
  delete Entry.hw.sendQueue.display_draw_rect_width;
  delete Entry.hw.sendQueue.display_draw_rect_height;
  delete Entry.hw.sendQueue.display_draw_rect_pixel;
  delete Entry.hw.sendQueue.display_draw_rect_flagfill;
  delete Entry.hw.sendQueue.display_draw_rect_line;
}, transferDisplayDrawCircle:function(c, b, d, e, f, g) {
  b = Math.max(b, -50);
  b = Math.min(b, 178);
  d = Math.max(d, -50);
  d = Math.min(d, 114);
  e = Math.max(e, 1);
  e = Math.min(e, 200);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_circle_x", b);
  Entry.hw.setDigitalPortValue("display_draw_circle_y", d);
  Entry.hw.setDigitalPortValue("display_draw_circle_radius", e);
  Entry.hw.setDigitalPortValue("display_draw_circle_pixel", f);
  Entry.hw.setDigitalPortValue("display_draw_circle_flagfill", g);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_circle_x;
  delete Entry.hw.sendQueue.display_draw_circle_y;
  delete Entry.hw.sendQueue.display_draw_circle_radius;
  delete Entry.hw.sendQueue.display_draw_circle_pixel;
  delete Entry.hw.sendQueue.display_draw_circle_flagfill;
}, transferDisplayDrawString:function(c, b, d, e, f, g) {
  b = Math.max(b, 0);
  b = Math.min(b, 120);
  d = Math.max(d, 0);
  d = Math.min(d, 60);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_string_x", b);
  Entry.hw.setDigitalPortValue("display_draw_string_y", d);
  Entry.hw.setDigitalPortValue("display_draw_string_font", e);
  Entry.hw.setDigitalPortValue("display_draw_string_pixel", f);
  Entry.hw.setDigitalPortValue("display_draw_string_string", g);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_string_x;
  delete Entry.hw.sendQueue.display_draw_string_y;
  delete Entry.hw.sendQueue.display_draw_string_font;
  delete Entry.hw.sendQueue.display_draw_string_pixel;
  delete Entry.hw.sendQueue.display_draw_string_string;
}, transferDisplayDrawStringAlign:function(c, b, d, e, f, g, h, k) {
  b = Math.max(b, 0);
  b = Math.min(b, 124);
  d = Math.max(d, 4);
  d = Math.min(d, 128);
  e = Math.max(e, 0);
  e = Math.min(e, 60);
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("display_draw_string_align_x_start", b);
  Entry.hw.setDigitalPortValue("display_draw_string_align_x_end", d);
  Entry.hw.setDigitalPortValue("display_draw_string_align_y", e);
  Entry.hw.setDigitalPortValue("display_draw_string_align_align", f);
  Entry.hw.setDigitalPortValue("display_draw_string_align_font", g);
  Entry.hw.setDigitalPortValue("display_draw_string_align_pixel", h);
  Entry.hw.setDigitalPortValue("display_draw_string_align_string", k);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.display_draw_string_align_x_start;
  delete Entry.hw.sendQueue.display_draw_string_align_x_end;
  delete Entry.hw.sendQueue.display_draw_string_align_y;
  delete Entry.hw.sendQueue.display_draw_string_align_align;
  delete Entry.hw.sendQueue.display_draw_string_align_font;
  delete Entry.hw.sendQueue.display_draw_string_align_pixel;
  delete Entry.hw.sendQueue.display_draw_string_align_string;
}, transferbuzzer:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", 49);
  Entry.hw.setDigitalPortValue("buzzer_mode", c);
  Entry.hw.setDigitalPortValue("buzzer_value", b);
  Entry.hw.setDigitalPortValue("buzzer_time", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.buzzer_mode;
  delete Entry.hw.sendQueue.buzzer_value;
  delete Entry.hw.sendQueue.buzzer_time;
}, transferVibrator:function(c, b, d, e) {
  b = Math.max(b, 1);
  b = Math.min(b, 60000);
  d = Math.max(d, 1);
  d = Math.min(d, 60000);
  Entry.hw.setDigitalPortValue("target", 49);
  Entry.hw.setDigitalPortValue("vibrator_mode", c);
  Entry.hw.setDigitalPortValue("vibrator_on", b);
  Entry.hw.setDigitalPortValue("vibrator_off", d);
  Entry.hw.setDigitalPortValue("vibrator_total", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.vibrator_mode;
  delete Entry.hw.sendQueue.vibrator_on;
  delete Entry.hw.sendQueue.vibrator_off;
  delete Entry.hw.sendQueue.vibrator_total;
}, transferIrMessage:function(c, b) {
  b = Math.max(b, -2147483647);
  b = Math.min(b, 2147483647);
  Entry.hw.setDigitalPortValue("target", 48);
  Entry.hw.setDigitalPortValue("irmessage_direction", c);
  Entry.hw.setDigitalPortValue("irmessage_irdata", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.irmessage_direction;
  delete Entry.hw.sendQueue.irmessage_irdata;
}, transferMotorSingle:function(c, b, d) {
  d = Math.max(d, 0);
  d = Math.min(d, 4096);
  Entry.hw.setDigitalPortValue("target", 48);
  Entry.hw.setDigitalPortValue("motorsingle_target", c);
  Entry.hw.setDigitalPortValue("motorsingle_rotation", b);
  Entry.hw.setDigitalPortValue("motorsingle_value", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.motorsingle_target;
  delete Entry.hw.sendQueue.motorsingle_rotation;
  delete Entry.hw.sendQueue.motorsingle_value;
}, transferCommand:function(c, b, d) {
  Entry.hw.setDigitalPortValue("target", c);
  Entry.hw.setDigitalPortValue("command_command", b);
  Entry.hw.setDigitalPortValue("command_option", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.command_command;
  delete Entry.hw.sendQueue.command_option;
}, transferControlDouble:function(c, b) {
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  b = Math.max(b, 0);
  b = Math.min(b, 100);
  Entry.hw.setDigitalPortValue("target", 48);
  Entry.hw.setDigitalPortValue("control_wheel", c);
  Entry.hw.setDigitalPortValue("control_accel", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_wheel;
  delete Entry.hw.sendQueue.control_accel;
}, transferControlQuad:function(c, b, d, e) {
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  b = Math.max(b, -100);
  b = Math.min(b, 100);
  d = Math.max(d, -100);
  d = Math.min(d, 100);
  e = Math.max(e, -100);
  e = Math.min(e, 100);
  Entry.hw.setDigitalPortValue("target", 48);
  Entry.hw.setDigitalPortValue("control_roll", c);
  Entry.hw.setDigitalPortValue("control_pitch", b);
  Entry.hw.setDigitalPortValue("control_yaw", d);
  Entry.hw.setDigitalPortValue("control_throttle", e);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_roll;
  delete Entry.hw.sendQueue.control_pitch;
  delete Entry.hw.sendQueue.control_yaw;
  delete Entry.hw.sendQueue.control_throttle;
}, getData:function(c, b) {
  return Entry.hw.portData[b];
}, setLightManual:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferLightManual(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setLightColorRgb:function(c, b, d, e, f, g) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferLightColorRgb(b, d, e, f, g), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayClear:function(c, b, d, e, f, g, h, k) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayClear(b, d, e, f, g, h, k), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayInvert:function(c, b, d, e, f, g) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayInvert(b, d, e, f, g), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawPoint:function(c, b, d, e, f) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawPoint(b, d, e, f), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawLine:function(c, b, d, e, f, g, h, k) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawLine(b, d, e, f, g, h, k), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawRect:function(c, b, d, e, f, g, h, k, l) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawRect(b, d, e, f, g, h, k, l), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawCircle:function(c, b, d, e, f, g, h) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawCircle(b, d, e, f, g, h), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawString:function(c, b, d, e, f, g, h) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawString(b, d, e, f, g, h), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setDisplayDrawStringAlign:function(c, b, d, e, f, g, h, k, l) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferDisplayDrawStringAlign(b, d, e, f, g, h, k, l), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferbuzzer(0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerMute:function(c, b, d, e) {
  b = Math.max(b, 0);
  b = Math.min(b, 60000);
  var f = 40;
  d && (f = b);
  switch(this.checkFinish(c, f)) {
    case "Start":
      return d = 2, e && (d = 1), this.transferbuzzer(d, 238, b), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerScale:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 4, g && (f = 3), this.transferbuzzer(f, 12 * b + d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setBuzzerHz:function(c, b, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 60000);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return e = 6, f && (e = 5), b = Math.max(b, 1), b = Math.min(b, 63999), this.transferbuzzer(e, b, d), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibratorStop:function(c) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferVibrator(0, 0, 0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setVibrator:function(c, b, d, e, f, g) {
  e = Math.max(e, 0);
  e = Math.min(e, 60000);
  var h = 40;
  f && (h = e);
  switch(this.checkFinish(c, h)) {
    case "Start":
      return f = 2, g && (f = 1), this.transferVibrator(f, b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendIrMessage:function(c, b, d) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferIrMessage(b, d), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendStop:function(c) {
  return this.sendCommand(c, 48, 36, 0);
}, sendCommand:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setMotorSingle:function(c, b, d, e) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferMotorSingle(b, d, e), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setModeVehicle:function(c, b) {
  switch(this.checkFinish(c, 40)) {
    case "Start":
      return this.transferCommand(48, 16, b), this.transferControlQuad(0, 0, 0, 0), this.transferControlDouble(0, 0), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, setEventFlight:function(c, b, d) {
  switch(this.checkFinish(c, d)) {
    case "Start":
      return this.transferControlQuad(0, 0, 0, 0), this.transferCommand(48, 34, b), c;
    case "Running":
      return c;
    case "Finish":
      return c.callReturn();
    default:
      return c.callReturn();
  }
}, sendControlQuadSingle:function(c, b, d, e, f) {
  var g = 40;
  f && (g = e);
  switch(this.checkFinish(c, g)) {
    case "Start":
      return d = Math.max(d, -100), d = Math.min(d, 100), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue(b, d), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[b], c;
    case "Running":
      return c;
    case "Finish":
      return f && (Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue(b, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[b]), c.callReturn();
    default:
      return c.callReturn();
  }
}, sendControlQuad:function(c, b, d, e, f, g, h) {
  var k = 40;
  h && (k = g);
  switch(this.checkFinish(c, k)) {
    case "Start":
      return this.transferControlQuad(b, d, e, f), c;
    case "Running":
      return c;
    case "Finish":
      return h && this.transferControlQuad(0, 0, 0, 0), c.callReturn();
    default:
      return c.callReturn();
  }
}};
Entry.Chocopi = {name:"chocopi", p:{}, ev:{}, blocks:[], setZero:function() {
}, getport:function(c, b) {
  if (!this.blocks) {
    return -1;
  }
  if (this.blocks[b].id == c) {
    return b;
  }
  for (var d in this.blocks) {
    if (this.blocks[d].id == c) {
      return d;
    }
  }
  return -1;
}, connected:!1, portlist:[[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]], dataHandler:function(c) {
  this.connected || (this.connected = !0, Entry.hw.sendQueue.init = !0, Entry.hw.update(), delete Entry.hw.sendQueue.init, Entry.hw.sendQueue.data = {});
  if (c.d) {
    for (var b in c.d) {
      this.p[b] = c.d[b];
    }
  }
  if (c.ev) {
    for (b in c.ev) {
      this.ev[b] = c.ev[b], Entry.engine.fireEvent(this.blocks[b].name + "14");
    }
  }
  c.bl && (this.blocks = c.bl);
}};
Entry.Cobl = {name:"cobl", setZero:function() {
  for (var c = 0; 14 > c; c++) {
    Entry.hw.sendQueue[c] = 0;
  }
  Entry.hw.update();
}};
Blockly.Blocks.cobl_read_ultrason = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ucd08\uc74c\ud30c \uac70\ub9ac\uc7ac\uae30(0~400)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_ultrason = function(c, b) {
  return Entry.hw.getAnalogPortValue("ultrason");
};
Blockly.Blocks.cobl_read_potenmeter = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uac00\ubcc0\uc800\ud56d \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_potenmeter = function(c, b) {
  console.log("cobl_read_potenmeter");
  return Entry.hw.getAnalogPortValue("potenmeter");
};
Blockly.Blocks.cobl_read_irread1 = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("IR1 \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_irread1 = function(c, b) {
  return Entry.hw.getAnalogPortValue("potenmeter");
};
Blockly.Blocks.cobl_read_irread2 = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("IR2 \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_irread2 = function(c, b) {
  b.getValue("irread2", b);
  return Entry.hw.getAnalogPortValue("irread2");
};
Blockly.Blocks.cobl_read_joyx = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc870\uc774\uc2a4\ud2f1X\ucd95 \uc77d\uae30(1,0,-1)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_joyx = function(c, b) {
  return Entry.hw.getAnalogPortValue("joyx");
};
Blockly.Blocks.cobl_read_joyy = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc870\uc774\uc2a4\ud2f1Y\ucd95 \uc77d\uae30(1,0,-1)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_joyy = function(c, b) {
  return Entry.hw.getAnalogPortValue("joyy");
};
Blockly.Blocks.cobl_read_sens1 = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc13c\uc11c1 \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_sens1 = function(c, b) {
  return Entry.hw.getAnalogPortValue("sens1");
};
Blockly.Blocks.cobl_read_sens2 = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc13c\uc11c2 \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_sens2 = function(c, b) {
  return Entry.hw.getAnalogPortValue("sens2");
};
Blockly.Blocks.cobl_read_tilt = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uae30\uc6b8\uae30\uc13c\uc11c \uc77d\uae30(0~4)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_tilt = function(c, b) {
  return Entry.hw.getAnalogPortValue("tilt");
};
Blockly.Blocks.cobl_get_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.cobl_get_port_number = function(c, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.cobl_read_temps = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc628\ub3c4\uc13c\uc11c \uc77d\uae30@\ud3ec\ud2b8");
  this.appendValueInput("VALUE").setCheck("Number");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_temps = function(c, b) {
  c = b.getValue("VALUE", b);
  if (1 == c) {
    return Entry.hw.getAnalogPortValue("temps1");
  }
  if (2 == c) {
    return Entry.hw.getAnalogPortValue("temps2");
  }
};
Blockly.Blocks.cobl_read_light = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubc1d\uae30\uc13c\uc11c \uc77d\uae30@\ud3ec\ud2b8");
  this.appendValueInput("VALUE").setCheck("Number");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_light = function(c, b) {
  c = b.getValue("VALUE", b);
  if (1 == c) {
    return Entry.hw.getAnalogPortValue("light1");
  }
  if (2 == c) {
    return Entry.hw.getAnalogPortValue("light2");
  }
};
Blockly.Blocks.cobl_read_btn = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubc84\ud2bc\uc13c\uc11c \uc77d\uae30@\ud3ec\ud2b8");
  this.appendValueInput("VALUE").setCheck("Number");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.cobl_read_btn = function(c, b) {
  c = b.getValue("VALUE", b);
  if (1 == c) {
    return Entry.hw.getDigitalPortValue("btn1");
  }
  if (2 == c) {
    return Entry.hw.getDigitalPortValue("btn2");
  }
};
Blockly.Blocks.cobl_led_control = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Rainbow LED");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["OFF", "OFF"], ["Red", "Red"], ["Orange", "Orange"], ["Yellow", "Yellow"], ["Green", "Green"], ["Blue", "Blue"], ["Dark Blue", "Dark Blue"], ["Purple", "Purple"], ["White", "White"]]), "OPERATOR");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_led_control = function(c, b) {
  c = b.getStringField("PORT");
  var d = b.getStringField("OPERATOR");
  Entry.hw.setDigitalPortValue("RainBowLED_IDX", c);
  Entry.hw.setDigitalPortValue("RainBowLED_COL", d);
  return b.callReturn();
};
Blockly.Blocks.cobl_text = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldTextInput("cobl"), "NAME");
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.cobl_text = function(c, b) {
  return b.getStringField("NAME");
};
Blockly.Blocks.cobl_servo_angle_control = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Servo");
  this.appendValueInput("PORT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("Angle-");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("(15~165)");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_servo_angle_control = function(c, b) {
  console.log("servo - test");
  c = b.getNumberValue("PORT");
  var d = b.getNumberValue("VALUE"), d = Math.round(d), d = Math.max(d, 15), d = Math.min(d, 165);
  1 == c && (console.log("servo 1  degree " + d), Entry.hw.setDigitalPortValue("Servo1", d));
  2 == c && (console.log("servo 2 degree " + d), Entry.hw.setDigitalPortValue("Servo2", d));
  return b.callReturn();
};
Blockly.Blocks.cobl_melody = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Melody");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["(Low)So", "L_So"], ["(Low)So#", "L_So#"], ["(Low)La", "L_La"], ["(Low)La#", "L_La#"], ["(Low)Ti", "L_Ti"], ["Do", "Do"], ["Do#", "Do#"], ["Re", "Re"], ["Re#", "Re#"], ["Mi", "Mi"], ["Fa", "Fa"], ["Fa#", "Fa#"], ["So", "So"], ["So#", "So#"], ["La", "La"], ["La#", "La#"], ["Ti", "Ti"], ["(High)Do", "H_Do"], ["(High)Do#", "H_Do#"], ["(High)Re", "H_Re"], ["(High)R2#", "H_Re#"], ["(High)Mi", "H_Mi"], ["(High)Fa", "H_Fa"]]), "MELODY");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_melody = function(c, b) {
  c = b.getStringField("MELODY");
  console.log("cobl_melody" + c);
  Entry.hw.setDigitalPortValue("Melody", c);
  return b.callReturn();
};
Blockly.Blocks.cobl_dcmotor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("DcMotor");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"]]), "MOTOR");
  this.appendDummyInput().appendField(" ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1.Clockwise", "1"], ["2.Counter Clockwise", "2"], ["3.Stop", "3"]]), "DIRECTION");
  this.appendDummyInput().appendField(" Speed");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"]]), "SPEED");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_dcmotor = function(c, b) {
  c = b.getStringField("MOTOR");
  var d = b.getStringField("DIRECTION"), e = b.getStringField("SPEED");
  console.log("MOTOR" + c + "  Direction" + d + "  speed" + e);
  1 == c && (Entry.hw.setDigitalPortValue("DC1_DIR", d), Entry.hw.setDigitalPortValue("DC1_SPEED", e));
  2 == c && (Entry.hw.setDigitalPortValue("DC2_DIR", d), Entry.hw.setDigitalPortValue("DC2_SPEED", e));
  return b.callReturn();
};
Blockly.Blocks.cobl_extention_port = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Extention Port");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"]]), "PORT");
  this.appendDummyInput().appendField(" Level");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"]]), "LEVEL");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_extention_port = function(c, b) {
  c = b.getStringField("PORT");
  var d = b.getStringField("LEVEL");
  1 == c && Entry.hw.setDigitalPortValue("EXUSB1", d);
  2 == c && Entry.hw.setDigitalPortValue("EXUSB2", d);
  return b.callReturn();
};
Blockly.Blocks.cobl_external_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("External LED ");
  this.appendValueInput("LED").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(" (1~64)");
  this.appendDummyInput().appendField(" R ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]]), "RED");
  this.appendDummyInput().appendField(" G ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]]), "GREEN");
  this.appendDummyInput().appendField(" B ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]]), "BLUE");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_external_led = function(c, b) {
  c = b.getNumberValue("LED");
  var d = b.getStringField("RED"), e = b.getStringField("GREEN"), f = b.getStringField("BLUE");
  Entry.hw.setDigitalPortValue("ELED_IDX", c);
  Entry.hw.setDigitalPortValue("ELED_R", d);
  Entry.hw.setDigitalPortValue("ELED_G", e);
  Entry.hw.setDigitalPortValue("ELED_B", f);
  return b.callReturn();
};
Blockly.Blocks.cobl_7_segment = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("7 Segment");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("(0~9999)");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_7_segment = function(c, b) {
  c = b.getNumberValue("VALUE");
  Entry.hw.setDigitalPortValue("7SEG", c);
  return b.callReturn();
};
Entry.coconut = {PORT_MAP:{leftFloorValue:0, rightFloorValue:0, BothFloorDetection:0, leftProximityValue:0, rightProximityValue:0, BothProximityDetection:0, obstacleDetection:0, light:0, temp:0, extA2:0, extA3:0}, setZero:function() {
  Entry.hw.sendQueue.msgValue = [255, 85, 2, 0, 4];
  Entry.hw.update();
}, lineTracerModeId:0, lineTracerStateId:-1, tempo:60, timeouts:[], removeTimeout:function(c) {
  clearTimeout(c);
  var b = this.timeouts;
  c = b.indexOf(c);
  0 <= c && b.splice(c, 1);
}, removeAllTimeouts:function() {
  var c = this.timeouts, b;
  for (b in c) {
    clearTimeout(c[b]);
  }
  this.timeouts = [];
}, setLineTracerMode:function(c, b) {
  this.lineTracerModeId = this.lineTracerModeId + 1 & 255;
  c.lineTracerMode = b;
  c.lineTracerModeId = this.lineTracerModeId;
}, msgValue:0, insertQueue:function(c, b) {
  b.msgValue = c;
}, clearQueue:function(c) {
  c.msgValue = "";
}, move:function(c) {
  "string" == typeof c && (c = directions[c]);
  return runPackage(devices.Motor, 0, c, speed);
}, speed:60, directions:{Both:0, Left:1, Right:2, Forward:3, Backward:4}, devices:{LightSensor:14, Accelerometer:18, Temperature:21, Buzzer:3, IRdistance:5, Linetracer:7, IR:9, RGBled:25, Motor:26, LedMatrix:27, Digital:30, Analog:31, PWM:32, External:40, Speaker:41, ExtIR:42, ServoMotor:43, ExLed:44, ExtCds:45}, sharps:{"-":0, "#":1, b:2}, beats:{Half:500, Quater:250, Eighth:125, Sixteenth:63, "Thirty-second":32, Whole:1000, "Dotted half":750, "Dotted quarter":375, "Dotted eighth":188, "Dotted sixteenth":95, 
"Dotted thirty-second":48, Double:2000, Zero:0}, melodys:{"Twinkle Twinkle little star":1, "Three bears":2, "Mozart's Lullaby":3, "Do-Re-Mi":4, Butterfly:5}, colors:{Black:0, White:1, Red:2, Green:3, Blue:4, Yellow:5, Cyan:6, Magenta:7}, detectConds:{Yes:1, No:0}, sLetters:{a:0, b:1, c:2, d:3, e:4, f:5, g:6, h:7, i:8, j:9, k:10, l:11, m:12, n:13, o:14, p:15, q:16, r:17, s:18, t:19, u:20, v:21, w:22, x:23, y:24, z:25}, cLetters:{A:0, B:1, C:2, D:3, E:4, F:5, G:6, H:7, I:8, J:9, K:10, L:11, M:12, N:13, 
O:14, P:15, Q:16, R:17, S:18, T:19, U:20, V:21, W:22, X:23, Y:24, Z:25}, kLetters:{ga:0, na:1, da:2, la:3, ma:4, ba:5, sa:6, aa:7, ja:8, cha:9, ka:10, ta:11, pa:12, ha:13}, onOffs:{On:1, Off:0}, axiss:{"X-Axis":1, "Y-Axis":2, "Z-Axis":3}, pins:{D4:4, D10:10, D11:11, D12:12, A2:16, A3:17}, outputValues:{HIGH:1, LOW:0}, moveMotor:function(c) {
  "string" == typeof c && (c = this.directions[c]);
  return this.runPackage(this.devices.Motor, 0, c, this.speed);
}, moveMotorSpeed:function(c, b) {
  "string" == typeof c && (c = this.directions[c]);
  return this.runPackage(this.devices.Motor, 0, c, this.speed);
}, turnMotor:function(c) {
  "string" == typeof c && (c = this.directions[c]);
  return this.runPackage(this.devices.Motor, 0, c, this.speed);
}, stopMotor:function() {
  return this.runPackage(this.devices.Motor, 1);
}, moveTurnAngle:function(c, b) {
}, moveGoTime:function(c, b) {
  0 > b && (b = -b);
  "string" == typeof c && (c = this.directions[c]);
  return this.runPackage(this.devices.Motor, 3, c, this.speed, this.short2array(1000 * b));
}, turnMotorTime:function(c, b) {
  0 > b && (b = -b);
  "string" == typeof c && (c = this.directions[c]);
  return this.runPackage(this.devices.Motor, 3, c, this.speed, this.short2array(1000 * b));
}, moveMotorColor:function(c, b) {
  var d = this.devices.Motor;
  "string" == typeof c && (c = this.directions[c]);
  "string" == typeof b && (b = this.colors[b]);
  return this.runPackage(d, 5, c, this.speed, b);
}, moveMotorAngleColor:function(c, b, d) {
  var e = this.devices.Motor;
  "string" == typeof c && (c = this.directions[c]);
  "string" == typeof d && (d = this.colors[d]);
  "number" != typeof b && (b = 90);
  return this.runPackage(e, 6, c, this.short2array(0), this.short2array(b), this.short2array(0), d);
}, moveExtMotor:function(c, b) {
  "string" == typeof c && (c = this.directions[c]);
  return this.runPackage(this.devices.Motor, 7, c, b);
}, rgbOn:function(c, b) {
  "string" == typeof c && (c = this.directions[c]);
  "string" == typeof b && (b = this.colors[b]);
  return this.runPackage(this.devices.RGBled, 0, c, b);
}, rgbOff:function(c) {
  "string" == typeof c && (c = this.directions[c]);
  return this.runPackage(this.devices.RGBled, 1, c, 0);
}, rgbOffColor:function(c, b) {
  "string" == typeof c && (c = this.directions[c]);
  "string" == typeof b && (b = this.colors[b]);
  return this.runPackage(this.devices.RGBled, 1, c, b);
}, ledOnTime:function(c, b, d) {
  "string" == typeof c && (c = this.directions[c]);
  "string" == typeof b && (b = this.colors[b]);
  return this.runPackage(this.devices.RGBled, 3, c, b, this.short2array("number" != typeof d ? 0 : 0 > d ? 0 : 1000 * d));
}, beep:function() {
  return this.buzzerControl(0, 262, 50);
}, playBuzzerTime:function(c) {
  "number" != typeof c && (c = 0.5);
  0 > c && (c = 0.5);
  return this.buzzerControl(0, 262, 1000 * c);
}, playBuzzerFreq:function(c, b) {
  "number" != typeof b && (b = 0.5);
  0 > b && (b = 0.5);
  "number" != typeof c && (c = 300);
  0 > c && (c = 300);
  return this.buzzerControl(0, c, 1000 * b);
}, buzzerOff:function() {
  return this.buzzerControl(0, 0, 0);
}, playBuzzerNote:function(c, b, d) {
  c = this.getNote(c);
  "string" == typeof d && (d = this.beats[d]);
  return this.runPackage(devices.Buzzer, 2, c.charCodeAt(0), b, this.short2array(d));
}, playNote:function(c, b, d, e) {
  c = this.getNote(c);
  "string" == typeof e && (e = this.beats[e]);
  return this.runPackage(this.devices.Buzzer, 4, c.charCodeAt(0), b, d.charCodeAt(0), this.short2array(e));
}, getNote:function(c) {
  return c.split("_")[1];
}, restBeat:function(c) {
  "string" == typeof c && (c = c.split("_", 1), c = this.beats[c]);
  return this.buzzerControl(1, 0, c);
}, playBuzzerColor:function(c, b, d, e) {
  c = this.getNote(c);
  "string" == typeof d && (d = this.beats[d]);
  "string" == typeof e && (e = this.colors[e]);
  return this.runPackage(this.devices.Buzzer, 3, c.charCodeAt(0), b, this.short2array(d), e);
}, playNoteColor:function(c, b, d, e, f, g) {
  c = this.getNote(c);
  "string" == typeof e && (e = this.beats[e]);
  "string" == typeof f && (f = this.directions[f]);
  "string" == typeof g && (g = this.colors[g]);
  return this.runPackage(this.devices.Buzzer, 5, c.charCodeAt(0), b, d.charCodeAt(0), this.short2array(e), f, g);
}, playMelody:function(c) {
  "string" == typeof c && (c = this.melodys[c]);
  return this.runPackage(this.devices.Buzzer, 6, c);
}, buzzerControl:function(c, b, d) {
  var e = this.devices.Buzzer;
  "string" == typeof d && (d = this.beats[d]);
  return this.runPackage(e, c, this.short2array(b), this.short2array(d));
}, runBlink:function() {
  return this.runPackage(30, 13);
}, followLine:function() {
  return this.runPackage(this.devices.Linetracer, 3, this.speed);
}, followLineLevel:function(c, b) {
  "number" != typeof b && (b = 70);
  return this.runPackage(this.devices.Linetracer, 3, c, b);
}, setStandard:function(c, b) {
  "string" == typeof c && (c = this.directions[c]);
  return this.runPackage(this.devices.IRdistance, 0, c, b);
}, avoidMode:function() {
  return this.runPackage(this.devices.IRdistance, 3);
}, ledMatrixOn:function(c, b, d) {
  "string" == typeof c && (c = this.onOffs[c]);
  "string" == typeof b && "Both" == b && (b = 0);
  "string" == typeof d && "Both" == d && (d = 0);
  return this.runPackage(this.devices.LedMatrix, 0, b, d, c);
}, ledMatrixOff:function(c, b) {
  return this.runPackage(this.devices.LedMatrix, 0, c, b, 0);
}, ledMatrixClear:function() {
  return this.runPackage(this.devices.LedMatrix, 5);
}, ledMatrixOnAll:function() {
  return this.runPackage(this.devices.LedMatrix, 6);
}, showLedMatrix:function(c) {
  return this.runPackage(this.devices.LedMatrix, 1, c);
}, showLedMatrixSmall:function(c) {
  "string" == typeof c && (c = this.sLetters[c]);
  return this.runPackage(this.devices.LedMatrix, 2, c);
}, showLedMatrixLarge:function(c) {
  "string" == typeof c && (c = this.cLetters[c]);
  return this.runPackage(this.devices.LedMatrix, 3, c);
}, showLedMatrixKorean:function(c) {
  "string" == typeof c && (c = this.kLetters[c]);
  return this.runPackage(this.devices.LedMatrix, 4, c);
}, sendMessage:function(c) {
  return this.runPackage(this.devices.IR, this.string2array(c));
}, extLedOn:function(c, b) {
  "string" == typeof c && (c = this.pins[c]);
  return this.runPackage(this.devices.ExLed, c, this.short2array(1000 * b));
}, playSpeaker:function(c, b, d) {
  "string" == typeof c && (c = this.pins[c]);
  d *= 1000;
  return this.runPackage(this.devices.Speaker, c, this.short2array(b), this.short2array(d));
}, stopSpeaker:function(c) {
  "string" == typeof c && (c = this.pins[c]);
  return this.runPackage(this.devices.Speaker, c, this.short2array(0), this.short2array(0));
}, runExtServo:function(c, b) {
  "string" == typeof c && (c = this.pins[c]);
  return this.runPackage(this.devices.ServoMotor, c, b);
}, digitalWrite:function(c, b) {
  "string" == typeof b && (b = this.outputValues[b]);
  return this.runPackage(this.devices.Digital, c, b);
}, analogWrite:function(c, b) {
  "number" != typeof b ? b = 0 : 255 < b && (b = 255);
  return this.runPackage(this.devices.Analog, c, b);
}, readFloat:function(c, b) {
  return parseFloat([c[b], c[b + 1], c[b + 2], c[b + 3]]);
}, readShort:function(c, b) {
  return parseShort([c[postion], c[postion + 1]]);
}, readDouble:function(c, b) {
  return readFloat(c, b);
}, readString:function(c, b, d) {
  c = "";
  for (var e = 0; e < d; e++) {
    c += String.fromCharCode(_rxBuf[e + b]);
  }
  return c;
}, short2array:function(c) {
  for (var b = {}, d = 0; 2 > d; d++) {
    var e = c & 255;
    b[d] = e;
    c = (c - e) / 256;
  }
  return [b[0], b[1]];
}, runPackage:function() {
  for (var c = [255, 85, 0, 0, 2], b = 0; b < arguments.length; b++) {
    "[class Array]" == arguments[b].constructor ? c = c.concat(arguments[b]) : 2 == arguments[b].length ? c = c.concat(arguments[b]) : c.push(arguments[b]);
  }
  c[2] = c.length - 3;
  return c;
}, name:"coconut", monitorTemplate:{imgPath:"hw/coconut.png", width:256, height:256, listPorts:{temperature:{name:Lang.Blocks.coconut_sensor_temperature, type:"input", pos:{x:0, y:0}}, accelerationX:{name:Lang.Blocks.coconut_sensor_acceleration_x, type:"input", pos:{x:0, y:0}}, accelerationY:{name:Lang.Blocks.coconut_sensor_acceleration_y, type:"input", pos:{x:0, y:0}}, accelerationZ:{name:Lang.Blocks.coconut_sensor_acceleration_z, type:"input", pos:{x:0, y:0}}}, ports:{leftProximityValue:{name:Lang.Blocks.coconut_sensor_left_proximity, 
type:"input", pos:{x:122, y:156}}, rightProximityValue:{name:Lang.Blocks.coconut_sensor_right_proximity, type:"input", pos:{x:10, y:108}}, leftFloorValue:{name:Lang.Blocks.coconut_sensor_left_floor, type:"input", pos:{x:100, y:234}}, rightFloorValue:{name:Lang.Blocks.coconut_sensor_right_floor, type:"input", pos:{x:13, y:180}}, light:{name:Lang.Blocks.coconut_sensor_light, type:"input", pos:{x:56, y:189}}}, mode:"both"}};
Entry.Codestar = {name:"codestar", setZero:function() {
  Entry.hw.sendQueue.readablePorts = [];
  for (var c = 0; 20 > c; c++) {
    Entry.hw.sendQueue[c] = 0, Entry.hw.sendQueue.readablePorts.push(c);
  }
  Entry.hw.update();
}, monitorTemplate:{imgPath:"hw/codestar.png", width:333, height:409, listPorts:{13:{name:"\uc9c4\ub3d9\ubaa8\ud130", type:"output", pos:{x:0, y:0}}, tilt:{name:"\uae30\uc6b8\uae30\uc13c\uc11c", type:"input", pos:{x:0, y:0}}}, ports:{7:{name:"\ube68\uac04\uc0c9", type:"output", pos:{x:238, y:108}}, 8:{name:"\ud30c\ub780\uc0c9", type:"output", pos:{x:265, y:126}}, 9:{name:"3\uc0c9 \ube68\uac04\uc0c9", type:"output", pos:{x:292, y:34}}, 10:{name:"3\uc0c9 \ub179\uc0c9", type:"output", pos:{x:292, y:34}}, 
11:{name:"3\uc0c9 \ud30c\ub780\uc0c9", type:"output", pos:{x:292, y:34}}, 12:{name:"\ubc84\ud2bc", type:"input", pos:{x:248, y:142}}, a0:{name:"\uc67c\ucabd \ubcbd\uac10\uc9c0", type:"input", pos:{x:24, y:231}}, a2:{name:"\ub9c8\uc774\ud06c", type:"input", pos:{x:225, y:67}}, a3:{name:"\ubd80\uc800", type:"output", pos:{x:283, y:105}}, a4:{name:"\uc67c\ucabd \ub77c\uc778\uac10\uc9c0", type:"input", pos:{x:37, y:353}}, a5:{name:"\uc624\ub978\ucabd \ub77c\uc778\uac10\uc9c0", type:"input", pos:{x:50, 
y:368}}, a6:{name:"\uc870\ub3c4\uc13c\uc11c", type:"input", pos:{x:273, y:22}}, a7:{name:"\uc624\ub978\ucabd \ubcbd\uac10\uc9c0", type:"input", pos:{x:103, y:381}}, temperature:{name:"\uc628\ub3c4\uc13c\uc11c", type:"input", pos:{x:311, y:238}}, sonar:{name:"\ucd08\uc74c\ud30c\uc13c\uc11c", type:"input", pos:{x:7, y:277}}, leftwheel:{name:"\uc67c\ucabd \ubc14\ud034", type:"output", pos:{x:177, y:370}}, rightwheel:{name:"\uc624\ub978\ucabd \ubc14\ud034", type:"output", pos:{x:83, y:218}}}, mode:"both"}};
Entry.DaduBlock = {name:"dadublock", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(c) {
    Entry.hw.sendQueue.SET[c].data = 0;
    Entry.hw.sendQueue.SET[c].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 5588], 7:[46, 92, 185, 370, 740, 1480, 2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 
1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, BlockState:{}};
Entry.DaduBlock_Car = {name:"dadublock_car", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(c) {
    Entry.hw.sendQueue.SET[c].data = 0;
    Entry.hw.sendQueue.SET[c].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 5588], 7:[46, 92, 185, 370, 740, 1480, 2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 
1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, BlockState:{}};
Entry.EV3 = {PORT_MAP:{A:0, B:0, C:0, D:0, 1:void 0, 2:void 0, 3:void 0, 4:void 0}, motorMovementTypes:{Degrees:0, Power:1}, deviceTypes:{NxtTouch:1, NxtLight:2, NxtSound:3, NxtColor:4, NxtUltrasonic:5, NxtTemperature:6, LMotor:7, MMotor:8, Touch:16, Color:29, Ultrasonic:30, Gyroscope:32, Infrared:33, Initializing:125, Empty:126, WrongPort:127, Unknown:255}, colorSensorValue:" 000000 0000FF 00FF00 FFFF00 FF0000 FFFFFF A52A2A".split(" "), timeouts:[], removeTimeout:function(c) {
  clearTimeout(c);
  var b = this.timeouts;
  c = b.indexOf(c);
  0 <= c && b.splice(c, 1);
}, removeAllTimeouts:function() {
  var c = this.timeouts, b;
  for (b in c) {
    clearTimeout(c[b]);
  }
  this.timeouts = [];
}, setZero:function() {
  var c = this.PORT_MAP;
  Object.keys(c).forEach(function(b) {
    /[A-D]/i.test(b) ? Entry.hw.sendQueue[b] = {type:Entry.EV3.motorMovementTypes.Power, power:0} : Entry.hw.sendQueue[b] = c[b];
  });
  Entry.hw.update();
}, name:"EV3"};
Blockly.Blocks.ev3_get_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]]), "PORT").appendField("\uc758 \uac12");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.ev3_get_sensor_value = function(c, b) {
  b.getStringField("PORT", b);
  c = Entry.hw.getDigitalPortValue(b.getNumberField("PORT", b));
  var d;
  $.isPlainObject(c) && (d = c.siValue || 0);
  return d;
};
Blockly.Blocks.ev3_touch_sensor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]]), "PORT").appendField("\uc758 \ud130\uce58\uc13c\uc11c\uac00 \uc791\ub3d9\ub418\uc5c8\ub294\uac00?");
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Entry.block.ev3_touch_sensor = function(c, b) {
  b.getStringField("PORT", b);
  c = Entry.hw.getDigitalPortValue(b.getNumberField("PORT", b));
  b = !1;
  c.type == Entry.EV3.deviceTypes.Touch && 1 <= Number(c.siValue) && (b = !0);
  return b;
};
Blockly.Blocks.ev3_color_sensor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]]), "PORT").appendField("\uc758 ").appendField(new Blockly.FieldDropdown([["RGB", "RGB"], ["R", "R"], ["G", "G"], ["B", "B"]]), "RGB").appendField("\uac12");
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.ev3_color_sensor = function(c, b) {
  b.getStringField("PORT", b);
  c = b.getStringField("RGB", b);
  b = Entry.hw.getDigitalPortValue(b.getNumberField("PORT", b));
  var d = "";
  if (b.type == Entry.EV3.deviceTypes.Color) {
    if (0 == b.siValue) {
      d = "";
    } else {
      switch(c) {
        case "RGB":
          d = Entry.EV3.colorSensorValue[b.siValue];
          break;
        case "R":
          d = Entry.EV3.colorSensorValue[b.siValue].substring(0, 2);
          break;
        case "G":
          d = Entry.EV3.colorSensorValue[b.siValue].substring(2, 4);
          break;
        case "B":
          d = Entry.EV3.colorSensorValue[b.siValue].substring(4, 6);
      }
    }
  } else {
    d = "\uceec\ub7ec \uc13c\uc11c \uc544\ub2d8";
  }
  return d;
};
Blockly.Blocks.ev3_motor_power = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"]]), "PORT").appendField("\uc758 \uac12\uc744");
  this.appendValueInput("VALUE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\uc73c\ub85c \ucd9c\ub825");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.ev3_motor_power = function(c, b) {
  c = b.getStringField("PORT", b);
  var d = b.getValue("VALUE", b);
  Entry.hw.sendQueue[c] = {id:Math.floor(100000 * Math.random(), 0), type:Entry.EV3.motorMovementTypes.Power, power:d};
  return b.callReturn();
};
Blockly.Blocks.ev3_motor_power_on_time = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"]]), "PORT").appendField("\uc758 \uac12\uc744");
  this.appendValueInput("TIME").setCheck(["Number"]);
  this.appendDummyInput().appendField("\ucd08 \ub3d9\uc548");
  this.appendValueInput("VALUE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\uc73c\ub85c \ucd9c\ub825");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.ev3_motor_power_on_time = function(c, b) {
  c = b.getStringField("PORT", b);
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    Entry.hw.sendQueue[c] = {id:Math.floor(100000 * Math.random(), 0), type:Entry.EV3.motorMovementTypes.Power, power:0};
    return b.callReturn();
  }
  var d = b.getValue("TIME", b), e = b.getValue("VALUE", b);
  b.isStart = !0;
  b.timeFlag = 1;
  Entry.hw.sendQueue[c] = {id:Math.floor(100000 * Math.random(), 0), type:Entry.EV3.motorMovementTypes.Power, power:e};
  var f = setTimeout(function() {
    b.timeFlag = 0;
    Entry.EV3.removeTimeout(f);
  }, 1000 * d);
  Entry.EV3.timeouts.push(f);
  return b;
};
Blockly.Blocks.ev3_motor_degrees = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"]]), "PORT").appendField("\uc758 \uac12\uc744").appendField(new Blockly.FieldDropdown([["\uc2dc\uacc4\ubc29\ud5a5", "CW"], ["\ubc18\uc2dc\uacc4\ubc29\ud5a5", "CCW"]]), "DIRECTION").appendField("\uc73c\ub85c ");
  this.appendValueInput("DEGREE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\ub3c4 \ub9cc\ud07c \ud68c\uc804");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.ev3_motor_degrees = function(c, b) {
  c = b.getStringField("PORT", b);
  var d = b.getValue("DEGREE", b);
  0 >= d ? d = 0 : 720 <= d && (d = 720);
  var e = b.getStringField("DIRECTION", b);
  Entry.hw.sendQueue[c] = {id:Math.floor(100000 * Math.random(), 0), type:Entry.EV3.motorMovementTypes.Degrees, degree:d, power:"CW" == e ? 50 : -50};
  return b.callReturn();
};
Entry.Hamster = {PORT_MAP:{motion:0, leftWheel:0, rightWheel:0, buzzer:0, outputA:0, outputB:0, leftLed:0, rightLed:0, note:0, lineTracerMode:0, lineTracerModeId:0, lineTracerSpeed:5, ioModeA:0, ioModeB:0}, setZero:function() {
  var c = Entry.Hamster.PORT_MAP, b = Entry.hw.sendQueue, d;
  for (d in c) {
    b[d] = c[d];
  }
  Entry.hw.update();
  c = Entry.Hamster;
  c.lineTracerModeId = 0;
  c.lineTracerStateId = -1;
  c.tempo = 60;
  c.boardCommand = 0;
  c.removeAllTimeouts();
}, lineTracerModeId:0, lineTracerStateId:-1, tempo:60, boardCommand:60, timeouts:[], removeTimeout:function(c) {
  clearTimeout(c);
  var b = this.timeouts;
  c = b.indexOf(c);
  0 <= c && b.splice(c, 1);
}, removeAllTimeouts:function() {
  var c = this.timeouts, b;
  for (b in c) {
    clearTimeout(c[b]);
  }
  this.timeouts = [];
}, setModule:function(c) {
  c.module = "hamster";
}, setLineTracerMode:function(c, b) {
  this.lineTracerModeId = this.lineTracerModeId % 255 + 1;
  c.lineTracerMode = b;
  c.lineTracerModeId = this.lineTracerModeId;
}, name:"hamster", monitorTemplate:{imgPath:"hw/hamster.png", width:256, height:256, listPorts:{temperature:{name:Lang.Blocks.HAMSTER_sensor_temperature, type:"input", pos:{x:0, y:0}}, inputA:{name:Lang.Blocks.HAMSTER_sensor_input_a, type:"input", pos:{x:0, y:0}}, inputB:{name:Lang.Blocks.HAMSTER_sensor_input_b, type:"input", pos:{x:0, y:0}}, accelerationX:{name:Lang.Blocks.HAMSTER_sensor_acceleration_x, type:"input", pos:{x:0, y:0}}, accelerationY:{name:Lang.Blocks.HAMSTER_sensor_acceleration_y, 
type:"input", pos:{x:0, y:0}}, accelerationZ:{name:Lang.Blocks.HAMSTER_sensor_acceleration_z, type:"input", pos:{x:0, y:0}}, buzzer:{name:Lang.Hw.buzzer, type:"output", pos:{x:0, y:0}}, note:{name:Lang.Hw.note, type:"output", pos:{x:0, y:0}}, outputA:{name:Lang.Hw.output + "A", type:"output", pos:{x:0, y:0}}, outputB:{name:Lang.Hw.output + "B", type:"output", pos:{x:0, y:0}}}, ports:{leftProximity:{name:Lang.Blocks.HAMSTER_sensor_left_proximity, type:"input", pos:{x:122, y:156}}, rightProximity:{name:Lang.Blocks.HAMSTER_sensor_right_proximity, 
type:"input", pos:{x:10, y:108}}, leftFloor:{name:Lang.Blocks.HAMSTER_sensor_left_floor, type:"input", pos:{x:100, y:234}}, rightFloor:{name:Lang.Blocks.HAMSTER_sensor_right_floor, type:"input", pos:{x:13, y:180}}, light:{name:Lang.Blocks.HAMSTER_sensor_light, type:"input", pos:{x:56, y:189}}, leftWheel:{name:Lang.Hw.leftWheel, type:"output", pos:{x:209, y:115}}, rightWheel:{name:Lang.Hw.rightWheel, type:"output", pos:{x:98, y:30}}, leftLed:{name:Lang.Hw.left + " " + Lang.Hw.led_en, type:"output", 
pos:{x:87, y:210}}, rightLed:{name:Lang.Hw.right + " " + Lang.Hw.led_en, type:"output", pos:{x:24, y:168}}}, mode:"both"}};
Entry.iboard = {name:"iboard", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(c) {
    Entry.hw.sendQueue.SET[c].data = 0;
    Entry.hw.sendQueue.SET[c].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8}, toneTable:{0:0, C:1, CS:2, D:3, DS:4, E:5, F:6, FS:7, G:8, GS:9, A:10, AS:11, B:12}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 5588], 7:[46, 92, 185, 370, 740, 1480, 
2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, highList:["high", "1", "on"], lowList:["low", "0", "off"], BlockState:{}};
Entry.Mechatronics_4D = {name:"mechatronics_4d", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(c) {
    Entry.hw.sendQueue.SET[c].data = 0;
    Entry.hw.sendQueue.SET[c].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8}, toneTable:{0:0, C:1, CS:2, D:3, DS:4, E:5, F:6, FS:7, G:8, GS:9, A:10, AS:11, B:12}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 5588], 7:[46, 92, 185, 370, 740, 1480, 
2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, highList:["high", "1", "on"], lowList:["low", "0", "off"], BlockState:{}};
Entry.MODI = {name:"modi", setZero:function() {
  Entry.hw.sendQueue.moduleValue = {led:[], motor:[], speaker:[], display:[]};
  Entry.hw.sendQueue.getProperty = {};
  Entry.hw.getModule = {id:0, property:0};
  Entry.hw.update();
}, initSend:function() {
  Entry.hw.sendQueue.moduleValue = {led:[], motor:[], speaker:[], display:[]};
  Entry.hw.sendQueue.getProperty = {};
  Entry.hw.getModule = {id:0, property:0};
  Entry.hw.update();
}, getModule:{id:0, property:0}, microphoneList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.mic) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.mic.length; d++) {
    c.mic[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}, environmentList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.environment) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.environment.length; d++) {
    c.environment[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}, dialList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.dial) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.dial.length; d++) {
    c.dial[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}, gyroscopeList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.gyro) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.gyro.length; d++) {
    c.gyro[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}, buttonList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.button) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.button.length; d++) {
    c.button[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}, infraredList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.ir) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.ir.length; d++) {
    c.ir[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}, ultrasonicList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.ultrasonic) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.ultrasonic.length; d++) {
    c.ultrasonic[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}, motorList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.motor) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.motor.length; d++) {
    c.motor[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}, ledList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.led) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.led.length; d++) {
    c.led[d] && b.push([d, d]);
  }
  return b;
}, speakerList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.speaker) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.speaker.length; d++) {
    c.speaker[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}, displayList:function() {
  var c = Entry.hw.portData.module || {};
  if (void 0 === c.display) {
    return [[Lang.Blocks.no_target, "null"]];
  }
  var b = [];
  for (var d = 0; d < c.display.length; d++) {
    c.display[d] && b.push([d.toString(), d.toString()]);
  }
  return b;
}};
Blockly.Blocks.modi_microphone_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ub9c8\uc774\ud06c").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.microphoneList), "name").appendField("\ubc88\uc758 \ubcfc\ub968");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Blockly.Blocks.modi_environment_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ud658\uacbd\uc13c\uc11c").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.environmentList), "name").appendField("\ubc88\uc758 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.modi_enviroment_temperature, "\uc628\ub3c4"], [Lang.Blocks.modi_enviroment_humidity, "\uc2b5\ub3c4"], [Lang.Blocks.modi_enviroment_illuminance, "\uc870\ub3c4"]]), "envValue");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Blockly.Blocks.moid_dial_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ub2e4\uc774\uc5bc").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.dialList), "name").appendField("\ubc88\uc758 \uac01\ub3c4");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Blockly.Blocks.modi_gyroscope_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc790\uc774\ub85c\uc13c\uc11c").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.gyroscopeList), "name").appendField("\ubc88\uc758 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["Roll", "Roll"], ["Pitch", "Pitch"], ["Yaw", "Yaw"], [Lang.Blocks.modi_gyroscope_xAcceleratior, "X\ucd95 \uac00\uc18d"], [Lang.Blocks.modi_gyroscope_yAcceleratior, "Y\ucd95 \uac00\uc18d"], [Lang.Blocks.modi_gyroscope_zAcceleratior, "Z\ucd95 \uac00\uc18d"]]), "gyroValue");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Blockly.Blocks.modi_button_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubc84\ud2bc ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.buttonList), "name").appendField("\ubc88\uc758 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["Click", "Click"], ["Double Click", "Double Click"], ["Toggle", "Toggle"], ["Press", "Press"]]), "buttonValue");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Blockly.Blocks.modi_is_button_touch = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubc84\ud2bc ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.buttonList), "name").appendField("\ubc88\uc758 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["Click", "Click"], ["Double Click", "Double Click"], ["Toggle", "Toggle"], ["Press", "Press"]]), "buttonValue").appendField("\ud588\ub294\uac00?");
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Blockly.Blocks.modi_button_true = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ub20c\ub9bc");
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Blockly.Blocks.modi_button_false = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc548\ub20c\ub9bc");
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Blockly.Blocks.modi_infrared_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc801\uc678\uc120").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.infraredList), "name").appendField("\ubc88 \uc13c\uc11c\uc758 \uac70\ub9ac(%)");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Blockly.Blocks.modi_ultrasonic_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ucd08\uc74c\ud30c").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.ultrasonicList), "name").appendField("\ubc88 \uc13c\uc11c\uc758 \uac70\ub9ac(%)");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Blockly.Blocks.modi_set_motor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubaa8\ud130 ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.motorList), "name").appendField("\ubc88 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.modi_motor_angle, "\uac01\ub3c4"], [Lang.Blocks.modi_motor_speed, "\uc18d\ub3c4"], [Lang.Blocks.modi_motor_torque, "\ud68c\uc804"]]), "motorValue").appendField("\uc758 \uc0c1\ub2e8\uac12\uc740 ");
  this.appendValueInput("uValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ud558\ub2e8\uac12\uc740 ");
  this.appendValueInput("bValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(" (\uc73c)\ub85c \uc815\ud558\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_change_motor_upper_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubaa8\ud130 ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.motorList), "name").appendField("\ubc88 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.modi_motor_angle, "\uac01\ub3c4"], [Lang.Blocks.modi_motor_speed, "\uc18d\ub3c4"], [Lang.Blocks.modi_motor_torque, "\ud68c\uc804"]]), "motorValue").appendField("\uc758 \uc0c1\ub2e8\uac12\uc744 ");
  this.appendValueInput("uValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub9cc\ud07c \ubc14\uafb8\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_change_motor_bottom_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubaa8\ud130 ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.motorList), "name").appendField("\ubc88 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.modi_motor_angle, "\uac01\ub3c4"], [Lang.Blocks.modi_motor_speed, "\uc18d\ub3c4"], [Lang.Blocks.modi_motor_torque, "\ud68c\uc804"]]), "motorValue").appendField("\uc758 \ud558\ub2e8\uac12\uc744 ");
  this.appendValueInput("bValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub9cc\ud07c \ubc14\uafb8\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_clear_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("LED ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.ledList), "name").appendField("\ubc88\uc758 \uc0c9 \ub044\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_set_led_rgb = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("LED ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.ledList), "name").appendField("\ubc88 R");
  this.appendValueInput("rValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("G");
  this.appendValueInput("gValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("B");
  this.appendValueInput("bValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("(\uc73c)\ub85c \ucf1c\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_set_led_color = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("LED ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.ledList), "name").appendField("\ubc88 \uc0c9").appendField(new Blockly.FieldColour("#ff0000"), "color").appendField("\ub85c \uc815\ud558\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_set_basic_speaker = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc2a4\ud53c\ucee4 ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.speakerList), "name").appendField("\ubc88\uc744").appendField(new Blockly.FieldDropdown([[Lang.Blocks.modi_speaker_F_DO_4, "\ub3c44"], [Lang.Blocks.modi_speaker_F_RE_4, "\ub8084"], [Lang.Blocks.modi_speaker_F_MI_4, "\ubbf84"], [Lang.Blocks.modi_speaker_F_PA_4, "\ud30c4"], [Lang.Blocks.modi_speaker_F_SOL_4, "\uc1944"], [Lang.Blocks.modi_speaker_F_RA_4, "\ub77c4"], [Lang.Blocks.modi_speaker_F_SO_4, 
  "\uc2dc4"], [Lang.Blocks.modi_speaker_F_DO_S_4, "\ub3c4#4"], [Lang.Blocks.modi_speaker_F_RE_S_4, "\ub808#4"], [Lang.Blocks.modi_speaker_F_PA_S_4, "\ud30c#4"], [Lang.Blocks.modi_speaker_F_SOL_S_4, "\uc194#4"], [Lang.Blocks.modi_speaker_F_RA_S_4, "\ub77c#4"], [Lang.Blocks.modi_speaker_F_DO_5, "\ub3c45"], [Lang.Blocks.modi_speaker_F_RE_5, "\ub8085"], [Lang.Blocks.modi_speaker_F_MI_5, "\ubbf85"], [Lang.Blocks.modi_speaker_F_PA_5, "\ud30c5"], [Lang.Blocks.modi_speaker_F_SOL_5, "\uc1945"], [Lang.Blocks.modi_speaker_F_RA_5, 
  "\ub77c5"], [Lang.Blocks.modi_speaker_F_SO_5, "\uc2dc5"], [Lang.Blocks.modi_speaker_F_DO_S_5, "\ub3c4#5"], [Lang.Blocks.modi_speaker_F_RE_S_5, "\ub77c#5"], [Lang.Blocks.modi_speaker_F_PA_S_5, "\ud30c#5"], [Lang.Blocks.modi_speaker_F_SOL_S_5, "\uc194#5"], [Lang.Blocks.modi_speaker_F_RA_S_5, "\ub77c#5"], [Lang.Blocks.modi_speaker_F_DO_6, "\ub3c46"], [Lang.Blocks.modi_speaker_F_RE_6, "\ub8086"], [Lang.Blocks.modi_speaker_F_MI_6, "\ubbf86"], [Lang.Blocks.modi_speaker_F_PA_6, "\ud30c6"], [Lang.Blocks.modi_speaker_F_SOL_6, 
  "\uc1946"], [Lang.Blocks.modi_speaker_F_RA_6, "\ub77c6"], [Lang.Blocks.modi_speaker_F_SO_6, "\uc2dc6"], [Lang.Blocks.modi_speaker_F_DO_S_6, "\ub3c4#6"], [Lang.Blocks.modi_speaker_F_RE_S_6, "\ub808#6"], [Lang.Blocks.modi_speaker_F_PA_S_6, "\ud30c#6"], [Lang.Blocks.modi_speaker_F_SOL_S_6, "\uc194#6"], [Lang.Blocks.modi_speaker_F_RA_S_6, "\ub77c#6"], [Lang.Blocks.modi_speaker_F_DO_7, "\ub3c47"], [Lang.Blocks.modi_speaker_F_RE_7, "\ub8087"], [Lang.Blocks.modi_speaker_F_MI_7, "\ubbf87"], [Lang.Blocks.modi_speaker_F_PA_7, 
  "\ud30c7"], [Lang.Blocks.modi_speaker_F_SOL_7, "\uc1947"], [Lang.Blocks.modi_speaker_F_RA_7, "\ub77c7"], [Lang.Blocks.modi_speaker_F_SO_7, "\uc2dc7"], [Lang.Blocks.modi_speaker_F_DO_S_7, "\ub3c4#7"], [Lang.Blocks.modi_speaker_F_RE_S_7, "\ub808#7"], [Lang.Blocks.modi_speaker_F_PA_S_7, "\ud30c#7"], [Lang.Blocks.modi_speaker_F_SOL_S_7, "\uc194#7"], [Lang.Blocks.modi_speaker_F_RA_S_7, "\ub77c#7"]]), "speakerValue");
  this.appendDummyInput().appendField("\uc74c\uc73c\ub85c \ud06c\uae30\ub294");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("(\uc73c)\ub85c \uc815\ud558\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_set_custom_speaker = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc2a4\ud53c\ucee4 ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.speakerList), "name").appendField("\ubc88\uc758 \uc9c4\ub3d9\uc218\ub294");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ud06c\uae30\ub294 ");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("(\uc73c)\ub85c \uc815\ud558\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_change_speaker_frequence = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc2a4\ud53c\ucee4 ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.speakerList), "name").appendField("\ubc88\uc758 \uc9c4\ub3d9\uc218\ub97c");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub9cc\ud07c \ubc14\uafb8\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_change_speaker_volume = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc2a4\ud53c\ucee4 ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.speakerList), "name").appendField("\ubc88\uc758 \ud06c\uae30\ub97c");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub9cc\ud07c \ubc14\uafb8\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Blockly.Blocks.modi_print_display_by_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ub514\uc2a4\ud50c\ub808\uc774 ").appendField(new Blockly.FieldDropdownDynamic(Entry.MODI.displayList), "name").appendField("\ubc88\uc758 \ud654\uba74\uc5d0");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ubcf4\uc774\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.Neobot = {name:"neobot", LOCAL_MAP:["IN1", "IN2", "IN3", "IR", "BAT"], REMOTE_MAP:"OUT1 OUT2 OUT3 DCR DCL SND FND OPT".split(" "), setZero:function() {
  for (var c in Entry.Neobot.REMOTE_MAP) {
    Entry.hw.sendQueue[Entry.Neobot.REMOTE_MAP[c]] = 0;
  }
  Entry.hw.update();
}, monitorTemplate:{imgPath:"hw/neobot.png", width:700, height:700, listPorts:{IR:{name:"\ub9ac\ubaa8\ucee8", type:"input", pos:{x:0, y:0}}, BAT:{name:"\ubca0\ud130\ub9ac", type:"input", pos:{x:0, y:0}}, SND:{name:Lang.Hw.buzzer, type:"output", pos:{x:0, y:0}}, FND:{name:"FND", type:"output", pos:{x:0, y:0}}}, ports:{IN1:{name:"IN1", type:"input", pos:{x:270, y:200}}, IN2:{name:"IN2", type:"input", pos:{x:325, y:200}}, IN3:{name:"IN3", type:"input", pos:{x:325, y:500}}, DCL:{name:"L-Motor", type:"output", 
pos:{x:270, y:500}}, DCR:{name:"R-Motor", type:"output", pos:{x:435, y:500}}, OUT1:{name:"OUT1", type:"output", pos:{x:380, y:200}}, OUT2:{name:"OUT2", type:"output", pos:{x:435, y:200}}, OUT3:{name:"OUT3", type:"output", pos:{x:380, y:500}}}, mode:"both"}};
Blockly.Blocks.neobot_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["1\ubc88 \ud3ec\ud2b8", "IN1"], ["2\ubc88 \ud3ec\ud2b8", "IN2"], ["3\ubc88 \ud3ec\ud2b8", "IN3"], ["\ub9ac\ubaa8\ucee8", "IR"], ["\ubc30\ud130\ub9ac", "BAT"]]), "PORT").appendField(" \uac12");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.neobot_sensor_value = function(c, b) {
  c = b.getStringField("PORT");
  return Entry.hw.portData[c];
};
Blockly.Blocks.neobot_left_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc67c\ucabd\ubaa8\ud130\ub97c").appendField(new Blockly.FieldDropdown([["\uc55e\uc73c\ub85c", "16"], ["\ub4a4\ub85c", "32"]]), "DIRECTION").appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"]]), "SPEED").appendField("\uc758 \uc18d\ub3c4\ub85c \ud68c\uc804").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + 
  "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_left_motor = function(c, b) {
  c = b.getNumberField("SPEED");
  var d = b.getNumberField("DIRECTION");
  Entry.hw.sendQueue.DCL = c + d;
  return b.callReturn();
};
Blockly.Blocks.neobot_stop_left_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc67c\ucabd\ubaa8\ud130 \uc815\uc9c0").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_stop_left_motor = function(c, b) {
  Entry.hw.sendQueue.DCL = 0;
  return b.callReturn();
};
Blockly.Blocks.neobot_right_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc624\ub978\ucabd\ubaa8\ud130\ub97c").appendField(new Blockly.FieldDropdown([["\uc55e\uc73c\ub85c", "16"], ["\ub4a4\ub85c", "32"]]), "DIRECTION").appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"]]), "SPEED").appendField("\uc758 \uc18d\ub3c4\ub85c \ud68c\uc804").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + 
  "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_right_motor = function(c, b) {
  c = b.getNumberField("SPEED");
  var d = b.getNumberField("DIRECTION");
  Entry.hw.sendQueue.DCR = c + d;
  return b.callReturn();
};
Blockly.Blocks.neobot_stop_right_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc624\ub978\ucabd\ubaa8\ud130 \uc815\uc9c0").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_stop_right_motor = function(c, b) {
  Entry.hw.sendQueue.DCR = 0;
  return b.callReturn();
};
Blockly.Blocks.neobot_all_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc591\ucabd \ubaa8\ud130\ub97c ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"]]), "SPEED").appendField(" \uc758 \uc18d\ub3c4\ub85c ").appendField(new Blockly.FieldDropdown([["\uc804\uc9c4", "1"], ["\ud6c4\uc9c4", "2"], ["\uc81c\uc790\ub9ac \uc88c\ud68c\uc804", "3"], ["\uc81c\uc790\ub9ac \uc6b0\ud68c\uc804", "4"], 
  ["\uc88c\ud68c\uc804", "5"], ["\uc6b0\ud68c\uc804", "6"]]), "DIRECTION").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_all_motor = function(c, b) {
  b.getNumberField("TYPE");
  c = b.getNumberField("SPEED");
  switch(b.getNumberField("DIRECTION")) {
    case 1:
      Entry.hw.sendQueue.DCL = 16 + c;
      Entry.hw.sendQueue.DCR = 16 + c;
      break;
    case 2:
      Entry.hw.sendQueue.DCL = 32 + c;
      Entry.hw.sendQueue.DCR = 32 + c;
      break;
    case 3:
      Entry.hw.sendQueue.DCL = 32 + c;
      Entry.hw.sendQueue.DCR = 16 + c;
      break;
    case 4:
      Entry.hw.sendQueue.DCL = 16 + c;
      Entry.hw.sendQueue.DCR = 32 + c;
      break;
    case 5:
      Entry.hw.sendQueue.DCL = 0;
      Entry.hw.sendQueue.DCR = 16 + c;
      break;
    case 6:
      Entry.hw.sendQueue.DCL = 16 + c, Entry.hw.sendQueue.DCR = 0;
  }
  return b.callReturn();
};
Blockly.Blocks.neobot_set_servo = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["OUT1", "1"], ["OUT2", "2"], ["OUT3", "3"]]), "PORT").appendField("\ud3ec\ud2b8\uc758 \uc11c\ubcf4\ubaa8\ud130\ub97c").appendField(new Blockly.FieldDropdown([["0\ub3c4", "0"], ["10\ub3c4", "10"], ["20\ub3c4", "20"], ["30\ub3c4", "30"], ["40\ub3c4", "40"], ["50\ub3c4", "50"], ["60\ub3c4", "60"], ["70\ub3c4", "70"], ["80\ub3c4", "80"], ["90\ub3c4", "90"], ["100\ub3c4", "100"], ["110\ub3c4", "110"], ["120\ub3c4", "120"], ["130\ub3c4", 
  "130"], ["140\ub3c4", "140"], ["150\ub3c4", "150"], ["160\ub3c4", "160"], ["170\ub3c4", "170"], ["180\ub3c4", "180"]]), "DEGREE").appendField(" \uc774\ub3d9").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_set_servo = function(c, b) {
  c = b.getNumberField("PORT");
  var d = b.getNumberField("DEGREE");
  Entry.hw.sendQueue["OUT" + c] = d;
  3 === c && (c = 4);
  Entry.hw.sendQueue.OPT |= c;
  return b.callReturn();
};
Blockly.Blocks.neobot_set_output = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["OUT1", "1"], ["OUT2", "2"], ["OUT3", "3"]]), "PORT").appendField("\ubc88 \ud3ec\ud2b8\uc758 \uac12\uc744");
  this.appendValueInput("VALUE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\ub9cc\ud07c \ucd9c\ub825").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_set_output = function(c, b) {
  c = b.getStringField("PORT", b);
  var d = b.getNumberValue("VALUE", b), e = c;
  0 > d ? d = 0 : 255 < d && (d = 255);
  3 === e && (e = 4);
  Entry.hw.sendQueue["OUT" + c] = d;
  Entry.hw.sendQueue.OPT &= ~e;
  return b.callReturn();
};
Blockly.Blocks.neobot_set_fnd = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("FND\uc5d0");
  this.appendValueInput("VALUE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\ucd9c\ub825").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_set_fnd = function(c, b) {
  c = b.getNumberValue("VALUE", b);
  255 < c ? c = 255 : 0 > c && (c = 0);
  Entry.hw.sendQueue.FND = c;
  return b.callReturn();
};
Blockly.Blocks.neobot_play_note_for = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uba5c\ub85c\ub514").appendField(new Blockly.FieldDropdown([["\ubb34\uc74c", "0"], [Lang.General.note_c, "1"], [Lang.General.note_c + "#", "2"], [Lang.General.note_d, "3"], [Lang.General.note_d + "#", "4"], [Lang.General.note_e, "5"], [Lang.General.note_f, "6"], [Lang.General.note_f + "#", "7"], [Lang.General.note_g, "8"], [Lang.General.note_g + "#", "9"], [Lang.General.note_a, "10"], [Lang.General.note_a + "#", "11"], [Lang.General.note_b, "12"]]), "NOTE").appendField("\uc744(\ub97c)").appendField(new Blockly.FieldDropdown([["1", 
  "0"], ["2", "1"], ["3", "2"], ["4", "3"], ["5", "4"], ["6", "5"]]), "OCTAVE").appendField("\uc625\ud0c0\ube0c\ub85c").appendField(new Blockly.FieldDropdown([["2\ubd84\uc74c\ud45c", "2"], ["4\ubd84\uc74c\ud45c", "4"], ["8\ubd84\uc74c\ud45c", "8"], ["16\ubd84\uc74c\ud45c", "16"]]), "DURATION");
  this.appendDummyInput().appendField("\uae38\uc774\ub9cc\ud07c \uc18c\ub9ac\ub0b4\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_play_note_for = function(c, b) {
  c = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.timeFlag;
    delete b.isStart;
    Entry.hw.sendQueue.SND = 0;
    Entry.engine.isContinue = !1;
    return b.callReturn();
  }
  var d = b.getNumberField("NOTE", b), e = b.getNumberField("OCTAVE", b), f = b.getNumberField("DURATION", b), d = d + 12 * e;
  b.isStart = !0;
  b.timeFlag = 1;
  65 < d && (d = 65);
  c.SND = d;
  setTimeout(function() {
    b.timeFlag = 0;
  }, 1 / f * 2000);
  return b;
};
Entry.Roborobo_Roduino = {name:"roborobo_roduino", INSTRUCTION:{DIGITAL_READ:1, DIGITAL_SET_MODE:2, DIGITAL_WRITE:3, ANALOG_WRITE:4, ANALOG_READ:5, MOTOR:6, COLOR:7}, setZero:function() {
  Entry.hw.sendQueue.colorPin = 0;
  Entry.hw.sendQueue.analogEnable = [0, 0, 0, 0, 0, 0];
  for (var c = 0; 14 > c; c++) {
    Entry.hw.sendQueue[c] = 0;
  }
  this.ColorPin = [0, 0, 0];
  Entry.hw.update();
}, ColorPin:[0, 0, 0]};
Entry.Roborobo_SchoolKit = {name:"roborobo_schoolkit", pinMode:{INPUT:0, OUTPUT:1, ANALOG:2, PWM:3, SERVO:4}, inputPort:{ir:7, sound:8, contact:9, cds:10}, setZero:function() {
  Entry.hw.sendQueue.initHW_Flag = !0;
  Entry.hw.update();
  Entry.hw.sendQueue.digitalPinMode = [];
  Entry.hw.sendQueue.servo = [!1, !1, !1, !1, !1];
  for (var c = 0; 14 > c; c++) {
    Entry.hw.sendQueue[c] = 0, Entry.hw.sendQueue.digitalPinMode[c] = 0;
  }
  Entry.hw.update();
  Entry.hw.sendQueue.initHW_Flag = !1;
  Entry.hw.update();
}};
Blockly.Blocks.roduino_on_block = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_on);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.roduino_on_block = function(c, b) {
  return "1";
};
Blockly.Blocks.roduino_off_block = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_off);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.roduino_off_block = function(c, b) {
  return "0";
};
Blockly.Blocks.roduino_get_analog_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.roduino_get_analog_number = function(c, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.roduino_get_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.roduino_get_port_number = function(c, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.roduino_get_analog_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_analog_value_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_analog_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.roduino_get_analog_value = function(c, b) {
  c = parseInt(b.getValue("VALUE", b));
  Entry.hw.sendQueue[0] = Entry.Roborobo_Roduino.INSTRUCTION.ANALOG_READ;
  Entry.hw.sendQueue.analogEnable[c] = 1;
  Entry.hw.update();
  return Entry.hw.getAnalogPortValue(c);
};
Blockly.Blocks.roduino_get_digital_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_get_digital_value_1);
  this.appendValueInput("VALUE").setCheck("Number");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_sensor_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.roduino_get_digital_value = function(c, b) {
  c = b.getNumberValue("VALUE");
  Entry.hw.sendQueue[0] = Entry.Roborobo_Roduino.INSTRUCTION.DIGITAL_READ;
  Entry.hw.sendQueue[1] = c;
  return Entry.hw.getDigitalPortValue(c - 2);
};
Blockly.Blocks.roduino_get_color = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_color + " ").appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_color_red, "red"], [Lang.Blocks.roborobo_color_green, "green"], [Lang.Blocks.roborobo_color_blue, "blue"], [Lang.Blocks.roborobo_color_yellow, "yellow"]]), "VALUE").appendField(Lang.Blocks.roborobo_color_detected);
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.roduino_get_color = function(c, b) {
  c = 0;
  b = b.getField("VALUE", b);
  var d = [Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[0] - 2], Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[1] - 2], Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[2] - 2]];
  switch(b) {
    case "red":
      1 == d[0] && 0 == d[1] && 0 == d[2] && (c = 1);
      break;
    case "green":
      0 == d[0] && 1 == d[1] && 0 == d[2] && (c = 1);
      break;
    case "blue":
      0 == d[0] && 0 == d[1] && 1 == d[2] && (c = 1);
      break;
    case "yellow":
      1 == d[0] && 1 == d[1] && 1 == d[2] && (c = 1);
  }
  return c;
};
Blockly.Blocks.roduino_set_digital = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_2);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_on, "on"], [Lang.Blocks.roborobo_off, "off"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.roduino_set_digital = function(c, b) {
  c = b.getNumberValue("VALUE");
  var d = "on" == b.getField("OPERATOR") ? 1 : 0;
  Entry.hw.sendQueue[0] = Entry.Roborobo_Roduino.INSTRUCTION.DIGITAL_WRITE;
  Entry.hw.sendQueue[1] = c;
  Entry.hw.update();
  Entry.hw.setDigitalPortValue(c, d);
  return b.callReturn();
};
Blockly.Blocks.roduino_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_motor1, "motor1"], [Lang.Blocks.roborobo_motor2, "motor2"]]), "MODE");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_motor_CW, "cw"], [Lang.Blocks.roborobo_motor_CCW, "ccw"], [Lang.Blocks.roborobo_motor_stop, "stop"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.roduino_motor = function(c, b) {
  pin2 = 0;
  value2 = 0;
  c = b.getField("MODE");
  var d = b.getField("OPERATOR");
  "motor1" == c ? (c = 9, pin2 = 10) : (c = 11, pin2 = 12);
  "cw" == d ? (d = 1, value2 = 0) : "ccw" == d ? (d = 0, value2 = 1) : value2 = d = 0;
  Entry.hw.setDigitalPortValue(c, d);
  Entry.hw.setDigitalPortValue(pin2, value2);
  return b.callReturn();
};
Blockly.Blocks.roduino_set_color_pin = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_color + "R : ");
  this.appendValueInput("RED").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(" G : ");
  this.appendValueInput("GREEN").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(" B : ");
  this.appendValueInput("BLUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.roduino_set_color_pin = function(c, b) {
  c = b.getNumberValue("RED", b);
  var d = b.getNumberValue("GREEN", b), e = b.getNumberValue("BLUE", b);
  Entry.Roborobo_Roduino.ColorPin = [c, d, e];
  Entry.hw.sendQueue[0] = Entry.Roborobo_Roduino.INSTRUCTION.COLOR;
  Entry.hw.sendQueue.colorPin = c;
  Entry.hw.update();
  return b.callReturn();
};
Blockly.Blocks.schoolkit_on_block = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_on);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.schoolkit_on_block = function(c, b) {
  return "1";
};
Blockly.Blocks.schoolkit_off_block = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_off);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.schoolkit_off_block = function(c, b) {
  return "0";
};
Blockly.Blocks.schoolkit_get_out_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["OUT1", "2"], ["OUT2", "3"], ["OUT3", "4"], ["OUT4", "5"], ["OUT5", "6"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.schoolkit_get_out_port_number = function(c, b) {
  return b.getNumberField("PORT");
};
Blockly.Blocks.schoolkit_set_output = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_2);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_on, "on"], [Lang.Blocks.roborobo_off, "off"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.schoolkit_set_output = function(c, b) {
  c = b.getNumberValue("VALUE");
  var d = b.getField("OPERATOR");
  Entry.hw.sendQueue.digitalPinMode[c] = Entry.Roborobo_SchoolKit.pinMode.OUTPUT;
  Entry.hw.sendQueue[c] = "on" == d ? 1 : 0;
  return b.callReturn();
};
Blockly.Blocks.schoolkit_get_in_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["IN1", "7"], ["IN2", "8"], ["IN3", "9"], ["IN4", "10"], ["IN5", "11"], ["IN6", "12"], ["IN7", "13"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.schoolkit_get_in_port_number = function(c, b) {
  return b.getNumberField("PORT");
};
Blockly.Blocks.schoolkit_get_input_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_get_digital_value_1);
  this.appendValueInput("VALUE").setCheck("Number");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_sensor_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.schoolkit_get_input_value = function(c, b) {
  c = b.getNumberValue("VALUE");
  Entry.hw.sendQueue.digitalPinMode[c] = Entry.Roborobo_SchoolKit.pinMode.INPUT;
  Entry.hw.update();
  return Entry.hw.portData[c - 7];
};
Blockly.Blocks.schoolkit_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_motor1, "motor1"], [Lang.Blocks.roborobo_motor2, "motor2"]]), "MODE");
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_motor_CW, "cw"], [Lang.Blocks.roborobo_motor_CCW, "ccw"], [Lang.Blocks.roborobo_motor_stop, "stop"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.schoolkit_motor = function(c, b) {
  var d = b.getField("MODE");
  c = b.getField("OPERATOR");
  var e = b.getNumberValue("VALUE"), d = "motor1" == d ? 7 : 8;
  255 < e ? e = 255 : 0 > e && (e = 0);
  Entry.hw.sendQueue.digitalPinMode[d] = Entry.Roborobo_SchoolKit.pinMode.PWM;
  Entry.hw.sendQueue.digitalPinMode[d - 7] = Entry.Roborobo_SchoolKit.pinMode.PWM;
  "cw" == c ? (Entry.hw.sendQueue[d] = e, Entry.hw.sendQueue[d - 7] = 0) : "ccw" == c ? (Entry.hw.sendQueue[d] = 0, Entry.hw.sendQueue[d - 7] = e) : "stop" == c && (Entry.hw.sendQueue[d] = 0, Entry.hw.sendQueue[d - 7] = 0);
  return b.callReturn();
};
Blockly.Blocks.schoolkit_set_servo_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_1);
  this.appendValueInput("PIN").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_2);
  this.appendDummyInput().appendField(" : ");
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_degree);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.schoolkit_set_servo_value = function(c, b) {
  c = b.getNumberValue("PIN");
  var d = b.getNumberValue("VALUE");
  Entry.hw.sendQueue.digitalPinMode[c] = Entry.Roborobo_SchoolKit.pinMode.PWM;
  0 > d ? d = 0 : 180 < d && (d = 180);
  Entry.hw.sendQueue.servo[c - 2] = !0;
  Entry.hw.sendQueue[c] = d;
  return b.callReturn();
};
Entry.Robotis_carCont = {INSTRUCTION:{NONE:0, WRITE:3, READ:2}, CONTROL_TABLE:{CM_LED:[67, 1], CM_SPRING_RIGHT:[69, 1, 69, 2], CM_SPRING_LEFT:[70, 1, 69, 2], CM_SWITCH:[71, 1], CM_SOUND_DETECTED:[86, 1], CM_SOUND_DETECTING:[87, 1], CM_IR_LEFT:[91, 2, 91, 4], CM_IR_RIGHT:[93, 2, 91, 4], CM_CALIBRATION_LEFT:[95, 2], CM_CALIBRATION_RIGHT:[97, 2], AUX_MOTOR_SPEED_LEFT:[152, 2], AUX_MOTOR_SPEED_RIGHT:[154, 2]}, setZero:function() {
  Entry.hw.sendQueue.setZero = [1];
  this.update();
  this.setRobotisData(null);
  Entry.hw.sendQueue.setZero = null;
  this.update();
  this.setRobotisData([[Entry.Robotis_carCont.INSTRUCTION.WRITE, 152, 2, 0], [Entry.Robotis_carCont.INSTRUCTION.WRITE, 154, 2, 0]]);
  this.update();
}, name:"robotis_carCont", delay:40, postCallReturn:function(c, b, d) {
  if (0 >= d) {
    return this.setRobotisData(b), this.update(), c.callReturn();
  }
  if (c.isStart) {
    if (1 == c.timeFlag) {
      return this.setRobotisData(null), this.update(), c;
    }
    delete c.timeFlag;
    delete c.isStart;
    Entry.engine.isContinue = !1;
    this.update();
    return c.callReturn();
  }
  c.isStart = !0;
  c.timeFlag = 1;
  this.setRobotisData(b);
  this.update();
  setTimeout(function() {
    c.timeFlag = 0;
  }, d);
  return c;
}, wait:function(c, b) {
  Entry.hw.socket.send(JSON.stringify(c));
  for (var d = c = (new Date).getTime(); d < c + b;) {
    d = (new Date).getTime();
  }
}, update:function() {
  Entry.hw.update();
  var c = Entry.hw.sendQueue.ROBOTIS_DATA;
  c && c.forEach(function(b) {
    b.send = !0;
  });
  this.setRobotisData(null);
}, filterSendData:function() {
  var c = Entry.hw.sendQueue.ROBOTIS_DATA;
  return c ? c.filter(function(b) {
    return !0 !== b.send;
  }) : null;
}, setRobotisData:function(c) {
  var b = this.filterSendData();
  Entry.hw.sendQueue.ROBOTIS_DATA = null == c ? b : b ? b.concat(c) : c;
}};
Entry.Robotis_openCM70 = {INSTRUCTION:{NONE:0, WRITE:3, READ:2}, CONTROL_TABLE:{CM_LED_R:[79, 1], CM_LED_G:[80, 1], CM_LED_B:[81, 1], CM_BUZZER_INDEX:[84, 1], CM_BUZZER_TIME:[85, 1], CM_SOUND_DETECTED:[86, 1], CM_SOUND_DETECTING:[87, 1], CM_USER_BUTTON:[26, 1], CM_MOTION:[66, 1], AUX_SERVO_POSITION:[152, 2], AUX_IR:[168, 2], AUX_TOUCH:[202, 1], AUX_TEMPERATURE:[234, 1], AUX_ULTRASONIC:[242, 1], AUX_MAGNETIC:[250, 1], AUX_MOTION_DETECTION:[258, 1], AUX_COLOR:[266, 1], AUX_CUSTOM:[216, 2], AUX_BRIGHTNESS:[288, 
2], AUX_HYDRO_THEMO_HUMIDITY:[274, 1], AUX_HYDRO_THEMO_TEMPER:[282, 1], AUX_SERVO_MODE:[126, 1], AUX_SERVO_SPEED:[136, 2], AUX_MOTOR_SPEED:[136, 2], AUX_LED_MODULE:[210, 1]}, setZero:function() {
  Entry.hw.sendQueue.setZero = [1];
  Entry.Robotis_carCont.update();
  Entry.Robotis_carCont.setRobotisData(null);
  Entry.hw.sendQueue.setZero = null;
  Entry.Robotis_carCont.update();
  Entry.Robotis_carCont.setRobotisData([[Entry.Robotis_openCM70.INSTRUCTION.WRITE, 136, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 138, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 140, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 142, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 144, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 146, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 79, 1, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 80, 1, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 
  81, 1, 0]]);
  Entry.Robotis_carCont.update();
}, name:"robotis_openCM70", delay:15};
Blockly.Blocks.robotis_openCM70_cm_custom_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_custom);
  this.appendDummyInput().appendField("(");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(")");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["BYTE", "BYTE"], ["WORD", "WORD"], ["DWORD", "DWORD"]]), "SIZE");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_value);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.robotis_openCM70_cm_custom_value = function(c, b) {
  c = Entry.Robotis_openCM70.INSTRUCTION.READ;
  var d = 0, e = b.getStringField("SIZE");
  "BYTE" == e ? d = 1 : "WORD" == e ? d = 2 : "DWORD" == e && (d = 4);
  b = b.getNumberValue("VALUE");
  Entry.Robotis_carCont.setRobotisData([[c, b, d, 0, d]]);
  Entry.Robotis_carCont.update();
  return Entry.hw.portData[b];
};
Blockly.Blocks.robotis_openCM70_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_cm);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown(this.sensorList()), "SENSOR");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_value);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}, sensorList:function() {
  var c = [];
  c.push([Lang.Blocks.robotis_cm_sound_detected, "CM_SOUND_DETECTED"]);
  c.push([Lang.Blocks.robotis_cm_sound_detecting, "CM_SOUND_DETECTING"]);
  c.push([Lang.Blocks.robotis_cm_user_button, "CM_USER_BUTTON"]);
  return c;
}};
Entry.block.robotis_openCM70_sensor_value = function(c, b) {
  c = Entry.Robotis_openCM70.INSTRUCTION.READ;
  var d = 0, e = 0, f = 0, g = 0;
  b = b.getStringField("SENSOR");
  "CM_SOUND_DETECTED" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1]) : "CM_SOUND_DETECTING" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[0], 
  e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[1]) : "CM_USER_BUTTON" == b && (f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[1]);
  f += 0 * g;
  Entry.Robotis_carCont.setRobotisData([[c, d, e, 0, g]]);
  Entry.Robotis_carCont.update();
  return Entry.hw.portData[f];
};
Blockly.Blocks.robotis_openCM70_aux_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown(this.portList()), "PORT");
  this.appendDummyInput().appendField(" ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown(this.sensorList()), "SENSOR");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_value);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}, portList:function() {
  var c = [];
  c.push([Lang.Blocks.robotis_common_port_3, "PORT_3"]);
  c.push([Lang.Blocks.robotis_common_port_4, "PORT_4"]);
  c.push([Lang.Blocks.robotis_common_port_5, "PORT_5"]);
  c.push([Lang.Blocks.robotis_common_port_6, "PORT_6"]);
  return c;
}, sensorList:function() {
  var c = [];
  c.push([Lang.Blocks.robotis_aux_servo_position, "AUX_SERVO_POSITION"]);
  c.push([Lang.Blocks.robotis_aux_ir, "AUX_IR"]);
  c.push([Lang.Blocks.robotis_aux_touch, "AUX_TOUCH"]);
  c.push([Lang.Blocks.robotis_aux_brightness, "AUX_BRIGHTNESS"]);
  c.push([Lang.Blocks.robotis_aux_hydro_themo_humidity, "AUX_HYDRO_THEMO_HUMIDITY"]);
  c.push([Lang.Blocks.robotis_aux_hydro_themo_temper, "AUX_HYDRO_THEMO_TEMPER"]);
  c.push([Lang.Blocks.robotis_aux_temperature, "AUX_TEMPERATURE"]);
  c.push([Lang.Blocks.robotis_aux_ultrasonic, "AUX_ULTRASONIC"]);
  c.push([Lang.Blocks.robotis_aux_magnetic, "AUX_MAGNETIC"]);
  c.push([Lang.Blocks.robotis_aux_motion_detection, "AUX_MOTION_DETECTION"]);
  c.push([Lang.Blocks.robotis_aux_color, "AUX_COLOR"]);
  c.push([Lang.Blocks.robotis_aux_custom, "AUX_CUSTOM"]);
  return c;
}};
Entry.block.robotis_openCM70_aux_sensor_value = function(c, b) {
  c = Entry.Robotis_openCM70.INSTRUCTION.READ;
  var d = 0, e = 0, f = 0, g = 0, h = b.getStringField("PORT");
  b = b.getStringField("SENSOR");
  var k = 0;
  "PORT_3" == h ? k = 2 : "PORT_4" == h ? k = 3 : "PORT_5" == h ? k = 4 : "PORT_6" == h && (k = 5);
  "AUX_SERVO_POSITION" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1]) : "AUX_IR" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[1]) : 
  "AUX_TOUCH" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[1]) : "AUX_TEMPERATURE" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[1]) : 
  "AUX_BRIGHTNESS" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[1]) : "AUX_HYDRO_THEMO_HUMIDITY" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[0], 
  e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[1]) : "AUX_HYDRO_THEMO_TEMPER" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[1]) : "AUX_ULTRASONIC" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[1], 
  d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[1]) : "AUX_MAGNETIC" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[1]) : "AUX_MOTION_DETECTION" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[1], 
  d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[1]) : "AUX_COLOR" == b ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[1], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[1]) : "AUX_CUSTOM" == b && (f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1], 
  d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0], e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1]);
  f += k * g;
  0 != k && (e = 6 * g);
  Entry.Robotis_carCont.setRobotisData([[c, d, e, 0, g]]);
  Entry.Robotis_carCont.update();
  return Entry.hw.portData[f];
};
Blockly.Blocks.robotis_openCM70_cm_buzzer_index = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_cm);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_buzzer_index);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.General.note_a + "(0)", "0"], [Lang.General.note_a + "#(1)", "1"], [Lang.General.note_b + "(2)", "2"], [Lang.General.note_c + "(3)", "3"], [Lang.General.note_c + "#(4)", "4"], [Lang.General.note_d + "(5)", "5"], [Lang.General.note_d + "#(6)", "6"], [Lang.General.note_e + "(7)", "7"], [Lang.General.note_f + "(8)", "8"], [Lang.General.note_f + "#(9)", "9"], [Lang.General.note_g + "(10)", "10"], [Lang.General.note_g + "#(11)", "11"], 
  [Lang.General.note_a + "(12)", "12"], [Lang.General.note_a + "#(13)", "13"], [Lang.General.note_b + "(14)", "14"], [Lang.General.note_c + "(15)", "15"], [Lang.General.note_c + "#(16)", "16"], [Lang.General.note_d + "(17)", "17"], [Lang.General.note_d + "#(18)", "18"], [Lang.General.note_e + "(19)", "19"], [Lang.General.note_f + "(20)", "20"], [Lang.General.note_f + "#(21)", "21"], [Lang.General.note_g + "(22)", "22"], [Lang.General.note_g + "#(23)", "23"], [Lang.General.note_a + "(24)", "24"], 
  [Lang.General.note_a + "#(25)", "25"], [Lang.General.note_b + "(26)", "26"], [Lang.General.note_c + "(27)", "27"], [Lang.General.note_c + "#(28)", "28"], [Lang.General.note_d + "(29)", "29"], [Lang.General.note_d + "#(30)", "30"], [Lang.General.note_e + "(31)", "31"], [Lang.General.note_f + "(32)", "32"], [Lang.General.note_f + "#(33)", "33"], [Lang.General.note_g + "(34)", "34"], [Lang.General.note_g + "#(35)", "35"], [Lang.General.note_a + "(36)", "36"], [Lang.General.note_a + "#(37)", "37"], 
  [Lang.General.note_b + "(38)", "38"], [Lang.General.note_c + "(39)", "39"], [Lang.General.note_c + "#(40)", "40"], [Lang.General.note_d + "(41)", "41"], [Lang.General.note_d + "#(42)", "42"], [Lang.General.note_e + "(43)", "43"], [Lang.General.note_f + "(44)", "44"], [Lang.General.note_f + "#(45)", "45"], [Lang.General.note_g + "(46)", "46"], [Lang.General.note_g + "#(47)", "47"], [Lang.General.note_a + "(48)", "48"], [Lang.General.note_a + "#(49)", "49"], [Lang.General.note_b + "(50)", "50"], 
  [Lang.General.note_c + "(51)", "51"]]), "CM_BUZZER_INDEX").appendField(Lang.Blocks.LOOKS_dialog_time_2);
  this.appendValueInput("CM_BUZZER_TIME").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.LOOKS_dialog_time_3).appendField(Lang.Blocks.robotis_common_play_buzzer).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_buzzer_index = function(c, b) {
  c = b.getField("CM_BUZZER_INDEX", b);
  var d = b.getNumberValue("CM_BUZZER_TIME", b), e = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0];
  var g = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1];
  var h = parseInt(10 * d);
  50 < h && (h = 50);
  return Entry.Robotis_carCont.postCallReturn(b, [[e, f, g, h], [e, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1], c]], 1000 * d);
};
Blockly.Blocks.robotis_openCM70_cm_buzzer_melody = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_cm);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_buzzer_melody);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"], ["16", "16"], ["17", "17"], ["18", "18"], ["19", "19"], ["20", "20"], ["21", "21"], ["22", "22"], ["23", "23"], ["24", "24"]]), "CM_BUZZER_MELODY");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_index_number);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_play_buzzer).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_buzzer_melody = function(c, b) {
  c = b.getField("CM_BUZZER_MELODY", b);
  var d = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0];
  return Entry.Robotis_carCont.postCallReturn(b, [[d, e, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1], 255], [d, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1], c]], 1000);
};
Blockly.Blocks.robotis_openCM70_cm_sound_detected_clear = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_clear_sound_detected).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_sound_detected_clear = function(c, b) {
  return Entry.Robotis_carCont.postCallReturn(b, [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1], 0]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_cm_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_cm);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_red_color, "CM_LED_R"], [Lang.Blocks.robotis_common_green_color, "CM_LED_G"], [Lang.Blocks.robotis_common_blue_color, "CM_LED_B"]]), "CM_LED").appendField("LED").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_common_off, "0"]]), "VALUE").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_led = function(c, b) {
  c = b.getField("CM_LED", b);
  var d = b.getField("VALUE", b), e = Entry.Robotis_openCM70.INSTRUCTION.WRITE, f = 0, g = 0;
  "CM_LED_R" == c ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_R[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_R[1]) : "CM_LED_G" == c ? (f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_G[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_G[1]) : "CM_LED_B" == c && (f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_B[0], g = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_B[1]);
  return Entry.Robotis_carCont.postCallReturn(b, [[e, f, g, d]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_cm_motion = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_motion);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_index_number);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_play_motion).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_motion = function(c, b) {
  c = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var d = Entry.Robotis_openCM70.CONTROL_TABLE.CM_MOTION[0];
  var e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_MOTION[1];
  var f = b.getNumberValue("VALUE", b);
  return Entry.Robotis_carCont.postCallReturn(b, [[c, d, e, f]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_motor_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_1, "1"], [Lang.Blocks.robotis_common_port_2, "2"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_motor_speed_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]]), "DIRECTION_ANGLE").appendField(Lang.Blocks.robotis_openCM70_aux_motor_speed_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_motor_speed = function(c, b) {
  c = b.getField("PORT", b);
  var d = b.getField("DIRECTION_ANGLE", b), e = b.getNumberValue("VALUE"), f = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0];
  var h = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1];
  "CW" == d ? (e += 1024, 2047 < e && (e = 2047)) : 1023 < e && (e = 1023);
  return Entry.Robotis_carCont.postCallReturn(b, [[f, g + (c - 1) * h, h, e]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_servo_mode = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_servo_mode_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_wheel_mode, "0"], [Lang.Blocks.robotis_common_joint_mode, "1"]]), "MODE");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_servo_mode = function(c, b) {
  c = b.getField("PORT", b);
  var d = b.getField("MODE", b), e = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[0];
  var g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[1];
  return Entry.Robotis_carCont.postCallReturn(b, [[e, f + (c - 1) * g, g, d]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_servo_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_servo_speed_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]]), "DIRECTION_ANGLE").appendField(Lang.Blocks.robotis_openCM70_aux_servo_speed_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_servo_speed = function(c, b) {
  c = b.getField("PORT", b);
  var d = b.getField("DIRECTION_ANGLE", b), e = b.getNumberValue("VALUE"), f = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[0];
  var h = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[1];
  "CW" == d ? (e += 1024, 2047 < e && (e = 2047)) : 1023 < e && (e = 1023);
  return Entry.Robotis_carCont.postCallReturn(b, [[f, g + (c - 1) * h, h, e]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_servo_position = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_servo_position_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_servo_position = function(c, b) {
  c = b.getField("PORT", b);
  var d = b.getNumberValue("VALUE"), e = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0];
  var g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1];
  1023 < d ? d = 1023 : 0 > d && (d = 0);
  return Entry.Robotis_carCont.postCallReturn(b, [[e, f + (c - 1) * g, g, d]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_led_module = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_led_module_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_cm_led_both + Lang.Blocks.robotis_common_off, "0"], [Lang.Blocks.robotis_cm_led_right + Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_cm_led_left + 
  Lang.Blocks.robotis_common_on, "2"], [Lang.Blocks.robotis_cm_led_both + Lang.Blocks.robotis_common_on, "3"]]), "LED_MODULE");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_led_module = function(c, b) {
  c = b.getField("PORT", b);
  var d = b.getField("LED_MODULE", b), e = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[0];
  var g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[1];
  return Entry.Robotis_carCont.postCallReturn(b, [[e, f + (c - 1) * g, g, d]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_custom = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_custom_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_custom = function(c, b) {
  c = b.getField("PORT", b);
  var d = b.getNumberValue("VALUE"), e = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0];
  var g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1];
  return Entry.Robotis_carCont.postCallReturn(b, [[e, f + (c - 1) * g, g, d]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_cm_custom = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_custom);
  this.appendDummyInput().appendField("(");
  this.appendValueInput("ADDRESS").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(")");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_case_01);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_custom = function(c, b) {
  c = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var d = b.getNumberValue("ADDRESS");
  var e = b.getNumberValue("VALUE");
  return Entry.Robotis_carCont.postCallReturn(b, [[c, d, 65535 < e ? 4 : 255 < e ? 2 : 1, e]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_carCont_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_cm_spring_left, "CM_SPRING_LEFT"], [Lang.Blocks.robotis_cm_spring_right, "CM_SPRING_RIGHT"], [Lang.Blocks.robotis_cm_switch, "CM_SWITCH"], [Lang.Blocks.robotis_cm_sound_detected, "CM_SOUND_DETECTED"], [Lang.Blocks.robotis_cm_sound_detecting, "CM_SOUND_DETECTING"], [Lang.Blocks.robotis_cm_ir_left, "CM_IR_LEFT"], [Lang.Blocks.robotis_cm_ir_right, "CM_IR_RIGHT"], [Lang.Blocks.robotis_cm_calibration_left, 
  "CM_CALIBRATION_LEFT"], [Lang.Blocks.robotis_cm_calibration_right, "CM_CALIBRATION_RIGHT"]]), "SENSOR").appendField(" ").appendField(Lang.Blocks.robotis_common_value);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.robotis_carCont_sensor_value = function(c, b) {
  c = Entry.Robotis_carCont.INSTRUCTION.READ;
  var d = 0, e = 0, f = 0, g = 0;
  b = b.getStringField("SENSOR");
  "CM_SPRING_LEFT" == b ? (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[2], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[3]) : "CM_SPRING_RIGHT" == b ? (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[2], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[3]) : 
  "CM_SWITCH" == b ? (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[0], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[1]) : "CM_SOUND_DETECTED" == b ? (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1]) : 
  "CM_SOUND_DETECTING" == b ? (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[0], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[1]) : "CM_IR_LEFT" == b ? (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[2], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[3]) : 
  "CM_IR_RIGHT" == b ? (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[2], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[3]) : "CM_CALIBRATION_LEFT" == b ? (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1]) : 
  "CM_CALIBRATION_RIGHT" == b ? (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1]) : "CM_BUTTON_STATUS" == b && (f = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[0], g = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[1], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[0], 
  e = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[1]);
  Entry.Robotis_carCont.setRobotisData([[c, d, e, 0, g]]);
  Entry.Robotis_carCont.update();
  return Entry.hw.portData[f];
};
Blockly.Blocks.robotis_carCont_cm_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_led_4).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_common_off, "0"]]), "VALUE_LEFT").appendField(", ").appendField(Lang.Blocks.robotis_cm_led_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_common_off, "0"]]), "VALUE_RIGHT").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_carCont_cm_led = function(c, b) {
  c = b.getField("VALUE_LEFT", b);
  var d = b.getField("VALUE_RIGHT", b), e = Entry.Robotis_carCont.INSTRUCTION.WRITE, f = 0;
  var g = Entry.Robotis_carCont.CONTROL_TABLE.CM_LED[0];
  var h = Entry.Robotis_carCont.CONTROL_TABLE.CM_LED[1];
  1 == c && 1 == d ? f = 9 : 1 == c && 0 == d && (f = 8);
  0 == c && 1 == d && (f = 1);
  return Entry.Robotis_carCont.postCallReturn(b, [[e, g, h, f]], Entry.Robotis_carCont.delay);
};
Blockly.Blocks.robotis_carCont_cm_sound_detected_clear = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_clear_sound_detected).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_carCont_cm_sound_detected_clear = function(c, b) {
  return Entry.Robotis_carCont.postCallReturn(b, [[Entry.Robotis_carCont.INSTRUCTION.WRITE, Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0], Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1], 0]], Entry.Robotis_carCont.delay);
};
Blockly.Blocks.robotis_carCont_aux_motor_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.General.left, "LEFT"], [Lang.General.right, "RIGHT"]]), "DIRECTION").appendField(Lang.Blocks.robotis_carCont_aux_motor_speed_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]]), "DIRECTION_ANGLE").appendField(Lang.Blocks.robotis_carCont_aux_motor_speed_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_carCont_aux_motor_speed = function(c, b) {
  var d = b.getField("DIRECTION", b);
  c = b.getField("DIRECTION_ANGLE", b);
  var e = b.getNumberValue("VALUE"), f = Entry.Robotis_carCont.INSTRUCTION.WRITE;
  if ("LEFT" == d) {
    d = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[0];
    var g = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[1];
  } else {
    d = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_RIGHT[0], g = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_RIGHT[1];
  }
  "CW" == c ? (e += 1024, 2047 < e && (e = 2047)) : 1023 < e && (e = 1023);
  return Entry.Robotis_carCont.postCallReturn(b, [[f, d, g, e]], Entry.Robotis_carCont.delay);
};
Blockly.Blocks.robotis_carCont_cm_calibration = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.General.left, "LEFT"], [Lang.General.right, "RIGHT"]]), "DIRECTION").appendField(Lang.Blocks.robotis_carCont_calibration_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_carCont_cm_calibration = function(c, b) {
  var d = b.getField("DIRECTION", b);
  c = b.getNumberValue("VALUE");
  var e = Entry.Robotis_carCont.INSTRUCTION.WRITE;
  if ("LEFT" == d) {
    d = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0];
    var f = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1];
  } else {
    d = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1];
  }
  return Entry.Robotis_carCont.postCallReturn(b, [[e, d, f, c]], Entry.Robotis_carCont.delay);
};
Entry.robotori = {PORT_MAP:{A0:0, A1:0, A2:0, A3:0, A4:0, A5:0, D2:0, D3:0, D10:0, D11:0, D12:0, D13:0, AOUT5:0, AOUT6:0, AOUT9:0, SERVO:90, rightMotor:0, leftMotor:0}, setZero:function() {
  var c = Entry.robotori.PORT_MAP, b = Entry.hw.sendQueue, d;
  for (d in c) {
    b[d] = c[d];
  }
  Entry.hw.update();
}, name:"robotori", monitorTemplate:{imgPath:"hw/robotori.png", width:395, height:372, listPorts:{A0:{name:"A0", type:"input", pos:{x:0, y:0}}, A1:{name:"A1", type:"input", pos:{x:0, y:0}}, A2:{name:"A2", type:"input", pos:{x:0, y:0}}, A3:{name:"A3", type:"input", pos:{x:0, y:0}}, A4:{name:"A4", type:"input", pos:{x:0, y:0}}, A5:{name:"A5", type:"input", pos:{x:0, y:0}}, D2:{name:"D2", type:"input", pos:{x:0, y:0}}, D3:{name:"D3", type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Blockly.Blocks.robotori_digitalInput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_D2_Input, "D2"], [Lang.Blocks.robotori_D3_Input, "D3"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.robotori_digitalInput = function(c, b) {
  c = Entry.hw.portData;
  b = b.getField("DEVICE");
  return c[b];
};
Blockly.Blocks.robotori_digitalOutput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Digital Out").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_D10_Output, "D10"], [Lang.Blocks.robotori_D11_Output, "D11"], [Lang.Blocks.robotori_D12_Output, "D12"], [Lang.Blocks.robotori_D13_Output, "D13"]]), "DEVICE").appendField("pin").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_On, "ON"], [Lang.Blocks.robotori_Off, "OFF"]]), "VALUE");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotori_digitalOutput = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getStringField("DEVICE", b), e = b.getStringField("VALUE", b);
  c.D10 = "D10" == d && "ON" == e ? 1 : 0;
  c.D11 = "D11" == d && "ON" == e ? 1 : 0;
  c.D12 = "D12" == d && "ON" == e ? 1 : 0;
  c.D13 = "D13" == d && "ON" == e ? 1 : 0;
  return b.callReturn();
};
Blockly.Blocks.robotori_analogInput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_A0_Input, "A0"], [Lang.Blocks.robotori_A1_Input, "A1"], [Lang.Blocks.robotori_A2_Input, "A2"], [Lang.Blocks.robotori_A3_Input, "A3"], [Lang.Blocks.robotori_A4_Input, "A4"], [Lang.Blocks.robotori_A5_Input, "A5"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.robotori_analogInput = function(c, b) {
  c = Entry.hw.portData;
  b = b.getField("DEVICE");
  return c[b];
};
Blockly.Blocks.robotori_analogOutput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotori_analog).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_analog5, "AOUT5"], [Lang.Blocks.robotori_analog6, "AOUT6"], [Lang.Blocks.robotori_analog9, "AOUT9"]]), "DEVICE").appendField(Lang.Blocks.robotori_pin_OutputValue);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotori_analogOutput = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getStringField("DEVICE", b), e = b.getNumberValue("VALUE", b);
  "AOUT5" == d && (c.AOUT5 = e);
  "AOUT6" == d && (c.AOUT6 = e);
  "AOUT9" == d && (c.AOUT9 = e);
  return b.callReturn();
};
Blockly.Blocks.robotori_servo = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotori_Servo);
  this.appendValueInput("SERVO").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotori_servo = function(c, b) {
  Entry.hw.sendQueue.SERVO = b.getNumberValue("SERVO");
  return b.callReturn();
};
Blockly.Blocks.robotori_dc_direction = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotori_DC).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_DC_rightmotor, "RIGHT_MOTOR"], [Lang.Blocks.robotori_DC_leftmotor, "LEFT_MOTOR"]]), "DEVICE").appendField(Lang.Blocks.robotori_DC_select).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_DC_STOP, "STOP"], [Lang.Blocks.robotori_DC_CW, "CW"], [Lang.Blocks.robotori_DC_CCW, "CCW"]]), "VALUE");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotori_dc_direction = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getStringField("DEVICE", b), e = b.getStringField("VALUE", b);
  "RIGHT_MOTOR" == d && ("STOP" == e ? c.RIGHT_MOTOR = 255 : "CW" == e ? c.RIGHT_MOTOR = 0 : "CCW" == e && (c.RIGHT_MOTOR = 180));
  "LEFT_MOTOR" == d && ("STOP" == e ? c.LEFT_MOTOR = 255 : "CW" == e ? c.LEFT_MOTOR = 0 : "CCW" == e && (c.LEFT_MOTOR = 180));
  return b.callReturn();
};
Entry.Turtle = {PORT_MAP:{module:"turtle", leftWheel:0, rightWheel:0, ledRed:0, ledGreen:0, ledBlue:0, buzzer:0, pulse:0, pulseId:0, note:0, sound:0, soundRepeat:1, soundId:0, lineTracerMode:0, lineTracerModeId:0, lineTracerGain:5, lineTracerSpeed:5, motionId:0, motionType:0, motionUnit:0, motionSpeed:0, motionValue:0, motionRadius:0}, setZero:function() {
  var c = Entry.Turtle.PORT_MAP, b = Entry.hw.sendQueue, d;
  for (d in c) {
    b[d] = c[d];
  }
  Entry.hw.update();
  c = Entry.Turtle;
  c.pulseId = 0;
  c.soundId = 0;
  c.lineTracerModeId = 0;
  c.motionId = 0;
  c.clickedId = -1;
  c.doubleClickedId = -1;
  c.longPressedId = -1;
  c.colorPatternId = -1;
  c.wheelStateId = -1;
  c.soundStateId = -1;
  c.lineTracerStateId = -1;
  c.tempo = 60;
  c.removeAllTimeouts();
}, pulseId:0, soundId:0, lineTracerModeId:0, motionId:0, clickedId:-1, doubleClickedId:-1, longPressedId:-1, colorPatternId:-1, wheelStateId:-1, soundStateId:-1, lineTracerStateId:-1, tempo:60, timeouts:[], removeTimeout:function(c) {
  clearTimeout(c);
  var b = this.timeouts;
  c = b.indexOf(c);
  0 <= c && b.splice(c, 1);
}, removeAllTimeouts:function() {
  var c = this.timeouts, b;
  for (b in c) {
    clearTimeout(c[b]);
  }
  this.timeouts = [];
}, setModule:function(c) {
  c.module = "turtle";
}, setPulse:function(c, b) {
  this.pulseId = this.pulseId % 255 + 1;
  c.pulse = b;
  c.pulseId = this.pulseId;
}, setSound:function(c, b, d) {
  "number" != typeof d && (d = 1);
  0 > d && (d = -1);
  d && (this.soundId = this.soundId % 255 + 1, c.sound = b, c.soundRepeat = d, c.soundId = this.soundId);
}, setLineTracerMode:function(c, b) {
  this.lineTracerModeId = this.lineTracerModeId % 255 + 1;
  c.lineTracerMode = b;
  c.lineTracerModeId = this.lineTracerModeId;
}, setMotion:function(c, b, d, e, f, g) {
  this.motionId = this.motionId % 255 + 1;
  c.motionType = b;
  c.motionUnit = d;
  c.motionSpeed = e;
  c.motionValue = f;
  c.motionRadius = g;
  c.motionId = this.motionId;
}, setLedColor:function(c, b) {
  "RED" == b ? (c.ledRed = 255, c.ledGreen = 0, c.ledBlue = 0) : "ORANGE" == b ? (c.ledRed = 255, c.ledGreen = 63, c.ledBlue = 0) : "YELLOW" == b ? (c.ledRed = 255, c.ledGreen = 255, c.ledBlue = 0) : "GREEN" == b ? (c.ledRed = 0, c.ledGreen = 255, c.ledBlue = 0) : "CYAN" == b ? (c.ledRed = 0, c.ledGreen = 255, c.ledBlue = 255) : "BLUE" == b ? (c.ledRed = 0, c.ledGreen = 0, c.ledBlue = 255) : "VIOLET" == b ? (c.ledRed = 63, c.ledGreen = 0, c.ledBlue = 255) : "MAGENTA" == b ? (c.ledRed = 255, c.ledGreen = 
  0, c.ledBlue = 255) : "WHITE" == b && (c.ledRed = 255, c.ledGreen = 255, c.ledBlue = 255);
}, name:"turtle", monitorTemplate:{imgPath:"hw/turtle.png", width:480, height:354, listPorts:{colorNumber:{name:Lang.Blocks.ROBOID_color_number, type:"input", pos:{x:0, y:0}}, accelerationX:{name:Lang.Blocks.ROBOID_acceleration_x, type:"input", pos:{x:0, y:0}}, accelerationY:{name:Lang.Blocks.ROBOID_acceleration_y, type:"input", pos:{x:0, y:0}}, accelerationZ:{name:Lang.Blocks.ROBOID_acceleration_z, type:"input", pos:{x:0, y:0}}, buzzer:{name:Lang.Blocks.ROBOID_buzzer, type:"output", pos:{x:0, y:0}}, 
note:{name:Lang.Blocks.ROBOID_note, type:"output", pos:{x:0, y:0}}}, ports:{floor:{name:Lang.Blocks.ROBOID_floor, type:"input", pos:{x:193, y:342}}, button:{name:Lang.Blocks.ROBOID_button, type:"input", pos:{x:290, y:30}}, ledRed:{name:Lang.Blocks.ROBOID_head_color + " R", type:"output", pos:{x:140, y:280}}, ledGreen:{name:Lang.Blocks.ROBOID_head_color + " G", type:"output", pos:{x:140, y:280}}, ledBlue:{name:Lang.Blocks.ROBOID_head_color + " B", type:"output", pos:{x:140, y:280}}, leftWheel:{name:Lang.Blocks.ROBOID_left_wheel, 
type:"output", pos:{x:363, y:319}}, rightWheel:{name:Lang.Blocks.ROBOID_right_wheel, type:"output", pos:{x:120, y:86}}}, mode:"both"}};
Entry.Roboid = {TURTLE_SENSOR:{floor:0, accelerationX:0, accelerationY:0, accelerationZ:0, button:0, colorNumber:-1, colorPattern:-1}, robots:{}, setZero:function() {
  var c = Entry.Roboid.robots, b;
  for (b in c) {
    c[b].setZero();
  }
  Entry.hw.update();
  Entry.Roboid.removeAllTimeouts();
}, createHamster:function(c) {
  return {packet:{module:"hamster", index:c}, lineTracerModeId:0, lineTracerStateId:-1, tempo:60, boardCommand:0, setZero:function() {
    var b = Entry.Hamster.PORT_MAP, c = this.packet, e;
    for (e in b) {
      c[e] = b[e];
    }
    this.lineTracerModeId = 0;
    this.lineTracerStateId = -1;
    this.tempo = 60;
    this.boardCommand = 0;
  }, setLineTracerMode:function(b) {
    this.lineTracerModeId = this.lineTracerModeId % 255 + 1;
    this.packet.lineTracerMode = b;
    this.packet.lineTracerModeId = this.lineTracerModeId;
  }};
}, createTurtle:function(c) {
  return {packet:{module:"turtle", index:c}, pulseId:0, soundId:0, lineTracerModeId:0, motionId:0, clickedId:-1, doubleClickedId:-1, longPressedId:-1, colorPatternId:-1, wheelStateId:-1, soundStateId:-1, lineTracerStateId:-1, tempo:60, setZero:function() {
    var b = Entry.Turtle.PORT_MAP, c = this.packet, e;
    for (e in b) {
      c[e] = b[e];
    }
    this.motionId = this.lineTracerModeId = this.soundId = this.pulseId = 0;
    this.lineTracerStateId = this.soundStateId = this.wheelStateId = this.colorPatternId = this.longPressedId = this.doubleClickedId = this.clickedId = -1;
    this.tempo = 60;
  }, setPulse:function(b) {
    this.pulseId = this.pulseId % 255 + 1;
    var c = this.packet;
    c.pulse = b;
    c.pulseId = this.pulseId;
  }, setSound:function(b, c) {
    "number" != typeof c && (c = 1);
    0 > c && (c = -1);
    if (c) {
      this.soundId = this.soundId % 255 + 1;
      var d = this.packet;
      d.sound = b;
      d.soundRepeat = c;
      d.soundId = this.soundId;
    }
  }, setLineTracerMode:function(b) {
    this.lineTracerModeId = this.lineTracerModeId % 255 + 1;
    var c = this.packet;
    c.lineTracerMode = b;
    c.lineTracerModeId = this.lineTracerModeId;
  }, setMotion:function(b, c, e, f, g) {
    this.motionId = this.motionId % 255 + 1;
    var d = this.packet;
    d.motionType = b;
    d.motionUnit = c;
    d.motionSpeed = e;
    d.motionValue = f;
    d.motionRadius = g;
    d.motionId = this.motionId;
  }, setLedColor:function(b) {
    var c = this.packet;
    "RED" == b ? (c.ledRed = 255, c.ledGreen = 0, c.ledBlue = 0) : "ORANGE" == b ? (c.ledRed = 255, c.ledGreen = 63, c.ledBlue = 0) : "YELLOW" == b ? (c.ledRed = 255, c.ledGreen = 255, c.ledBlue = 0) : "GREEN" == b ? (c.ledRed = 0, c.ledGreen = 255, c.ledBlue = 0) : "CYAN" == b ? (c.ledRed = 0, c.ledGreen = 255, c.ledBlue = 255) : "BLUE" == b ? (c.ledRed = 0, c.ledGreen = 0, c.ledBlue = 255) : "VIOLET" == b ? (c.ledRed = 63, c.ledGreen = 0, c.ledBlue = 255) : "MAGENTA" == b ? (c.ledRed = 255, c.ledGreen = 
    0, c.ledBlue = 255) : "WHITE" == b && (c.ledRed = 255, c.ledGreen = 255, c.ledBlue = 255);
  }};
}, getHamster:function(c) {
  var b = "hamster" + c, d = this.robots[b];
  d || (d = this.createHamster(c), this.robots[b] = d, Entry.hw.sendQueue[b] = d.packet);
  return d;
}, getTurtle:function(c) {
  var b = "turtle" + c, d = this.robots[b];
  d || (d = this.createTurtle(c), this.robots[b] = d, Entry.hw.sendQueue[b] = d.packet);
  return d;
}, timeouts:[], removeTimeout:function(c) {
  clearTimeout(c);
  var b = this.timeouts;
  c = b.indexOf(c);
  0 <= c && b.splice(c, 1);
}, removeAllTimeouts:function() {
  var c = this.timeouts, b;
  for (b in c) {
    clearTimeout(c[b]);
  }
  this.timeouts = [];
}, name:"roboid", monitorTemplate:{imgPath:"hw/transparent.png", width:2, height:2, listPorts:{hamster0leftProximity:{name:Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_left_proximity, type:"input", pos:{x:0, y:0}}, hamster0rightProximity:{name:Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_right_proximity, type:"input", pos:{x:0, y:0}}, hamster0leftFloor:{name:Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_left_floor, type:"input", pos:{x:0, y:0}}, hamster0rightFloor:{name:Lang.Menus.hamster + 
" 0: " + Lang.Blocks.HAMSTER_sensor_right_floor, type:"input", pos:{x:0, y:0}}, hamster0accelerationX:{name:Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_acceleration_x, type:"input", pos:{x:0, y:0}}, hamster0accelerationY:{name:Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_acceleration_y, type:"input", pos:{x:0, y:0}}, hamster0accelerationZ:{name:Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_acceleration_z, type:"input", pos:{x:0, y:0}}, hamster0light:{name:Lang.Menus.hamster + 
" 0: " + Lang.Blocks.HAMSTER_sensor_light, type:"input", pos:{x:0, y:0}}, hamster0temperature:{name:Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_temperature, type:"input", pos:{x:0, y:0}}, hamster0inputA:{name:Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_input_a, type:"input", pos:{x:0, y:0}}, hamster0inputB:{name:Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_input_b, type:"input", pos:{x:0, y:0}}, turtle0colorNumber:{name:Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_color_number, 
type:"input", pos:{x:0, y:0}}, turtle0floor:{name:Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_floor, type:"input", pos:{x:193, y:342}}, turtle0button:{name:Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_button, type:"input", pos:{x:290, y:30}}, turtle0accelerationX:{name:Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_acceleration_x, type:"input", pos:{x:0, y:0}}, turtle0accelerationY:{name:Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_acceleration_y, type:"input", pos:{x:0, y:0}}, turtle0accelerationZ:{name:Lang.Menus.turtle + 
" 0: " + Lang.Blocks.ROBOID_acceleration_z, type:"input", pos:{x:0, y:0}}, hamster1leftProximity:{name:Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_left_proximity, type:"input", pos:{x:0, y:0}}, hamster1rightProximity:{name:Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_right_proximity, type:"input", pos:{x:0, y:0}}, hamster1leftFloor:{name:Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_left_floor, type:"input", pos:{x:0, y:0}}, hamster1rightFloor:{name:Lang.Menus.hamster + 
" 1: " + Lang.Blocks.HAMSTER_sensor_right_floor, type:"input", pos:{x:0, y:0}}, hamster1accelerationX:{name:Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_acceleration_x, type:"input", pos:{x:0, y:0}}, hamster1accelerationY:{name:Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_acceleration_y, type:"input", pos:{x:0, y:0}}, hamster1accelerationZ:{name:Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_acceleration_z, type:"input", pos:{x:0, y:0}}, hamster1light:{name:Lang.Menus.hamster + 
" 1: " + Lang.Blocks.HAMSTER_sensor_light, type:"input", pos:{x:0, y:0}}, hamster1temperature:{name:Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_temperature, type:"input", pos:{x:0, y:0}}, hamster1inputA:{name:Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_input_a, type:"input", pos:{x:0, y:0}}, hamster1inputB:{name:Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_input_b, type:"input", pos:{x:0, y:0}}, turtle1colorNumber:{name:Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_color_number, 
type:"input", pos:{x:0, y:0}}, turtle1floor:{name:Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_floor, type:"input", pos:{x:193, y:342}}, turtle1button:{name:Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_button, type:"input", pos:{x:290, y:30}}, turtle1accelerationX:{name:Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_acceleration_x, type:"input", pos:{x:0, y:0}}, turtle1accelerationY:{name:Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_acceleration_y, type:"input", pos:{x:0, y:0}}, turtle1accelerationZ:{name:Lang.Menus.turtle + 
" 1: " + Lang.Blocks.ROBOID_acceleration_z, type:"input", pos:{x:0, y:0}}, hamster2leftProximity:{name:Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_left_proximity, type:"input", pos:{x:0, y:0}}, hamster2rightProximity:{name:Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_right_proximity, type:"input", pos:{x:0, y:0}}, hamster2leftFloor:{name:Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_left_floor, type:"input", pos:{x:0, y:0}}, hamster2rightFloor:{name:Lang.Menus.hamster + 
" 2: " + Lang.Blocks.HAMSTER_sensor_right_floor, type:"input", pos:{x:0, y:0}}, hamster2accelerationX:{name:Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_acceleration_x, type:"input", pos:{x:0, y:0}}, hamster2accelerationY:{name:Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_acceleration_y, type:"input", pos:{x:0, y:0}}, hamster2accelerationZ:{name:Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_acceleration_z, type:"input", pos:{x:0, y:0}}, hamster2light:{name:Lang.Menus.hamster + 
" 2: " + Lang.Blocks.HAMSTER_sensor_light, type:"input", pos:{x:0, y:0}}, hamster2temperature:{name:Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_temperature, type:"input", pos:{x:0, y:0}}, hamster2inputA:{name:Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_input_a, type:"input", pos:{x:0, y:0}}, hamster2inputB:{name:Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_input_b, type:"input", pos:{x:0, y:0}}, turtle2colorNumber:{name:Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_color_number, 
type:"input", pos:{x:0, y:0}}, turtle2floor:{name:Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_floor, type:"input", pos:{x:193, y:342}}, turtle2button:{name:Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_button, type:"input", pos:{x:290, y:30}}, turtle2accelerationX:{name:Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_acceleration_x, type:"input", pos:{x:0, y:0}}, turtle2accelerationY:{name:Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_acceleration_y, type:"input", pos:{x:0, y:0}}, turtle2accelerationZ:{name:Lang.Menus.turtle + 
" 2: " + Lang.Blocks.ROBOID_acceleration_z, type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Entry.Xbot = {PORT_MAP:{rightWheel:0, leftWheel:0, head:90, armR:90, armL:90, analogD5:127, analogD6:127, D4:0, D7:0, D12:0, D13:0, ledR:0, ledG:0, ledB:0, lcdNum:0, lcdTxt:"                ", note:262, duration:0}, setZero:function() {
  var c = Entry.Xbot.PORT_MAP, b = Entry.hw.sendQueue, d;
  for (d in c) {
    b[d] = c[d];
  }
  Entry.hw.update();
  Entry.Xbot.removeAllTimeouts();
}, timeouts:[], removeTimeout:function(c) {
  clearTimeout(c);
  var b = this.timeouts;
  c = b.indexOf(c);
  0 <= c && b.splice(c, 1);
}, removeAllTimeouts:function() {
  var c = this.timeouts, b;
  for (b in c) {
    clearTimeout(c[b]);
  }
  this.timeouts = [];
}, name:"xbot_epor_edge"};
Blockly.Blocks.xbot_digitalInput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_D2_digitalInput, "D2"], [Lang.Blocks.XBOT_D3_digitalInput, "D3"], [Lang.Blocks.XBOT_D11_digitalInput, "D11"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.xbot_digitalInput = function(c, b) {
  c = Entry.hw.portData;
  b = b.getField("DEVICE");
  return c[b];
};
Blockly.Blocks.xbot_analogValue = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_CDS, "light"], [Lang.Blocks.XBOT_MIC, "mic"], [Lang.Blocks.XBOT_analog0, "adc0"], [Lang.Blocks.XBOT_analog1, "adc1"], [Lang.Blocks.XBOT_analog2, "adc2"], [Lang.Blocks.XBOT_analog3, "adc3"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.xbot_analogValue = function(c, b) {
  c = Entry.hw.portData;
  b = b.getField("DEVICE");
  return c[b];
};
Blockly.Blocks.xbot_digitalOutput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_digital).appendField(new Blockly.FieldDropdown([["LED", "D13"], ["D4", "D4"], ["D7", "D7"], ["D12 ", "D12"]]), "DEVICE").appendField(Lang.Blocks.XBOT_pin_OutputValue).appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_High, "HIGH"], [Lang.Blocks.XBOT_Low, "LOW"]]), "VALUE");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_digitalOutput = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getStringField("DEVICE", b), e = b.getStringField("VALUE", b);
  c.D13 = "D13" == d && "HIGH" == e ? 1 : 0;
  c.D4 = "D4" == d && "HIGH" == e ? 1 : 0;
  c.D7 = "D7" == d && "HIGH" == e ? 1 : 0;
  c.D12 = "D12" == d && "HIGH" == e ? 1 : 0;
  return b.callReturn();
};
Blockly.Blocks.xbot_analogOutput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_analog).appendField(new Blockly.FieldDropdown([["D5", "analogD5"], ["D6", "analogD6"]]), "DEVICE").appendField(Lang.Blocks.XBOT_pin_Output_Value);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_analogOutput = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getStringField("DEVICE", b), e = b.getNumberValue("VALUE", b);
  "analogD5" == d ? c.analogD5 = e : "analogD6" == d && (c.analogD6 = e);
  return b.callReturn();
};
Blockly.Blocks.xbot_servo = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_Servo).appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_Head, "head"], [Lang.Blocks.XBOT_ArmR, "right"], [Lang.Blocks.XBOT_ArmL, "left"]]), "DEVICE").appendField(Lang.Blocks.XBOT_angle);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_servo = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getStringField("DEVICE", b), e = b.getNumberValue("VALUE", b);
  "head" == d ? c.head = e : "right" == d ? c.armR = e : "left" == d && (c.armL = e);
  return b.callReturn();
};
Blockly.Blocks.xbot_oneWheel = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_DC).appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_rightWheel, "rightWheel"], [Lang.Blocks.XBOT_leftWheel, "leftWheel"], [Lang.Blocks.XBOT_bothWheel, "bothWheel"]]), "DEVICE").appendField(Lang.Blocks.XBOT_speed);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_oneWheel = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getStringField("DEVICE", b), e = b.getNumberValue("VALUE", b);
  "rightWheel" == d ? c.rightWheel = e : "leftWheel" == d ? c.leftWheel = e : c.rightWheel = c.leftWheel = e;
  return b.callReturn();
};
Blockly.Blocks.xbot_twoWheel = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_rightSpeed);
  this.appendValueInput("rightWheel").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_leftSpeed);
  this.appendValueInput("leftWheel").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_twoWheel = function(c, b) {
  c = Entry.hw.sendQueue;
  c.rightWheel = b.getNumberValue("rightWheel");
  c.leftWheel = b.getNumberValue("leftWheel");
  return b.callReturn();
};
Blockly.Blocks.xbot_rgb = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_RGBLED_R);
  this.appendValueInput("ledR").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_RGBLED_G);
  this.appendValueInput("ledG").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_RGBLED_B);
  this.appendValueInput("ledB").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_rgb = function(c, b) {
  c = Entry.hw.sendQueue;
  c.ledR = b.getNumberValue("ledR");
  c.ledG = b.getNumberValue("ledG");
  c.ledB = b.getNumberValue("ledB");
  return b.callReturn();
};
Blockly.Blocks.xbot_rgb_picker = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_RGBLED_color).appendField(new Blockly.FieldColour("#ff0000"), "VALUE").appendField(Lang.Blocks.XBOT_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_rgb_picker = function(c, b) {
  c = b.getStringField("VALUE");
  var d = Entry.hw.sendQueue;
  d.ledR = parseInt(0.3 * parseInt(c.substr(1, 2), 16));
  d.ledG = parseInt(0.3 * parseInt(c.substr(3, 2), 16));
  d.ledB = parseInt(0.3 * parseInt(c.substr(5, 2), 16));
  return b.callReturn();
};
Blockly.Blocks.xbot_buzzer = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_play_note_for_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_c, "C"], [Lang.Blocks.XBOT_d, "D"], [Lang.Blocks.XBOT_e, "E"], [Lang.Blocks.XBOT_f, "F"], [Lang.Blocks.XBOT_g, "G"], [Lang.Blocks.XBOT_a, "A"], [Lang.Blocks.XBOT_b, "B"]]), "NOTE").appendField(" ").appendField(new Blockly.FieldDropdown([["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]]), "OCTAVE").appendField(Lang.Blocks.HAMSTER_play_note_for_3);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_melody_ms).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_buzzer = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getStringField("NOTE", b), e = b.getStringField("OCTAVE", b), f = b.getNumberValue("VALUE", b), d = d + e;
  c.note = "C2" == d ? 65 : "D2" == d ? 73 : "E2" == d ? 82 : "F2" == d ? 87 : "G2" == d ? 98 : "A2" == d ? 110 : "B2" == d ? 123 : "C3" == d ? 131 : "D3" == d ? 147 : "E3" == d ? 165 : "F3" == d ? 175 : "G3" == d ? 196 : "A3" == d ? 220 : "B3" == d ? 247 : "C4" == d ? 262 : "D4" == d ? 294 : "E4" == d ? 330 : "F4" == d ? 349 : "G4" == d ? 392 : "A4" == d ? 440 : "B4" == d ? 494 : "C5" == d ? 523 : "D5" == d ? 587 : "E5" == d ? 659 : "F5" == d ? 698 : "G5" == d ? 784 : "A5" == d ? 880 : "B5" == d ? 
  988 : "C6" == d ? 1047 : "D6" == d ? 1175 : "E6" == d ? 1319 : "F6" == d ? 1397 : "G6" == d ? 1568 : "A6" == d ? 1760 : "B6" == d ? 1976 : "C7" == d ? 2093 : "D7" == d ? 2349 : "E7" == d ? 2637 : "F7" == d ? 2794 : "G7" == d ? 3136 : "A7" == d ? 3520 : "B7" == d ? 3951 : 262;
  c.duration = 40 * f;
  return b.callReturn();
};
Blockly.Blocks.xbot_lcd = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("LCD").appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"]]), "LINE").appendField(Lang.Blocks.XBOT_Line).appendField(", ").appendField(Lang.Blocks.XBOT_outputValue);
  this.appendValueInput("VALUE").setCheck(["String", "Number"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_lcd = function(c, b) {
  c = Entry.hw.sendQueue;
  var d = b.getNumberField("LINE", b), e = b.getStringValue("VALUE", b);
  0 == d ? (c.lcdNum = 0, c.lcdTxt = e) : 1 == d && (c.lcdNum = 1, c.lcdTxt = e);
  return b.callReturn();
};
Entry.Collection = function(c) {
  this.length = 0;
  this._hashMap = {};
  this._observers = [];
  this.set(c);
};
(function(c, b) {
  c.set = function(c) {
    for (; this.length;) {
      b.pop.call(this);
    }
    var d = this._hashMap;
    for (f in d) {
      delete d[f];
    }
    if (void 0 !== c) {
      var f = 0;
      for (var g = c.length; f < g; f++) {
        var h = c[f];
        d[h.id] = h;
        b.push.call(this, h);
      }
    }
  };
  c.push = function(c) {
    this._hashMap[c.id] = c;
    b.push.call(this, c);
  };
  c.unshift = function() {
    for (var c = Array.prototype.slice.call(arguments, 0), e = this._hashMap, f = c.length - 1; 0 <= f; f--) {
      var g = c[f];
      b.unshift.call(this, g);
      e[g.id] = g;
    }
  };
  c.insert = function(c, e) {
    b.splice.call(this, e, 0, c);
    this._hashMap[c.id] = c;
  };
  c.has = function(b) {
    return !!this._hashMap[b];
  };
  c.get = function(b) {
    return this._hashMap[b];
  };
  c.at = function(b) {
    return this[b];
  };
  c.getAll = function() {
    for (var b = this.length, c = [], f = 0; f < b; f++) {
      c.push(this[f]);
    }
    return c;
  };
  c.indexOf = function(c) {
    return b.indexOf.call(this, c);
  };
  c.find = function(b) {
    for (var c = [], d, g = 0, h = this.length; g < h; g++) {
      d = !0;
      var k = this[g], l;
      for (l in b) {
        if (b[l] != k[l]) {
          d = !1;
          break;
        }
      }
      d && c.push(k);
    }
    return c;
  };
  c.pop = function() {
    var c = b.pop.call(this);
    delete this._hashMap[c.id];
    return c;
  };
  c.shift = function() {
    var c = b.shift.call(this);
    delete this._hashMap[c.id];
    return c;
  };
  c.slice = function(c, e) {
    c = b.slice.call(this, c, e);
    e = this._hashMap;
    for (var d in c) {
      delete e[c[d].id];
    }
    return c;
  };
  c.remove = function(b) {
    var c = this.indexOf(b);
    -1 < c && (delete this._hashMap[b.id], this.splice(c, 1));
  };
  c.splice = function(c, e) {
    var d = b.slice.call(arguments, 2), g = this._hashMap;
    e = void 0 === e ? this.length - c : e;
    for (var h = b.splice.call(this, c, e), k = 0, l = h.length; k < l; k++) {
      delete g[h[k].id];
    }
    k = 0;
    for (l = d.length; k < l; k++) {
      g = d[k], b.splice.call(this, c++, 0, g), this._hashMap[g.id] = g;
    }
    return h;
  };
  c.clear = function() {
    for (; this.length;) {
      b.pop.call(this);
    }
    this._hashMap = {};
  };
  c.map = function(b, c) {
    for (var d = [], e = 0, h = this.length; e < h; e++) {
      d.push(b(this[e], c));
    }
    return d;
  };
  c.moveFromTo = function(c, e) {
    var d = this.length - 1;
    0 > c || 0 > e || c > d || e > d || b.splice.call(this, e, 0, b.splice.call(this, c, 1)[0]);
  };
  c.sort = function() {
  };
  c.fromJSON = function() {
  };
  c.toJSON = function() {
    for (var b = [], c = 0, f = this.length; c < f; c++) {
      b.push(this[c].toJSON());
    }
    return b;
  };
  c.observe = function() {
  };
  c.unobserve = function() {
  };
  c.notify = function() {
  };
  c.destroy = function() {
  };
})(Entry.Collection.prototype, Array.prototype);
Entry.Event = function(c) {
  this._sender = c;
  this._listeners = [];
};
(function(c) {
  c.attach = function(b, c) {
    var d = this;
    b = {obj:b, fn:c, destroy:function() {
      d.detach(this);
    }};
    this._listeners.push(b);
    return b;
  };
  c.detach = function(b) {
    var c = this._listeners;
    b = c.indexOf(b);
    if (-1 < b) {
      return c.splice(b, 1);
    }
  };
  c.clear = function() {
    for (var b = this._listeners; b.length;) {
      b.pop();
    }
  };
  c.notify = function() {
    var b = arguments;
    this._listeners.slice().forEach(function(c) {
      c.fn.apply(c.obj, b);
    });
  };
  c.hasListeners = function() {
    return !!this._listeners.length;
  };
})(Entry.Event.prototype);
Entry.Utils = {};
Entry.overridePrototype = function() {
  Number.prototype.mod = function(c) {
    return (this % c + c) % c;
  };
  String.prototype.repeat || (String.prototype.repeat = function(c) {
    if (null == this) {
      throw new TypeError("can't convert " + this + " to object");
    }
    var b = "" + this;
    c = +c;
    c != c && (c = 0);
    if (0 > c) {
      throw new RangeError("repeat count must be non-negative");
    }
    if (Infinity == c) {
      throw new RangeError("repeat count must be less than infinity");
    }
    c = Math.floor(c);
    if (0 == b.length || 0 == c) {
      return "";
    }
    if (268435456 <= b.length * c) {
      throw new RangeError("repeat count must not overflow maximum string size");
    }
    for (var d = "";;) {
      1 == (c & 1) && (d += b);
      c >>>= 1;
      if (0 == c) {
        break;
      }
      b += b;
    }
    return d;
  });
};
Entry.Utils.isNumber = function(c) {
  if ("number" === typeof c) {
    return !0;
  }
  var b = /^-?\d+\.?\d*$/;
  return "string" === typeof c && b.test(c) ? !0 : !1;
};
Entry.Utils.generateId = function() {
  return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).substr(-4);
};
Entry.Utils.intersectArray = function(c, b) {
  for (var d = [], e = 0; e < c.length; e++) {
    for (var f = 0; f < b.length; f++) {
      if (c[e] == b[f]) {
        d.push(c[e]);
        break;
      }
    }
  }
  return d;
};
Entry.Utils.isPointInMatrix = function(c, b, d) {
  d = void 0 === d ? 0 : d;
  var e = c.offsetX ? c.x + c.offsetX : c.x, f = c.offsetY ? c.y + c.offsety : c.y;
  return e - d <= b.x && e + c.width + d >= b.x && f - d <= b.y && f + c.height + d >= b.y;
};
Entry.Utils.colorDarken = function(c, b) {
  function d(b) {
    2 != b.length && (b = "0" + b);
    return b;
  }
  if (7 === c.length) {
    var e = parseInt(c.substr(1, 2), 16);
    var f = parseInt(c.substr(3, 2), 16);
    c = parseInt(c.substr(5, 2), 16);
  } else {
    e = parseInt(c.substr(1, 2), 16), f = parseInt(c.substr(2, 2), 16), c = parseInt(c.substr(3, 2), 16);
  }
  b = void 0 === b ? 0.7 : b;
  e = d(Math.floor(e * b).toString(16));
  f = d(Math.floor(f * b).toString(16));
  c = d(Math.floor(c * b).toString(16));
  return "#" + e + f + c;
};
Entry.Utils.colorLighten = function(c, b) {
  b = 0 === b ? 0 : b || 20;
  c = Entry.Utils.hexToHsl(c);
  c.l += b / 100;
  c.l = Math.min(1, Math.max(0, c.l));
  return Entry.Utils.hslToHex(c);
};
Entry.Utils._EmphasizeColorMap = {"#3BBD70":"#5BC982", "#498DEB":"#62A5F4", "#A751E3":"#C08FF7", "#EC4466":"#F46487", "#FF9E20":"#FFB05A", "#A4D01D":"#C4DD31", "#00979D":"#09BAB5", "#FFD974":"#FCDA90", "#E457DC":"#F279F2", "#CC7337":"#DD884E", "#AEB8FF":"#C0CBFF", "#FFCA36":"#F2C670"};
Entry.Utils.getEmphasizeColor = function(c) {
  var b = c.toUpperCase();
  return Entry.Utils._EmphasizeColorMap[b] || c;
};
Entry.Utils.bound01 = function(c, b) {
  var d = c;
  "string" == typeof d && -1 != d.indexOf(".") && 1 === parseFloat(d) && (c = "100%");
  d = "string" === typeof c && -1 != c.indexOf("%");
  c = Math.min(b, Math.max(0, parseFloat(c)));
  d && (c = parseInt(c * b, 10) / 100);
  return 0.000001 > Math.abs(c - b) ? 1 : c % b / parseFloat(b);
};
Entry.Utils.hexToHsl = function(c) {
  if (7 === c.length) {
    var b = parseInt(c.substr(1, 2), 16);
    var d = parseInt(c.substr(3, 2), 16);
    c = parseInt(c.substr(5, 2), 16);
  } else {
    b = parseInt(c.substr(1, 2), 16), d = parseInt(c.substr(2, 2), 16), c = parseInt(c.substr(3, 2), 16);
  }
  b = Entry.Utils.bound01(b, 255);
  d = Entry.Utils.bound01(d, 255);
  c = Entry.Utils.bound01(c, 255);
  var e = Math.max(b, d, c), f = Math.min(b, d, c), g = (e + f) / 2;
  if (e == f) {
    var h = f = 0;
  } else {
    var k = e - f, f = 0.5 < g ? k / (2 - e - f) : k / (e + f);
    switch(e) {
      case b:
        h = (d - c) / k + (d < c ? 6 : 0);
        break;
      case d:
        h = (c - b) / k + 2;
        break;
      case c:
        h = (b - d) / k + 4;
    }
    h /= 6;
  }
  return {h:360 * h, s:f, l:g};
};
Entry.Utils.hslToHex = function(c) {
  function b(b, c, d) {
    0 > d && (d += 1);
    1 < d && --d;
    return d < 1 / 6 ? b + 6 * (c - b) * d : .5 > d ? c : d < 2 / 3 ? b + (c - b) * (2 / 3 - d) * 6 : b;
  }
  function d(b) {
    return 1 == b.length ? "0" + b : "" + b;
  }
  var e = Entry.Utils.bound01(c.h, 360);
  var f = Entry.Utils.bound01(c.s, 1);
  c = Entry.Utils.bound01(c.l, 1);
  if (0 === f) {
    f = c = e = c;
  } else {
    var g = 0.5 > c ? c * (1 + f) : c + f - c * f, h = 2 * c - g;
    f = b(h, g, e + 1 / 3);
    c = b(h, g, e);
    e = b(h, g, e - 1 / 3);
  }
  c *= 255;
  e *= 255;
  return "#" + [d(Math.round(255 * f).toString(16)), d(Math.round(c).toString(16)), d(Math.round(e).toString(16))].join("");
};
Entry.Utils.bindGlobalEvent = function(c) {
  var b = $(document);
  void 0 === c && (c = "resize mousedown mousemove keydown keyup dispose".split(" "));
  -1 < c.indexOf("resize") && (Entry.windowReszied && ($(window).off("resize"), Entry.windowReszied.clear()), Entry.windowResized = new Entry.Event(window), $(window).on("resize", function(b) {
    Entry.windowResized.notify(b);
  }));
  -1 < c.indexOf("mousedown") && (Entry.documentMousedown && (b.off("mousedown"), Entry.documentMousedown.clear()), Entry.documentMousedown = new Entry.Event(window), b.on("mousedown", function(b) {
    Entry.documentMousedown.notify(b);
  }));
  -1 < c.indexOf("mousemove") && (Entry.documentMousemove && (b.off("touchmove mousemove"), Entry.documentMousemove.clear()), Entry.mouseCoordinate = {}, Entry.documentMousemove = new Entry.Event(window), b.on("touchmove mousemove", function(b) {
    b.originalEvent && b.originalEvent.touches && (b = b.originalEvent.touches[0]);
    Entry.documentMousemove.notify(b);
    Entry.mouseCoordinate.x = b.clientX;
    Entry.mouseCoordinate.y = b.clientY;
  }));
  -1 < c.indexOf("keydown") && (Entry.keyPressed && (b.off("keydown"), Entry.keyPressed.clear()), Entry.pressedKeys = [], Entry.keyPressed = new Entry.Event(window), b.on("keydown", function(b) {
    var c = b.keyCode;
    0 > Entry.pressedKeys.indexOf(c) && Entry.pressedKeys.push(c);
    Entry.keyPressed.notify(b);
  }));
  -1 < c.indexOf("keyup") && (Entry.keyUpped && (b.off("keyup"), Entry.keyUpped.clear()), Entry.keyUpped = new Entry.Event(window), b.on("keyup", function(b) {
    var c = Entry.pressedKeys.indexOf(b.keyCode);
    -1 < c && Entry.pressedKeys.splice(c, 1);
    Entry.keyUpped.notify(b);
  }));
  -1 < c.indexOf("dispose") && (Entry.disposeEvent && Entry.disposeEvent.clear(), Entry.disposeEvent = new Entry.Event(window), Entry.documentMousedown && Entry.documentMousedown.attach(this, function(b) {
    Entry.disposeEvent.notify(b);
  }));
};
Entry.Utils.makeActivityReporter = function() {
  Entry.activityReporter = new Entry.ActivityReporter;
  Entry.commander && Entry.commander.addReporter(Entry.activityReporter);
  return Entry.activityReporter;
};
Entry.Utils.initEntryEvent_ = function() {
  Entry.events_ || (Entry.events_ = []);
};
Entry.sampleColours = [];
Entry.assert = function(c, b) {
  if (!c) {
    throw Error(b || "Assert failed");
  }
};
Entry.parseTexttoXML = function(c) {
  if (window.ActiveXObject) {
    var b = new ActiveXObject("Microsoft.XMLDOM");
    b.async = "false";
    b.loadXML(c);
  } else {
    b = (new DOMParser).parseFromString(c, "text/xml");
  }
  return b;
};
Entry.createElement = function(c, b) {
  var d = c instanceof HTMLElement ? c : document.createElement(c);
  b && (d.id = b);
  d.hasClass = function(b) {
    return this.className.match(new RegExp("(\\s|^)" + b + "(\\s|$)"));
  };
  d.addClass = function(b) {
    for (var c = this.className, d = 0; d < arguments.length; d++) {
      b = arguments[d], this.hasClass(b) || (c += " " + b);
    }
    this.className = c;
  };
  d.removeClass = function(b) {
    for (var c = this.className, d = 0; d < arguments.length; d++) {
      b = arguments[d], this.hasClass(b) && (c = c.replace(new RegExp("(\\s|^)" + b + "(\\s|$)"), " "));
    }
    this.className = c;
  };
  d.bindOnClick = function(b) {
    $(this).on("click tab", function(c) {
      d.disabled || (c.stopImmediatePropagation(), b.call(this, c));
    });
  };
  d.unBindOnClick = function(b) {
    $(this).off("click tab");
  };
  return d;
};
Entry.makeAutolink = function(c) {
  return c ? c.replace(/(http|https|ftp|telnet|news|irc):\/\/([-/.a-zA-Z0-9_~#%$?&=:200-377()][^)\]}]+)/gi, "<a href='$1://$2' target='_blank'>$1://$2</a>").replace(/([xA1-xFEa-z0-9_-]+@[xA1-xFEa-z0-9-]+.[a-z0-9-]+)/gi, "<a href='mailto:$1'>$1</a>") : "";
};
Entry.generateHash = function() {
  return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).substr(-4);
};
Entry.addEventListener = function(c, b) {
  this.events_ || (this.events_ = {});
  this.events_[c] || (this.events_[c] = []);
  b instanceof Function && this.events_[c].push(b);
  return !0;
};
Entry.dispatchEvent = function(c, b) {
  if (this.events_) {
    var d = this.events_[c];
    if (d && 0 !== d.length) {
      var e = Array.prototype.slice.call(arguments);
      e.shift();
      d.forEach(function(b) {
        b.apply(window, e);
      });
    }
  } else {
    this.events_ = {};
  }
};
Entry.removeEventListener = function(c, b) {
  if (this.events_[c]) {
    for (var d = 0, e = this.events_[c].length; d < e; d++) {
      if (this.events_[c][d] === b) {
        this.events_[c].splice(d, 1);
        break;
      }
    }
  }
};
Entry.removeAllEventListener = function(c) {
  this.events_ && this.events_[c] && delete this.events_[c];
};
Entry.addTwoNumber = function(c, b) {
  var d;
  if (!Entry.Utils.isNumber(c) || !Entry.Utils.isNumber(b)) {
    return c + b;
  }
  c += "";
  b += "";
  var e = c.indexOf("."), f = b.indexOf(".");
  var g = d = 0;
  0 < e && (d = c.length - e - 1);
  0 < f && (g = b.length - f - 1);
  return 0 < d || 0 < g ? d >= g ? (parseFloat(c) + parseFloat(b)).toFixed(d) : (parseFloat(c) + parseFloat(b)).toFixed(g) : parseInt(c) + parseInt(b);
};
Entry.hex2rgb = function(c) {
  return (c = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(c)) ? {r:parseInt(c[1], 16), g:parseInt(c[2], 16), b:parseInt(c[3], 16)} : null;
};
Entry.rgb2hex = function(c, b, d) {
  return "#" + (16777216 + (c << 16) + (b << 8) + d).toString(16).slice(1);
};
Entry.generateRgb = function() {
  return {r:Math.floor(256 * Math.random()), g:Math.floor(256 * Math.random()), b:Math.floor(256 * Math.random())};
};
Entry.adjustValueWithMaxMin = function(c, b, d) {
  return c > d ? d : c < b ? b : c;
};
Entry.isExist = function(c, b, d) {
  for (var e = 0; e < d.length; e++) {
    if (d[e][b] == c) {
      return d[e];
    }
  }
  return !1;
};
Entry.getColourCodes = function() {
  return "transparent #660000 #663300 #996633 #003300 #003333 #003399 #000066 #330066 #660066 #FFFFFF #990000 #993300 #CC9900 #006600 #336666 #0033FF #000099 #660099 #990066 #000000 #CC0000 #CC3300 #FFCC00 #009900 #006666 #0066FF #0000CC #663399 #CC0099 #333333 #FF0000 #FF3300 #FFFF00 #00CC00 #009999 #0099FF #0000FF #9900CC #FF0099 #666666 #CC3333 #FF6600 #FFFF33 #00FF00 #00CCCC #00CCFF #3366FF #9933FF #FF00FF #999999 #FF6666 #FF6633 #FFFF66 #66FF66 #66CCCC #00FFFF #3399FF #9966FF #FF66FF #BBBBBB #FF9999 #FF9966 #FFFF99 #99FF99 #66FFCC #99FFFF #66CCff #9999FF #FF99FF #CCCCCC #FFCCCC #FFCC99 #FFFFCC #CCFFCC #99FFCC #CCFFFF #99CCFF #CCCCFF #FFCCFF".split(" ");
};
Entry.removeElement = function(c) {
  c && c.parentNode && c.parentNode.removeChild(c);
};
Entry.getElementsByClassName = function(c) {
  for (var b = [], d = document.getElementsByTagName("*"), e = 0; e < d.length; e++) {
    -1 < (" " + d[e].className + " ").indexOf(" " + c + " ") && b.push(d[e]);
  }
  return b;
};
Entry.parseNumber = function(c) {
  if ("string" == typeof c) {
    if (Entry.Utils.isNumber(c) && "0" === c[0] || "0" === c[0] && "x" === c[1].toLowerCase()) {
      return c;
    }
    if (Entry.Utils.isNumber(c)) {
      return Number(c);
    }
  } else {
    if ("number" == typeof c && Entry.Utils.isNumber(c)) {
      return c;
    }
  }
  return !1;
};
Entry.countStringLength = function(c) {
  var b, d = 0;
  for (b = 0; b < c.length; b++) {
    255 < c.charCodeAt(b) ? d += 2 : d++;
  }
  return d;
};
Entry.cutStringByLength = function(c, b) {
  var d, e = 0;
  for (d = 0; e < b && d < c.length; d++) {
    255 < c.charCodeAt(d) ? e += 2 : e++;
  }
  return c.substr(0, d);
};
Entry.isChild = function(c, b) {
  if (!b) {
    for (; b.parentNode;) {
      if ((b = b.parentNode) == c) {
        return !0;
      }
    }
  }
  return !1;
};
Entry.launchFullScreen = function(c) {
  c.requestFullscreen ? c.requestFullscreen() : c.mozRequestFulScreen ? c.mozRequestFulScreen() : c.webkitRequestFullscreen ? c.webkitRequestFullscreen() : c.msRequestFullScreen && c.msRequestFullScreen();
};
Entry.exitFullScreen = function() {
  document.exitFullScreen ? document.exitFullScreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen && document.webkitExitFullscreen();
};
Entry.isPhone = function() {
  return !1;
};
Entry.getKeyCodeMap = function() {
  return {65:"a", 66:"b", 67:"c", 68:"d", 69:"e", 70:"f", 71:"g", 72:"h", 73:"i", 74:"j", 75:"k", 76:"l", 77:"m", 78:"n", 79:"o", 80:"p", 81:"q", 82:"r", 83:"s", 84:"t", 85:"u", 86:"v", 87:"w", 88:"x", 89:"y", 90:"z", 32:Lang.Blocks.START_press_some_key_space, 37:Lang.Blocks.START_press_some_key_left, 38:Lang.Blocks.START_press_some_key_up, 39:Lang.Blocks.START_press_some_key_right, 40:Lang.Blocks.START_press_some_key_down, 48:"0", 49:"1", 50:"2", 51:"3", 52:"4", 53:"5", 54:"6", 55:"7", 56:"8", 57:"9", 
  13:Lang.Blocks.START_press_some_key_enter, 27:"esc", 17:"ctrl", 18:"alt", 9:"tab", 16:"shift", 8:"backspace"};
};
Entry.checkCollisionRect = function(c, b) {
  return !(c.y + c.height < b.y || c.y > b.y + b.height || c.x + c.width < b.x || c.x > b.x + b.width);
};
Entry.bindAnimationCallback = function(c, b) {
  c.addEventListener("webkitAnimationEnd", b, !1);
  c.addEventListener("animationend", b, !1);
  c.addEventListener("oanimationend", b, !1);
};
Entry.cloneSimpleObject = function(c) {
  var b = {}, d;
  for (d in c) {
    b[d] = c[d];
  }
  return b;
};
Entry.nodeListToArray = function(c) {
  for (var b = Array(c.length), d = -1, e = c.length; ++d !== e; b[d] = c[d]) {
  }
  return b;
};
Entry.computeInputWidth = function() {
  var c, b = {};
  return function(d) {
    d = d.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    var e = b[d];
    if (e) {
      return e;
    }
    c = c || document.getElementById("entryInputForComputeWidth");
    c || (c = document.createElement("span"), c.setAttribute("id", "entryInputForComputeWidth"), c.className = "elem-element", document.body.appendChild(c));
    c.innerHTML = d;
    e = Number(c.offsetWidth + 10) + "px";
    window.fontLoaded && (b[d] = e);
    return e;
  };
}();
Entry.isArrowOrBackspace = function(c) {
  return -1 < [37, 38, 39, 40, 8].indexOf(c);
};
Entry.hexStringToBin = function(c) {
  for (var b = [], d = 0; d < c.length - 1; d += 2) {
    b.push(parseInt(c.substr(d, 2), 16));
  }
  return String.fromCharCode.apply(String, b);
};
Entry.findObjsByKey = function(c, b, d) {
  for (var e = [], f = 0; f < c.length; f++) {
    c[f][b] == d && e.push(c[f]);
  }
  return e;
};
Entry.factorials = [];
Entry.factorial = function(c) {
  return 0 === c || 1 == c ? 1 : 0 < Entry.factorials[c] ? Entry.factorials[c] : Entry.factorials[c] = Entry.factorial(c - 1) * c;
};
Entry.getListRealIndex = function(c, b) {
  if (!Entry.Utils.isNumber(c)) {
    switch(c) {
      case "FIRST":
        c = 1;
        break;
      case "LAST":
        c = b.array_.length;
        break;
      case "RANDOM":
        c = Math.floor(Math.random() * b.array_.length) + 1;
    }
  }
  return c;
};
Entry.toRadian = function(c) {
  return c * Math.PI / 180;
};
Entry.toDegrees = function(c) {
  return 180 * c / Math.PI;
};
Entry.getPicturesJSON = function(c, b) {
  for (var d = [], e = 0, f = c.length; e < f; e++) {
    var g = c[e], h = {};
    h._id = g._id;
    h.id = b ? Entry.generateHash() : g.id;
    h.dimension = g.dimension;
    h.filename = g.filename;
    h.fileurl = g.fileurl;
    h.name = g.name;
    h.scale = g.scale;
    d.push(h);
  }
  return d;
};
Entry.getSoundsJSON = function(c, b) {
  for (var d = [], e = 0, f = c.length; e < f; e++) {
    var g = c[e], h = {};
    h._id = g._id;
    h.duration = g.duration;
    h.ext = g.ext;
    h.id = b ? Entry.generateHash() : g.id;
    h.filename = g.filename;
    h.fileurl = g.fileurl;
    h.name = g.name;
    d.push(h);
  }
  return d;
};
Entry.cutDecimal = function(c) {
  return Math.round(100 * c) / 100;
};
Entry.getBrowserType = function() {
  if (Entry.userAgent) {
    return Entry.userAgent;
  }
  var c = navigator.userAgent, b = c.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
  if (/trident/i.test(b[1])) {
    var d = /\brv[ :]+(\d+)/g.exec(c) || [];
    return "IE " + (d[1] || "");
  }
  if ("Chrome" === b[1] && (d = c.match(/\b(OPR|Edge)\/(\d+)/), null != d)) {
    return d.slice(1).join(" ").replace("OPR", "Opera");
  }
  b = b[2] ? [b[1], b[2]] : [navigator.appName, navigator.appVersion, "-?"];
  null != (d = c.match(/version\/(\d+)/i)) && b.splice(1, 1, d[1]);
  c = b.join(" ");
  return Entry.userAgent = c;
};
Entry.setBasicBrush = function(c) {
  var b = new createjs.Graphics;
  b.thickness = 1;
  b.rgb = Entry.hex2rgb("#ff0000");
  b.opacity = 100;
  b.setStrokeStyle(1);
  b.beginStroke("rgba(255,0,0,1)");
  var d = new createjs.Shape(b);
  Entry.stage.selectedObjectContainer.addChild(d);
  c.brush && (c.brush = null);
  c.brush = b;
  c.shape && (c.shape = null);
  c.shape = d;
};
Entry.setCloneBrush = function(c, b) {
  var d = new createjs.Graphics;
  d.thickness = b.thickness;
  d.rgb = b.rgb;
  d.opacity = b.opacity;
  d.setStrokeStyle(d.thickness);
  d.beginStroke("rgba(" + d.rgb.r + "," + d.rgb.g + "," + d.rgb.b + "," + d.opacity / 100 + ")");
  var e = new createjs.Shape(d);
  Entry.stage.selectedObjectContainer.addChild(e);
  d.stop = b.stop;
  c.brush && (c.brush = null);
  c.brush = d;
  c.shape && (c.shape = null);
  c.shape = e;
};
Entry.isFloat = function(c) {
  return /\d+\.{1}\d+$/.test(c);
};
Entry.isInteger = function(c) {
  return isFinite(c) && Math.floor(c) == c;
};
Entry.getStringIndex = function(c) {
  if (!c) {
    return "";
  }
  for (var b = {string:c, index:1}, d = 0, e = [], f = c.length - 1; 0 < f; --f) {
    var g = c.charAt(f);
    if (Entry.Utils.isNumber(g)) {
      e.unshift(g), d = f;
    } else {
      break;
    }
  }
  0 < d && (b.string = c.substring(0, d), b.index = parseInt(e.join("")) + 1);
  return b;
};
Entry.getOrderedName = function(c, b, d) {
  if (!c) {
    return "untitled";
  }
  if (!b || 0 === b.length) {
    return c;
  }
  d || (d = "name");
  for (var e = 0, f = Entry.getStringIndex(c), g = 0, h = b.length; g < h; g++) {
    var k = Entry.getStringIndex(b[g][d]);
    f.string === k.string && k.index > e && (e = k.index);
  }
  return 0 < e ? f.string + e : c;
};
Entry.changeXmlHashId = function(c) {
  if (/function_field/.test(c.getAttribute("type"))) {
    for (var b = c.getElementsByTagName("mutation"), d = 0, e = b.length; d < e; d++) {
      b[d].setAttribute("hashid", Entry.generateHash());
    }
  }
  return c;
};
Entry.getMaxFloatPoint = function(c) {
  for (var b = 0, d = 0, e = c.length; d < e; d++) {
    var f = String(c[d]), g = f.indexOf(".");
    -1 !== g && (f = f.length - (g + 1), f > b && (b = f));
  }
  return Math.min(b, 20);
};
Entry.convertToRoundedDecimals = function(c, b) {
  return Entry.Utils.isNumber(c) && this.isFloat(c) ? Number(Math.round(c + "e" + b) + "e-" + b) : c;
};
Entry.attachEventListener = function(c, b, d) {
  setTimeout(function() {
    c.addEventListener(b, d);
  }, 0);
};
Entry.deAttachEventListener = function(c, b, d) {
  c.removeEventListener(b, d);
};
Entry.isEmpty = function(c) {
  if (!c) {
    return !0;
  }
  for (var b in c) {
    if (c.hasOwnProperty(b)) {
      return !1;
    }
  }
  return !0;
};
Entry.Utils.disableContextmenu = function(c) {
  if (c) {
    $(c).on("contextmenu", this.contextPreventFunction);
  }
};
Entry.Utils.contextPreventFunction = function(c) {
  c.stopPropagation();
  c.preventDefault();
  return !1;
};
Entry.Utils.enableContextmenu = function(c) {
  c && $(c).off("contextmenu", this.contextPreventFunction);
};
Entry.Utils.isRightButton = function(c) {
  return 2 == c.button || c.ctrlKey;
};
Entry.Utils.isTouchEvent = function(c) {
  return "mousedown" !== c.type.toLowerCase();
};
Entry.Utils.inherit = function(c, b) {
  function d() {
  }
  d.prototype = c.prototype;
  b.prototype = new d;
  return b;
};
Entry.bindAnimationCallbackOnce = function(c, b) {
  c.one("webkitAnimationEnd animationendo animationend", b);
};
Entry.Utils.isInInput = function(c) {
  return "textarea" == c.target.type || "text" == c.target.type;
};
Entry.Utils.isFunction = function(c) {
  return "function" === typeof c;
};
Entry.Utils.addFilters = function(c, b) {
  c = c.elem("defs");
  var d = c.elem("filter", {id:"entryTrashcanFilter_" + b});
  d.elem("feGaussianBlur", {"in":"SourceAlpha", stdDeviation:2, result:"blur"});
  d.elem("feOffset", {"in":"blur", dx:1, dy:1, result:"offsetBlur"});
  d = d.elem("feMerge");
  d.elem("feMergeNode", {"in":"offsetBlur"});
  d.elem("feMergeNode", {"in":"SourceGraphic"}, d);
  d = c.elem("filter", {id:"entryBlockShadowFilter_" + b, height:"200%"});
  d.elem("feOffset", {result:"offOut", in:"SourceGraphic", dx:0, dy:1});
  d.elem("feColorMatrix", {result:"matrixOut", in:"offOut", type:"matrix", values:"0.7 0 0 0 0 0 0.7 0 0 0 0 0 0.7 0 0 0 0 0 1 0"});
  d.elem("feBlend", {in:"SourceGraphic", in1:"offOut", mode:"normal"});
  b = c.elem("filter", {id:"entryBlockHighlightFilter_" + b});
  b.elem("feOffset", {result:"offOut", in:"SourceGraphic", dx:0, dy:0});
  b.elem("feColorMatrix", {result:"matrixOut", in:"offOut", type:"matrix", values:"1.3 0 0 0 0 0 1.3 0 0 0 0 0 1.3 0 0 0 0 0 1 0"});
};
Entry.Utils.addBlockPattern = function(c, b) {
  c = c.elem("pattern", {id:"blockHoverPattern_" + b, class:"blockHoverPattern", patternUnits:"userSpaceOnUse", patternTransform:"translate(12, 0)", x:0, y:0, width:125, height:33, style:"display: none"});
  b = Entry.mediaFilePath + "block_pattern_(order).png";
  for (var d = 1; 5 > d; d++) {
    c.elem("image", {class:"pattern" + d, href:b.replace("(order)", d), x:0, y:0, width:125, height:33});
  }
  return {pattern:c};
};
Entry.Utils.COLLISION = {NONE:0, UP:1, RIGHT:2, LEFT:3, DOWN:4};
Entry.Utils.createMouseEvent = function(c, b) {
  var d = document.createEvent("MouseEvent");
  d.initMouseEvent(c, !0, !0, window, 0, 0, 0, b.clientX, b.clientY, !1, !1, !1, !1, 0, null);
  return d;
};
Entry.Utils.xmlToJsonData = function(c) {
  c = $.parseXML(c);
  var b = [];
  c = c.childNodes[0].childNodes;
  for (var d in c) {
    var e = c[d];
    if (e.tagName) {
      var f = {category:e.getAttribute("id"), blocks:[]}, e = e.childNodes;
      for (d in e) {
        var g = e[d];
        g.tagName && (g = g.getAttribute("type")) && f.blocks.push(g);
      }
      b.push(f);
    }
  }
  return b;
};
Entry.Utils.stopProjectWithToast = function(c, b, d) {
  d = c.block;
  b = b || "\ub7f0\ud0c0\uc784 \uc5d0\ub7ec \ubc1c\uc0dd";
  var e = Entry.engine;
  e && e.toggleStop();
  "workspace" === Entry.type && (c.block && "funcBlock" in c.block ? d = c.block.funcBlock : c.funcExecutor && (d = c.funcExecutor.scope.block, Entry.Func.edit(c.type)), d && (d.getCode().object && d.getCode().object.id && Entry.container.selectObject(d.getCode().object.id, !0), (c = d.view) && c.getBoard().activateBlock(d)));
  Entry.toast && Entry.toast.alert(Lang.Msgs.warn, Lang.Workspace.check_runtime_error, !0);
  throw Error(b);
};
Entry.Utils.AsyncError = function(c) {
  this.name = "AsyncError";
  this.message = c || "\ube44\ub3d9\uae30 \ud638\ucd9c \ub300\uae30";
};
Entry.Utils.AsyncError.prototype = Error();
Entry.Utils.AsyncError.prototype.constructor = Entry.Utils.AsyncError;
Entry.Utils.isChrome = function() {
  return /chrom(e|ium)/.test(navigator.userAgent.toLowerCase());
};
Entry.Utils.waitForWebfonts = function(c, b) {
  var d = 0;
  if (c && c.length) {
    for (var e = 0, f = c.length; e < f; ++e) {
      (function(e) {
        function f() {
          g && g.offsetWidth != l && (++d, g.parentNode.removeChild(g), g = null);
          if (d >= c.length && (m && clearInterval(m), d == c.length)) {
            return b(), !0;
          }
        }
        var g = document.createElement("span");
        g.innerHTML = "giItT1WQy@!-/#";
        g.style.position = "absolute";
        g.style.left = "-10000px";
        g.style.top = "-10000px";
        g.style.fontSize = "300px";
        g.style.fontFamily = "sans-serif";
        g.style.fontVariant = "normal";
        g.style.fontStyle = "normal";
        g.style.fontWeight = "normal";
        g.style.letterSpacing = "0";
        document.body.appendChild(g);
        var l = g.offsetWidth;
        g.style.fontFamily = e;
        var m;
        f() || (m = setInterval(f, 50));
      })(c[e]);
    }
  } else {
    return b && b(), !0;
  }
};
window.requestAnimFrame = function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(c) {
    window.setTimeout(c, 1000 / 60);
  };
}();
Entry.isMobile = function() {
  if (Entry.device) {
    return "tablet" === Entry.device;
  }
  var c = window.platform;
  if (c && c.type && ("tablet" === c.type || "mobile" === c.type)) {
    return Entry.device = "tablet", !0;
  }
  Entry.device = "desktop";
  return !1;
};
Entry.Utils.convertMouseEvent = function(c) {
  return c.originalEvent && c.originalEvent.touches ? c.originalEvent.touches[0] : c.changedTouches ? c.changedTouches[0] : c;
};
Entry.Utils.convertIntToHex = function(c) {
  return c.toString(16).toUpperCase();
};
Entry.Utils.hasSpecialCharacter = function(c) {
  return /!|@|#|\$|%|\^|&|\*|\(|\)|\+|=|-|\[|\]|\\|\'|;|,|\.|\/|{|}|\||\"|:|<|>|\?/g.test(c);
};
Entry.Utils.debounce = function(c, b, d) {
  var e;
  return function() {
    var f = this, g = arguments, h = d && !e;
    clearTimeout(e);
    e = setTimeout(function() {
      e = null;
      d || c.apply(f, g);
    }, b);
    h && c.apply(f, g);
    return e;
  };
};
Entry.Utils.isNewVersion = function(c, b) {
  try {
    c = c.replace("v", "");
    b = b.replace("v", "");
    var d = c.split("."), e = b.split("."), f = d.length < e.length ? d.length : e.length;
    c = !1;
    b = !0;
    for (var g = 0; g < f; g++) {
      Number(d[g]) < Number(e[g]) ? (c = !0, b = !1) : Number(d[g]) > Number(e[g]) && (b = !1);
    }
    b && d.length < e.length && (c = !0);
    return c;
  } catch (h) {
    return !1;
  }
};
Entry.Utils.getBlockCategory = function() {
  var c = {}, b;
  return function(d) {
    if (d) {
      if (c[d]) {
        return c[d];
      }
      b || (b = EntryStatic.getAllBlocks());
      for (var e = 0; e < b.length; e++) {
        var f = b[e], g = f.category;
        if (-1 < f.blocks.indexOf(d)) {
          return c[d] = g;
        }
      }
    }
  };
}();
Entry.Utils.getUniqObjectsBlocks = function(c) {
  c = c || Entry.container.objects_;
  var b = [];
  c.forEach(function(c) {
    c = c.script;
    c instanceof Entry.Code || (c = new Entry.Code(c));
    c.getBlockList().forEach(function(c) {
      0 > b.indexOf(c.type) && b.push(c.type);
    });
  });
  return b;
};
Entry.Utils.getObjectsBlocks = function(c) {
  c = c || Entry.container.objects_;
  var b = [];
  c.forEach(function(c) {
    c = c.script;
    c instanceof Entry.Code || (c = new Entry.Code(c));
    c.getBlockList(!0).forEach(function(c) {
      b.push(c.type);
    });
  });
  return b;
};
Entry.Utils.makeCategoryDataByBlocks = function(c) {
  if (c) {
    for (var b = this, d = EntryStatic.getAllBlocks(), e = {}, f = 0; f < d.length; f++) {
      var g = d[f];
      g.blocks = [];
      e[g.category] = f;
    }
    c.forEach(function(c) {
      var f = b.getBlockCategory(c), f = e[f];
      void 0 !== f && d[f].blocks.push(c);
    });
    c = EntryStatic.getAllBlocks();
    for (f = 0; f < c.length; f++) {
      var g = c[f], h = g.blocks;
      if ("func" === g.category) {
        c.splice(f, 1);
      } else {
        var k = d[f].blocks, l = [];
        h.forEach(function(b) {
          -1 < k.indexOf(b) && l.push(b);
        });
        d[f].blocks = l;
      }
    }
    return d;
  }
};
Entry.Utils.blur = function() {
  var c = document.activeElement;
  c && c.blur && c.blur();
};
Entry.Utils.getWindow = function(c) {
  if (c) {
    for (var b = 0; b < window.frames.length; b++) {
      var d = window.frames[b];
      if (d.Entry && d.Entry.hashId === c) {
        return d;
      }
    }
  }
};
Entry.Utils.restrictAction = function(c, b, d) {
  var e = this;
  c = c || [];
  c = c.map(function(b) {
    return b[0];
  });
  var f = function(f) {
    f = f || window.event;
    var g = f.target || f.srcElement;
    if (!e.isRightButton(f)) {
      for (var h = 0; h < c.length; h++) {
        var m = c[h];
        if (m === g || $.contains(m, g)) {
          d ? g.focus && g.focus() : b(f);
          return;
        }
      }
    }
    f.preventDefault || (f.returnValue = !1, f.cancelBubble = !0);
    f.preventDefault();
    f.stopPropagation();
  };
  this._restrictHandler = f;
  var g = Entry.getDom();
  Entry.Utils.disableContextmenu(g);
  g.addEventListener ? (g.addEventListener("click", f, !0), g.addEventListener("mousedown", f, !0), g.addEventListener("mouseup", f, !0), g.addEventListener("touchstart", f, !0)) : (g.attachEvent("onclick", f), g.attachEvent("onmousedown", f), g.attachEvent("onmouseup", f), g.attachEvent("ontouchstart", f));
};
Entry.Utils.allowAction = function() {
  var c = Entry.getDom();
  Entry.Utils.enableContextmenu(c);
  this._restrictHandler && (c.addEventListener ? (c.removeEventListener("click", this._restrictHandler, !0), c.removeEventListener("mousedown", this._restrictHandler, !0), c.removeEventListener("mouseup", this._restrictHandler, !0), c.removeEventListener("touchstart", this._restrictHandler, !0)) : (c.detachEvent("onclick", this._restrictHandler), c.detachEvent("onmousedown", this._restrictHandler), c.detachEvent("onmouseup", this._restrictHandler), c.detachEvent("ontouchstart", this._restrictHandler)), 
  delete this._restrictHandler);
};
Entry.Utils.glideBlock = function(c, b, d, e) {
  var f = c.getBoundingClientRect(), g = Entry.Dom($('<svg id="globalSvg" width="10" height="10"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:$(document.body)});
  c = $(c.cloneNode(!0));
  c.attr({transform:"translate(8,0)"});
  g.append(c);
  g.css({top:f.top, left:f.left});
  g.velocity({top:d, left:b - 8}, {duration:1200, complete:function() {
    setTimeout(function() {
      g.remove();
      e();
    }, 500);
  }, easing:"ease-in-out"});
};
Entry.Utils.getScrollPos = function() {
  var c = -1 < Entry.getBrowserType().indexOf("IE") ? document.documentElement : document.body;
  return {left:c.scrollLeft, top:c.scrollTop};
};
Entry.Utils.copy = function(c) {
  return JSON.parse(JSON.stringify(c));
};
Entry.Utils.getAllObjectsBlockList = function() {
  return Entry.container.objects_.reduce(function(c, b) {
    return c.concat(b.script.getBlockList());
  }, []);
};
Entry.Utils.toFixed = function(c, b) {
  b = b || 1;
  var d = Math.pow(10, b);
  c = Math.round(c * d) / d;
  if (Entry.isFloat(c)) {
    return String(c);
  }
  c += ".";
  for (d = 0; d < b; d++) {
    c += "0";
  }
  return c;
};
Entry.Model = function(c, b) {
  var d = Entry.Model;
  d.generateSchema(c);
  d.generateSetter(c);
  d.generateObserve(c);
  (void 0 === b || b) && Object.seal(c);
  return c;
};
(function(c) {
  c.generateSchema = function(b) {
    var c = b.schema;
    if (void 0 !== c) {
      c = JSON.parse(JSON.stringify(c));
      b.data = {};
      for (var e in c) {
        (function(d) {
          b.data[d] = c[d];
          Object.defineProperty(b, d, {get:function() {
            return b.data[d];
          }});
        })(e);
      }
      b._toJSON = this._toJSON;
    }
  };
  c.generateSetter = function(b) {
    b.set = this.set;
  };
  c.set = function(b, c) {
    var d = {}, f;
    for (f in this.data) {
      void 0 !== b[f] && (b[f] === this.data[f] ? delete b[f] : (d[f] = this.data[f], this.data[f] = b[f] instanceof Array ? b[f].concat() : b[f]));
    }
    c || this.notify(Object.keys(b), d);
  };
  c.generateObserve = function(b) {
    b.observers = [];
    b.observe = this.observe;
    b.unobserve = this.unobserve;
    b.notify = this.notify;
  };
  c.observe = function(b, c, e, f) {
    e = new Entry.Observer(this.observers, b, c, e);
    if (!1 !== f) {
      b[c]([]);
    }
    return e;
  };
  c.unobserve = function(b) {
    b.destroy();
  };
  c.notify = function(b, c) {
    "string" === typeof b && (b = [b]);
    var d = this, f = d.observers;
    if (f.length) {
      var g = Entry.Utils.intersectArray;
      f.forEach(function(e) {
        var f = b;
        void 0 !== e.attrs && (f = g(e.attrs, b));
        if (f.length) {
          e.object[e.funcName](f.forEach(function(b) {
            return {name:b, object:d, oldValue:c[b]};
          }));
        }
      });
    }
  };
  c._toJSON = function() {
    var b = {}, c;
    for (c in this.data) {
      b[c] = this.data[c];
    }
    return b;
  };
})(Entry.Model);
Entry.Observer = function(c, b, d, e) {
  this.parent = c;
  this.object = b;
  this.funcName = d;
  this.attrs = e;
  c.push(this);
};
(function(c) {
  c.destroy = function() {
    var b = this.parent, c = b.indexOf(this);
    -1 < c && b.splice(c, 1);
    return this;
  };
})(Entry.Observer.prototype);
Entry.STATIC = {OBJECT:0, ENTITY:1, SPRITE:2, SOUND:3, VARIABLE:4, FUNCTION:5, SCENE:6, MESSAGE:7, BLOCK_MODEL:8, BLOCK_RENDER_MODEL:9, BOX_MODEL:10, THREAD_MODEL:11, DRAG_INSTANCE:12, BLOCK_STATIC:0, BLOCK_MOVE:1, BLOCK_FOLLOW:2, RETURN:0, CONTINUE:1, BREAK:2, PASS:3, COMMAND_TYPES:{addThread:101, destroyThread:102, destroyBlock:103, recoverBlock:104, insertBlock:105, separateBlock:106, moveBlock:107, cloneBlock:108, uncloneBlock:109, scrollBoard:110, setFieldValue:111, selectBlockMenu:112, destroyBlockBelow:113, 
destroyThreads:114, addThreads:115, recoverBlockBelow:116, addThreadFromBlockMenu:117, insertBlockFromBlockMenu:118, moveBlockFromBlockMenu:119, separateBlockForDestroy:120, moveBlockForDestroy:121, insertBlockFromBlockMenuFollowSeparate:122, insertBlockFollowSeparate:123, separateBlockByCommand:124, selectObject:201, objectEditButtonClick:202, objectAddPicture:203, objectRemovePicture:204, objectAddSound:205, objectRemoveSound:206, "do":301, undo:302, redo:303, editPicture:401, uneditPicture:402, 
processPicture:403, unprocessPicture:404, editText:405, toggleRun:501, toggleStop:502, containerSelectObject:601, playgroundChangeViewMode:701, playgroundClickAddPicture:702, playgroundClickAddSound:703, playgroundClickAddPictureCancel:704, playgroundClickAddSoundCancel:705, variableContainerSelectFilter:801, variableContainerClickVariableAddButton:802, variableContainerAddVariable:803, variableContainerRemoveVariable:804, variableAddSetName:805}, RECORDABLE:{SUPPORT:1, SKIP:2, ABANDON:3}};
Entry.Command = {};
(function(c) {
  c[Entry.STATIC.COMMAND_TYPES.do] = {recordable:Entry.STATIC.RECORDABLE.SKIP, log:function(b) {
    return [];
  }, skipUndoStack:!0};
  c[Entry.STATIC.COMMAND_TYPES.undo] = {recordable:Entry.STATIC.RECORDABLE.SKIP, log:function(b) {
    return [];
  }, skipUndoStack:!0};
  c[Entry.STATIC.COMMAND_TYPES.redo] = {recordable:Entry.STATIC.RECORDABLE.SKIP, log:function(b) {
    return [];
  }, skipUndoStack:!0};
})(Entry.Command);
Entry.Commander = function(c) {
  if ("workspace" == c || "phone" == c) {
    Entry.stateManager = new Entry.StateManager;
  }
  Entry.do = this.do.bind(this);
  Entry.undo = this.undo.bind(this);
  this.editor = {};
  this.reporters = [];
  this._tempStorage = null;
  Entry.Command.editor = this.editor;
  this.doEvent = new Entry.Event(this);
  this.logEvent = new Entry.Event(this);
  this.doCommandAll = Entry.doCommandAll;
};
(function(c) {
  c.do = function(b) {
    "string" === typeof b && (b = Entry.STATIC.COMMAND_TYPES[b]);
    var c = Array.prototype.slice.call(arguments);
    c.shift();
    this.report(Entry.STATIC.COMMAND_TYPES.do);
    this.report(b, c);
    var e = Entry.Command[b], f, g = !0 === e.skipUndoStack || !this.doCommandAll && 500 < b;
    Entry.stateManager && !g && (f = Entry.stateManager.addCommand.apply(Entry.stateManager, [b, this, this.do, e.undo].concat(e.state.apply(this, c))));
    e = Entry.Command[b].do.apply(this, c);
    this.doEvent.notify(b, c);
    var h = f ? f.id : null;
    return {value:e, isPass:function(b, c) {
      this.isPassById(h, b, c);
    }.bind(this)};
  };
  c.undo = function() {
    var b = Array.prototype.slice.call(arguments), c = b.shift(), e = Entry.Command[c];
    this.report(Entry.STATIC.COMMAND_TYPES.undo);
    var f = Entry.Command[c], g;
    Entry.stateManager && !0 !== f.skipUndoStack && (g = Entry.stateManager.addCommand.apply(Entry.stateManager, [c, this, this.do, e.undo].concat(e.state.apply(this, b))));
    return {value:Entry.Command[c].do.apply(this, b), isPass:function(b) {
      this.isPassById(g.id, b);
    }.bind(this)};
  };
  c.redo = function() {
    var b = Array.prototype.slice.call(arguments), c = b.shift(), e = Entry.Command[c];
    this.report(Entry.STATIC.COMMAND_TYPES.redo);
    var f = Entry.Command[c];
    Entry.stateManager && !0 !== f.skipUndoStack && Entry.stateManager.addCommand.apply(Entry.stateManager, [c, this, this.undo, c].concat(e.state.apply(null, b)));
    e.undo.apply(this, b);
  };
  c.setCurrentEditor = function(b, c) {
    this.editor[b] = c;
  };
  c.isPass = function(b) {
    if (Entry.stateManager) {
      b = void 0 === b ? !0 : b;
      var c = Entry.stateManager.getLastCommand();
      c && (c.isPass = b);
    }
  };
  c.isPassById = function(b, c, e) {
    b && Entry.stateManager && (c = void 0 === c ? !0 : c, b = Entry.stateManager.getLastCommandById(b)) && (b.isPass = c, e && (b.skipCount = !!e));
  };
  c.addReporter = function(b) {
    b.logEventListener = this.logEvent.attach(b, b.add);
  };
  c.removeReporter = function(b) {
    b.logEventListener && this.logEvent.detatch(b.logEventListener);
    delete b.logEventListener;
  };
  c.report = function(b, c) {
    c = b && Entry.Command[b] && Entry.Command[b].log ? Entry.Command[b].log.apply(this, c) : c;
    c.unshift(b);
    this.logEvent.notify(c);
  };
  c.applyOption = function() {
    this.doCommandAll = Entry.doCommandAll;
  };
})(Entry.Commander.prototype);
(function(c) {
  function b(b, d, e) {
    c[b] = Entry.cloneSimpleObject(c[d]);
    e && e instanceof Array && e.forEach(function(d) {
      c[b][d[0]] = d[1];
    });
    return c[b];
  }
  var d = Entry.STATIC.COMMAND_TYPES;
  c[d.addThread] = {do:function(b, c) {
    return this.editor.board.code.createThread(b, c);
  }, state:function(b, c) {
    if (void 0 === c || null === c) {
      c = this.editor.board.code.getThreadCount();
    }
    return [c];
  }, log:function(b, c) {
    b instanceof Entry.Thread && (b = b.toJSON());
    return [["blocks", b], ["index", c]];
  }, undo:"destroyThread", recordable:Entry.STATIC.RECORDABLE.SUPPORT, validate:!1, dom:["playground", "blockMenu", "&0"]};
  var e = Entry.cloneSimpleObject(c[d.addThread]);
  e.showMe = function(b) {
    if (!b.isTooltipFaded()) {
      b.fadeOutTooltip();
      var c = Entry.getDom(b.processDomQuery(this.dom)), e = b.requestNextData().content, e = Entry.getDom(b.processDomQuery(e[0] === d.moveBlockFromBlockMenu ? ["playground", "board", "coord", "&1", "&2"] : ["playground", "board", "&1", "magnet", "next", 0], e)).getBoundingClientRect();
      Entry.Utils.glideBlock(c, e.left, e.top, function() {
        b.fadeInTooltip();
      });
    }
  };
  e.followCmd = !0;
  e.restrict = function(b, c, d, e) {
    e = e.requestNextData().content;
    e[0] === Entry.STATIC.COMMAND_TYPES.insertBlockFromBlockMenu && Entry.Command.editor.board.scrollToPointer(e[2][1]);
    return new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {dimmed:!0, restrict:!0, callBack:d});
  };
  c[d.addThreadFromBlockMenu] = e;
  c[d.destroyThread] = {do:function(b) {
    b instanceof Entry.Thread || (b = this.editor.board.code.getThread(b));
    b.getFirstBlock().destroy(!0, !0);
  }, state:function(b) {
    b instanceof Entry.Thread || (b = this.editor.board.code.getThread(b));
    var c = this.editor.board.code.getThreadIndex(b);
    return [b.toJSON(), c];
  }, log:function(b) {
    b instanceof Entry.Thread && (b = this.editor.board.code.getThreadIndex(b));
    return [["index", b]];
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, restrict:function(b, c, d) {
    d();
  }, validate:!1, undo:"addThread"};
  c[d.destroyBlock] = {do:function(b) {
    b = this.editor.board.findBlock(b);
    b.destroy(!0);
  }, state:function(b) {
    var c = !1;
    b = this.editor.board.findBlock(b);
    var d = b.targetPointer(), e = b.toJSON();
    3 === d.length && (1 === b.thread.getCount() ? c = !0 : d.push(-1));
    "output" === b.getBlockType() && (e.params[1] = void 0);
    return [e, d, c];
  }, log:function(b) {
    b = this.editor.board.findBlock(b);
    return [["block", b.pointer ? b.pointer() : b]];
  }, undo:"recoverBlock"};
  c[d.recoverBlock] = {do:function(b, c, d) {
    if (d) {
      return this.editor.board.code.createThread([b], c[2]);
    }
    b = this.editor.board.code.createThread([b]).getFirstBlock();
    this.editor.board.insert(b, c);
  }, state:function(b) {
    "string" !== typeof b && (b = b.id);
    return [b];
  }, log:function(b, c) {
    b = this.editor.board.findBlock(b.id);
    return [["block", b], ["pointer", c]];
  }, undo:"destroyBlock"};
  c[d.insertBlock] = {do:function(b, c, d) {
    b = this.editor.board.findBlock(b);
    this.editor.board.insert(b, c, d);
  }, state:function(b, c, d) {
    b = this.editor.board.findBlock(b);
    c = [b, b.targetPointer()];
    "string" !== typeof b && "basic" === b.getBlockType() ? c.push(b.thread.getCount(b)) : "string" !== typeof b && "output" === b.getBlockType() && c.push(d || b.getOutputBlockCount() + 1);
    return c;
  }, log:function(b, c, d) {
    b = this.editor.board.findBlock(b);
    c instanceof Array || (c = c.pointer());
    b = [["block", b ? b.pointer() : ""], ["targetPointer", c]];
    d && b.push(["count", d ? d : null]);
    return b;
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"insertBlock", restrict:function(b, c, d, e) {
    var f = Entry.Command.editor.board, g = f.code.getByPointer(b.content[1][1]), h;
    f.scrollToPointer(b.content[1][1]);
    e.toolTipRender && (e.toolTipRender.titleIndex = 0, e.toolTipRender.contentIndex = 0);
    var k = b.tooltip.isDefault, r = !1, t = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {dimmed:!0, restrict:!0, callBack:function(c) {
      !r && c && (r = !0, d(), c = f.scrollToPointer(b.content[2][1]), g && (h = g.view), h && (h = h.getSvgRoot().blockView) && c && h.moveBy(-c[0], -c[1]), e.toolTipRender.titleIndex = 1, e.toolTipRender && (k ? (c = Entry.Command.editor.board.code.getTargetByPointer(b.content[2][1])) && c.isParamBlockType() ? e.toolTipRender.contentIndex = 2 : e.toolTipRender.contentIndex = 1 : e.toolTipRender.contentIndex = 1), c = e.processDomQuery(["playground", "board", "&1", "magnet"]), t.init([{title:b.tooltip.title, 
      content:b.tooltip.content, target:c}], {indicator:!0, callBack:function() {
      }}));
    }});
    return t;
  }, showMe:function(b) {
    if (!b.isTooltipFaded()) {
      b.fadeOutTooltip();
      var c = Entry.getDom(b.processDomQuery(this.dom)), d = Entry.getDom(b.processDomQuery(["playground", "board", "&1", "magnet", "next", 0])).getBoundingClientRect();
      Entry.Utils.glideBlock(c, d.left, d.top, function() {
        b.fadeInTooltip();
      });
    }
  }, dom:["playground", "board", "&0"]};
  e = Entry.cloneSimpleObject(c[d.insertBlock]);
  e.followCmd = !0;
  c[d.insertBlockFollowSeparate] = e;
  e = Entry.cloneSimpleObject(c[d.insertBlock]);
  e.restrict = function(b, c, d, e) {
    if (e.toolTipRender && e.toolTipRender) {
      var f = Entry.Command.editor.board.code.getByPointer(b.content[2][1]);
      !f || f.isParamBlockType() ? e.toolTipRender.contentIndex = 1 : e.toolTipRender.contentIndex = 0;
    }
    d();
    return new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {indicator:!0, callBack:function() {
    }});
  };
  e.dom = ["playground", "board", "&1", "magnet"];
  c[d.insertBlockFromBlockMenu] = e;
  e = Entry.cloneSimpleObject(c[d.insertBlockFromBlockMenu]);
  e.followCmd = !0;
  c[d.insertBlockFromBlockMenuFollowSeparate] = e;
  c[d.separateBlock] = {do:function(b, c, d) {
    b = this.editor.board.findBlock(b);
    "number" === typeof d && (b.view._moveTo(c, d), c = void 0);
    c = void 0 === c ? Entry.DRAG_MODE_DRAG : c;
    b.view && b.view._toGlobalCoordinate(c);
    b.doSeparate();
  }, state:function(b) {
    b = this.editor.board.findBlock(b);
    var c = [b], d = b.targetPointer();
    c.push(d);
    "basic" === b.getBlockType() && c.push(b.thread.getCount(b));
    return c;
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, log:function(b) {
    b = this.editor.board.findBlock(b);
    var c = b.pointer();
    b.view && (b = b.view);
    return [["block", c], ["x", b.x], ["y", b.y]];
  }, restrict:function(b, c, d, e) {
    Entry.Command.editor.board.scrollToPointer(b.content[1][1]);
    var f = !1;
    e.toolTipRender && (e.toolTipRender.titleIndex = 0, e.toolTipRender.contentIndex = 0);
    var g = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {dimmed:!0, restrict:!0, callBack:function(c) {
      !f && c && (e.toolTipRender && (e.toolTipRender.titleIndex = 1, e.toolTipRender.contentIndex = 1), d(), f = !0, g.init([{title:b.tooltip.title, content:b.tooltip.content, target:e.processDomQuery(["playground", "board", "coord", "&1", "&2"])}], {indicator:!0, callBack:function() {
        d();
      }}));
    }});
    return g;
  }, undo:"insertBlock", dom:["playground", "board", "&0"]};
  e = Entry.cloneSimpleObject(c[d.separateBlock]);
  e.restrict = function(b, c, d, e) {
    Entry.Command.editor.board.scrollToPointer(b.content[1][1]);
    var f = !1;
    e.toolTipRender && (e.toolTipRender.titleIndex = 0, e.toolTipRender.contentIndex = 0);
    var g = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {dimmed:!0, restrict:!0, callBack:function(c) {
      !f && c && (d(), e.toolTipRender && (e.toolTipRender.titleIndex = 1, e.toolTipRender.contentIndex = 1), f = !0, g.init([{title:b.tooltip.title, content:b.tooltip.content, target:["playground", "board", "trashcan"]}], {indicator:!0, callBack:function() {
        d();
      }}));
    }});
    return g;
  };
  e.showMe = function(b) {
    if (!b.isTooltipFaded()) {
      b.fadeOutTooltip();
      var c = Entry.getDom(b.processDomQuery(this.dom)), d = Entry.getDom(["playground", "board", "trashcan"]).getBoundingClientRect();
      Entry.Utils.glideBlock(c, d.left, d.top, function() {
        b.fadeInTooltip();
      });
    }
  };
  e.followCmd = !0;
  c[d.separateBlockForDestroy] = e;
  c[d.moveBlock] = {do:function(b, c, d) {
    void 0 !== c ? (b = this.editor.board.findBlock(b), b.moveTo(c, d)) : b._updatePos();
  }, state:function(b) {
    b = this.editor.board.findBlock(b);
    return [b, b.x, b.y];
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, restrict:function(b, c, d, e) {
    var f = !1, g = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {dimmed:!0, restrict:!0, callBack:function(c) {
      !f && c && (f = !0, d(), g.init([{title:b.tooltip.title, content:b.tooltip.content, target:e.processDomQuery(["playground", "board", "coord", "&1", "&2"])}], {indicator:!0, callBack:function() {
      }}));
    }});
    return g;
  }, validate:!1, log:function(b, c, d) {
    b = this.editor.board.findBlock(b);
    return [["block", b.pointer()], ["x", b.view.x], ["y", b.view.y]];
  }, undo:"moveBlock", dom:["playground", "board", "&0"]};
  e = Entry.cloneSimpleObject(c[d.moveBlock]);
  e.followCmd = !0;
  e.restrict = function(b, c, d, e) {
    Entry.Command.editor.board.scrollToPointer(b.content[1][1]);
    var f = !1;
    e.toolTipRender && (e.toolTipRender.titleIndex = 0, e.toolTipRender.contentIndex = 0);
    var g = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {dimmed:!0, restrict:!0, callBack:function(c) {
      !f && c && (f = !0, d(), e.toolTipRender && (e.toolTipRender.titleIndex = 1, e.toolTipRender.contentIndex = 1), g.init([{title:b.tooltip.title, content:b.tooltip.content, target:["playground", "board", "trashcan"]}], {indicator:!0, callBack:function() {
        d();
      }}));
    }});
    return g;
  };
  c[d.moveBlockForDestroy] = e;
  e = Entry.cloneSimpleObject(c[d.moveBlock]);
  e.restrict = function(b, c, d) {
    d();
    return new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {callBack:function() {
    }});
  };
  e.dom = ["playground", "board", "coord", "&1", "&2"];
  c[d.moveBlockFromBlockMenu] = e;
  b(d.cloneBlock, d.addThread, [["undo", "uncloneBlock"], ["dom", void 0]]);
  b(d.uncloneBlock, d.destroyThread, [["undo", "cloneBlock"]]);
  c[d.scrollBoard] = {do:function(b, c, d) {
    d || this.editor.board.scroller._scroll(b, c);
    delete this.editor.board.scroller._diffs;
  }, state:function(b, c) {
    return [-b, -c];
  }, log:function(b, c) {
    return [["dx", b], ["dy", c]];
  }, recordable:Entry.STATIC.RECORDABLE.SKIP, undo:"scrollBoard"};
  c[d.setFieldValue] = {do:function(b, c, d) {
    b = d ? d.getByPointer(b) : this.editor.board.findBlock(b);
    b.setValue(c, !0);
    Entry.disposeEvent.notify(!0);
    b._blockView.disableMouseEvent = !1;
  }, state:function(b, c, d) {
    c = d ? d.getByPointer(b) : this.editor.board.findBlock(b);
    return [b, c._startValue || c.getValue()];
  }, log:function(b, c) {
    return [["pointer", b], ["value", c]];
  }, restrict:function(b, c, d, e) {
    var f = !1, g = b.tooltip.isDefault;
    Entry.Command.editor.board.scrollToPointer(b.content[1][1]);
    var h = Entry.Command.editor.board.findBlock(b.content[1][1]), k = h._blockView;
    k.disableMouseEvent = !0;
    var r = h.getFieldRawType();
    if (e.toolTipRender) {
      if (g) {
        switch(r) {
          case "textInput":
            e.toolTipRender.contentIndex = 0;
            break;
          case "dropdown":
          case "dropdownDynamic":
            e.toolTipRender.contentIndex = 1;
            break;
          case "keyboard":
            e.toolTipRender.contentIndex = 2;
        }
      } else {
        e.toolTipRender.contentIndex = 0;
      }
    }
    var t = b.content[2][1];
    h instanceof Entry.FieldTextInput && h.fixNextValue(t);
    var u = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, direction:"left", target:c}], {dimmed:!0, restrict:!0, callBack:function(c) {
      if (!f && c) {
        f = !0;
        d();
        d();
        e.toolTipRender.replaceContent(/&value&/gi, h.getTextValueByValue(t));
        if (e.toolTipRender) {
          if (g) {
            switch(r) {
              case "textInput":
                e.toolTipRender.contentIndex = 3;
                break;
              case "dropdown":
              case "dropdownDynamic":
                e.toolTipRender.contentIndex = 4;
                break;
              case "keyboard":
                e.toolTipRender.contentIndex = 5;
            }
          } else {
            e.toolTipRender.titleIndex = 1, e.toolTipRender.contentIndex = 1;
          }
        }
        u.init([{title:b.tooltip.title, content:b.tooltip.content, target:e.processDomQuery(["playground", "board", "&0", "option"])}], {dimmed:!0, restrict:!0, callBack:function() {
          k.disableMouseEvent = !1;
        }});
      }
    }});
    return u;
  }, disableMouseUpDispose:!0, recordable:Entry.STATIC.RECORDABLE.SUPPORT, dom:["playground", "board", "&0"], undo:"setFieldValue"};
  c[d.selectBlockMenu] = {do:function(b, c, d) {
    var e = Entry.getMainWS().blockMenu;
    e.selectMenu(b, c, d);
    e.align();
  }, state:function(b, c, d) {
    return [Entry.getMainWS().blockMenu.lastSelector, c, d];
  }, log:function(b, c, d) {
    return [["selector", b]];
  }, skipUndoStack:!0, recordable:Entry.STATIC.RECORDABLE.SUPPORT, dom:["playground", "blockMenu", "category", "&0"], undo:"selectBlockMenu"};
  c[d.destroyThreads] = {do:function() {
    this.editor.board.code.getThreads().filter(function(b) {
      return b.getFirstBlock().isDeletable();
    }).forEach(function(b) {
      b.destroy();
    });
  }, state:function() {
    return [this.editor.board.code.getThreads().filter(function(b) {
      return b.getFirstBlock().isDeletable();
    }).map(function(b) {
      return b.toJSON();
    })];
  }, log:function() {
    return [];
  }, undo:"addThreads"};
  c[d.addThreads] = {do:function(b) {
    var c = this.editor.board.code;
    b.forEach(function(b) {
      c.createThread(b);
    });
  }, state:function() {
    return [];
  }, log:function() {
    return [];
  }, undo:"destroyThreads"};
  c[d.destroyBlockBelow] = {do:function(b) {
    b = this.editor.board.findBlock(b);
    b.doDestroyBelow(!0);
  }, state:function(b) {
    b = this.editor.board.findBlock(b);
    var c = b.thread;
    return [c instanceof Entry.Thread ? c.toJSON(!1, b) : [b.toJSON()], b.targetPointer()];
  }, log:function(b) {
    return [];
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"recoverBlockBelow"};
  c[d.recoverBlockBelow] = {do:function(b, c) {
    var d = this.editor.board;
    b = d.code.createThread(b);
    d.insert(b.getFirstBlock(), c);
  }, state:function(b, c) {
    return [b[0]];
  }, log:function(b, c) {
    return [];
  }, undo:"destroyBlockBelow"};
  b(d.separateBlockByCommand, d.separateBlock);
})(Entry.Command);
(function(c) {
  c[Entry.STATIC.COMMAND_TYPES.containerSelectObject] = {do:function(b) {
    Entry.container.selectObject(b);
  }, state:function(b) {
    return [Entry.playground.object.id, b];
  }, log:function(b) {
    return [["objectId", b], ["objectIndex", Entry.container.getObjectIndex(b)]];
  }, undo:"containerSelectObject", recordable:Entry.STATIC.RECORDABLE.SUPPORT, dom:["container", "objectIndex", "&1"]};
})(Entry.Command);
(function(c) {
  var b = Entry.STATIC.COMMAND_TYPES;
  c[b.toggleRun] = {do:function(b) {
    Entry.engine.toggleRun();
  }, state:function() {
    return [];
  }, log:function(b) {
    return [["callerName", b]];
  }, restrict:function(b, c, f, g) {
    f = Entry.engine;
    f.isState("stop") || f.toggleStop();
    return new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {dimmed:!0, restrict:!0, callBack:function(b) {
    }});
  }, validate:!1, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"toggleStop", dom:["engine", "&0"]};
  c[b.toggleStop] = {do:function(b) {
    Entry.engine.toggleStop();
  }, state:function() {
    return [];
  }, log:function(b) {
    return [["callerName", b]];
  }, restrict:function(b, c, f, g) {
    g = Entry.engine;
    Entry.engine.popup && Entry.engine.closeFullScreen();
    g.isState("run") || g.toggleRun(!1);
    return new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {dimmed:!0, restrict:!0, callBack:function(b) {
      f();
    }});
  }, validate:!1, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"toggleRun", dom:["engine", "&0"]};
})(Entry.Command);
(function(c) {
  var b = Entry.STATIC.COMMAND_TYPES;
  c[b.selectObject] = {do:function(b) {
    return Entry.container.selectObject(b);
  }, state:function(b) {
    if ((b = Entry.playground) && b.object) {
      return [b.object.id];
    }
  }, log:function(b) {
    return [b];
  }, undo:"selectObject"};
  c[b.objectEditButtonClick] = {do:function(b) {
    Entry.container.getObject(b).toggleEditObject();
  }, state:function(b) {
    return [];
  }, log:function(b) {
    return [["objectId", b], ["objectIndex", Entry.container.getObjectIndex(b)]];
  }, skipUndoStack:!0, recordable:Entry.STATIC.RECORDABLE.SUPPORT, dom:["container", "objectIndex", "&1", "editButton"], undo:"selectObject"};
  c[b.objectAddPicture] = {do:function(d, e) {
    var f = c[b.objectAddPicture].hashId;
    f && (e.id = f, delete c[b.objectAddPicture].hashId);
    Entry.container.getObject(d).addPicture(e);
    Entry.playground.injectPicture();
    Entry.playground.selectPicture(e);
    Entry.dispatchEvent("dismissModal");
  }, state:function(b, c) {
    return [b, c];
  }, log:function(b, c) {
    var d = {};
    d._id = c._id;
    d.id = c.id;
    d.dimension = c.dimension;
    d.filename = c.filename;
    d.fileurl = c.fileurl;
    d.name = c.name;
    d.scale = c.scale;
    return [["objectId", b], ["picture", d]];
  }, dom:[".btn_confirm_modal"], restrict:function(b, c, f) {
    this.hashId = b.content[2][1].id;
    c = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:".btn_confirm_modal"}], {restrict:!0, dimmed:!0, render:!1, callBack:f});
    f = Entry.getMainWS().widgetUpdateEvent;
    b.skip || Entry.dispatchEvent("openPictureManager", b.content[2][1]._id, f.notify.bind(f));
    return c;
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, validate:!1, undo:"objectRemovePicture"};
  c[b.objectRemovePicture] = {do:function(b, c) {
    Entry.container.getObject(b).removePicture(c.id);
  }, state:function(b, c) {
    return [b, c];
  }, log:function(b, c) {
    return [["objectId", b], ["pictureId", c._id]];
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, validate:!1, undo:"objectAddPicture"};
  c[b.objectAddSound] = {do:function(d, e) {
    var f = c[b.objectAddSound].hashId;
    f && (e.id = f, delete c[b.objectAddSound].hashId);
    Entry.container.getObject(d).addSound(e);
    Entry.dispatchEvent("dismissModal");
  }, state:function(b, c) {
    return [b, c];
  }, log:function(b, c) {
    var d = {};
    d._id = c._id;
    d.duration = c.duration;
    d.ext = c.ext;
    d.id = c.id;
    d.filename = c.filename;
    d.fileurl = c.fileurl;
    d.name = c.name;
    return [["objectId", b], ["sound", d]];
  }, dom:[".btn_confirm_modal"], restrict:function(b, c, f) {
    this.hashId = b.content[2][1].id;
    c = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:".btn_confirm_modal"}], {callBack:f, dimmed:!0, restrict:!0, render:!1});
    f = Entry.getMainWS().widgetUpdateEvent;
    b.skip || Entry.dispatchEvent("openSoundManager", b.content[2][1]._id, f.notify.bind(f));
    return c;
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, validate:!1, undo:"objectRemoveSound"};
  c[b.objectRemoveSound] = {do:function(b, c) {
    return Entry.container.getObject(b).removeSound(c.id);
  }, state:function(b, c) {
    return [b, c];
  }, log:function(b, c) {
    return [["objectId", b], ["soundId", c._id]];
  }, dom:[".btn_confirm_modal"], recordable:Entry.STATIC.RECORDABLE.SUPPORT, validate:!1, undo:"objectAddSound"};
})(Entry.Command);
(function(c) {
  var b = Entry.STATIC.COMMAND_TYPES;
  c[b.editPicture] = {do:function(b, c) {
    Entry.playground.painter.lc.canRedo() && Entry.playground.painter.lc.redo();
  }, state:function(b) {
  }, log:function(b) {
    return [b];
  }, recordable:Entry.STATIC.RECORDABLE.SKIP, undo:"uneditPicture"};
  c[b.uneditPicture] = {type:Entry.STATIC.COMMAND_TYPES.uneditPicture, do:function(b, c) {
    Entry.playground.painter.lc.undo();
  }, state:function(b) {
  }, log:function(b) {
    return [b];
  }, recordable:Entry.STATIC.RECORDABLE.SKIP, undo:"editPicture"};
  c[b.processPicture] = {do:function(b, c) {
    Entry.playground.painter.lc.canRedo() && Entry.playground.painter.lc.redo();
  }, state:function(b) {
  }, log:function(b) {
    return [b];
  }, recordable:Entry.STATIC.RECORDABLE.SKIP, undo:"unprocessPicture", isPass:!0};
  c[b.unprocessPicture] = {do:function(b, c) {
    Entry.playground.painter.lc.undo();
  }, state:function(b) {
  }, log:function(b) {
    return [b];
  }, recordable:Entry.STATIC.RECORDABLE.SKIP, undo:"processPicture", isPass:!0};
})(Entry.Command);
(function(c) {
  var b = Entry.STATIC.COMMAND_TYPES;
  c[b.playgroundChangeViewMode] = {do:function(b, c) {
    Entry.playground.changeViewMode(b);
  }, state:function(b, c) {
    return [c, b];
  }, log:function(b, c) {
    return [["newType", b], ["oldType", c || "code"]];
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"playgroundChangeViewMode", dom:["playground", "tabViewElements", "&0"]};
  c[b.playgroundClickAddPicture] = {do:function() {
    Entry.dispatchEvent("openPictureManager");
  }, state:function() {
    return [];
  }, log:function() {
    return [];
  }, validate:!1, recordable:Entry.STATIC.RECORDABLE.SUPPORT, restrict:function(b, c, f, g) {
    Entry.dispatchEvent("dismissModal");
    return new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {restrict:!0, dimmed:!0, callBack:f});
  }, undo:"playgroundClickAddPictureCancel", dom:["playground", "pictureAddButton"]};
  c[b.playgroundClickAddPictureCancel] = {do:function() {
    Entry.dispatchEvent("dismissModal");
  }, state:function() {
    return [];
  }, log:function() {
    return [];
  }, validate:!1, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"", dom:["playground", "pictureAddButton"]};
  c[b.playgroundClickAddSound] = {do:function() {
    Entry.dispatchEvent("openSoundManager");
  }, state:function() {
    return [];
  }, log:function() {
    return [];
  }, validate:!1, recordable:Entry.STATIC.RECORDABLE.SUPPORT, restrict:function(b, c, f, g) {
    Entry.dispatchEvent("dismissModal");
    return new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {restrict:!0, dimmed:!0, callBack:f});
  }, undo:"playgroundClickAddSoundCancel", dom:["playground", "soundAddButton"]};
  c[b.playgroundClickAddSoundCancel] = {do:function() {
    Entry.dispatchEvent("dismissModal");
  }, state:function() {
    return [];
  }, log:function() {
    return [];
  }, validate:!1, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"", dom:["playground", "soundAddButton"]};
})(Entry.Command);
(function(c) {
  c[Entry.STATIC.COMMAND_TYPES.editText] = {do:function(b, c) {
    Entry.playground.object.setText(b);
    Entry.playground.object.entity.setText(b);
    Entry.dispatchEvent("textEdited");
  }, state:function(b, c) {
    return [c, b];
  }, log:function() {
    return [];
  }, validate:!1, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"editText"};
})(Entry.Command);
(function(c) {
  var b = Entry.STATIC.COMMAND_TYPES;
  c[b.variableContainerSelectFilter] = {do:function(b, c) {
    Entry.variableContainer.selectFilter(b);
  }, state:function(b, c) {
    return [c, b];
  }, log:function(b, c) {
    return [["newType", b], ["oldType", c || "all"]];
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"variableContainerSelectFilter", dom:["variableContainer", "filter", "&0"]};
  c[b.variableContainerClickVariableAddButton] = {do:function() {
    Entry.variableContainer.clickVariableAddButton();
  }, state:function() {
    return [];
  }, log:function() {
    return [];
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"variableContainerClickVariableAddButton", dom:["variableContainer", "variableAddButton"]};
  c[b.variableContainerAddVariable] = {do:function(d) {
    var e = c[b.variableContainerAddVariable], f = e.hashId;
    f && (d.id_ = f, delete e.hashId);
    Entry.variableContainer.addVariable(d);
  }, state:function(d) {
    d instanceof Entry.Variable && (d = d.toJSON());
    var e = c[b.variableContainerAddVariable].hashId;
    e && (d.id = e);
    return [d];
  }, log:function(b) {
    b instanceof Entry.Variable && (b = b.toJSON());
    return [["variable", b]];
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, validate:!1, undo:"variableContainerRemoveVariable", restrict:function(b, c, f) {
    Entry.variableContainer.clickVariableAddButton(!0, !0);
    $(".entryVariableAddSpaceInputWorkspace").val(b.content[1][1].name);
    this.hashId = b.content[1][1].id;
    b = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {restrict:!0, dimmed:!0, callBack:f});
    f();
    return b;
  }, dom:["variableContainer", "variableAddConfirmButton"]};
  c[b.variableAddSetName] = {do:function(d) {
    var e = c[b.variableAddSetName], f = $(".entryVariableAddSpaceInputWorkspace");
    f[0].blurred = !0;
    f.blur();
    d = e._nextValue || d;
    f.val(d);
    delete e._nextValue;
  }, state:function(b) {
    return [""];
  }, log:function(d) {
    return [["value", c[b.variableAddSetName]._nextValue || d]];
  }, restrict:function(b, c, f) {
    Entry.variableContainer.clickVariableAddButton(!0);
    this._nextValue = b.content[1][1];
    $(".entryVariableAddSpaceInputWorkspace")[0].enterKeyDisabled = !0;
    return new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:c}], {restrict:!0, noDispose:!0, dimmed:!0, callBack:f});
  }, validate:!1, recordable:Entry.STATIC.RECORDABLE.SUPPORT, undo:"variableAddSetName", dom:["variableContainer", "variableAddInput"]};
  c[b.variableContainerRemoveVariable] = {do:function(b) {
    Entry.variableContainer.removeVariable(b);
  }, state:function(b) {
    b instanceof Entry.Variable && (b = b.toJSON());
    return [b];
  }, log:function(b) {
    b instanceof Entry.Variable && (b = b.toJSON());
    return [["variable", b]];
  }, recordable:Entry.STATIC.RECORDABLE.SUPPORT, validate:!1, undo:"variableContainerAddVariable", dom:["variableContainer", "variableAddConfirmButton"]};
})(Entry.Command);
Entry.Container = function() {
  this.objects_ = [];
  this.cachedPicture = {};
  this.inputValue = {};
  this.currentObjects_ = this.copiedObject = null;
  this._extensionObjects = [];
  Entry.addEventListener("workspaceChangeMode", function() {
    var c = Entry.getMainWS();
    c && c.getMode() === Entry.Workspace.MODE_VIMBOARD && this.objects_.forEach(function(b) {
      b.script && b.script.destroyView();
    });
  }.bind(this));
  Entry.addEventListener("run", this.disableSort.bind(this));
  Entry.addEventListener("stop", this.enableSort.bind(this));
};
Entry.Container.prototype.generateView = function(c, b) {
  var d = this;
  this._view = c;
  this._view.addClass("entryContainer");
  this._view.addClass("entryContainerWorkspace");
  this._view.setAttribute("id", "entryContainerWorkspaceId");
  c = Entry.createElement("div");
  c.addClass("entryAddObjectWorkspace");
  c.innerHTML = Lang.Workspace.add_object;
  c.bindOnClick(function(b) {
    Entry.dispatchEvent("openSpriteManager");
  });
  c = Entry.createElement("div");
  b = "entryContainerListWorkspaceWrapper";
  Entry.isForLecture && (b += " lecture");
  c.addClass(b);
  Entry.Utils.disableContextmenu(c);
  $(c).bind("mousedown touchstart", function(b) {
    function c(b) {
      q && 5 < Math.sqrt(Math.pow(b.pageX - q.x, 2) + Math.pow(b.pageY - q.y, 2)) && h && (clearTimeout(h), h = null);
    }
    function e(b) {
      b.stopPropagation();
      k.unbind(".container");
      h && (clearTimeout(h), h = null);
    }
    var h = null, k = $(document), l = b.type, m = !1;
    if (Entry.Utils.isRightButton(b)) {
      d._rightClick(b), m = !0;
    } else {
      var q = {x:b.clientX, y:b.clientY};
      "touchstart" !== l || m || (b.stopPropagation(), b = Entry.Utils.convertMouseEvent(b), h = setTimeout(function() {
        h && (h = null, d._rightClick(b));
      }, 1000), k.bind("mousemove.container touchmove.container", c), k.bind("mouseup.container touchend.container", e));
    }
  });
  this._view.appendChild(c);
  b = Entry.createElement("ul");
  c.appendChild(b);
  this._extensionListView = Entry.Dom(b, {class:"entryContainerExtensions"});
  b = Entry.createElement("ul");
  b.addClass("entryContainerListWorkspace");
  c.appendChild(b);
  this.listView_ = b;
  this.enableSort();
};
Entry.Container.prototype.enableSort = function() {
  $(this.listView_).sortable({start:function(c, b) {
    b.item.data("start_pos", b.item.index());
  }, stop:function(c, b) {
    Entry.container.moveElement(b.item.data("start_pos"), b.item.index());
  }, axis:"y", cancel:"input.selectedEditingObject"});
};
Entry.Container.prototype.disableSort = function() {
  $(this.listView_).sortable("destroy");
};
Entry.Container.prototype.updateListView = function() {
  if (this.listView_) {
    for (var c = this.listView_; c.hasChildNodes();) {
      c.removeChild(c.lastChild);
    }
    var b = document.createDocumentFragment("div"), d = this.getCurrentObjects().slice();
    d.filter(function(b) {
      return void 0 !== b.index;
    }).length === d.length && (d = d.sort(function(b, c) {
      return b.index - c.index;
    }));
    d.forEach(function(c) {
      !c.view_ && c.generateView();
      b.appendChild(c.view_);
    });
    c.appendChild(b);
    Entry.stage.sortZorder();
    return !0;
  }
};
Entry.Container.prototype.setObjects = function(c) {
  for (var b in c) {
    var d = new Entry.EntryObject(c[b]);
    this.objects_.push(d);
  }
  this.updateObjectsOrder();
  !this.updateListView() && Entry.stage.sortZorder();
  Entry.variableContainer.updateViews();
  c = Entry.type;
  ("workspace" == c || "phone" == c) && (c = this.getCurrentObjects()[0]) && this.selectObject(c.id);
};
Entry.Container.prototype.getPictureElement = function(c, b) {
  if (c = this.getObject(b).getPicture(c)) {
    return c.view;
  }
  throw Error("No picture found");
};
Entry.Container.prototype.setPicture = function(c) {
  var b = this.getObject(c.objectId), d;
  for (d in b.pictures) {
    if (c.id === b.pictures[d].id) {
      var e = {};
      e.dimension = c.dimension;
      e.id = c.id;
      e.filename = c.filename;
      e.fileurl = c.fileurl;
      e.name = c.name;
      e.view = b.pictures[d].view;
      b.pictures[d] = e;
      return;
    }
  }
  throw Error("No picture found");
};
Entry.Container.prototype.selectPicture = function(c, b) {
  b = this.getObject(b);
  if (c = b.getPicture(c)) {
    return b.selectedPicture = c, b.entity.setImage(c), b.updateThumbnailView(), b.id;
  }
  throw Error("No picture found");
};
Entry.Container.prototype.addObject = function(c, b) {
  var d = new Entry.EntryObject(c);
  d.name = Entry.getOrderedName(d.name, this.objects_);
  Entry.stateManager && Entry.stateManager.addCommand("add object", this, this.removeObject, d);
  d.scene = d.scene || Entry.scene.selectedScene;
  c = (c = c.sprite.category) && "background" == c.main;
  "number" == typeof b ? c ? (d.setLock(!0), this.objects_.push(d)) : this.objects_.splice(b, 0, d) : c ? this.objects_.push(d) : this.objects_.unshift(d);
  d.generateView();
  this.setCurrentObjects();
  this.updateObjectsOrder();
  this.updateListView();
  this.selectObject(d.id);
  Entry.variableContainer.updateViews();
  return new Entry.State(this, this.removeObject, d);
};
Entry.Container.prototype.addExtension = function(c) {
  this._extensionObjects.push(c);
  this._extensionListView && this._extensionListView.append(c.renderView());
  return c;
};
Entry.Container.prototype.removeExtension = function(c) {
  if (c) {
    var b = this._extensionObjects, d = b.indexOf(c);
    -1 < d && b.splice(d, 1);
    c.destroy && c.destroy();
  }
};
Entry.Container.prototype.addCloneObject = function(c, b) {
  function d(b, c, d) {
    var e = d.sprite[b], f = d.script;
    (c[b] || []).forEach(function(b, c) {
      f = f.replace(new RegExp(b.id, "g"), e[c].id);
    });
    return f;
  }
  var e = c.toJSON(!0);
  e.script = d("sounds", c, e);
  e.script = d("pictures", c, e);
  Entry.variableContainer.addCloneLocalVariables({objectId:c.id, newObjectId:e.id, json:e});
  e.scene = b || Entry.scene.selectedScene;
  this.addObject(e);
  return this.getObject(e.id);
};
Entry.Container.prototype.removeObject = function(c) {
  var b = this.objects_.indexOf(c), d = c.toJSON();
  Entry.stateManager && Entry.stateManager.addCommand("remove object", this, this.addObject, d, b);
  d = new Entry.State(this.addObject, d, b);
  c.destroy();
  this.objects_.splice(b, 1);
  this.setCurrentObjects();
  Entry.stage.sortZorder();
  b = this.getCurrentObjects();
  b.length ? this.selectObject(b[0].id) : (this.selectObject(), Entry.playground.flushPlayground());
  Entry.toast.success(Lang.Workspace.remove_object, c.name + " " + Lang.Workspace.remove_object_msg);
  Entry.variableContainer.removeLocalVariables(c.id);
  Entry.playground.reloadPlayground();
  return d;
};
Entry.Container.prototype.selectObject = function(c, b) {
  var d = this.getObject(c);
  c = Entry.getMainWS();
  b && d && Entry.scene.selectScene(d.scene);
  this.mapObjectOnScene(function(b) {
    !b.view_ && b.generateView && b.generateView();
    var c = b === d, e = b.view_;
    c ? e && e.addClass("selectedObject") : e && e.removeClass("selectedObject");
    b.isSelected_ = c;
  });
  if (d) {
    if (c && c.vimBoard && Entry.isTextMode) {
      b = c.vimBoard._currentObject;
      var e = c.vimBoard._parser;
      if (!b || this.getObject(b.id)) {
        if (e && e._onError) {
          if (b && d.id != b.id) {
            if (Entry.scene.isSceneCloning) {
              Entry.container.selectObject(b.id);
            } else {
              try {
                c._syncTextCode();
              } catch (f) {
              }
              e && !e._onError ? Entry.container.selectObject(d.id, !0) : Entry.container.selectObject(b.id, !0);
            }
            return;
          }
        } else {
          if (b && d.id != b.id) {
            if (Entry.scene.isSceneCloning) {
              Entry.container.selectObject(b.id);
              return;
            }
            try {
              c._syncTextCode();
            } catch (f) {
            }
            if (e && e._onError) {
              Entry.container.selectObject(b.id, !0);
              return;
            }
          }
        }
      }
    }
  } else {
    c && c.vimBoard && c.vimBoard.clearText();
  }
  Entry.playground && Entry.playground.injectObject(d);
  "minimize" != Entry.type && Entry.engine.isState("stop") && Entry.stage.selectObject(d);
};
Entry.Container.prototype.getAllObjects = function() {
  return this.objects_;
};
Entry.Container.prototype.getObject = function(c) {
  !c && Entry.playground && Entry.playground.object && (c = Entry.playground.object.id);
  for (var b = this.objects_.length, d = 0; d < b; d++) {
    var e = this.objects_[d];
    if (e.id == c) {
      return e;
    }
  }
};
Entry.Container.prototype.getEntity = function(c) {
  if (c = this.getObject(c)) {
    return c.entity;
  }
  Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.object_not_found, !0);
};
Entry.Container.prototype.getVariable = function(c) {
  for (var b = 0; b < this.variables_.length; b++) {
    var d = this.variables_[b];
    if (d.getId() == c || d.getName() == c) {
      return d;
    }
  }
};
Entry.Container.prototype.moveElement = function(c, b, d) {
  var e = this.getCurrentObjects();
  c = this.getAllObjects().indexOf(e[c]);
  b = this.getAllObjects().indexOf(e[b]);
  !d && Entry.stateManager && Entry.stateManager.addCommand("reorder object", Entry.container, Entry.container.moveElement, b, c, !0);
  this.objects_.splice(b, 0, this.objects_.splice(c, 1)[0]);
  this.setCurrentObjects();
  Entry.container.updateListView();
  Entry.requestUpdate = !0;
  return new Entry.State(Entry.container, Entry.container.moveElement, b, c, !0);
};
Entry.Container.prototype.moveElementByBlock = function(c, b) {
  c = this.getCurrentObjects().splice(c, 1)[0];
  this.getCurrentObjects().splice(b, 0, c);
  Entry.stage.sortZorder();
  this.updateListView();
};
Entry.Container.prototype.getDropdownList = function(c, b) {
  var d = [];
  switch(c) {
    case "sprites":
      var e = this.getCurrentObjects(), f = e.length;
      for (c = 0; c < f; c++) {
        b = e[c], d.push([b.name, b.id]);
      }
      break;
    case "spritesWithMouse":
      e = this.getCurrentObjects();
      f = e.length;
      for (c = 0; c < f; c++) {
        b = e[c], d.push([b.name, b.id]);
      }
      d.push([Lang.Blocks.mouse_pointer, "mouse"]);
      break;
    case "spritesWithSelf":
      e = this.getCurrentObjects();
      f = e.length;
      for (c = 0; c < f; c++) {
        b = e[c], d.push([b.name, b.id]);
      }
      d.push([Lang.Blocks.self, "self"]);
      break;
    case "collision":
      d.push([Lang.Blocks.mouse_pointer, "mouse"]);
      e = this.getCurrentObjects();
      f = e.length;
      for (c = 0; c < f; c++) {
        b = e[c], d.push([b.name, b.id]);
      }
      d.push([Lang.Blocks.wall, "wall"]);
      d.push([Lang.Blocks.wall_up, "wall_up"]);
      d.push([Lang.Blocks.wall_down, "wall_down"]);
      d.push([Lang.Blocks.wall_right, "wall_right"]);
      d.push([Lang.Blocks.wall_left, "wall_left"]);
      break;
    case "pictures":
      b = Entry.playground.object || b;
      if (!b) {
        break;
      }
      b = b.pictures || [];
      for (c = 0; c < b.length; c++) {
        e = b[c], d.push([e.name, e.id]);
      }
      break;
    case "messages":
      b = Entry.variableContainer.messages_;
      for (c = 0; c < b.length; c++) {
        e = b[c], d.push([e.name, e.id]);
      }
      break;
    case "variables":
      b = Entry.variableContainer.variables_;
      for (c = 0; c < b.length; c++) {
        e = b[c], e.object_ && Entry.playground.object && e.object_ != Entry.playground.object.id || d.push([e.getName(), e.getId()]);
      }
      d && 0 !== d.length || d.push([Lang.Blocks.VARIABLE_variable, "null"]);
      break;
    case "lists":
      b = Entry.playground.object || b;
      e = Entry.variableContainer.lists_;
      for (c = 0; c < e.length; c++) {
        f = e[c], f.object_ && b && f.object_ != b.id || d.push([f.getName(), f.getId()]);
      }
      d && 0 !== d.length || d.push([Lang.Blocks.VARIABLE_list, "null"]);
      break;
    case "scenes":
      b = Entry.scene.scenes_;
      for (c = 0; c < b.length; c++) {
        e = b[c], d.push([e.name, e.id]);
      }
      break;
    case "sounds":
      b = Entry.playground.object || b;
      if (!b) {
        break;
      }
      b = b.sounds || [];
      for (c = 0; c < b.length; c++) {
        e = b[c], d.push([e.name, e.id]);
      }
      break;
    case "clone":
      d.push([Lang.Blocks.oneself, "self"]);
      this.getCurrentObjects().forEach(function(b) {
        d.push([b.name, b.id]);
      });
      break;
    case "objectSequence":
      for (f = this.getCurrentObjects().length, c = 0; c < f; c++) {
        d.push([(c + 1).toString(), c.toString()]);
      }
  }
  d.length || (d = [[Lang.Blocks.no_target, "null"]]);
  return d;
};
Entry.Container.prototype.clearRunningState = function() {
  this.mapObject(function(c) {
    c.clearExecutor();
  });
};
Entry.Container.prototype.clearRunningStateOnScene = function() {
  this.mapObjectOnScene(function(c) {
    c.clearExecutor();
  });
};
Entry.Container.prototype.mapObject = function(c, b) {
  for (var d, e = this.objects_.length, f = [], g = 0; g < this._extensionObjects.length; g++) {
    d = this._extensionObjects[g], f.push(c(d, b));
  }
  for (g = 0; g < e; g++) {
    d = this.objects_[g], f.push(c(d, b));
  }
  return f;
};
Entry.Container.prototype.mapObjectOnScene = function(c, b) {
  for (var d, e = this.getCurrentObjects(), f = e.length, g = [], h = 0; h < this._extensionObjects.length; h++) {
    d = this._extensionObjects[h], g.push(c(d, b));
  }
  for (h = 0; h < f; h++) {
    d = e[h], g.push(c(d, b));
  }
  return g;
};
Entry.Container.prototype.mapEntity = function(c, b) {
  for (var d = this.objects_.length, e = [], f = 0; f < d; f++) {
    e.push(c(this.objects_[f].entity, b));
  }
  return e;
};
Entry.Container.prototype.mapEntityOnScene = function(c, b) {
  for (var d = this.getCurrentObjects(), e = d.length, f = [], g = 0; g < e; g++) {
    f.push(c(d[g].entity, b));
  }
  return f;
};
Entry.Container.prototype.mapEntityIncludeClone = function(c, b) {
  for (var d = this.objects_, e = d.length, f = [], g = 0; g < e; g++) {
    var h = d[g], k = h.clonedEntities.length;
    f.push(c(h.entity, b));
    for (var l = 0; l < k; l++) {
      var m = h.clonedEntities[l];
      m && !m.isStamp && f.push(c(m, b));
    }
  }
  return f;
};
Entry.Container.prototype.mapEntityIncludeCloneOnScene = function(c, b) {
  for (var d, e = this.getCurrentObjects(), f = e.length, g = [], h = 0; h < this._extensionObjects.length; h++) {
    d = this._extensionObjects[h], g.push(c(d.entity, b));
  }
  for (h = 0; h < f; h++) {
    d = e[h], g.push(c(d.entity, b)), d.getClonedEntities().forEach(function(d) {
      g.push(c(d, b));
    });
  }
  return g;
};
Entry.Container.prototype.getCachedPicture = function(c) {
  Entry.assert("string" == typeof c, "pictureId must be string");
  return this.cachedPicture[c];
};
Entry.Container.prototype.cachePicture = function(c, b) {
  this.cachedPicture[c] = b;
};
Entry.Container.prototype.unCachePictures = function(c, b, d) {
  if (c && b) {
    b.constructor !== Array && (b = [b]);
    var e = c.constructor === Entry.EntityObject ? c.id : c;
    b.forEach(function(b) {
      delete this.cachedPicture[b.id + (d ? "" : e)];
    }.bind(this));
  }
};
Entry.Container.prototype.toJSON = function() {
  for (var c = [], b = this.objects_.length, d = 0; d < b; d++) {
    c.push(this.objects_[d].toJSON());
  }
  return c;
};
Entry.Container.prototype.takeSequenceSnapshot = function() {
  for (var c = this.objects_.length, b = this.objects_, d = 0; d < c; d++) {
    b[d].index = d;
  }
};
Entry.Container.prototype.loadSequenceSnapshot = function() {
  for (var c = this.objects_.length, b = Array(c), d = 0; d < c; d++) {
    var e = this.objects_[d];
    b[void 0 !== e.index ? e.index : d] = e;
    delete e.index;
  }
  this.objects_ = b;
  this.setCurrentObjects();
  Entry.stage.sortZorder();
  this.updateListView();
};
Entry.Container.prototype.getInputValue = function() {
  return this.inputValue.getValue();
};
Entry.Container.prototype.setInputValue = function(c) {
  this.inputValue.complete || (c ? this.inputValue.setValue(c) : this.inputValue.setValue(0), Entry.stage.hideInputField(), Entry.dispatchEvent("answerSubmitted"), Entry.console && Entry.console.stopInput(c), this.inputValue.complete = !0);
};
Entry.Container.prototype.resetSceneDuringRun = function() {
  Entry.engine.isState("run") && (this.mapEntityOnScene(function(c) {
    c.reset();
  }), this.clearRunningStateOnScene(), Entry.stage.hideInputField());
};
Entry.Container.prototype.setCopiedObject = function(c) {
  this.copiedObject = c;
};
Entry.Container.prototype.updateObjectsOrder = function() {
  for (var c = Entry.scene.getScenes(), b = [], d = 0; d < c.length; d++) {
    for (var e = this.getSceneObjects(c[d]), f = 0; f < e.length; f++) {
      b.push(e[f]);
    }
  }
  this.objects_ = b;
};
Entry.Container.prototype.getSceneObjects = function(c) {
  c = c || Entry.scene.selectedScene;
  for (var b = [], d = this.getAllObjects(), e = 0; e < d.length; e++) {
    c.id == d[e].scene.id && b.push(d[e]);
  }
  return b;
};
Entry.Container.prototype.setCurrentObjects = function() {
  this.currentObjects_ = this.getSceneObjects();
};
Entry.Container.prototype.getCurrentObjects = function() {
  var c = this.currentObjects_;
  c && 0 !== c.length || this.setCurrentObjects();
  return this.currentObjects_ || [];
};
Entry.Container.prototype.getProjectWithJSON = function(c) {
  c.objects = Entry.container.toJSON();
  c.variables = Entry.variableContainer.getVariableJSON();
  c.messages = Entry.variableContainer.getMessageJSON();
  c.scenes = Entry.scene.toJSON();
  return c;
};
Entry.Container.prototype.blurAllInputs = function() {
  this.getSceneObjects().map(function(c) {
    c = c.view_.getElementsByTagName("input");
    for (var b = 0, d = c.length; b < d; b++) {
      c[b].blur();
    }
  });
};
Entry.Container.prototype.showProjectAnswer = function() {
  var c = this.inputValue;
  c && c.setVisible(!0);
};
Entry.Container.prototype.hideProjectAnswer = function(c, b) {
  var d = this.inputValue;
  if (d && d.isVisible() && !Entry.engine.isState("run")) {
    for (var e = Entry.container.getAllObjects(), f = ["ask_and_wait", "get_canvas_input_value", "set_visible_answer"], g = 0, h = e.length; g < h; g++) {
      for (var k = e[g].script, l = 0; l < f.length; l++) {
        var m = k.getBlockList(!1, f[l]);
        if (b) {
          var q = m.indexOf(c);
          -1 < q && m.splice(q, 1);
        }
        if (0 < m.length) {
          return;
        }
      }
    }
    d.setVisible(!1);
  }
};
Entry.Container.prototype.getView = function() {
  return this._view;
};
Entry.Container.prototype.resize = function() {
};
Entry.Container.prototype._rightClick = function(c) {
  c.stopPropagation && c.stopPropagation();
  var b = [{text:Lang.Blocks.Paste_blocks, enable:!Entry.engine.isState("run") && !!Entry.container.copiedObject, callback:function() {
    Entry.container.copiedObject ? Entry.container.addCloneObject(Entry.container.copiedObject) : Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.object_not_found_for_paste);
  }}];
  Entry.ContextMenu.show(b, "workspace-contextmenu", {x:c.clientX, y:c.clientY});
};
Entry.Container.prototype.removeFuncBlocks = function(c) {
  this.objects_.forEach(function(b) {
    b.script.removeBlocksByType(c);
  });
};
Entry.Container.prototype.clear = function() {
  this.objects_.map(function(c) {
    c.destroy();
  });
  this.objects_ = [];
  this._extensionObjects.map(function(c) {
    c.destroy();
  });
  this._extensionObjects = [];
  Entry.playground.flushPlayground();
};
Entry.Container.prototype.selectNeighborObject = function(c) {
  var b = this.getCurrentObjects();
  if (b && 0 !== b.length) {
    var d = b.indexOf(Entry.playground.object), e = b.length;
    switch(c) {
      case "prev":
        0 > --d && (d = b.length - 1);
        break;
      case "next":
        d = ++d % e;
    }
    (c = b[d]) && Entry.container.selectObject(c.id);
  }
};
Entry.Container.prototype.getObjectIndex = function(c) {
  return this.objects_.indexOf(this.getObject(c));
};
Entry.Container.prototype.getDom = function(c) {
  if (1 <= c.length) {
    switch(c.shift()) {
      case "objectIndex":
        return this.objects_[c.shift()].getDom(c);
    }
  }
};
Entry.Container.prototype.isSceneObjectsExist = function() {
  var c = this.getSceneObjects();
  return !(!c || !c.length);
};
Entry.Container.prototype.adjustClonedValues = function(c, b) {
  if (c && b) {
    var d = this;
    b.forEach(function(e) {
      d.getObject(e).script.getBlockList().forEach(function(d) {
        if (d && d.params) {
          var e = !1, f = d.params.map(function(d) {
            if ("string" !== typeof d) {
              return d;
            }
            var f = c.indexOf(d);
            if (0 > f) {
              return d;
            }
            e = !0;
            return b[f];
          });
          e && d.set({params:f});
        }
      });
    });
  }
};
Entry.db = {data:{}, typeMap:{}};
(function(c) {
  c.add = function(b) {
    this.data[b.id] = b;
    var c = b.type;
    void 0 === this.typeMap[c] && (this.typeMap[c] = {});
    this.typeMap[c][b.id] = b;
  };
  c.has = function(b) {
    return this.data.hasOwnProperty(b);
  };
  c.remove = function(b) {
    this.has(b) && (delete this.typeMap[this.data[b].type][b], delete this.data[b]);
  };
  c.get = function(b) {
    return this.data[b];
  };
  c.find = function() {
  };
  c.clear = function() {
    this.data = {};
    this.typeMap = {};
  };
})(Entry.db);
Entry.Dom = function(c, b) {
  var d = /<(\w+)>/;
  var e = c instanceof HTMLElement ? $(c) : c instanceof jQuery ? c : d.test(c) ? $(c) : $("<" + c + "></" + c + ">");
  if (void 0 === b) {
    return e;
  }
  b.id && e.attr("id", b.id);
  b.class && e.addClass(b.class);
  b.classes && b.classes.map(function(b) {
    e.addClass(b);
  });
  b.src && e.attr("src", b.src);
  b.parent && b.parent.append(e);
  e.bindOnClick = function() {
    var b = function(b) {
      b.stopImmediatePropagation();
      b.handled || (b.handled = !0, c.call(this, b));
    };
    if (1 < arguments.length) {
      var c = arguments[1] instanceof Function ? arguments[1] : function() {
      };
      var d = "string" === typeof arguments[0] ? arguments[0] : "";
    } else {
      c = arguments[0] instanceof Function ? arguments[0] : function() {
      };
    }
    if (d) {
      $(this).on("click tab", d, b);
    } else {
      $(this).on("click tab", b);
    }
  };
  return e;
};
Entry.SVG = function(c, b) {
  c = b ? b : document.getElementById(c);
  return Entry.SVG.createElement(c);
};
Entry.SVG.NS = "http://www.w3.org/2000/svg";
Entry.SVG.NS_XLINK = "http://www.w3.org/1999/xlink";
Entry.SVG.createElement = function(c, b) {
  var d = "string" === typeof c ? document.createElementNS(Entry.SVG.NS, c) : c;
  if (b) {
    b.href && (d.setAttributeNS(Entry.SVG.NS_XLINK, "href", b.href), delete b.href);
    for (var e in b) {
      d.setAttribute(e, b[e]);
    }
  }
  d.elem = Entry.SVG.createElement;
  d.attr = Entry.SVG.attr;
  d.addClass = Entry.SVG.addClass;
  d.removeClass = Entry.SVG.removeClass;
  d.hasClass = Entry.SVG.hasClass;
  d.remove = Entry.SVG.remove;
  d.removeAttr = Entry.SVG.removeAttr;
  "text" === c && d.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
  this instanceof SVGElement && this.appendChild(d);
  return d;
};
Entry.SVG.attr = function(c, b) {
  if ("string" === typeof c) {
    var d = {};
    d[c] = b;
    c = d;
  }
  if (c) {
    c.href && (this.setAttributeNS(Entry.SVG.NS_XLINK, "href", c.href), delete c.href);
    for (var e in c) {
      this.setAttribute(e, c[e]);
    }
  }
  return this;
};
Entry.SVG.addClass = function(c) {
  for (var b = this.getAttribute("class"), d = 0; d < arguments.length; d++) {
    c = arguments[d], this.hasClass(c) || (b += " " + c);
  }
  this.setAttribute("class", b);
  return this;
};
Entry.SVG.removeClass = function(c) {
  for (var b = this.getAttribute("class"), d = 0; d < arguments.length; d++) {
    c = arguments[d], this.hasClass(c) && (b = b.replace(new RegExp("(\\s|^)" + c + "(\\s|$)"), " "));
  }
  this.setAttribute("class", b);
  return this;
};
Entry.SVG.hasClass = function(c) {
  var b = this.getAttribute("class");
  return b ? b.match(new RegExp("(\\s|^)" + c + "(\\s|$)")) : !1;
};
Entry.SVG.remove = function() {
  this.parentNode && this.parentNode.removeChild(this);
};
Entry.SVG.removeAttr = function(c) {
  this.removeAttribute(c);
};
Entry.Dialog = function(c, b, d, e) {
  c.dialog && c.dialog.remove();
  c.dialog = this;
  this.parent = c;
  this.padding = 10;
  this.border = 2;
  "number" == typeof b && (b = String(b));
  Entry.console && Entry.console.print(b, d);
  this.message_ = b = b.match(/.{1,15}/g).join("\n");
  this.mode_ = d;
  "speak" !== d && "ask" !== d || this.generateSpeak();
  e || Entry.stage.loadDialog(this);
};
Entry.Dialog.prototype.generateSpeak = function() {
  this.object = new createjs.Container;
  var c = new createjs.Text;
  c.font = "15px NanumGothic";
  c.textBaseline = "top";
  c.textAlign = "left";
  c.text = this.message_;
  var b = c.getTransformedBounds(), d = b.height, b = 10 <= b.width ? b.width : 17, e = new createjs.Shape;
  e.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").rr(-this.padding, -this.padding, b + 2 * this.padding, d + 2 * this.padding, this.padding);
  this.object.addChild(e);
  this.object.regX = b / 2;
  this.object.regY = d / 2;
  this.width = b;
  this.height = d;
  this.notch = this.createSpeakNotch("ne");
  this.update();
  this.object.addChild(this.notch);
  this.object.addChild(c);
  Entry.requestUpdate = !0;
};
Entry.Dialog.prototype.update = function() {
  var c = this.parent.object.getTransformedBounds();
  if (!c && "textBox" === this.parent.type) {
    if (this._isNoContentTried) {
      delete this._isNoContentTried;
      return;
    }
    this.parent.setText(" ");
    c = this.parent.object.getTransformedBounds();
    this._isNoContentTried = !0;
  }
  var b = "";
  -135 < c.y - 20 - this.border ? (this.object.y = Math.max(c.y - this.height / 2 - 20 - this.padding, -135 + this.height / 2 + this.padding), b += "n") : (this.object.y = Math.min(c.y + c.height + this.height / 2 + 20 + this.padding, 135 - this.height / 2 - this.padding), b += "s");
  0 > c.x + c.width / 2 ? (this.object.x = Math.min(c.x + c.width + this.width / 2, 240 - this.width / 2 - this.padding), b += "e") : (this.object.x = Math.max(c.x - this.width / 2, -240 + this.width / 2 + this.padding), b += "w");
  this.notch.type != b && (this.object.removeChild(this.notch), this.notch = this.createSpeakNotch(b), this.object.addChild(this.notch));
  this._isNoContentTried && this.parent.setText("");
  Entry.requestUpdate = !0;
};
Entry.Dialog.prototype.createSpeakNotch = function(c) {
  var b = new createjs.Shape;
  b.type = c;
  "ne" == c ? b.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(0, this.height + this.padding - 1.5).lt(-10, this.height + this.padding + 20).lt(20, this.height + this.padding - 1.5) : "nw" == c ? b.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(this.width, this.height + this.padding - 1.5).lt(this.width + 10, this.height + this.padding + 20).lt(this.width - 20, this.height + this.padding - 1.5) : "se" == c ? b.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(0, -this.padding + 1.5).lt(-10, 
  -this.padding - 20).lt(20, -this.padding + 1.5) : "sw" == c && b.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(this.width, -this.padding + 1.5).lt(this.width + 10, -this.padding - 20).lt(this.width - 20, -this.padding + 1.5);
  return b;
};
Entry.Dialog.prototype.remove = function() {
  Entry.stage.unloadDialog(this);
  this.parent.dialog = null;
  Entry.requestUpdate = !0;
};
Entry.DoneProject = function(c) {
  this.generateView(c);
};
var p = Entry.DoneProject.prototype;
p.init = function(c) {
  this.projectId = c;
};
p.generateView = function(c) {
  var b = Entry.createElement("div");
  b.addClass("entryContainerDoneWorkspace");
  this.doneContainer = b;
  var d = Entry.createElement("iframe");
  d.setAttribute("id", "doneProjectframe");
  d.setAttribute("frameborder", 0);
  d.setAttribute("src", "/api/iframe/project/" + c);
  this.doneProjectFrame = d;
  this.doneContainer.appendChild(d);
  b.addClass("entryRemove");
};
p.getView = function() {
  return this.doneContainer;
};
p.resize = function() {
  document.getElementById("entryContainerWorkspaceId");
  var c = document.getElementById("doneProjectframe"), b = this.doneContainer.offsetWidth;
  c.width = b + "px";
  c.height = 9 * b / 16 + "px";
};
Entry.Engine = function() {
  function c(b) {
    var c = b.keyCode || b.which, e = Entry.stage.inputField;
    32 == c && e && e.hasFocus() || -1 < [37, 38, 39, 40, 32].indexOf(c) && b.preventDefault();
  }
  this.state = "stop";
  this.popup = null;
  this.isUpdating = !0;
  this.speeds = [1, 15, 30, 45, 60];
  this._mouseMoved = !1;
  this.attachKeyboardCapture();
  Entry.addEventListener("canvasClick", function(b) {
    Entry.engine.fireEvent("mouse_clicked");
  });
  Entry.addEventListener("canvasClickCanceled", function(b) {
    Entry.engine.fireEvent("mouse_click_cancled");
  });
  Entry.addEventListener("entityClick", function(b) {
    Entry.engine.fireEventOnEntity("when_object_click", b);
  });
  Entry.addEventListener("entityClickCanceled", function(b) {
    Entry.engine.fireEventOnEntity("when_object_click_canceled", b);
  });
  "phone" != Entry.type && (Entry.addEventListener("stageMouseMove", function(b) {
    this._mouseMoved = !0;
  }.bind(this)), Entry.addEventListener("stageMouseOut", function(b) {
    Entry.engine.hideMouseView();
  }));
  Entry.addEventListener("run", function() {
    $(window).bind("keydown", c);
  });
  Entry.addEventListener("stop", function() {
    $(window).unbind("keydown", c);
  });
  setInterval(function() {
    this._mouseMoved && (this.updateMouseView(), this._mouseMoved = !1);
  }.bind(this), 100);
  Entry.message = new Entry.Event(window);
};
(function(c) {
  c.generateView = function(b, c) {
    if (c && "workspace" != c) {
      "minimize" == c ? (this.view_ = b, this.view_.addClass("entryEngine"), this.view_.addClass("entryEngineMinimize"), this.maximizeButton = Entry.createElement("button"), this.maximizeButton.addClass("entryEngineButtonMinimize"), this.maximizeButton.addClass("entryMaximizeButtonMinimize"), this.view_.appendChild(this.maximizeButton), this.maximizeButton.bindOnClick(function(b) {
        Entry.engine.toggleFullScreen();
      }), this.coordinateButton = Entry.createElement("button"), this.coordinateButton.addClass("entryEngineButtonMinimize"), this.coordinateButton.addClass("entryCoordinateButtonMinimize"), this.view_.appendChild(this.coordinateButton), this.coordinateButton.bindOnClick(function(b) {
        this.hasClass("toggleOn") ? this.removeClass("toggleOn") : this.addClass("toggleOn");
        Entry.stage.toggleCoordinator();
      }), this.stopButton = Entry.createElement("button"), this.stopButton.addClass("entryEngineButtonMinimize"), this.stopButton.addClass("entryStopButtonMinimize"), this.stopButton.addClass("entryRemove"), this.stopButton.innerHTML = Lang.Workspace.stop, this.view_.appendChild(this.stopButton), this.stopButton.bindOnClick(function(b) {
        this.blur();
        Entry.engine.toggleStop();
      }), this.pauseButton = Entry.createElement("button"), this.pauseButton.innerHTML = Lang.Workspace.pause, this.pauseButton.addClass("entryEngineButtonMinimize"), this.pauseButton.addClass("entryPauseButtonMinimize"), this.pauseButton.addClass("entryRemove"), this.view_.appendChild(this.pauseButton), this.pauseButton.bindOnClick(function(b) {
        this.blur();
        Entry.engine.togglePause();
      }), this.mouseView = Entry.createElement("div"), this.mouseView.addClass("entryMouseViewMinimize"), this.mouseView.addClass("entryRemove"), this.view_.appendChild(this.mouseView), Entry.addEventListener("loadComplete", function() {
        this.runButton = Entry.Dom("div", {class:"entryRunButtonBigMinimize", parent:$("#entryCanvasWrapper")});
        this.runButton.bindOnClick(function(b) {
          Entry.engine.toggleRun();
        });
      }.bind(this))) : "phone" == c && (this.view_ = b, this.view_.addClass("entryEngine", "entryEnginePhone"), this.headerView_ = Entry.createElement("div", "entryEngineHeader"), this.headerView_.addClass("entryEngineHeaderPhone"), this.view_.appendChild(this.headerView_), this.maximizeButton = Entry.createElement("button"), this.maximizeButton.addClass("entryEngineButtonPhone", "entryMaximizeButtonPhone"), this.headerView_.appendChild(this.maximizeButton), this.maximizeButton.bindOnClick(function(b) {
        Entry.engine.footerView_.addClass("entryRemove");
        Entry.engine.headerView_.addClass("entryRemove");
        Entry.launchFullScreen(Entry.engine.view_);
      }), document.addEventListener("fullscreenchange", function(b) {
        Entry.engine.exitFullScreen();
      }), document.addEventListener("webkitfullscreenchange", function(b) {
        Entry.engine.exitFullScreen();
      }), document.addEventListener("mozfullscreenchange", function(b) {
        Entry.engine.exitFullScreen();
      }), this.footerView_ = Entry.createElement("div", "entryEngineFooter"), this.footerView_.addClass("entryEngineFooterPhone"), this.view_.appendChild(this.footerView_), this.runButton = Entry.createElement("button"), this.runButton.addClass("entryEngineButtonPhone", "entryRunButtonPhone"), Entry.objectAddable && this.runButton.addClass("small"), this.runButton.innerHTML = Lang.Workspace.run, this.footerView_.appendChild(this.runButton), this.runButton.bindOnClick(function(b) {
        Entry.engine.toggleRun();
      }), this.stopButton = Entry.createElement("button"), this.stopButton.addClass("entryEngineButtonPhone", "entryStopButtonPhone", "entryRemove"), Entry.objectAddable && this.stopButton.addClass("small"), this.stopButton.innerHTML = Lang.Workspace.stop, this.footerView_.appendChild(this.stopButton), this.stopButton.bindOnClick(function(b) {
        Entry.engine.toggleStop();
      }));
    } else {
      this.view_ = b;
      this.view_.addClass("entryEngine_w");
      this.view_.addClass("entryEngineWorkspace_w");
      var d = Entry.createElement("button");
      this.speedButton = d;
      this.speedButton.addClass("entrySpeedButtonWorkspace", "entryEngineTopWorkspace", "entryEngineButtonWorkspace_w");
      this.view_.appendChild(this.speedButton);
      this.speedButton.bindOnClick(function(b) {
        Entry.engine.toggleSpeedPanel();
        d.blur();
      });
      this.maximizeButton = Entry.createElement("button");
      this.maximizeButton.addClass("entryEngineButtonWorkspace_w", "entryEngineTopWorkspace", "entryMaximizeButtonWorkspace_w");
      this.view_.appendChild(this.maximizeButton);
      this.maximizeButton.bindOnClick(function(b) {
        Entry.engine.toggleFullScreen();
        this.blur();
      });
      var f = Entry.createElement("button");
      this.coordinateButton = f;
      this.coordinateButton.addClass("entryEngineButtonWorkspace_w", "entryEngineTopWorkspace", "entryCoordinateButtonWorkspace_w");
      this.view_.appendChild(this.coordinateButton);
      this.coordinateButton.bindOnClick(function(b) {
        this.hasClass("toggleOn") ? this.removeClass("toggleOn") : this.addClass("toggleOn");
        f.blur();
        this.blur();
        Entry.stage.toggleCoordinator();
      });
      this.addButton = Entry.createElement("button");
      this.addButton.addClass("entryEngineButtonWorkspace_w");
      this.addButton.addClass("entryAddButtonWorkspace_w");
      this.addButton.innerHTML = Lang.Workspace.add_object;
      this.addButton.bindOnClick(function(b) {
        Entry.dispatchEvent("openSpriteManager");
        this.blur();
      });
      Entry.objectAddable || this.addButton.addClass("entryRemove");
      this.view_.appendChild(this.addButton);
      this.runButton = Entry.createElement("button");
      this.runButton.addClass("entryEngineButtonWorkspace_w");
      this.runButton.addClass("entryRunButtonWorkspace_w");
      this.runButton.innerHTML = Lang.Workspace.run;
      this.view_.appendChild(this.runButton);
      this.runButton.bindOnClick(function(b) {
        Entry.do("toggleRun", "runButton");
      });
      this.runButton2 = Entry.createElement("button");
      this.runButton2.addClass("entryEngineButtonWorkspace_w");
      this.runButton2.addClass("entryRunButtonWorkspace_w2");
      this.view_.appendChild(this.runButton2);
      this.runButton2.bindOnClick(function(b) {
        Entry.engine.toggleRun();
      });
      this.stopButton = Entry.createElement("button");
      this.stopButton.addClass("entryEngineButtonWorkspace_w");
      this.stopButton.addClass("entryStopButtonWorkspace_w");
      this.stopButton.addClass("entryRemove");
      this.stopButton.innerHTML = Lang.Workspace.stop;
      this.view_.appendChild(this.stopButton);
      this.stopButton.bindOnClick(function(b) {
        Entry.do("toggleStop", "stopButton");
      });
      this.stopButton2 = Entry.createElement("button");
      this.stopButton2.addClass("entryEngineButtonWorkspace_w");
      this.stopButton2.addClass("entryStopButtonWorkspace_w2");
      this.stopButton2.addClass("entryRemove");
      this.stopButton2.innerHTML = Lang.Workspace.stop;
      this.view_.appendChild(this.stopButton2);
      this.stopButton2.bindOnClick(function(b) {
        this.blur();
        Entry.engine.toggleStop();
      });
      this.pauseButton = Entry.createElement("button");
      this.pauseButton.addClass("entryEngineButtonWorkspace_w");
      this.pauseButton.addClass("entryPauseButtonWorkspace_w");
      this.pauseButton.addClass("entryRemove");
      this.view_.appendChild(this.pauseButton);
      this.pauseButton.bindOnClick(function(b) {
        this.blur();
        Entry.engine.togglePause();
      });
      this.pauseButtonFull = Entry.createElement("button");
      this.pauseButtonFull.addClass("entryEngineButtonWorkspace_w");
      this.pauseButtonFull.addClass("entryPauseButtonWorkspace_full");
      this.pauseButtonFull.addClass("entryRemove");
      this.view_.appendChild(this.pauseButtonFull);
      this.pauseButtonFull.bindOnClick(function(b) {
        this.blur();
        Entry.engine.togglePause();
      });
      this.mouseView = Entry.createElement("div");
      this.mouseView.addClass("entryMouseViewWorkspace_w");
      this.mouseView.addClass("entryRemove");
      this.view_.appendChild(this.mouseView);
    }
  };
  c.toggleSpeedPanel = function() {
    if (this.speedPanelOn) {
      this.speedPanelOn = !1, $(Entry.stage.canvas.canvas).animate({top:"24px"}), this.coordinateButton.removeClass("entryRemove"), this.maximizeButton.removeClass("entryRemove"), this.mouseView.removeClass("entryRemoveElement"), $(this.speedLabel_).remove(), delete this.speedLabel_, $(this.speedProgress_).fadeOut(null, function(b) {
        $(this).remove();
        delete this.speedProgress_;
      }), $(this.speedHandle_).remove(), delete this.speedHandle_;
    } else {
      this.speedPanelOn = !0;
      $(Entry.stage.canvas.canvas).animate({top:"41px"});
      this.coordinateButton.addClass("entryRemove");
      this.maximizeButton.addClass("entryRemove");
      this.mouseView.addClass("entryRemoveElement");
      this.speedLabel_ = Entry.createElement("div", "entrySpeedLabelWorkspace");
      this.speedLabel_.innerHTML = Lang.Workspace.speed;
      this.view_.insertBefore(this.speedLabel_, this.maximizeButton);
      this.speedProgress_ = Entry.createElement("table", "entrySpeedProgressWorkspace");
      for (var b = Entry.createElement("tr"), c = this.speeds, e = 0; 5 > e; e++) {
        (function(d) {
          var e = Entry.createElement("td", "progressCell" + d);
          e.bindOnClick(function() {
            Entry.engine.setSpeedMeter(c[d]);
          });
          b.appendChild(e);
        })(e);
      }
      this.view_.insertBefore(this.speedProgress_, this.maximizeButton);
      this.speedProgress_.appendChild(b);
      this.speedHandle_ = Entry.createElement("div", "entrySpeedHandleWorkspace");
      var f = (Entry.interfaceState.canvasWidth - 84) / 5;
      $(this.speedHandle_).bind("mousedown.speedPanel touchstart.speedPanel", function(b) {
        function c(b) {
          b.stopPropagation();
          b = Entry.Utils.convertMouseEvent(b);
          b = Math.floor((b.clientX - 80) / (5 * f) * 5);
          0 > b || 4 < b || Entry.engine.setSpeedMeter(Entry.engine.speeds[b]);
        }
        function d(b) {
          $(document).unbind(".speedPanel");
        }
        b.stopPropagation && b.stopPropagation();
        b.preventDefault && b.preventDefault();
        if (0 === b.button || b.originalEvent && b.originalEvent.touches) {
          Entry.Utils.convertMouseEvent(b), b = $(document), b.bind("mousemove.speedPanel touchmove.speedPanel", c), b.bind("mouseup.speedPanel touchend.speedPanel", d);
        }
      });
      this.view_.insertBefore(this.speedHandle_, this.maximizeButton);
      this.setSpeedMeter(Entry.FPS);
    }
  };
  c.setSpeedMeter = function(b) {
    var c = this.speeds.indexOf(b);
    0 > c || (c = Math.min(4, c), c = Math.max(0, c), this.speedPanelOn && (this.speedHandle_.style.left = (Entry.interfaceState.canvasWidth - 80) / 10 * (2 * c + 1) + 80 - 9 + "px"), Entry.FPS != b && (clearInterval(this.ticker), this.ticker = setInterval(this.update, Math.floor(1000 / b)), Entry.FPS = b));
  };
  c.start = function(b) {
    createjs.Ticker.setFPS(Entry.FPS);
    this.ticker || (this.ticker = setInterval(this.update, Math.floor(1000 / Entry.FPS)));
  };
  c.stop = function() {
    createjs.Ticker.reset();
    clearInterval(this.ticker);
    this.ticker = null;
  };
  c.update = function() {
    Entry.engine.isState("run") && (Entry.engine.computeObjects(), Entry.hw.update());
  };
  c.computeObjects = function() {
    Entry.container.mapObjectOnScene(this.computeFunction);
  };
  c.computeFunction = function(b) {
    b.script.tick();
  };
  Entry.Engine.computeThread = function(b, c) {
    Entry.engine.isContinue = !0;
    for (b = !1; c && Entry.engine.isContinue && !b;) {
      Entry.engine.isContinue = !c.isRepeat;
      var d = c.run();
      b = d && d === c;
      c = d;
    }
    return c;
  };
  c.isState = function(b) {
    return -1 < this.state.indexOf(b);
  };
  c.run = function() {
    this.isState("run") ? this.toggleStop() : (this.isState("stop") || this.isState("pause")) && this.toggleRun();
  };
  c.toggleRun = function(b) {
    var c = Entry.variableContainer, e = Entry.container, f = Entry.playground;
    if ("pause" === this.state) {
      return this.togglePause();
    }
    Entry.Utils.blur();
    f && f.mainWorkspace && (f = f.mainWorkspace, f.mode == Entry.Workspace.MODE_VIMBOARD && f._syncTextCode());
    Entry.addActivity("run");
    "stop" == this.state && (e.mapEntity(function(b) {
      b.takeSnapshot();
    }), c.mapVariable(function(b) {
      b.takeSnapshot();
    }), c.mapList(function(b) {
      b.takeSnapshot();
    }), this.projectTimer.takeSnapshot(), e.inputValue.takeSnapshot(), e.takeSequenceSnapshot(), Entry.scene.takeStartSceneSnapshot(), this.state = "run", this.fireEvent("start"), this.achieveEnabled = !1 !== b);
    this.state = "run";
    "mobile" == Entry.type && this.view_.addClass("entryEngineBlueWorkspace");
    this.runButton && (this.pauseButton && (this.pauseButton.innerHTML = Lang.Workspace.pause), this.pauseButtonFull && (this.pauseButtonFull.innerHTML = Lang.Workspace.pause), this.runButton.addClass("run"), this.runButton.addClass("entryRemove"), this.stopButton.removeClass("entryRemove"), this.addButton && (this.addButton.addClass("entryRemove"), Entry.objectAddable && this.pauseButton.removeClass("entryRemove")), this.pauseButton && ("minimize" === Entry.type || Entry.objectAddable) && this.pauseButton.removeClass("entryRemove"), 
    this.runButton2 && this.runButton2.addClass("entryRemove"), this.stopButton2 && this.stopButton2.removeClass("entryRemove"), this.pauseButtonFull && this.pauseButtonFull.removeClass("entryRemove"));
    this.isUpdating || (this.update(), this.isUpdating = !0);
    Entry.stage.selectObject();
    Entry.dispatchEvent("run");
  };
  c.toggleStop = function() {
    var b = Entry.container, c = Entry.variableContainer;
    Entry.Utils.blur();
    Entry.addActivity("stop");
    b.mapEntity(function(b) {
      b.loadSnapshot();
      b.object.filters = [];
      b.resetFilter();
      b.dialog && b.dialog.remove();
      b.brush && b.removeBrush();
    });
    c.mapVariable(function(b) {
      b.loadSnapshot();
    });
    c.mapList(function(b) {
      b.loadSnapshot();
    });
    this.stopProjectTimer();
    b.clearRunningState();
    b.loadSequenceSnapshot();
    this.projectTimer.loadSnapshot();
    b.inputValue.loadSnapshot();
    Entry.scene.loadStartSceneSnapshot();
    Entry.Func.clearThreads();
    createjs.Sound.setVolume(1);
    createjs.Sound.stop();
    this.view_.removeClass("entryEngineBlueWorkspace");
    this.runButton && (this.runButton.removeClass("entryRemove"), this.stopButton.addClass("entryRemove"), this.pauseButton && this.pauseButton.addClass("entryRemove"), this.pauseButtonFull && this.pauseButtonFull.addClass("entryRemove"), this.addButton && Entry.objectAddable && this.addButton.removeClass("entryRemove"), this.runButton2 && this.runButton2.removeClass("entryRemove"), this.stopButton2 && this.stopButton2.addClass("entryRemove"));
    this.state = "stop";
    Entry.dispatchEvent("stop");
    Entry.stage.hideInputField();
    (function(b) {
      b && b.getMode() === Entry.Workspace.MODE_VIMBOARD && b.codeToText();
    })(Entry.getMainWS());
  };
  c.togglePause = function() {
    var b = Entry.engine.projectTimer;
    "pause" == this.state ? (b.pausedTime += (new Date).getTime() - b.pauseStart, b.isPaused ? b.pauseStart = (new Date).getTime() : delete b.pauseStart, this.state = "run", this.runButton && (this.pauseButton && (this.pauseButton.innerHTML = Lang.Workspace.pause), this.pauseButtonFull && (this.pauseButtonFull.innerHTML = Lang.Workspace.pause), this.runButton.addClass("entryRemove"), this.runButton2 && this.runButton2.addClass("entryRemove"))) : (this.state = "pause", b.isPaused && (b.pausedTime += 
    (new Date).getTime() - b.pauseStart), b.pauseStart = (new Date).getTime(), this.runButton && (this.pauseButton && (this.pauseButton.innerHTML = Lang.Workspace.restart), this.pauseButtonFull && (this.pauseButtonFull.innerHTML = Lang.Workspace.restart), this.runButton.removeClass("entryRemove"), this.stopButton.removeClass("entryRemove"), this.runButton2 && this.runButton2.removeClass("entryRemove")));
  };
  c.fireEvent = function(b) {
    "run" === this.state && Entry.container.mapEntityIncludeCloneOnScene(this.raiseEvent, b);
  };
  c.raiseEvent = function(b, c) {
    b.parent.script.raiseEvent(c, b);
  };
  c.fireEventOnEntity = function(b, c) {
    "run" == this.state && Entry.container.mapEntityIncludeCloneOnScene(this.raiseEventOnEntity, [c, b]);
  };
  c.raiseEventOnEntity = function(b, c) {
    b === c[0] && b.parent.script.raiseEvent(c[1], b);
  };
  c.captureKeyEvent = function(b, c) {
    var d = b.keyCode, f = "workspace" === Entry.type;
    if (!Entry.Utils.isInInput(b) || c) {
      17 !== d && b.ctrlKey && f ? 83 == d ? (b.preventDefault(), Entry.dispatchEvent(b.shiftKey ? "saveAsWorkspace" : "saveWorkspace")) : 82 == d ? (b.preventDefault(), Entry.engine.run()) : 90 == d && (b.preventDefault(), Entry.dispatchEvent(b.shiftKey ? "redo" : "undo")) : Entry.engine.isState("run") && (b.preventDefault && b.preventDefault(), Entry.container.mapEntityIncludeCloneOnScene(Entry.engine.raiseKeyEvent, ["keyPress", d])), Entry.engine.isState("stop") && f && 37 <= d && 40 >= d && Entry.stage.moveSprite(b);
    }
  };
  c.raiseKeyEvent = function(b, c) {
    return b.parent.script.raiseEvent(c[0], b, String(c[1]));
  };
  c.updateMouseView = function() {
    var b = Entry.stage.mouseCoordinate;
    this.mouseView.textContent = "X : " + b.x + ", Y : " + b.y;
    this.mouseView.removeClass("entryRemove");
  };
  c.hideMouseView = function() {
    this.mouseView.addClass("entryRemove");
  };
  c.toggleFullScreen = function(b) {
    this.popup ? (this.popup.remove(), this.popup = null) : (this.popup = new Entry.Popup(b), "workspace" != Entry.type && (b = $(document), $(this.popup.body_).css("top", b.scrollTop()), $("body").css("overflow", "hidden"), popup.window_.appendChild(Entry.stage.canvas.canvas), popup.window_.appendChild(Entry.engine.runButton[0])), popup.window_.appendChild(Entry.engine.view_), "workspace" === Entry.type && Entry.targetChecker && popup.window_.appendChild(Entry.targetChecker.getStatusView()[0]));
    Entry.windowResized.notify();
  };
  c.closeFullScreen = function() {
    this.popup && (this.popup.remove(), this.popup = null);
    Entry.windowResized.notify();
  };
  c.exitFullScreen = function() {
    document.webkitIsFullScreen || document.mozIsFullScreen || document.isFullScreen || (Entry.engine.footerView_.removeClass("entryRemove"), Entry.engine.headerView_.removeClass("entryRemove"));
    Entry.windowResized.notify();
  };
  c.showProjectTimer = function() {
    Entry.engine.projectTimer && this.projectTimer.setVisible(!0);
  };
  c.hideProjectTimer = function(b, c) {
    var d = this.projectTimer;
    if (d && d.isVisible() && !this.isState("run")) {
      for (var f = Entry.container.getAllObjects(), g = ["get_project_timer_value", "reset_project_timer", "set_visible_project_timer", "choose_project_timer_action"], h = 0, k = f.length; h < k; h++) {
        for (var l = f[h].script, m = 0; m < g.length; m++) {
          var q = l.getBlockList(!1, g[m]);
          if (c) {
            var n = q.indexOf(b);
            -1 < n && q.splice(n, 1);
          }
          if (0 < q.length) {
            return;
          }
        }
      }
      d.setVisible(!1);
    }
  };
  c.clearTimer = function() {
    clearInterval(this.ticker);
    clearInterval(this.projectTimer.tick);
  };
  c.startProjectTimer = function() {
    var b = this.projectTimer;
    b && (b.start = (new Date).getTime(), b.isInit = !0, b.isPaused = !1, b.pausedTime = 0, b.tick = setInterval(function(b) {
      Entry.engine.updateProjectTimer();
    }, 1000 / 60));
  };
  c.stopProjectTimer = function() {
    var b = this.projectTimer;
    b && (this.updateProjectTimer(0), b.isPaused = !1, b.isInit = !1, b.pausedTime = 0, clearInterval(b.tick));
  };
  c.resetTimer = function() {
    var b = this.projectTimer;
    if (b.isInit) {
      var c = b.isPaused;
      delete b.pauseStart;
      this.updateProjectTimer(0);
      b.pausedTime = 0;
      if (b.isPaused = c) {
        clearInterval(b.tick), b.isInit = !1, delete b.start;
      }
    }
  };
  c.updateProjectTimer = function(b) {
    var c = Entry.engine, e = c.projectTimer;
    if (e) {
      var f = (new Date).getTime();
      "undefined" == typeof b ? e.isPaused || c.isState("pause") || e.setValue(Math.max((f - (e.start || f) - e.pausedTime) / 1000, 0)) : (e.setValue(b), e.pausedTime = 0, e.start = f);
    }
  };
  c.raiseMessage = function(b) {
    Entry.message.notify(Entry.variableContainer.getMessage(b));
    return Entry.container.mapEntityIncludeCloneOnScene(this.raiseKeyEvent, ["when_message_cast", b]);
  };
  c.getDom = function(b) {
    if (1 <= b.length) {
      switch(b.shift()) {
        case "runButton":
          return this.runButton;
        case "stopButton":
          return this.stopButton;
      }
    }
  };
  c.attachKeyboardCapture = function() {
    Entry.keyPressed && (this._keyboardEvent && this.detachKeyboardCapture(), this._keyboardEvent = Entry.keyPressed.attach(this, this.captureKeyEvent));
  };
  c.detachKeyboardCapture = function() {
    Entry.keyPressed && this._keyboardEvent && (Entry.keyPressed.detach(this._keyboardEvent), delete this._keyboardEvent);
  };
  c.applyOption = function() {
    Entry.objectAddable ? (this.runButton.addClass("small"), this.stopButton.addClass("small"), this.addButton.removeClass("entryRemove")) : (this.runButton.removeClass("small"), this.stopButton.removeClass("small"), this.addButton.addClass("entryRemove"));
  };
})(Entry.Engine.prototype);
Entry.EntityObject = function(c) {
  this.parent = c;
  this.type = c.objectType;
  this.flip = !1;
  this.collision = Entry.Utils.COLLISION.NONE;
  this.id = Entry.generateHash();
  this.removed = !1;
  "sprite" == this.type ? (this.object = new createjs.Bitmap, this.setInitialEffectValue()) : "textBox" == this.type && (this.object = new createjs.Container, this.textObject = new createjs.Text, this.textObject.font = "20px Nanum Gothic", this.textObject.textBaseline = "middle", this.textObject.textAlign = "center", this.bgObject = new createjs.Shape, this.bgObject.graphics.setStrokeStyle(1).beginStroke("#f00").drawRect(0, 0, 100, 100), this.object.addChild(this.bgObject), this.object.addChild(this.textObject), 
  this.fontType = "Nanum Gothic", this.fontSize = 20, this.strike = this.underLine = this.fontItalic = this.fontBold = !1);
  this.object.entity = this;
  this.object.cursor = "pointer";
  this.object.on("mousedown", function(b) {
    var c = this.entity.parent.id;
    Entry.dispatchEvent("entityClick", this.entity);
    Entry.stage.isObjectClick = !0;
    "minimize" != Entry.type && Entry.stage.isEntitySelectable() && (this.offset = {x:-this.parent.x + this.entity.getX() - (0.75 * b.stageX - 240), y:-this.parent.y - this.entity.getY() - (0.75 * b.stageY - 135)}, this.cursor = "move", this.entity.initCommand(), Entry.container.selectObject(c));
  });
  this.object.on("pressup", function(b) {
    Entry.dispatchEvent("entityClickCanceled", this.entity);
    this.cursor = "pointer";
    this.entity.checkCommand();
  });
  this.object.on("pressmove", function(b) {
    "minimize" != Entry.type && Entry.stage.isEntitySelectable() && !this.entity.parent.getLock() && (this.entity.doCommand(), this.entity.setX(0.75 * b.stageX - 240 + this.offset.x), this.entity.setY(-(0.75 * b.stageY - 135) - this.offset.y), Entry.stage.updateObject());
  });
};
Entry.EntityObject.prototype.injectModel = function(c, b) {
  "sprite" == this.type ? this.setImage(c) : "textBox" == this.type && (c = this.parent, b.text = b.text || c.text || c.name, this.setFont(b.font), this.setBGColour(b.bgColor), this.setColour(b.colour), this.setUnderLine(b.underLine), this.setStrike(b.strike), this.setText(b.text));
  b && this.syncModel_(b);
};
Entry.EntityObject.prototype.syncModel_ = function(c) {
  this.setX(c.x);
  this.setY(c.y);
  this.setRegX(c.regX);
  this.setRegY(c.regY);
  this.setScaleX(c.scaleX);
  this.setScaleY(c.scaleY);
  this.setRotation(c.rotation);
  this.setDirection(c.direction, !0);
  this.setLineBreak(c.lineBreak);
  this.setWidth(c.width);
  this.setHeight(c.height);
  this.setText(c.text);
  this.setTextAlign(c.textAlign);
  this.setFontSize(c.fontSize || this.getFontSize());
  this.setVisible(c.visible);
};
Entry.EntityObject.prototype.initCommand = function() {
  Entry.engine.isState("stop") && (this.isCommandValid = !1, Entry.stateManager && Entry.stateManager.addCommand("edit entity", this, this.restoreEntity, this.toJSON()));
};
Entry.EntityObject.prototype.doCommand = function() {
  this.isCommandValid = !0;
};
Entry.EntityObject.prototype.checkCommand = function() {
  Entry.engine.isState("stop") && !this.isCommandValid && Entry.dispatchEvent("cancelLastCommand");
};
Entry.EntityObject.prototype.restoreEntity = function(c) {
  var b = this.toJSON();
  this.syncModel_(c);
  Entry.dispatchEvent("updateObject");
  Entry.stateManager && Entry.stateManager.addCommand("restore object", this, this.restoreEntity, b);
};
Entry.EntityObject.prototype.setX = function(c) {
  "number" == typeof c && (this.x = c, this.object.x = this.x, !this.isClone && this.parent.updateCoordinateView(), this.updateDialog(), Entry.requestUpdate = !0);
};
Entry.EntityObject.prototype.getX = function(c) {
  return c ? Entry.Utils.toFixed(this.x, c) : this.x;
};
Entry.EntityObject.prototype.setY = function(c) {
  "number" == typeof c && (this.y = c, this.object.y = -this.y, !this.isClone && this.parent.updateCoordinateView(), this.updateDialog(), Entry.requestUpdate = !0);
};
Entry.EntityObject.prototype.getY = function(c) {
  return c ? Entry.Utils.toFixed(this.y, c) : this.y;
};
Entry.EntityObject.prototype.getDirection = function(c) {
  return c ? Entry.Utils.toFixed(this.direction, c) : this.direction;
};
Entry.EntityObject.prototype.setDirection = function(c, b) {
  c || (c = 0);
  "vertical" != this.parent.getRotateMethod() || b || (0 <= this.direction && 180 > this.direction) == (0 <= c && 180 > c) || (this.setScaleX(-this.getScaleX()), Entry.stage.updateObject(), this.flip = !this.flip);
  this.direction = c.mod(360);
  this.object.direction = this.direction;
  !this.isClone && this.parent.updateRotationView();
  Entry.dispatchEvent("updateObject");
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.setRotation = function(c) {
  "free" !== this.parent.getRotateMethod() && (c = 0);
  this.rotation = c.mod(360);
  this.object.rotation = this.rotation;
  this.updateDialog();
  !this.isClone && this.parent.updateRotationView();
  Entry.dispatchEvent("updateObject");
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getRotation = function(c) {
  return c ? Entry.Utils.toFixed(this.rotation, c) : this.rotation;
};
Entry.EntityObject.prototype.setRegX = function(c) {
  "textBox" == this.type && (c = 0);
  this.regX = c;
  this.object.regX = this.regX;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getRegX = function() {
  return this.regX;
};
Entry.EntityObject.prototype.setRegY = function(c) {
  "textBox" == this.type && (c = 0);
  this.regY = c;
  this.object.regY = this.regY;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getRegY = function() {
  return this.regY;
};
Entry.EntityObject.prototype.setScaleX = function(c) {
  this.scaleX = c;
  this.object.scaleX = this.scaleX;
  this.parent.updateCoordinateView();
  this.updateDialog();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getScaleX = function() {
  return this.scaleX;
};
Entry.EntityObject.prototype.setScaleY = function(c) {
  this.scaleY = c;
  this.object.scaleY = this.scaleY;
  this.parent.updateCoordinateView();
  this.updateDialog();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getScaleY = function() {
  return this.scaleY;
};
Entry.EntityObject.prototype.setSize = function(c) {
  1 > c && (c = 1);
  c /= this.getSize();
  this.setScaleX(this.getScaleX() * c);
  this.setScaleY(this.getScaleY() * c);
  !this.isClone && this.parent.updateCoordinateView();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getSize = function(c) {
  var b = (this.getWidth() * Math.abs(this.getScaleX()) + this.getHeight() * Math.abs(this.getScaleY())) / 2;
  return c ? Entry.Utils.toFixed(b, c) : b;
};
Entry.EntityObject.prototype.setWidth = function(c) {
  this.width = c;
  this.object.width = this.width;
  this.textObject && this.getLineBreak() && (this.textObject.lineWidth = this.width);
  this.updateDialog();
  this.updateBG();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getWidth = function() {
  return this.width;
};
Entry.EntityObject.prototype.setHeight = function(c) {
  this.height = c;
  this.textObject && (this.object.height = this.height, this.alignTextBox());
  this.updateDialog();
  this.updateBG();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getHeight = function() {
  return this.height;
};
Entry.EntityObject.prototype.setColour = function(c) {
  this.colour = c || "#000000";
  this.textObject && (this.textObject.color = this.colour);
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getColour = function() {
  return this.colour;
};
Entry.EntityObject.prototype.setBGColour = function(c) {
  this.bgColor = c || "transparent";
  this.updateBG();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getBGColour = function() {
  return this.bgColor;
};
Entry.EntityObject.prototype.setUnderLine = function(c) {
  void 0 === c && (c = !1);
  this.underLine = c;
  this.textObject.underLine = c;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getUnderLine = function() {
  return this.underLine;
};
Entry.EntityObject.prototype.setStrike = function(c) {
  void 0 === c && (c = !1);
  this.strike = c;
  this.textObject.strike = c;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getStrike = function() {
  return this.strike;
};
Entry.EntityObject.prototype.getFont = function() {
  var c = [];
  this.fontBold && c.push("bold");
  this.fontItalic && c.push("italic");
  c.push(this.getFontSize() + "px");
  c.push(this.fontType);
  return c.join(" ");
};
Entry.EntityObject.prototype.setFont = function(c) {
  if ("textBox" == this.parent.objectType && this.font !== c) {
    c || (c = "20px Nanum Gothic");
    var b = c.split(" "), d;
    if (d = -1 < b.indexOf("bold")) {
      b.splice(d - 1, 1), this.setFontBold(!0);
    }
    if (d = -1 < b.indexOf("italic")) {
      b.splice(d - 1, 1), this.setFontItalic(!0);
    }
    d = parseInt(b.shift());
    this.setFontSize(d);
    this.setFontType(b.join(" "));
    this.font = this.getFont();
    this.textObject.font = c;
    Entry.stage.update();
    this.setWidth(this.textObject.getMeasuredWidth());
    this.updateBG();
    Entry.stage.updateObject();
  }
};
Entry.EntityObject.prototype.setLineHeight = function() {
  switch(this.getFontType()) {
    case "Nanum Gothic Coding":
      this.textObject.lineHeight = this.fontSize;
      break;
    default:
      this.textObject.lineHeight = 0;
  }
};
Entry.EntityObject.prototype.syncFont = function() {
  this.textObject.font = this.getFont();
  this.setLineHeight();
  Entry.stage.update();
  if (this.getLineBreak()) {
    if ("Nanum Gothic Coding" == this.fontType) {
      var c = this.textObject.getMeasuredLineHeight();
      this.textObject.y = c / 2 - this.getHeight() / 2 + 10;
    }
  } else {
    this.setWidth(this.textObject.getMeasuredWidth()), this.setHeight(this.textObject.getMeasuredHeight());
  }
  Entry.stage.updateObject();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getFontType = function() {
  return this.fontType;
};
Entry.EntityObject.prototype.setFontType = function(c) {
  "textBox" == this.parent.objectType && (this.fontType = c ? c : "Nanum Gothic", this.syncFont());
};
Entry.EntityObject.prototype.getFontSize = function(c) {
  return this.fontSize;
};
Entry.EntityObject.prototype.setFontSize = function(c) {
  "textBox" == this.parent.objectType && this.fontSize != c && (this.fontSize = c ? c : 20, this.syncFont(), this.alignTextBox());
};
Entry.EntityObject.prototype.setFontBold = function(c) {
  this.fontBold = c;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.toggleFontBold = function() {
  this.fontBold = !this.fontBold;
  this.syncFont();
  return this.fontBold;
};
Entry.EntityObject.prototype.setFontItalic = function(c) {
  this.fontItalic = c;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.toggleFontItalic = function() {
  this.fontItalic = !this.fontItalic;
  this.syncFont();
  return this.fontItalic;
};
Entry.EntityObject.prototype.setFontName = function(c) {
  for (var b = this.font.split(" "), d = [], e = 0, f = b.length; e < f; e++) {
    ("bold" === b[e] || "italic" === b[e] || -1 < b[e].indexOf("px")) && d.push(b[e]);
  }
  this.setFont(d.join(" ") + " " + c);
};
Entry.EntityObject.prototype.getFontName = function() {
  if ("textBox" == this.type) {
    if (!this.font) {
      return "";
    }
    for (var c = this.font.split(" "), b = [], d = 0, e = c.length; d < e; d++) {
      "bold" !== c[d] && "italic" !== c[d] && -1 === c[d].indexOf("px") && b.push(c[d]);
    }
    return b.join(" ").trim();
  }
};
Entry.EntityObject.prototype.setText = function(c) {
  "textBox" == this.parent.objectType && (void 0 === c && (c = ""), this.text = c, this.textObject.text = this.text, this.lineBreak || (this.setWidth(this.textObject.getMeasuredWidth()), this.parent.updateCoordinateView()), this.updateBG(), Entry.stage.updateObject());
};
Entry.EntityObject.prototype.getText = function() {
  return this.text;
};
Entry.EntityObject.prototype.setTextAlign = function(c) {
  "textBox" == this.parent.objectType && (void 0 === c && (c = Entry.TEXT_ALIGN_CENTER), this.textAlign = c, this.textObject.textAlign = Entry.TEXT_ALIGNS[this.textAlign], this.alignTextBox(), this.updateBG(), Entry.stage.updateObject());
};
Entry.EntityObject.prototype.getTextAlign = function() {
  return this.textAlign;
};
Entry.EntityObject.prototype.setLineBreak = function(c) {
  if ("textBox" == this.parent.objectType) {
    void 0 === c && (c = !1);
    var b = this.lineBreak;
    this.lineBreak = c;
    b && !this.lineBreak ? (this.textObject.lineWidth = null, this.setHeight(this.textObject.getMeasuredLineHeight()), this.setText(this.getText().replace(/\n/g, ""))) : !b && this.lineBreak && (this.setFontSize(this.getFontSize() * this.getScaleX()), this.setHeight(3 * this.textObject.getMeasuredLineHeight()), this.setWidth(this.getWidth() * this.getScaleX()), this.setScaleX(1), this.setScaleY(1), this.textObject.lineWidth = this.getWidth(), this.alignTextBox(), "Nanum Gothic Coding" == this.fontType && 
    (c = this.textObject.getMeasuredLineHeight(), this.textObject.y = c / 2 - this.getHeight() / 2 + 10));
    Entry.stage.updateObject();
  }
};
Entry.EntityObject.prototype.getLineBreak = function() {
  return this.lineBreak;
};
Entry.EntityObject.prototype.setVisible = function(c) {
  void 0 === c && (c = !0);
  this.visible = c;
  this.object.visible = this.visible;
  this.dialog && this.syncDialogVisible();
  Entry.requestUpdate = !0;
  return this.visible;
};
Entry.EntityObject.prototype.getVisible = function() {
  return this.visible;
};
Entry.EntityObject.prototype.setImage = function(c) {
  function b(b) {
    Entry.image = b;
    d.object.image = b;
    d.object.filters && d.object.filters.length ? d.cache() : d.object.uncache();
    Entry.requestUpdate = !0;
  }
  var d = this;
  delete c._id;
  Entry.assert("sprite" == this.type, "Set image is only for sprite object");
  c.id || (c.id = Entry.generateHash());
  this.picture = c;
  var e = this.picture.dimension, f = this.getWidth(), g = this.getHeight(), f = this.getRegX() - f / 2, g = this.getRegY() - g / 2;
  this.setWidth(e.width);
  this.setHeight(e.height);
  e.scaleX || (e.scaleX = this.getScaleX(), e.scaleY = this.getScaleY());
  this.setScaleX(this.scaleX);
  this.setScaleY(this.scaleY);
  this.setRegX(this.width / 2 + f);
  this.setRegY(this.height / 2 + g);
  var h = this.isClone ? c.id : c.id + this.id;
  (e = Entry.container.getCachedPicture(h)) ? b(e) : (e = new Image, e.onload = function(c) {
    d.removed || Entry.container.cachePicture(h, this);
    this.onload = null;
    b(this);
  }, (g = c.fileurl) ? e.src = g : (c = c.filename, e.src = Entry.defaultPath + "/uploads/" + c.substring(0, 2) + "/" + c.substring(2, 4) + "/image/" + c + ".png"), d.object.image = e, d.object.filters && d.object.filters.length ? d.cache() : d.object.uncache());
  Entry.dispatchEvent("updateObject");
};
Entry.EntityObject.prototype.applyFilter = function(c, b) {
  var d = this.effect, e = this.object, f = function(b, c) {
    var d = [], e;
    for (e in b) {
      b[e] !== c[e] && d.push(e);
    }
    return d;
  }(d, this.getInitialEffectValue());
  if (c || 0 !== f.length) {
    Array.isArray(b) && (f = f.concat(b)), function(b, c) {
      var d = [], e = Entry.adjustValueWithMaxMin;
      if (-1 < f.indexOf("brightness")) {
        b.brightness = b.brightness;
        var g = new createjs.ColorMatrix;
        g.adjustColor(e(b.brightness, -100, 100), 0, 0, 0);
        g = new createjs.ColorMatrixFilter(g);
        d.push(g);
      }
      -1 < f.indexOf("hue") && (b.hue = b.hue.mod(360), g = new createjs.ColorMatrix, g.adjustColor(0, 0, 0, b.hue), g = new createjs.ColorMatrixFilter(g), d.push(g));
      if (-1 < f.indexOf("hsv")) {
        g = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
        var h = 10.8 * b.hsv * Math.PI / 180, n = Math.cos(h), h = Math.sin(h), r = Math.abs(b.hsv / 100);
        1 < r && (r -= Math.floor(r));
        0 < r && 0.33 >= r ? g = [1, 0, 0, 0, 0, 0, n, h, 0, 0, 0, -1 * h, n, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1] : 0.66 >= r ? g = [n, 0, h, 0, 0, 0, 1, 0, 0, 0, h, 0, n, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1] : 0.99 >= r && (g = [n, h, 0, 0, 0, -1 * h, n, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);
        g = (new createjs.ColorMatrix).concat(g);
        g = new createjs.ColorMatrixFilter(g);
        d.push(g);
      }
      -1 < f.indexOf("alpha") && (c.alpha = b.alpha = e(b.alpha, 0, 1));
      c.filters = d;
    }(d, e), this.cache();
  }
};
Entry.EntityObject.prototype.resetFilter = function() {
  if ("sprite" === this.parent.objectType) {
    var c = this.object;
    c.filters = [];
    this.setInitialEffectValue();
    c.alpha = this.effect.alpha;
    c.uncache();
  }
};
Entry.EntityObject.prototype.updateDialog = function() {
  this.dialog && this.dialog.update();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.takeSnapshot = function() {
  this.snapshot_ = this.toJSON();
  this.collision = Entry.Utils.COLLISION.NONE;
};
Entry.EntityObject.prototype.loadSnapshot = function() {
  this.snapshot_ && this.syncModel_(this.snapshot_);
  "sprite" === this.parent.objectType && this.setImage(this.parent.getPicture());
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.removeClone = function(c) {
  if (this.isClone) {
    var b = this.parent.clonedEntities;
    !0 !== c ? (c = b.indexOf(this), -1 < c && b.splice(c, 1)) : b.pop();
    Entry.Utils.isFunction(this.clearExecutor) && this.clearExecutor();
    this.destroy(!0);
  }
};
Entry.EntityObject.prototype.clearExecutor = function() {
  this.parent.script.clearExecutorsByEntity(this);
};
Entry.EntityObject.prototype.toJSON = function() {
  var c = {};
  c.x = Entry.cutDecimal(this.getX());
  c.y = Entry.cutDecimal(this.getY());
  c.regX = Entry.cutDecimal(this.getRegX());
  c.regY = Entry.cutDecimal(this.getRegY());
  c.scaleX = this.getScaleX();
  c.scaleY = this.getScaleY();
  c.rotation = Entry.cutDecimal(this.getRotation());
  c.direction = Entry.cutDecimal(this.getDirection());
  c.width = Entry.cutDecimal(this.getWidth());
  c.height = Entry.cutDecimal(this.getHeight());
  c.font = this.getFont();
  c.visible = this.getVisible();
  "textBox" == this.parent.objectType && (c.colour = this.getColour(), c.text = this.getText(), c.textAlign = this.getTextAlign(), c.lineBreak = this.getLineBreak(), c.bgColor = this.getBGColour(), c.underLine = this.getUnderLine(), c.strike = this.getStrike(), c.fontSize = this.getFontSize());
  return c;
};
Entry.EntityObject.prototype.setInitialEffectValue = function() {
  this.effect = this.getInitialEffectValue();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getInitialEffectValue = function() {
  return {blur:0, hue:0, hsv:0, brightness:0, contrast:0, saturation:0, alpha:1};
};
Entry.EntityObject.prototype.removeBrush = function() {
  Entry.stage.selectedObjectContainer.removeChild(this.shape);
  this.shape = this.brush = null;
};
Entry.EntityObject.prototype.eraseBrush = function() {
  var c = this.brush;
  if (c) {
    var b = c._stroke.style, d = c._strokeStyle.width;
    c.clear().setStrokeStyle(d).beginStroke(b);
    c.moveTo(this.getX(), -1 * this.getY());
    Entry.requestUpdate = !0;
  }
};
Entry.EntityObject.prototype.updateBG = function() {
  if (this.bgObject) {
    this.bgObject.graphics.clear();
    var c = this.getWidth(), b = this.getHeight();
    this.bgObject.graphics.setStrokeStyle(1).beginStroke().beginFill(this.getBGColour()).drawRect(-c / 2, -b / 2, c, b);
    if (this.getLineBreak()) {
      this.bgObject.x = 0;
    } else {
      switch(this.getTextAlign()) {
        case Entry.TEXT_ALIGN_LEFT:
          this.bgObject.x = c / 2;
          break;
        case Entry.TEXT_ALIGN_CENTER:
          this.bgObject.x = 0;
          break;
        case Entry.TEXT_ALIGN_RIGHT:
          this.bgObject.x = -c / 2;
      }
    }
  }
};
Entry.EntityObject.prototype.alignTextBox = function() {
  if ("textBox" == this.type) {
    var c = this.textObject;
    if (this.lineBreak) {
      var b = c.getMeasuredLineHeight();
      c.y = b / 2 - this.getHeight() / 2;
      "Nanum Gothic Coding" == this.fontType && (c.y = b / 2 - this.getHeight() / 2 + 10);
      switch(this.textAlign) {
        case Entry.TEXT_ALIGN_CENTER:
          c.x = 0;
          break;
        case Entry.TEXT_ALIGN_LEFT:
          c.x = -this.getWidth() / 2;
          break;
        case Entry.TEXT_ALIGN_RIGHT:
          c.x = this.getWidth() / 2;
      }
      c.maxHeight = this.getHeight();
    } else {
      c.x = 0, c.y = 0;
    }
  }
};
Entry.EntityObject.prototype.syncDialogVisible = function() {
  this.dialog && (this.dialog.object.visible = this.visible);
};
Entry.EntityObject.prototype.destroy = function(c) {
  if (!this.removed) {
    this.removed = !0;
    var b = this.object;
    b && (b.uncache(), b.removeAllEventListeners(), delete b.image, delete b.entity);
    this.dialog && this.dialog.remove();
    this.brush && this.removeBrush();
    Entry.stage.unloadEntity(this);
    (b = Entry.container) && b.unCachePictures(this, this.parent.pictures, c);
  }
};
Entry.EntityObject.prototype.cache = function() {
  this.object && this.object.cache(0, 0, this.getWidth(), this.getHeight());
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.reset = function() {
  this.loadSnapshot();
  this.resetFilter();
  this.dialog && this.dialog.remove();
  this.shape && this.removeBrush();
};
Entry.Extension = function() {
};
(function(c) {
  c.renderView = function() {
  };
  c.toggleInformation = function() {
  };
})(Entry.Extension.prototype);
Entry.TargetChecker = function(c, b, d) {
  this.isForEdit = b;
  this.goals = [];
  this.publicGoals = [];
  this.unachievedGoals = [];
  this.remainPublicGoal = 0;
  this.lastMessage = "";
  this.isForEdit && (this.watchingBlocks = [], Entry.playground.mainWorkspace.blockMenu.unbanClass("checker"), Entry.addEventListener("run", this.reRegisterAll.bind(this)));
  this.type = d || "mission";
  this.isSuccess = this.isFail = !1;
  this.entity = this;
  this.parent = this;
  Entry.achieveEvent = new Entry.Event;
  Entry.addEventListener("stop", this.reset.bind(this));
  Entry.registerAchievement = this.registerAchievement.bind(this);
  this.script = new Entry.Code(c ? c : [], this);
  Entry.targetChecker = this;
};
Entry.Utils.inherit(Entry.Extension, Entry.TargetChecker);
(function(c) {
  c.renderView = function() {
    this._view = Entry.Dom("li", {class:"targetChecker"});
    this._view.bindOnClick(function(b) {
      Entry.playground.injectObject(this);
    }.bind(this));
    this.updateView();
    this.isForEdit || this._view.addClass("entryRemove");
    return this._view;
  };
  c.generateStatusView = function(b) {
    this._statusView = Entry.Dom("div", {class:"entryTargetStatus"});
    var c = Entry.Dom("div", {class:"innerWrapper", parent:this._statusView});
    this._statusViewIndicator = Entry.Dom("div", {class:"statusIndicator", parent:c});
    c = Entry.Dom("div", {class:"statusMessage", parent:c});
    this._statusViewContent = Entry.Dom("p", {parent:c});
    b && ($(Entry.view_).addClass("iframeWithTargetStatus"), Entry.view_.appendChild(this._statusView[0]));
    this.updateView();
    this.showDefaultMessage();
  };
  c.updateView = function() {
    this._view && (this.renderViewMessage(), this.isSuccess ? this._view.addClass("success") : this._view.removeClass("success"), this.isFail ? this._view.addClass("fail") : this._view.removeClass("fail"));
    this._statusView && this.renderIndicatorMessage();
  };
  c.getStatusView = function() {
    this._statusView || this.generateStatusView();
    return this._statusView;
  };
  c.showStatusMessage = function(b) {
    this.lastMessage = b;
    this.lastIndicatorMessage = null;
    this.renderIndicatorMessage();
    this._statusViewContent && !this.isFail && this._statusViewContent.text(b);
    this.renderViewMessage();
  };
  c.achieveCheck = function(b, c) {
    !this.isFail && Entry.engine.achieveEnabled && (b ? this.achieveGoal(c) : this.fail(c));
  };
  c.achieveGoal = function(b) {
    this.isSuccess || this.isFail || 0 > this.unachievedGoals.indexOf(b) || (this.unachievedGoals.splice(this.unachievedGoals.indexOf(b), 1), -1 < this.publicGoals.indexOf(b) && this.remainPublicGoal--, 0 === this.remainPublicGoal && (this.isSuccess = !0, this.showSuccessMessage(), Entry.achieveEvent.notify("success", b)), this.updateView());
  };
  c.fail = function(b) {
    this.isSuccess || this.isFail || (this.showStatusMessage(b), this.isFail = !0, Entry.achieveEvent.notify("fail", b), this.updateView());
  };
  c.reset = function() {
    this.unachievedGoals = this.goals.concat();
    this.remainPublicGoal = this.publicGoals.length;
    this.isSuccess = this.isFail = !1;
    this.updateView();
    this.showDefaultMessage();
  };
  c.showDefaultMessage = function() {
    switch(this.type) {
      case "mission":
        this.showStatusMessage("\uc791\ud488\uc744 \uc2e4\ud589 \ud574\ubd05\uc2dc\ub2e4.");
        break;
      case "mission_intro":
        this.showStatusMessage("\uc791\ud488\uc744 \uc2e4\ud589\ud558\uba70 \ubbf8\uc158\uc744 \ud30c\uc545\ud574 \ubd05\uc2dc\ub2e4.");
        this.renderIndicatorMessage("\ubbf8\uc158");
        break;
      case "guide_intro":
        this.showStatusMessage("\uc791\ud488\uc744 \uc2e4\ud589\ud558\uba70 \ubb34\uc5c7\uc744 \ub9cc\ub4e4\uc9c0 \uc54c\uc544 \ubd05\uc2dc\ub2e4."), this.renderIndicatorMessage("\uc548\ub0b4");
    }
  };
  c.showSuccessMessage = function() {
    switch(this.type) {
      case "mission_intro":
        this.showStatusMessage("\uc774\uc81c \uc791\ud488\uc744 \ub9cc\ub4e4\uba70 \ubbf8\uc158\uc744 \ud574\uacb0\ud574 \ubd05\uc2dc\ub2e4.");
        this.renderIndicatorMessage("\ubbf8\uc158");
        break;
      case "guide_intro":
        this.showStatusMessage("\uc774\uc81c \ud559\uc2b5\uc744 \uc2dc\uc791\ud574 \ubd05\uc2dc\ub2e4."), this.renderIndicatorMessage("\uc548\ub0b4");
    }
  };
  c.checkGoal = function(b) {
    return -1 < this.goals.indexOf(b) && 0 > this.unachievedGoals.indexOf(b);
  };
  c.registerAchievement = function(b) {
    this.isForEdit && this.watchingBlocks.push(b);
    b.params[1] && 0 > this.goals.indexOf(b.params[0] + "") && (this.goals.push(b.params[0] + ""), b.params[2] && this.publicGoals.push(b.params[0] + ""), this.remainPublicGoal = this.publicGoals.length);
    this.reset();
  };
  c.reRegisterAll = function() {
    var b = this.script.getBlockList(!1, "check_lecture_goal");
    this.watchingBlocks = b;
    this.goals = _.uniq(b.filter(function(b) {
      return 1 === b.params[1];
    }).map(function(b) {
      return b.params[0] + "";
    }));
    this.publicGoals = _.uniq(b.filter(function(b) {
      return 1 === b.params[1] && 1 === b.params[2];
    }).map(function(b) {
      return b.params[0] + "";
    }));
    this.remainPublicGoal = this.publicGoals.length;
  };
  c.clearExecutor = function() {
    this.script.clearExecutors();
  };
  c.destroy = function() {
    this.reset();
    Entry.achieveEvent.clear();
    this.script.destroy();
    $(this._view).remove();
  };
  c.renderViewMessage = function() {
    var b = this.goals.length, c = this.publicGoals.length;
    this._view && this._view.html("\ubaa9\ud45c : " + (b - this.unachievedGoals.length) + " / " + b + " , \uacf5\uc2dd \ubaa9\ud45c : " + (c - this.remainPublicGoal) + " / " + c + "<br>" + this.lastMessage);
  };
  c.renderIndicatorMessage = function(b) {
    this._statusViewIndicator && (b && (this.lastIndicatorMessage = b), b = this.publicGoals.length, this._statusViewIndicator.text(this.lastIndicatorMessage || Math.min(b - this.remainPublicGoal + 1, b) + "/" + b));
  };
})(Entry.TargetChecker.prototype);
Entry.Func = function(c) {
  this.id = c ? c.id : Entry.generateHash();
  if (c && c.content && 4 < c.content.length) {
    var b = c.content;
  }
  this.content = b ? new Entry.Code(b) : new Entry.Code([[{type:"function_create", copyable:!1, deletable:!1, x:40, y:40}]]);
  this._backupContent = this.blockMenuBlock = this.block = null;
  this.hashMap = {};
  this.paramMap = {};
  Entry.generateFunctionSchema(this.id);
  if (c && c.content) {
    c = this.content._blockMap;
    for (var d in c) {
      Entry.Func.registerParamBlock(c[d].type);
    }
    Entry.Func.generateWsBlock(this);
  }
  Entry.Func.registerFunction(this);
  Entry.Func.updateMenu();
};
Entry.Func.threads = {};
Entry.Func.registerFunction = function(c) {
  if (Entry.playground) {
    var b = Entry.playground.mainWorkspace;
    b && (this._targetFuncBlock = b.getBlockMenu().code.createThread([{type:"func_" + c.id, category:"func", x:-9999}]), c.blockMenuBlock = this._targetFuncBlock);
  }
};
Entry.Func.executeFunction = function(c) {
  var b = this.threads[c];
  if (b = Entry.Engine.computeThread(b.entity, b)) {
    return this.threads[c] = b, !0;
  }
  delete this.threads[c];
  return !1;
};
Entry.Func.clearThreads = function() {
  this.threads = {};
};
Entry.Func.prototype.init = function(c) {
  this.id = c.id;
  this.content = Blockly.Xml.textToDom(c.content);
  this.block = Blockly.Xml.textToDom("<xml>" + c.block + "</xml>").childNodes[0];
};
Entry.Func.prototype.destroy = function() {
  this.blockMenuBlock && this.blockMenuBlock.destroy();
};
Entry.Func.edit = function(c) {
  c && ("string" === typeof c && (c = Entry.variableContainer.getFunction(/(func_)?(.*)/.exec(c)[2])), this.unbindFuncChangeEvent(), this.unbindWorkspaceStateChangeEvent(), this.cancelEdit(), this.targetFunc = c, !1 !== this.initEditView(c.content) && (Entry.Func.isEdit = !0, this.bindFuncChangeEvent(c), this.updateMenu(), setTimeout(function() {
    var b = Entry.block["func_" + c.id];
    b && b.paramsBackupEvent && b.paramsBackupEvent.notify();
    this._backupContent = c.content.stringify();
  }.bind(this), 0)));
};
Entry.Func.initEditView = function(c) {
  this.menuCode || this.setupMenuCode();
  var b = Entry.getMainWS();
  if (!1 === b.setMode(Entry.Workspace.MODE_OVERLAYBOARD)) {
    return this.endEdit("cancelEdit"), !1;
  }
  b.changeOverlayBoardCode(c);
  this._workspaceStateEvent = b.changeEvent.attach(this, function(c) {
    this.endEdit(c || "cancelEdit");
    b.getMode() === Entry.Workspace.MODE_VIMBOARD && b.blockMenu.banClass("functionInit");
  });
  c.board.alignThreads();
};
Entry.Func.endEdit = function(c) {
  this.unbindFuncChangeEvent();
  this.unbindWorkspaceStateChangeEvent();
  var b = this.targetFunc.id;
  this.targetFunc && this.targetFunc.content && this.targetFunc.content.destroyView();
  switch(c) {
    case "save":
      this.save();
      break;
    case "cancelEdit":
      this.cancelEdit();
  }
  this._backupContent = null;
  delete this.targetFunc;
  (c = Entry.block["func_" + b]) && c.destroyParamsBackupEvent && c.destroyParamsBackupEvent.notify();
  this.updateMenu();
  Entry.Func.isEdit = !1;
};
Entry.Func.save = function() {
  this.targetFunc.generateBlock(!0);
  Entry.variableContainer.saveFunction(this.targetFunc);
  var c = Entry.getMainWS();
  c && c.overlayModefrom == Entry.Workspace.MODE_VIMBOARD && (c = {}, c.boardType = Entry.Workspace.MODE_VIMBOARD, c.textType = Entry.Vim.TEXT_TYPE_PY, c.runType = Entry.Vim.WORKSPACE_MODE, Entry.getMainWS().setMode(c), Entry.variableContainer.functionAddButton_.addClass("disable"));
};
Entry.Func.syncFuncName = function(c) {
  var b = 0;
  c = c.split(" ");
  var d = "";
  var e = Blockly.mainWorkspace.getAllBlocks();
  for (var f = 0; f < e.length; f++) {
    var g = e[f];
    if ("function_general" === g.type) {
      var h = g.inputList;
      for (var k = 0; k < h.length; k++) {
        g = h[k], 0 < g.fieldRow.length && g.fieldRow[0] instanceof Blockly.FieldLabel && void 0 != g.fieldRow[0].text_ && (d += g.fieldRow[0].text_, d += " ");
      }
      d = d.trim();
      if (d === this.srcFName && this.srcFName.split(" ").length == c.length) {
        for (d = 0; d < h.length; d++) {
          if (g = h[d], 0 < g.fieldRow.length && g.fieldRow[0] instanceof Blockly.FieldLabel && void 0 != g.fieldRow[0].text_) {
            if (void 0 === c[b]) {
              h.splice(d, 1);
              break;
            } else {
              g.fieldRow[0].text_ = c[b];
            }
            b++;
          }
        }
      }
      d = "";
      b = 0;
    }
  }
  b = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
  Blockly.mainWorkspace.clear();
  Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, b);
};
Entry.Func.cancelEdit = function() {
  if (this.targetFunc) {
    this.targetFunc.block ? this._backupContent && (this.targetFunc.content.load(this._backupContent), Entry.generateFunctionSchema(this.targetFunc.id), Entry.Func.generateWsBlock(this.targetFunc, !0)) : (this._targetFuncBlock.destroy(), delete Entry.variableContainer.functions_[this.targetFunc.id], delete Entry.variableContainer.selected);
    Entry.variableContainer.updateList();
    var c = Entry.getMainWS();
    c && c.overlayModefrom == Entry.Workspace.MODE_VIMBOARD && (c = {}, c.boardType = Entry.Workspace.MODE_VIMBOARD, c.textType = Entry.Vim.TEXT_TYPE_PY, c.runType = Entry.Vim.WORKSPACE_MODE, Entry.getMainWS().setMode(c), Entry.variableContainer.functionAddButton_.addClass("disable"));
  }
};
Entry.Func.getMenuXml = function() {
  var c = [];
  this.targetFunc || (c = c.concat(this.createBtn));
  if (this.targetFunc) {
    var b = this.FIELD_BLOCK, b = b.replace("#1", Entry.generateHash()), b = b.replace("#2", Entry.generateHash()), b = Blockly.Xml.textToDom(b).childNodes, c = c.concat(Entry.nodeListToArray(b));
  }
  for (var d in Entry.variableContainer.functions_) {
    b = Entry.variableContainer.functions_[d], b === this.targetFunc ? (b = Entry.Func.generateBlock(this.targetFunc, Blockly.Xml.workspaceToDom(Entry.Func.workspace), b.id).block, c.push(b)) : c.push(b.block);
  }
  return c;
};
Entry.Func.syncFunc = function() {
  var c = Entry.Func;
  if (c.targetFunc) {
    var b = c.workspace.topBlocks_[0].toString(), d = c.workspace.topBlocks_.length;
    (c.fieldText != b || c.workspaceLength != d) && 1 > Blockly.Block.dragMode_ && (c.updateMenu(), c.fieldText = b, c.workspaceLength = d);
  }
};
Entry.Func.setupMenuCode = function() {
  var c = Entry.playground.mainWorkspace;
  if (c) {
    var c = c.getBlockMenu(), b = c.code;
    this._fieldLabel = b.createThread([{type:"function_field_label", copyable:!1, category:"func", x:-9999}]).getFirstBlock();
    this._fieldString = b.createThread([{type:"function_field_string", category:"func", x:-9999, copyable:!1, params:[{type:this.requestParamBlock("string")}]}]).getFirstBlock();
    this._fieldBoolean = b.createThread([{type:"function_field_boolean", copyable:!1, category:"func", x:-9999, params:[{type:this.requestParamBlock("boolean")}]}]).getFirstBlock();
    this.menuCode = b;
    c.align();
  }
};
Entry.Func.refreshMenuCode = function() {
  Entry.playground.mainWorkspace && (this.menuCode || this.setupMenuCode(), this._fieldString.params[0].changeType(this.requestParamBlock("string")), this._fieldBoolean.params[0].changeType(this.requestParamBlock("boolean")));
};
Entry.Func.requestParamBlock = function(c) {
  switch(c) {
    case "string":
      var b = Entry.block.function_param_string;
      break;
    case "boolean":
      b = Entry.block.function_param_boolean;
      break;
    default:
      return null;
  }
  var d = c + "Param_" + Entry.generateHash();
  Entry.block[d] = Entry.Func.createParamBlock(d, b, c);
  return d;
};
Entry.Func.registerParamBlock = function(c) {
  if (c) {
    if (-1 < c.indexOf("stringParam")) {
      var b = Entry.block.function_param_string;
    } else {
      -1 < c.indexOf("booleanParam") && (b = Entry.block.function_param_boolean);
    }
    b && Entry.Func.createParamBlock(c, b, c);
  }
};
Entry.Func.createParamBlock = function(c, b, d) {
  d = /string/gi.test(d) ? "function_param_string" : "function_param_boolean";
  var e = function() {
  };
  e.prototype = b;
  e = new e;
  e.changeEvent = new Entry.Event;
  e.template = Lang.template[d];
  return Entry.block[c] = e;
};
Entry.Func.updateMenu = function() {
  var c = Entry.getMainWS();
  if (c) {
    var b = c.getBlockMenu();
    this.targetFunc ? (!this.menuCode && this.setupMenuCode(), b.banClass("functionInit", !0), b.unbanClass("functionEdit", !0)) : (!c.isVimMode() && b.unbanClass("functionInit", !0), b.banClass("functionEdit", !0));
    "func" === b.lastSelector && b.align();
  }
};
Entry.Func.prototype.edit = function() {
  Entry.Func.isEdit || (Entry.Func.isEdit = !0, Entry.Func.svg ? this.parentView.appendChild(this.svg) : Entry.Func.initEditView());
};
Entry.Func.generateBlock = function(c) {
  c = Entry.block["func_" + c.id];
  var b = {template:c.template, params:c.params}, d = /(%\d)/mi, e = c.template.split(d), f = "", g = 0, h = 0, k;
  for (k in e) {
    var l = e[k];
    d.test(l) ? (l = Number(l.split("%")[1]) - 1, l = c.params[l], "Indicator" !== l.type && ("boolean" === l.accept ? (f += Lang.template.function_param_boolean + (g ? g : ""), g++) : (f += Lang.template.function_param_string + (h ? h : ""), h++))) : f += l;
  }
  return {block:b, description:f};
};
Entry.Func.prototype.generateBlock = function(c) {
  c = Entry.Func.generateBlock(this);
  this.block = c.block;
  this.description = c.description;
};
Entry.Func.generateWsBlock = function(c, b) {
  this.unbindFuncChangeEvent();
  c = c ? c : this.targetFunc;
  var d = c.content.getEventMap("funcDef")[0];
  if (d) {
    for (var e = d.params[0], f = 0, g = 0, h = [], k = "", d = c.hashMap, l = c.paramMap, m = []; e;) {
      var q = e.params[0], n = q.type;
      switch(e.type) {
        case "function_field_label":
          k = k + " " + q;
          break;
        case "function_field_boolean":
          Entry.Mutator.mutate(n, {template:Lang.Blocks.FUNCTION_logical_variable + " " + (f + 1)});
          d[n] = !1;
          l[n] = f + g;
          f++;
          h.push({type:"Block", accept:"boolean"});
          k += " %" + (f + g);
          m.push(e.id);
          break;
        case "function_field_string":
          Entry.Mutator.mutate(n, {template:Lang.Blocks.FUNCTION_character_variable + " " + (g + 1)}), d[n] = !1, l[n] = f + g, g++, k += " %" + (f + g), h.push({type:"Block", accept:"string"}), m.push(e.id);
      }
      e = e.getOutputBlock();
    }
    k += " %" + (f + g + 1);
    h.push({type:"Indicator", img:"block_icon/function_03.png", size:12});
    e = "func_" + c.id;
    f = Entry.block[e];
    f = f.params.slice(0, f.params.length - 1);
    g = h.slice(0, h.length - 1);
    f = f.length;
    l = g.length;
    g = {};
    if (l > f) {
      if (f = c.outputBlockIds) {
        for (g = 0; f[g] === m[g];) {
          g++;
        }
        for (l = 0; f[f.length - l - 1] === m[m.length - l - 1];) {
          l++;
        }
        l = m.length - l - 1;
        g = {type:"insert", startPos:g, endPos:l};
      }
    } else {
      g = l < f ? {type:"cut", pos:l} : {type:"noChange"};
    }
    g.isRestore = b;
    c.outputBlockIds = m;
    Entry.Mutator.mutate(e, {params:h, template:k}, g);
    for (var r in d) {
      d[r] ? (b = /string/.test(r) ? Lang.Blocks.FUNCTION_character_variable : Lang.Blocks.FUNCTION_logical_variable, Entry.Mutator.mutate(r, {template:b})) : d[r] = !0;
    }
    this.bindFuncChangeEvent(c);
  }
};
Entry.Func.bindFuncChangeEvent = function(c) {
  c = c ? c : this.targetFunc;
  !this._funcChangeEvent && c.content.getEventMap("funcDef")[0].view && (this._funcChangeEvent = c.content.getEventMap("funcDef")[0].view._contents[1].changeEvent.attach(this, this.generateWsBlock));
};
Entry.Func.unbindFuncChangeEvent = function() {
  this._funcChangeEvent && (this._funcChangeEvent.destroy(), delete this._funcChangeEvent);
};
Entry.Func.unbindWorkspaceStateChangeEvent = function() {
  this._workspaceStateEvent && (this._workspaceStateEvent.destroy(), delete this._workspaceStateEvent);
};
Entry.Helper = function() {
  this.visible = !1;
  Entry.addEventListener("workspaceChangeMode", function() {
    this._blockView && this.renderBlock(this._blockView.type);
  }.bind(this));
  this.resize = Entry.Utils.debounce(this.resize, 300);
};
p = Entry.Helper.prototype;
p.generateView = function(c, b) {
  if (!this.parentView_) {
    this.parentView_ = c;
    this.blockHelpData = EntryStatic.blockInfo;
    this.view = b = Entry.createElement("div", "entryBlockHelperWorkspace");
    Entry.isForLecture && b.addClass("lecture");
    this.parentView_.appendChild(b);
    this._contentView = c = Entry.createElement("div", "entryBlockHelperContentWorkspace");
    var d = Entry.createElement("div");
    d.addClass("entryBlockHelperTitle textModeElem");
    d.innerHTML = "\uba85\ub839\uc5b4";
    c.appendChild(d);
    c.addClass("entryBlockHelperIntro");
    Entry.isForLecture && c.addClass("lecture");
    b.appendChild(c);
    this.blockHelperContent_ = c;
    this.blockHelperView_ = b;
    b = Entry.createElement("div", "entryBlockHelperBlockWorkspace");
    this.blockHelperContent_.appendChild(b);
    d = Entry.createElement("div");
    d.addClass("entryBlockHelperTitle textModeElem");
    d.innerHTML = "\uc124\uba85";
    c.appendChild(d);
    d = Entry.createElement("div", "entryBlockHelperDescriptionWorkspace");
    d.addClass("entryBlockHelperContent selectAble");
    this.blockHelperContent_.appendChild(d);
    d.innerHTML = Lang.Helper.Block_click_msg;
    this.blockHelperDescription_ = d;
    d = Entry.createElement("div");
    d.addClass("entryBlockHelperTitle textModeElem");
    d.innerHTML = "\uc694\uc18c";
    c.appendChild(d);
    this._elementsTitle = d;
    this._elementsContainer = Entry.createElement("div", "entryBlockHelperElementsContainer");
    this._elementsContainer.addClass("entryBlockHelperContent textModeElem selectAble");
    c.appendChild(this._elementsContainer);
    "undefined" !== typeof CodeMirror && (d = Entry.createElement("div"), d.addClass("entryBlockHelperTitle textModeElem"), d.innerHTML = "\uc608\uc2dc \ucf54\ub4dc", c.appendChild(d), d = Entry.createElement("div", "entryBlockHelperCodeMirrorContainer"), d.addClass("textModeElem"), c.appendChild(d), this.codeMirror = CodeMirror(d, {lineNumbers:!0, value:"", mode:{name:"python"}, indentUnit:4, theme:"default", viewportMargin:10, styleActiveLine:!1, readOnly:!0}), this._doc = this.codeMirror.getDoc(), 
    this._codeMirror = this.codeMirror, d = Entry.createElement("div"), d.addClass("entryBlockHelperTitle textModeElem"), d.innerHTML = "\uc608\uc2dc \uc124\uba85", c.appendChild(d), this._codeMirrorDesc = Entry.createElement("div"), this._codeMirrorDesc.addClass("entryBlockHelperContent textModeElem selectAble"), c.appendChild(this._codeMirrorDesc));
    this._renderView = new Entry.RenderView($(b), "LEFT_MOST");
    this.code = new Entry.Code([]);
    this.code.isFor = "blockHelper";
    this._renderView.changeCode(this.code);
    this.first = !0;
  }
};
p.bindWorkspace = function(c) {
  c && (this._blockViewObserver && this._blockViewObserver.destroy(), this.workspace = c, this._renderView && (this._renderView.workspace = c), this._blockViewObserver = c.observe(this, "_updateSelectedBlock", ["selectedBlockView"]));
};
p._updateSelectedBlock = function() {
  var c = this.workspace.selectedBlockView;
  if (c && this.visible && c != this._blockView) {
    var b = c.block.type;
    this._blockView = c;
    this.renderBlock(b);
  }
};
p.renderBlock = function(c) {
  var b = Lang.Helper[c];
  if (c && this.visible && b && !Entry.block[c].isPrimitive) {
    this.first && (this.blockHelperContent_.removeClass("entryBlockHelperIntro"), this.first = !1);
    var d = this.code;
    d.clear();
    var e = Entry.block[c].def || {type:c};
    if (this.workspace.getMode() === Entry.Workspace.MODE_VIMBOARD) {
      this._contentView.addClass("textMode");
      this.blockHelperDescription_.innerHTML = Lang.PythonHelper[c + "_desc"];
      b = Lang.PythonHelper[c + "_elements"];
      this._elementsContainer.innerHTML = "";
      if (b) {
        for (this._elementsTitle.removeClass("entryRemove"), b = b.split("%next"); b.length;) {
          var f = b.shift().split("-- "), g = Entry.createElement("div");
          g.addClass("entryBlockHelperElementsContainer");
          var h = Entry.createElement("div");
          h.innerHTML = f[0];
          h.addClass("elementLeft");
          var k = Entry.createElement("div");
          k.addClass("elementRight");
          k.innerHTML = f[1];
          g.appendChild(h);
          g.appendChild(k);
          this._elementsContainer.appendChild(g);
        }
      } else {
        this._elementsTitle.addClass("entryRemove");
      }
      this._codeMirrorDesc.innerHTML = Lang.PythonHelper[c + "_exampleDesc"];
      this._codeMirror.setValue(Lang.PythonHelper[c + "_exampleCode"]);
      this.codeMirror.refresh();
      e = Entry.block[c].pyHelpDef || e;
    } else {
      this._contentView.removeClass("textMode"), this.blockHelperDescription_.innerHTML = b;
    }
    d.createThread([e]);
    d.board.align();
    d.board.resize();
    this._renderView.align();
    this._renderView.setDomSize();
  }
};
p.getView = function() {
  return this.view;
};
p.resize = function() {
  this.codeMirror && this.codeMirror.refresh();
};
Entry.HWMontior = {};
Entry.HWMonitor = function(c) {
  this.svgDom = Entry.Dom($('<svg id="hwMonitor" width="100%" height="100%"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'));
  this._hwModule = c;
  var b = this;
  Entry.addEventListener("windowResized", function() {
    var c = b._hwModule.monitorTemplate.mode;
    "both" == c && (b.resize(), b.resizeList());
    "list" == c ? b.resizeList() : b.resize();
  });
  Entry.addEventListener("hwModeChange", function() {
    b.changeMode();
  });
  this.changeOffset = 0;
  this.scale = 0.5;
  this._listPortViews = {};
};
(function(c) {
  c.initView = function() {
    this.svgDom = Entry.Dom($('<svg id="hwMonitor" width="100%" height="100%"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'));
  };
  c.generateView = function() {
    this.snap = Entry.SVG("hwMonitor");
    this._svgGroup = this.snap.elem("g");
    this._portMap = {n:[], e:[], s:[], w:[]};
    var b = this._hwModule.monitorTemplate, c = {href:Entry.mediaFilePath + b.imgPath, x:-b.width / 2, y:-b.height / 2, width:b.width, height:b.height};
    this._portViews = {};
    this.hwView = this._svgGroup.elem("image");
    this.hwView = this.hwView.attr(c);
    this._template = b;
    b = b.ports;
    this.pathGroup = null;
    this.pathGroup = this._svgGroup.elem("g");
    var c = [], e;
    for (e in b) {
      var f = this.generatePortView(b[e], "_svgGroup");
      this._portViews[e] = f;
      c.push(f);
    }
    c.sort(function(b, c) {
      return b.box.x - c.box.x;
    });
    var g = this._portMap;
    c.map(function(b) {
      (1 > (Math.atan2(-b.box.y, b.box.x) / Math.PI + 2) % 2 ? g.n : g.s).push(b);
    });
    this.resize();
  };
  c.toggleMode = function(b) {
    var c = this._hwModule.monitorTemplate;
    "list" == b ? (c.TempPort = null, this._hwModule.monitorTemplate.ports && (this._hwModule.monitorTemplate.TempPort = this._hwModule.monitorTemplate.ports, this._hwModule.monitorTemplate.listPorts = this.addPortEle(this._hwModule.monitorTemplate.listPorts, this._hwModule.monitorTemplate.ports)), $(this._svglistGroup).remove(), this._svgGroup && $(this._svgGroup).remove(), $(this._pathGroup).remove(), this._hwModule.monitorTemplate.mode = "list", this.generateListView()) : (this._hwModule.monitorTemplate.TempPort && 
    (this._hwModule.monitorTemplate.ports = this._hwModule.monitorTemplate.TempPort, this._hwModule.monitorTemplate.listPorts = this.removePortEle(this._hwModule.monitorTemplate.listPorts, this._hwModule.monitorTemplate.ports)), $(this._svglistGroup).remove(), this._hwModule.monitorTemplate.mode = "both", this.generateListView(), this.generateView());
  };
  c.setHwmonitor = function(b) {
    this._hwmodule = b;
  };
  c.changeMode = function(b) {
    "both" == this._hwModule.monitorTemplate.mode ? this.toggleMode("list") : "list" == this._hwModule.monitorTemplate.mode && this.toggleMode("both");
  };
  c.addPortEle = function(b, c) {
    if ("object" != typeof c) {
      return b;
    }
    for (var d in c) {
      b[d] = c[d];
    }
    return b;
  };
  c.removePortEle = function(b, c) {
    if ("object" != typeof c) {
      return b;
    }
    for (var d in c) {
      delete b[d];
    }
    return b;
  };
  c.generateListView = function() {
    this._portMapList = {n:[]};
    this._svglistGroup = null;
    this.listsnap = Entry.SVG("hwMonitor");
    this._svglistGroup = this.listsnap.elem("g");
    var b = this._hwModule.monitorTemplate;
    this._template = b;
    b = b.listPorts;
    this.pathGroup = this._svglistGroup.elem("g");
    var c = [], e;
    for (e in b) {
      var f = this.generatePortView(b[e], "_svglistGroup");
      this._listPortViews[e] = f;
      c.push(f);
    }
    var g = this._portMapList;
    c.map(function(b) {
      g.n.push(b);
    });
    this.resizeList();
  };
  c.generatePortView = function(b, c) {
    c = this[c].elem("g");
    c.addClass("hwComponent");
    var d = this.pathGroup.elem("path").attr({d:"m0,0", fill:"none", stroke:"input" === b.type ? "#00979d" : "#A751E3", "stroke-width":3});
    var f = c.elem("rect").attr({x:0, y:0, width:150, height:22, rx:4, ry:4, fill:"#fff", stroke:"#a0a1a1"}), g = c.elem("text").attr({x:4, y:12, fill:"#000", "class":"hwComponentName", "alignment-baseline":"central"});
    g.textContent = b.name;
    g = g.getComputedTextLength();
    c.elem("rect").attr({x:g + 8, y:2, width:30, height:18, rx:9, ry:9, fill:"input" === b.type ? "#00979d" : "#A751E3"});
    var h = c.elem("text").attr({x:g + 13, y:12, fill:"#fff", "class":"hwComponentValue", "alignment-baseline":"central"});
    h.textContent = 0;
    g += 40;
    f.attr({width:g});
    return {group:c, value:h, type:b.type, path:d, box:{x:b.pos.x - this._template.width / 2, y:b.pos.y - this._template.height / 2, width:g}, width:g};
  };
  c.getView = function() {
    return this.svgDom;
  };
  c.update = function() {
    var b = Entry.hw.portData, c = Entry.hw.sendQueue, e = this._hwModule.monitorTemplate.mode, f = this._hwModule.monitorTemplate.keys || [], g = [];
    if ("list" == e) {
      g = this._listPortViews;
    } else {
      if ("both" == e) {
        if (g = this._listPortViews, this._portViews) {
          for (var h in this._portViews) {
            g[h] = this._portViews[h];
          }
        }
      } else {
        g = this._portViews;
      }
    }
    if (c) {
      for (h in c) {
        0 != c[h] && g[h] && (g[h].type = "output");
      }
    }
    for (var k in g) {
      if (e = g[k], "input" == e.type) {
        var l = b[k];
        0 < f.length && $.each(f, function(b, c) {
          if ($.isPlainObject(l)) {
            l = l[c] || 0;
          } else {
            return !1;
          }
        });
        e.value.textContent = l ? l : 0;
        e.group.getElementsByTagName("rect")[1].attr({fill:"#00979D"});
      } else {
        l = c[k], 0 < f.length && $.each(f, function(b, c) {
          if ($.isPlainObject(l)) {
            l = l[c] || 0;
          } else {
            return !1;
          }
        }), e.value.textContent = l ? l : 0, e.group.getElementsByTagName("rect")[1].attr({fill:"#A751E3"});
      }
    }
  };
  c.resize = function() {
    var b;
    this.hwView && this.hwView.attr({transform:"scale(" + this.scale + ")"});
    this.svgDom && (b = this.svgDom.get(0).getBoundingClientRect());
    this._svgGroup.attr({transform:"translate(" + b.width / 2 + "," + b.height / 1.8 + ")"});
    this._rect = b;
    0 >= this._template.height || 0 >= b.height || (this.scale = b.height / this._template.height * this._template.height / 1000, this.align());
  };
  c.resizeList = function() {
    var b = this.svgDom.get(0).getBoundingClientRect();
    this._svglistGroup.attr({transform:"translate(" + b.width / 2 + "," + b.height / 2 + ")"});
    this._rect = b;
    this.alignList();
  };
  c.align = function() {
    var b = this._portMap.s.concat();
    this._alignNS(b, this.scale / 3 * this._template.height + 5, 27);
    b = this._portMap.n.concat();
    this._alignNS(b, -this._template.height * this.scale / 3 - 32, -27);
    b = this._portMap.e.concat();
    this._alignEW(b, -this._template.width * this.scale / 3 - 5, -27);
    b = this._portMap.w.concat();
    this._alignEW(b, this._template.width * this.scale / 3 - 32, -27);
  };
  c.alignList = function() {
    var b = this._hwModule.monitorTemplate.listPorts;
    for (var c = b.length, e = 0; e < b.length; e++) {
      b[e].group.attr({transform:"translate(" + this._template.width * (e / c - 0.5) + "," + (-this._template.width / 2 - 30) + ")"});
    }
    b = this._portMapList.n.concat();
    this._alignNSList(b, -this._template.width * this.scale / 2 - 32, -27);
  };
  c._alignEW = function(b, c, e) {
    var d = b.length, g = this._rect.height - 50;
    tP = -g / 2;
    bP = g / 2;
    height = this._rect.height;
    listVLine = wholeHeight = 0;
    mode = this._hwModule.monitorTemplate;
    for (g = 0; g < d; g++) {
      wholeHeight += b[g].height + 5;
    }
    wholeHeight < bP - tP && (bP = wholeHeight / 2 + 3, tP = -wholeHeight / 2 - 3);
    for (; 1 < d;) {
      var h = b.shift();
      g = b.pop();
      var k = tP;
      var l = bP;
      var m = e;
      wholeWidth <= bP - tP ? (tP += h.width + 5, bP -= g.width + 5, m = 0) : 0 === b.length ? (tP = (tP + bP) / 2 - 3, bP = tP + 6) : (tP = Math.max(tP, -width / 2 + h.width) + 15, bP = Math.min(bP, width / 2 - g.width) - 15);
      wholeWidth -= h.width + g.width + 10;
      c += m;
    }
    b.length && b[0].group.attr({transform:"translate(" + c + ",60)"});
    h && rPort && (this._movePort(h, c, tP, k), this._movePort(rPort, c, bP, l));
  };
  c._alignNS = function(b, c, e) {
    for (var d = -this._rect.width / 2, g = this._rect.width / 2, h = this._rect.width, k = 0, l = 0; l < b.length; l++) {
      k += b[l].width + 5;
    }
    k < g - d && (g = k / 2 + 3, d = -k / 2 - 3);
    for (; 1 < b.length;) {
      var l = b.shift(), m = b.pop(), q = d, n = g, r = e;
      k <= g - d ? (d += l.width + 5, g -= m.width + 5, r = 0) : 0 === b.length ? (d = (d + g) / 2 - 3, g = d + 6) : (d = Math.max(d, -h / 2 + l.width) + 15, g = Math.min(g, h / 2 - m.width) - 15);
      this._movePort(l, d, c, q);
      this._movePort(m, g, c, n);
      k -= l.width + m.width + 10;
      c += r;
    }
    b.length && this._movePort(b[0], (g + d - b[0].width) / 2, c, 100);
  };
  c._alignNSList = function(b, c) {
    c = this._rect.width;
    initX = -this._rect.width / 2 + 10;
    initY = -this._rect.height / 2 + 10;
    for (var d = listLine = wholeWidth = 0; d < b.length; d++) {
      wholeWidth += b[d].width;
    }
    for (var f = 0, g = 0, h = initX, k, l, m = 0, d = 0; d < b.length; d++) {
      l = b[d], d != b.length - 1 && (m = b[d + 1]), g += l.width, lP = initX, k = initY + 30 * f, l.group.attr({transform:"translate(" + lP + "," + k + ")"}), initX += l.width + 10, g > c - (l.width + m.width / 2.2) && (f += 1, initX = h, g = 0);
    }
  };
  c._movePort = function(b, c, e, f) {
    var d = c, h = b.box.x * this.scale, k = b.box.y * this.scale;
    c > f ? (d = c - b.width, c = c > h && h > f ? "M" + h + "," + e + "L" + h + "," + k : "M" + (c + f) / 2 + "," + e + "l0," + (k > e ? 28 : -3) + "H" + h + "L" + h + "," + k) : c = c < h && h < f ? "m" + h + "," + e + "L" + h + "," + k : "m" + (f + c) / 2 + "," + e + "l0," + (k > e ? 28 : -3) + "H" + h + "L" + h + "," + k;
    b.group.attr({transform:"translate(" + d + "," + e + ")"});
    b.path.attr({d:c});
  };
})(Entry.HWMonitor.prototype);
Entry.HW = function() {
  this.sessionRoomId = localStorage.getItem("entryhwRoomId");
  this.sessionRoomId || (this.sessionRoomId = this.createRandomRoomId(), localStorage.setItem("entryhwRoomId", this.sessionRoomId));
  this.connectTrial = 0;
  this.isFirstConnect = !0;
  this.requireVerion = "v1.6.1";
  this.hwPopupCreate();
  this.initSocket();
  this.connected = !1;
  this.portData = {};
  this.sendQueue = {};
  this.outputQueue = {};
  this.settingQueue = {};
  this.socketType = this.hwModule = this.selectedDevice = null;
  Entry.addEventListener("stop", this.setZero);
  this.hwInfo = {"1.1":Entry.Arduino, "1.2":Entry.SensorBoard, "1.3":Entry.CODEino, "1.4":Entry.joystick, "1.5":Entry.dplay, "1.6":Entry.nemoino, "1.7":Entry.Xbot, "1.8":Entry.ardublock, "1.9":Entry.ArduinoExt, "1.10":Entry.ArduinoNano, "1.A":Entry.Cobl, "1.B":Entry.Blacksmith, "2.4":Entry.Hamster, "2.5":Entry.Albert, "2.9":Entry.Turtle, "2.FF":Entry.Roboid, "3.1":Entry.Bitbrick, "4.2":Entry.Arduino, "5.1":Entry.Neobot, "6.1":Entry.mkboard, "7.1":Entry.Robotis_carCont, "7.2":Entry.Robotis_openCM70, 
  "8.1":Entry.Arduino, "9.1":Entry.iboard, "A.1":Entry.SmartBoard, "B.1":Entry.Codestar, "C.1":Entry.DaduBlock, "C.2":Entry.DaduBlock_Car, "D.1":Entry.robotori, "F.1":Entry.byrobot_dronefighter_controller, "F.2":Entry.byrobot_dronefighter_drive, "F.3":Entry.byrobot_dronefighter_flight, "F.4":Entry.byrobot_petrone_v2_controller, "F.5":Entry.byrobot_petrone_v2_drive, "F.6":Entry.byrobot_petrone_v2_flight, "10.1":Entry.Roborobo_Roduino, "10.2":Entry.Roborobo_SchoolKit, "12.1":Entry.EV3, "13.1":Entry.rokoboard, 
  "14.1":Entry.Chocopi, "15.1":Entry.coconut, "16.1":Entry.MODI, "18.1":Entry.Altino, "1A.1":Entry.ArduinoNano};
};
Entry.HW.TRIAL_LIMIT = 2;
p = Entry.HW.prototype;
p.createRandomRoomId = function() {
  return "xxxxxxxxyx".replace(/[xy]/g, function(c) {
    var b = 16 * Math.random() | 0;
    return ("x" == c ? b : b & 3 | 8).toString(16);
  });
};
p.connectWebSocket = function(c, b) {
  var d = this, e = io(c, b);
  e.io.reconnectionAttempts(Entry.HW.TRIAL_LIMIT);
  e.io.reconnectionDelayMax(1000);
  e.io.timeout(1000);
  e.on("connect", function() {
    d.socketType = "WebSocket";
    d.initHardware(e);
  });
  e.on("mode", function(b) {
    0 === e.mode && 1 === b && d.disconnectHardware();
    d.socketMode = b;
    e.mode = b;
  });
  e.on("message", function(b) {
    if (b.data && "string" === typeof b.data) {
      switch(b.data) {
        case "disconnectHardware":
          d.disconnectHardware();
          break;
        default:
          var c = JSON.parse(b.data);
          d.checkDevice(c, b.version);
          d.updatePortData(c);
      }
    }
  });
  e.on("disconnect", function() {
    d.initSocket();
  });
  return e;
};
p.initSocket = function() {
  try {
    this.connected = !1;
    this.tlsSocketIo && this.tlsSocketIo.removeAllListeners();
    this.socketIo && this.socketIo.removeAllListeners();
    this.isOpenHardware || this.checkOldClient();
    if (-1 < location.protocol.indexOf("https")) {
      this.tlsSocketIo = this.connectWebSocket("https://hardware.play-entry.org:23518", {query:{client:!0, roomId:this.sessionRoomId}});
    } else {
      try {
        this.socketIo = this.connectWebSocket("http://127.0.0.1:23518", {query:{client:!0, roomId:this.sessionRoomId}});
      } catch (c) {
      }
      try {
        this.tlsSocketIo = this.connectWebSocket("https://hardware.play-entry.org:23518", {query:{client:!0, roomId:this.sessionRoomId}});
      } catch (c) {
      }
    }
    Entry.dispatchEvent("hwChanged");
  } catch (c) {
  }
};
p.checkOldClient = function() {
  try {
    var c = this, b = new WebSocket("wss://hardware.play-entry.org:23518");
    b.onopen = function() {
      c.popupHelper.show("newVersion", !0);
      b.close();
    };
  } catch (d) {
  }
};
p.retryConnect = function() {
  this.isOpenHardware = !1;
  Entry.HW.TRIAL_LIMIT = 5;
  this.initSocket();
};
p.openHardwareProgram = function() {
  var c = this;
  this.isOpenHardware = !0;
  Entry.HW.TRIAL_LIMIT = 5;
  this.executeHardware();
  this.socket && this.socket.connected || setTimeout(function() {
    c.initSocket();
  }, 1000);
};
p.initHardware = function(c) {
  this.socket = c;
  this.connectTrial = 0;
  this.connected = !0;
  Entry.dispatchEvent("hwChanged");
  Entry.playground && Entry.playground.object && Entry.playground.setMenu(Entry.playground.object.objectType);
};
p.disconnectHardware = function() {
  Entry.propertyPanel && Entry.propertyPanel.removeMode("hw");
  this.hwModule = this.selectedDevice = void 0;
  Entry.dispatchEvent("hwChanged");
};
p.disconnectedSocket = function() {
  this.tlsSocketIo.close();
  this.socketIo && this.socketIo.close();
  Entry.propertyPanel && Entry.propertyPanel.removeMode("hw");
  this.socket = void 0;
  this.connectTrial = 0;
  this.connected = !1;
  this.hwModule = this.selectedDevice = void 0;
  Entry.dispatchEvent("hwChanged");
  Entry.toast.alert("\ud558\ub4dc\uc6e8\uc5b4 \ud504\ub85c\uadf8\ub7a8 \uc5f0\uacb0 \uc885\ub8cc", "\ud558\ub4dc\uc6e8\uc5b4 \ud504\ub85c\uadf8\ub7a8\uacfc\uc758 \uc5f0\uacb0\uc774 \uc885\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.", !1);
};
p.setDigitalPortValue = function(c, b) {
  this.sendQueue[c] = b;
  this.removePortReadable(c);
};
p.getAnalogPortValue = function(c) {
  return this.connected ? this.portData["a" + c] : 0;
};
p.getDigitalPortValue = function(c) {
  if (!this.connected) {
    return 0;
  }
  this.setPortReadable(c);
  return void 0 !== this.portData[c] ? this.portData[c] : 0;
};
p.setPortReadable = function(c) {
  this.sendQueue.readablePorts || (this.sendQueue.readablePorts = []);
  var b = !1, d;
  for (d in this.sendQueue.readablePorts) {
    if (this.sendQueue.readablePorts[d] == c) {
      b = !0;
      break;
    }
  }
  b || this.sendQueue.readablePorts.push(c);
};
p.removePortReadable = function(c) {
  if (this.sendQueue.readablePorts || Array.isArray(this.sendQueue.readablePorts)) {
    var b;
    for (b in this.sendQueue.readablePorts) {
      if (this.sendQueue.readablePorts[b] == c) {
        var d = Number(b);
        break;
      }
    }
    this.sendQueue.readablePorts = void 0 != d ? this.sendQueue.readablePorts.slice(0, d).concat(this.sendQueue.readablePorts.slice(d + 1, this.sendQueue.readablePorts.length)) : [];
  }
};
p.update = function() {
  this.socket && (this.socket.disconnected || this.socket.emit("message", {data:JSON.stringify(this.sendQueue), mode:this.socket.mode, type:"utf8"}));
};
p.updatePortData = function(c) {
  this.portData = c;
  this.hwMonitor && Entry.propertyPanel && "hw" == Entry.propertyPanel.selected && this.hwMonitor.update();
};
p.closeConnection = function() {
  this.socket && this.socket.close();
};
p.downloadConnector = function() {
  Entry.dispatchEvent("hwDownload", "hardware");
};
p.downloadGuide = function() {
  Entry.dispatchEvent("hwDownload", "manual");
};
p.downloadSource = function() {
  Entry.dispatchEvent("hwDownload", "ino");
};
p.setZero = function() {
  Entry.hw.hwModule && Entry.hw.hwModule.setZero();
};
p.checkDevice = function(c, b) {
  if (void 0 !== c.company) {
    var d = [Entry.Utils.convertIntToHex(c.company), ".", Entry.Utils.convertIntToHex(c.model)].join("");
    d == this.selectedDevice ? this.hwModule && this.hwModule.dataHandler && this.hwModule.dataHandler(c) : (Entry.Utils.isNewVersion(b, this.requireVerion) && this.popupHelper.show("newVersion", !0), this.selectedDevice = d, this.hwModule = this.hwInfo[d], Entry.dispatchEvent("hwChanged"), Entry.propertyPanel && this.hwModule.monitorTemplate ? (c = Lang.Msgs.hw_connection_success_desc, this.hwMonitor ? (this.hwMonitor._hwModule = this.hwModule, this.hwMonitor.initView()) : this.hwMonitor = new Entry.HWMonitor(this.hwModule), 
    Entry.propertyPanel.addMode("hw", this.hwMonitor), b = this.hwModule.monitorTemplate, "both" == b.mode ? (b.mode = "list", this.hwMonitor.generateListView(), b.mode = "general", this.hwMonitor.generateView(), b.mode = "both") : "list" == b.mode ? this.hwMonitor.generateListView() : this.hwMonitor.generateView()) : c = Lang.Msgs.hw_connection_success_desc2, Entry.toast.success(Lang.Msgs.hw_connection_success, c));
  }
};
p.banHW = function() {
  var c = this.hwInfo, b;
  for (b in c) {
    Entry.playground.mainWorkspace.blockMenu.banClass(c[b].name, !0);
  }
};
p.executeHardware = function() {
  function c(b) {
    navigator.msLaunchUri(b, function() {
    }, function() {
      e.popupHelper.show("hwDownload", !0);
    });
  }
  function b(b) {
    var c = document.createElement("iframe");
    c.src = "about:blank";
    c.style = "display:none";
    document.getElementsByTagName("body")[0].appendChild(c);
    var d = null, d = setTimeout(function() {
      var f = !1;
      try {
        c.contentWindow.location.href = b, f = !0;
      } catch (q) {
        "NS_ERROR_UNKNOWN_PROTOCOL" == q.name && (f = !1);
      }
      f || e.popupHelper.show("hwDownload", !0);
      document.getElementsByTagName("body")[0].removeChild(c);
      clearTimeout(d);
    }, 500);
  }
  function d(b) {
    var c = !1;
    window.focus();
    $(window).one("blur", function() {
      c = !0;
    });
    Entry.dispatchEvent("workspaceUnbindUnload", !0);
    location.assign(encodeURI(b));
    setTimeout(function() {
      Entry.dispatchEvent("workspaceBindUnload", !0);
    }, 100);
    setTimeout(function() {
      0 == c && e.popupHelper.show("hwDownload", !0);
      window.onblur = null;
    }, 3000);
  }
  var e = this, f = {_bNotInstalled:!1, init:function(b, c) {
    this._w = window.open("/views/hwLoading.html", "entry_hw_launcher", "width=220, height=225,  top=" + window.screenTop + ", left=" + window.screenLeft);
    var d = null, d = setTimeout(function() {
      f.runViewer(b, c);
      clearInterval(d);
    }, 1000);
  }, runViewer:function(b, c) {
    this._w.document.write("<iframe src='" + b + "' onload='opener.Entry.hw.ieLauncher.set()' style='display:none;width:0;height:0'></iframe>");
    var d = 0, e = null, e = setInterval(function() {
      try {
        this._w.location.href;
      } catch (r) {
        this._bNotInstalled = !0;
      }
      if (10 < d) {
        clearInterval(e);
        var b = 0, f = null, f = setInterval(function() {
          b++;
          this._w.closed || 2 < b ? clearInterval(f) : this._w.close();
          this._bNotInstalled = !1;
          d = 0;
        }.bind(this), 5000);
        c(!this._bNotInstalled);
      }
      d++;
    }.bind(this), 100);
  }, set:function() {
    this._bNotInstalled = !0;
  }};
  e.ieLauncher = f;
  var g = "entryhw://-roomId:" + this.sessionRoomId;
  0 < navigator.userAgent.indexOf("MSIE") || 0 < navigator.userAgent.indexOf("Trident") ? void 0 != navigator.msLaunchUri ? c(g) : 9 > (0 < document.documentMode ? document.documentMode : navigator.userAgent.match(/(?:MSIE) ([0-9.]+)/)[1]) ? alert(Lang.msgs.not_support_browser) : f.init(g, function(b) {
    0 == b && e.popupHelper.show("hwDownload", !0);
  }) : 0 < navigator.userAgent.indexOf("Firefox") ? b(g) : 0 < navigator.userAgent.indexOf("Chrome") || 0 < navigator.userAgent.indexOf("Safari") ? d(g) : alert(Lang.msgs.not_support_browser);
};
p.hwPopupCreate = function() {
  var c = this;
  this.popupHelper || (this.popupHelper = window.popupHelper ? window.popupHelper : new Entry.popupHelper(!0));
  this.popupHelper.addPopup("newVersion", {type:"confirm", title:Lang.Msgs.new_version_title, setPopupLayout:function(b) {
    var d = Entry.Dom("div", {class:"contentArea"}), e = Entry.Dom("div", {class:"textArea", parent:d}), f = Entry.Dom("div", {class:"text1", parent:e}), g = Entry.Dom("div", {class:"text2", parent:e}), h = Entry.Dom("div", {class:"text3", parent:e}), e = Entry.Dom("div", {class:"text4", parent:e}), k = Entry.Dom("div", {classes:["popupCancelBtn", "popupDefaultBtn"], parent:d}), l = Entry.Dom("div", {classes:["popupOkBtn", "popupDefaultBtn"], parent:d});
    f.text(Lang.Msgs.new_version_text1);
    g.html(Lang.Msgs.new_version_text2);
    h.text(Lang.Msgs.new_version_text3);
    e.text(Lang.Msgs.new_version_text4);
    k.text(Lang.Buttons.cancel);
    l.html(Lang.Msgs.new_version_download);
    d.bindOnClick(".popupDefaultBtn", function(b) {
      $(this).hasClass("popupOkBtn") && c.downloadConnector();
      c.popupHelper.hide("newVersion");
    });
    b.append(d);
  }});
  this.popupHelper.addPopup("hwDownload", {type:"confirm", title:Lang.Msgs.not_install_title, setPopupLayout:function(b) {
    var d = Entry.Dom("div", {class:"contentArea"}), e = Entry.Dom("div", {class:"textArea", parent:d}), f = Entry.Dom("div", {class:"text1", parent:e}), g = Entry.Dom("div", {class:"text2", parent:e}), h = Entry.Dom("div", {class:"text3", parent:e}), e = Entry.Dom("div", {class:"text4", parent:e}), k = Entry.Dom("div", {classes:["popupCancelBtn", "popupDefaultBtn"], parent:d}), l = Entry.Dom("div", {classes:["popupOkBtn", "popupDefaultBtn"], parent:d});
    f.text(Lang.Msgs.hw_download_text1);
    g.html(Lang.Msgs.hw_download_text2);
    h.text(Lang.Msgs.hw_download_text3);
    e.text(Lang.Msgs.hw_download_text4);
    k.text(Lang.Buttons.cancel);
    l.html(Lang.Msgs.hw_download_btn);
    d.bindOnClick(".popupDefaultBtn", function(b) {
      $(this).hasClass("popupOkBtn") && c.downloadConnector();
      c.popupHelper.hide("hwDownload");
    });
    b.append(d);
  }});
};
Entry.PropertyPanel = function() {
  this.modes = {};
  this.selected = null;
};
(function(c) {
  c.generateView = function(b, c) {
    this._view = Entry.Dom("div", {class:"propertyPanel", parent:$(b)});
    this._tabView = Entry.Dom("div", {class:"propertyTab", parent:this._view});
    this._contentView = Entry.Dom("div", {class:"propertyContent", parent:this._view});
    this._cover = Entry.Dom("div", {classes:["propertyPanelCover", "entryRemove"], parent:this._view});
    b = Entry.Dom("div", {class:"entryObjectSelectedImgWorkspace", parent:this._view});
    this.initializeSplitter(b);
  };
  c.addMode = function(b, c) {
    this.modes[b] && this.removeMode(b);
    var d = c.getView(), d = Entry.Dom(d, {parent:this._contentView}), f = Entry.Dom("<div>" + Lang.Menus[b] + "</div>", {classes:["propertyTabElement", "propertyTab" + b], parent:this._tabView}), g = this;
    f.bind("click", function() {
      g.select(b);
    });
    "console" == b && c.codeMirror.refresh();
    this.modes[b] && (this.modes[b].tabDom.remove(), this.modes[b].contentDom.remove(), "hw" == b && ($(this.modes).removeClass(".propertyTabhw"), $(".propertyTabhw").unbind("dblclick")));
    this.modes[b] = {obj:c, tabDom:f, contentDom:d};
    "hw" == b && $(".propertyTabhw").bind("dblclick", function() {
      Entry.dispatchEvent("hwModeChange");
    });
  };
  c.removeMode = function(b) {
    this.modes[b] && (this.modes[b].tabDom.remove(), this.modes[b].contentDom.remove(), "hw" == b && ($(this.modes).removeClass(".propertyTabhw"), $(".propertyTabhw").unbind("dblclick")));
    (b = Object.keys(this.modes)) && 0 < b.length && this.select(b[0]);
  };
  c.resize = function(b) {
    var c = this.selected;
    c && (this._view.css({width:b + "px", top:9 * b / 16 + 123 - 22 + "px"}), 430 <= b ? this._view.removeClass("collapsed") : this._view.addClass("collapsed"), Entry.dispatchEvent("windowResized"), b = this.modes[c].obj, "hw" == c ? this.modes.hw.obj.listPorts ? b.resizeList() : b.resize && b.resize() : b.resize && b.resize());
  };
  c.select = function(b) {
    for (var c in this.modes) {
      var e = this.modes[c];
      e.tabDom.removeClass("selected");
      e.contentDom.addClass("entryRemove");
      $(e.contentDom).detach();
      e.obj.visible = !1;
    }
    c = this.modes[b];
    $(this._contentView).append(c.contentDom);
    c.tabDom.addClass("selected");
    c.contentDom.removeClass("entryRemove");
    c.obj.resize && c.obj.resize();
    c.obj.visible = !0;
    this.selected = b;
  };
  c.initializeSplitter = function(b) {
    var c = this;
    b.bind("mousedown touchstart", function(b) {
      var d = Entry.container;
      c._cover.removeClass("entryRemove");
      c._cover._isVisible = !0;
      d.splitterEnable = !0;
      Entry.documentMousemove && (d.resizeEvent = Entry.documentMousemove.attach(this, function(b) {
        d.splitterEnable && Entry.resizeElement({canvasWidth:b.clientX || b.x});
      }));
      $(document).bind("mouseup.container:splitter touchend.container:splitter", e);
    });
    var e = function(b) {
      b = Entry.container;
      var d = b.resizeEvent;
      d && (b.splitterEnable = !1, Entry.documentMousemove.detach(d), delete b.resizeEvent);
      c._cover._isVisible && (c._cover._isVisible = !1, c._cover.addClass("entryRemove"));
      $(document).unbind(".container:splitter");
    };
  };
})(Entry.PropertyPanel.prototype);
Entry.init = function(c, b) {
  Entry.assert("object" === typeof b, "Init option is not object");
  this.events_ = {};
  this.interfaceState = {menuWidth:264};
  Entry.Utils.bindGlobalEvent("resize mousedown mousemove keydown keyup dispose".split(" "));
  this.options = b;
  this.parseOptions(b);
  this.mediaFilePath = (b.libDir ? b.libDir : "/lib") + "/entryjs/images/";
  this.defaultPath = b.defaultDir || "";
  this.blockInjectPath = b.blockInjectDir || "";
  "workspace" == this.type && this.isPhone() && (this.type = "phone");
  this.initialize_();
  this.view_ = c;
  $(this.view_).addClass("entry");
  "minimize" === this.type && $(this.view_).addClass(this.type);
  "tablet" === this.device && $(this.view_).addClass("tablet");
  Entry.initFonts(b.fonts);
  this.createDom(c, this.type);
  this.loadInterfaceState();
  this.overridePrototype();
  this.maxCloneLimit = 360;
  this.cloudSavable = !0;
  this.startTime = (new Date).getTime();
  document.onkeydown = function(b) {
    Entry.dispatchEvent("keyPressed", b);
  };
  document.onkeyup = function(b) {
    Entry.dispatchEvent("keyUpped", b);
  };
  window.onresize = function(b) {
    Entry.dispatchEvent("windowResized", b);
  };
  window.onbeforeunload = this.beforeUnload;
  Entry.addEventListener("saveWorkspace", function(b) {
    Entry.addActivity("save");
  });
  Entry.addEventListener("showBlockHelper", function(b) {
    Entry.propertyPanel.select("helper");
  });
  "IE" != Entry.getBrowserType().substr(0, 2) || window.flashaudio ? createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin]) : (createjs.FlashAudioPlugin.swfPath = this.mediaFilePath + "media/", createjs.Sound.registerPlugins([createjs.FlashAudioPlugin]), window.flashaudio = !0);
  Entry.soundQueue = new createjs.LoadQueue;
  Entry.soundQueue.installPlugin(createjs.Sound);
  Entry.loadAudio_([Entry.mediaFilePath + "sounds/click.mp3", Entry.mediaFilePath + "sounds/click.wav", Entry.mediaFilePath + "sounds/click.ogg"], "entryMagneting");
  Entry.loadAudio_([Entry.mediaFilePath + "sounds/delete.mp3", Entry.mediaFilePath + "sounds/delete.ogg", Entry.mediaFilePath + "sounds/delete.wav"], "entryDelete");
  createjs.Sound.stop();
  BigNumber.config({ERRORS:!1});
};
Entry.changeContainer = function(c) {
  c.appendChild(this.view_);
};
Entry.loadAudio_ = function(c, b) {
  if (window.Audio && c.length) {
    for (; 0 < c.length;) {
      c = c[0];
      c.match(/\/([^.]+)./);
      Entry.soundQueue.loadFile({id:b, src:c, type:createjs.LoadQueue.SOUND});
      break;
    }
  }
};
Entry.initialize_ = function() {
  this.stage = new Entry.Stage;
  Entry.engine && Entry.engine.projectTimer && Entry.engine.clearTimer();
  this.engine = new Entry.Engine;
  "minimize" !== this.type && (this.propertyPanel = new Entry.PropertyPanel);
  this.container = new Entry.Container;
  this.helper = new Entry.Helper;
  this.youtube = new Entry.Youtube;
  this.variableContainer = new Entry.VariableContainer;
  this.commander = new Entry.Commander(this.type, this.doNotSkipAny);
  this.scene = new Entry.Scene;
  this.playground = new Entry.Playground;
  this.toast = new Entry.Toast;
  this.hw && this.hw.closeConnection();
  this.hw = new Entry.HW;
  if (Entry.enableActivityLogging) {
    this.reporter = new Entry.Reporter(!1);
  } else {
    if ("workspace" == this.type || "phone" == this.type) {
      this.reporter = new Entry.Reporter(!0);
    }
  }
};
Entry.createDom = function(c, b) {
  if (b && "workspace" != b) {
    "minimize" == b ? (d = Entry.createElement("canvas"), d.className = "entryCanvasWorkspace minimize", d.id = "entryCanvas", d.width = 640, d.height = 360, e = Entry.createElement("div", "entryCanvasWrapper"), e.appendChild(d), c.appendChild(e), this.canvas_ = d, this.stage.initStage(this.canvas_), e = Entry.createElement("div"), c.appendChild(e), this.engineView = e, this.engine.generateView(this.engineView, b)) : "phone" == b && (this.stateManagerView = d = Entry.createElement("div"), this.stateManager.generateView(this.stateManagerView, 
    b), e = Entry.createElement("div"), c.appendChild(e), this.engineView = e, this.engine.generateView(this.engineView, b), d = Entry.createElement("canvas"), d.addClass("entryCanvasPhone"), d.id = "entryCanvas", d.width = 640, d.height = 360, e.insertBefore(d, this.engine.footerView_), this.canvas_ = d, this.stage.initStage(this.canvas_), d = Entry.createElement("div"), c.appendChild(d), this.containerView = d, this.container.generateView(this.containerView, b), d = Entry.createElement("div"), 
    c.appendChild(d), this.playgroundView = d, this.playground.generateView(this.playgroundView, b));
  } else {
    Entry.documentMousedown.attach(this, this.cancelObjectEdit);
    var d = Entry.createElement("div");
    c.appendChild(d);
    this.sceneView = d;
    this.scene.generateView(this.sceneView, b);
    d = Entry.createElement("div");
    this.sceneView.appendChild(d);
    this.stateManagerView = d;
    this.stateManager.generateView(this.stateManagerView, b);
    var e = Entry.createElement("div");
    c.appendChild(e);
    this.engineView = e;
    this.engine.generateView(this.engineView, b);
    d = Entry.createElement("canvas");
    d.addClass("entryCanvasWorkspace");
    d.id = "entryCanvas";
    d.width = 640;
    d.height = 360;
    e.insertBefore(d, this.engine.addButton);
    d.addEventListener("mousewheel", function(b) {
      var c = Entry.variableContainer.getListById(Entry.stage.mouseCoordinate);
      b = 0 < b.wheelDelta ? !0 : !1;
      for (var d = 0; d < c.length; d++) {
        var e = c[d];
        e.scrollButton_.y = b ? 46 <= e.scrollButton_.y ? e.scrollButton_.y - 23 : 23 : e.scrollButton_.y + 23;
        e.updateView();
      }
    });
    this.canvas_ = d;
    this.stage.initStage(this.canvas_);
    d = Entry.createElement("div");
    this.propertyPanel.generateView(c, b);
    this.containerView = d;
    this.container.generateView(this.containerView, b);
    this.propertyPanel.addMode("object", this.container);
    this.helper.generateView(this.containerView, b);
    this.propertyPanel.addMode("helper", this.helper);
    d = Entry.createElement("div");
    c.appendChild(d);
    this.playgroundView = d;
    this.playground.generateView(this.playgroundView, b);
    this.propertyPanel.select("object");
    this.helper.bindWorkspace(this.playground.mainWorkspace);
  }
};
Entry.start = function(c) {
  "invisible" !== Entry.type && (this.FPS || (this.FPS = 60), Entry.assert("number" == typeof this.FPS, "FPS must be number"), Entry.engine.start(this.FPS));
};
Entry.stop = function() {
  "invisible" !== Entry.type && (this.FPS = null, Entry.engine.stop());
};
Entry.parseOptions = function(c) {
  this.type = c.type || this.type;
  this.hashId = c.hashId || this.hasId;
  c.device && (this.device = c.device);
  this.projectSaveable = c.projectsaveable;
  void 0 === this.projectSaveable && (this.projectSaveable = !0);
  this.objectAddable = c.objectaddable;
  void 0 === this.objectAddable && (this.objectAddable = !0);
  this.objectEditable = c.objectEditable;
  void 0 === this.objectEditable && (this.objectEditable = !0);
  this.objectEditable || (this.objectAddable = !1);
  this.objectDeletable = c.objectdeletable;
  void 0 === this.objectDeletable && (this.objectDeletable = !0);
  this.soundEditable = c.soundeditable;
  void 0 === this.soundEditable && (this.soundEditable = !0);
  this.pictureEditable = c.pictureeditable;
  void 0 === this.pictureEditable && (this.pictureEditable = !0);
  this.sceneEditable = c.sceneEditable;
  void 0 === this.sceneEditable && (this.sceneEditable = !0);
  this.functionEnable = c.functionEnable;
  void 0 === this.functionEnable && (this.functionEnable = !0);
  this.messageEnable = c.messageEnable;
  void 0 === this.messageEnable && (this.messageEnable = !0);
  this.variableEnable = c.variableEnable;
  void 0 === this.variableEnable && (this.variableEnable = !0);
  this.listEnable = c.listEnable;
  void 0 === this.listEnable && (this.listEnable = !0);
  this.doCommandAll = c.doCommandAll;
  void 0 === this.doCommandAll && (this.doCommandAll = !1);
  this.hasVariableManager = c.hasvariablemanager;
  this.variableEnable || this.messageEnable || this.listEnable || this.functionEnable ? void 0 === this.hasVariableManager && (this.hasVariableManager = !0) : this.hasVariableManager = !1;
  if (this.readOnly = c.readOnly || !1) {
    this.soundEditable = a.sceneEditable = this.objectAddable = !1;
  }
  c.isForLecture && (this.isForLecture = c.isForLecture);
  c.textCodingEnable && (this.textCodingEnable = c.textCodingEnable);
};
Entry.initFonts = function(c) {
  this.fonts = c;
  c || (this.fonts = []);
};
Entry.reloadOption = function(c) {
  this.options = c;
  this.parseOptions(c);
  this.playground.applyTabOption();
  this.variableContainer.applyOption();
  this.engine.applyOption();
  this.commander.applyOption();
};
Entry.Activity = function(c, b) {
  this.name = c;
  this.timestamp = new Date;
  c = [];
  if (void 0 !== b) {
    for (var d = 0, e = b.length; d < e; d++) {
      var f = b[d];
      c.push({key:f[0], value:f[1]});
    }
  }
  this.data = c;
};
Entry.ActivityReporter = function() {
  this._activities = [];
};
(function(c) {
  c.add = function(b) {
    if (b && 0 !== b.length) {
      if (!(b instanceof Entry.Activity)) {
        var c = b.shift();
        b = new Entry.Activity(c, b);
      }
      this._activities.push(b);
    }
  };
  c.clear = function() {
    this._activities = [];
  };
  c.get = function() {
    return this._activities;
  };
  c.report = function() {
  };
})(Entry.ActivityReporter.prototype);
Entry.Recorder = function() {
  this._recordData = [];
  Entry.commander.addReporter(this);
};
(function(c) {
  c.add = function(b) {
    var c = b[0];
    if (c) {
      switch(Entry.Command[c].recordable) {
        case Entry.STATIC.RECORDABLE.SUPPORT:
          this._recordData.push(b);
          Entry.toast.warning("Record", Lang.Command[c + ""]);
          break;
        case Entry.STATIC.RECORDABLE.ABANDON:
          Entry.toast.alert("\uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c");
      }
    }
  };
  c.getData = function() {
    return this._recordData;
  };
})(Entry.Recorder.prototype);
Entry.State = function(c, b, d, e) {
  this.caller = b;
  this.func = d;
  3 < arguments.length && (this.params = Array.prototype.slice.call(arguments).slice(3));
  this.message = c;
  this.time = Entry.getUpTime();
  this.isPass = Entry.Command[c] ? Entry.Command[c].isPass : !1;
  this.id = Entry.generateHash();
};
Entry.State.prototype.generateMessage = function() {
};
Entry.StateManager = function() {
  this.undoStack_ = [];
  this.redoStack_ = [];
  this.isIgnore = this._isRedoing = this.isRestore = !1;
  Entry.addEventListener("cancelLastCommand", function(c) {
    Entry.stateManager.cancelLastCommand();
  });
  Entry.addEventListener("saveWorkspace", function(c) {
    Entry.stateManager.addStamp();
  });
  Entry.addEventListener("undo", function(c) {
    Entry.stateManager.undo();
  });
  Entry.addEventListener("redo", function(c) {
    Entry.stateManager.redo();
  });
};
Entry.StateManager.prototype.generateView = function(c, b) {
};
Entry.StateManager.prototype.addCommand = function(c, b, d, e) {
  if (!this.isIgnoring()) {
    var f = new Entry.State;
    Entry.State.prototype.constructor.apply(f, Array.prototype.slice.call(arguments));
    this.isRestoring() ? this.redoStack_.push(f) : (this.undoStack_.push(f), this._isRedoing || (this.redoStack_ = []));
    Entry.reporter && Entry.reporter.report(f);
    Entry.creationChangedEvent && Entry.creationChangedEvent.notify();
    return f;
  }
};
Entry.StateManager.prototype.cancelLastCommand = function() {
  this.canUndo() && (this.undoStack_.pop(), Entry.creationChangedEvent && Entry.creationChangedEvent.notify());
};
Entry.StateManager.prototype.getLastCommand = function() {
  return this.undoStack_[this.undoStack_.length - 1];
};
Entry.StateManager.prototype.getLastCommandById = function(c) {
  for (var b = this.undoStack_, d = b.length - 1; 0 <= d; d--) {
    var e = b[d];
    if (e.id === c) {
      return e;
    }
  }
};
Entry.StateManager.prototype.getLastRedoCommand = function() {
  return this.redoStack_[this.redoStack_.length - 1];
};
Entry.StateManager.prototype.removeAllPictureCommand = function() {
  this.undoStack_ = this.undoStack_.filter(function(c) {
    return !(400 <= c.message && 500 > c.message);
  });
  this.redoStack_ = this.redoStack_.filter(function(c) {
    return !(400 <= c.message && 500 > c.message);
  });
};
Entry.StateManager.prototype.undo = function(c) {
  if (this.canUndo() && !this.isRestoring()) {
    this.addActivity("undo");
    this.startRestore();
    for (var b = !0; this.undoStack_.length;) {
      var d = this.undoStack_.pop();
      d.func.apply(d.caller, d.params);
      var e = this.getLastRedoCommand();
      b ? (e.isPass = !1, b = !b) : e.isPass = !0;
      c && c--;
      if (!c && !0 !== d.isPass) {
        break;
      }
    }
    this.endRestore();
    Entry.disposeEvent && Entry.disposeEvent.notify();
    Entry.creationChangedEvent && Entry.creationChangedEvent.notify();
  }
};
Entry.StateManager.prototype.redo = function() {
  if (this.canRedo() && !this.isRestoring()) {
    this._isRedoing = !0;
    this.addActivity("undo");
    this.addActivity("redo");
    for (var c = !0; this.redoStack_.length;) {
      var b = this.redoStack_.pop(), d = b.func.apply(b.caller, b.params);
      c ? (d.isPass(!1), c = !c) : d.isPass(!0);
      if (!0 !== b.isPass) {
        break;
      }
    }
    this._isRedoing = !1;
    Entry.creationChangedEvent && Entry.creationChangedEvent.notify();
  }
};
Entry.StateManager.prototype.updateView = function() {
};
Entry.StateManager.prototype.startRestore = function() {
  this.isRestore = !0;
};
Entry.StateManager.prototype.endRestore = function() {
  this.isRestore = !1;
};
Entry.StateManager.prototype.isRestoring = function() {
  return this.isRestore;
};
Entry.StateManager.prototype.startIgnore = function() {
  this.isIgnore = !0;
};
Entry.StateManager.prototype.endIgnore = function() {
  this.isIgnore = !1;
};
Entry.StateManager.prototype.isIgnoring = function() {
  return this.isIgnore;
};
Entry.StateManager.prototype.canUndo = function() {
  return 0 < this.undoStack_.length && Entry.engine.isState("stop");
};
Entry.StateManager.prototype.canRedo = function() {
  return 0 < this.redoStack_.length && Entry.engine.isState("stop");
};
Entry.StateManager.prototype.addStamp = function() {
  this.stamp = Entry.generateHash();
  this.undoStack_.length && (this.undoStack_[this.undoStack_.length - 1].stamp = this.stamp);
};
Entry.StateManager.prototype.isSaved = function() {
  return 0 === this.undoStack_.length || this.undoStack_[this.undoStack_.length - 1].stamp == this.stamp && "string" == typeof this.stamp;
};
Entry.StateManager.prototype.addActivity = function(c) {
  Entry.reporter && Entry.reporter.report(new Entry.State(c));
};
Entry.StateManager.prototype.getUndoStack = function() {
  return this.undoStack_.slice(0);
};
Entry.StateManager.prototype.changeLastCommandType = function(c) {
  var b = this.getLastCommand();
  b && (b.message = c);
  return b;
};
Entry.StateManager.prototype.clear = function() {
  for (; this.undoStack_.length;) {
    this.undoStack_.pop();
  }
  for (; this.redoStack_.length;) {
    this.redoStack_.pop();
  }
};
Entry.BlockModel = function() {
  Entry.Model(this);
};
Entry.BlockModel.prototype.schema = {id:null, x:0, y:0, type:null, params:{}, statements:{}, prev:null, next:null, view:null};
Entry.BlockRenderModel = function() {
  Entry.Model(this);
};
Entry.BlockRenderModel.prototype.schema = {id:0, type:Entry.STATIC.BLOCK_RENDER_MODEL, x:0, y:0, width:0, height:0, magneting:!1};
Entry.BoxModel = function() {
  Entry.Model(this);
};
Entry.BoxModel.prototype.schema = {id:0, type:Entry.STATIC.BOX_MODEL, x:0, y:0, width:0, height:0};
Entry.DragInstance = function(c) {
  Entry.Model(this);
  this.set(c);
};
Entry.DragInstance.prototype.schema = {type:Entry.STATIC.DRAG_INSTANCE, startX:0, startY:0, offsetX:0, offsetY:0, absX:0, absY:0, prev:null, height:0, mode:0, isNew:!1};
Entry.ThreadModel = function() {
  Entry.Model(this);
};
Entry.ThreadModel.prototype.schema = {id:0, type:Entry.STATIC.THREAD_MODEL, x:0, y:0, width:0, minWidth:0, height:0};
Entry.EntryObject = function(c) {
  function b(b) {
    if (b.fileurl) {
      return b.fileurl;
    }
    b = b.filename;
    return Entry.defaultPath + "/uploads/" + b.substring(0, 2) + "/" + b.substring(2, 4) + "/image/" + b + ".png";
  }
  if (c) {
    this.id = c.id;
    this.name = c.name || c.sprite.name;
    this.text = c.text || this.name;
    this.objectType = c.objectType;
    this.objectType || (this.objectType = "sprite");
    this.script = new Entry.Code(c.script ? c.script : [], this);
    this.pictures = Entry.Utils.copy(c.sprite.pictures || []);
    this.sounds = Entry.Utils.copy(c.sprite.sounds || []);
    for (var d = 0; d < this.sounds.length; d++) {
      this.sounds[d].id || (this.sounds[d].id = Entry.generateHash()), Entry.initSound(this.sounds[d]);
    }
    this.lock = c.lock ? c.lock : !1;
    this.isEditing = !1;
    "sprite" == this.objectType && (this.selectedPicture = c.selectedPictureId ? this.getPicture(c.selectedPictureId) : this.pictures[0]);
    this.scene = Entry.scene.getSceneById(c.scene) || Entry.scene.selectedScene;
    this.setRotateMethod(c.rotateMethod);
    this.entity = new Entry.EntityObject(this);
    this.entity.injectModel(this.selectedPicture ? this.selectedPicture : null, c.entity ? c.entity : this.initEntity(c));
    this.clonedEntities = [];
    Entry.stage.loadObject(this);
    var e = this.entity.id;
    Entry.container.cachePicture.bind(Entry.container);
    c = this.pictures;
    for (d in c) {
      (function(c) {
        c.objectId = this.id;
        c.id || (c.id = Entry.generateHash());
        var d = new Image;
        Entry.Loader.addQueue();
        d.onload = function(b) {
          delete this.triedCnt;
          Entry.container.cachePicture(c.id + e, this);
          Entry.Loader.removeQueue();
          this.onload = null;
        };
        d.onerror = function(d) {
          this.triedCnt ? 3 > this.triedCnt ? (this.triedCnt++, this.src = Entry.mediaFilePath + "_1x1.png") : (delete this.triedCnt, Entry.Loader.removeQueue(), this.onerror = null) : ("invisible" !== Entry.type && console.log("err=", c.name, "load failed"), this.triedCnt = 1, this.src = b(c));
        };
        d.src = b(c);
      })(this.pictures[d]);
    }
    Entry.requestUpdate = !0;
  }
  this._isContextMenuEnabled = !0;
};
(function(c) {
  c.generateView = function() {
    if ("workspace" == Entry.type) {
      var b = Entry.createElement("li", this.id);
      document.createDocumentFragment("div").appendChild(b);
      b.addClass("entryContainerListElementWorkspace");
      b.object = this;
      Entry.Utils.disableContextmenu(b);
      var c = this;
      var e = null;
      $(b).bind("mousedown touchstart", function(b) {
        function d(b) {
          b.stopPropagation();
          l && 5 < Math.sqrt(Math.pow(b.pageX - l.x, 2) + Math.pow(b.pageY - l.y, 2)) && e && (clearTimeout(e), e = null);
        }
        function f(b) {
          b.stopPropagation();
          g.unbind(".object");
          e && (clearTimeout(e), e = null);
        }
        Entry.container.getObject(this.id) && Entry.do("containerSelectObject", this.id);
        var g = $(document), h = b.type, k = !1;
        if (Entry.Utils.isRightButton(b)) {
          b.stopPropagation(), Entry.documentMousedown.notify(b), k = !0, c._rightClick(b);
        } else {
          var l = {x:b.clientX, y:b.clientY};
          "touchstart" !== h || k || (b.stopPropagation(), Entry.documentMousedown.notify(b), e = setTimeout(function() {
            e && (e = null, c._rightClick(b));
          }, 1000), g.bind("mousemove.object touchmove.object", d), g.bind("mouseup.object touchend.object", f));
        }
      });
      this.view_ = b;
      var f = this;
      var g = Entry.createElement("ul");
      g.addClass("objectInfoView");
      Entry.objectEditable || g.addClass("entryHide");
      var h = Entry.createElement("li");
      h.addClass("objectInfo_visible");
      this.entity.getVisible() || h.addClass("objectInfo_unvisible");
      h.bindOnClick(function(b) {
        Entry.engine.isState("run") || (b = f.entity, b.setVisible(!b.getVisible()) ? this.removeClass("objectInfo_unvisible") : this.addClass("objectInfo_unvisible"));
      });
      b = Entry.createElement("li");
      b.addClass("objectInfo_unlock");
      this.getLock() && b.addClass("objectInfo_lock");
      b.bindOnClick(function(b) {
        Entry.engine.isState("run") || (b = f, b.setLock(!b.getLock()) ? this.addClass("objectInfo_lock") : this.removeClass("objectInfo_lock"), b.updateInputViews(b.getLock()));
      });
      g.appendChild(h);
      g.appendChild(b);
      this.view_.appendChild(g);
      b = Entry.createElement("div");
      b.addClass("entryObjectThumbnailWorkspace");
      this.view_.appendChild(b);
      this.thumbnailView_ = b;
      b = Entry.createElement("div");
      b.addClass("entryObjectWrapperWorkspace");
      this.view_.appendChild(b);
      h = Entry.createElement("input");
      h.bindOnClick(function(b) {
        b.preventDefault();
        this.readOnly || (this.focus(), this.select());
      });
      h.addClass("entryObjectNameWorkspace");
      b.appendChild(h);
      this.nameView_ = h;
      this.nameView_.entryObject = this;
      h.setAttribute("readonly", !0);
      var k = this;
      this.nameView_.onblur = function(b) {
        this.entryObject.name = this.value;
        Entry.playground.reloadPlayground();
      };
      this.nameView_.onkeypress = function(b) {
        13 == b.keyCode && k.editObjectValues(!1);
      };
      this.nameView_.value = this.name;
      h = Entry.createElement("div");
      h.addClass("entryObjectEditWorkspace");
      h.object = this;
      this.editView_ = h;
      this.view_.appendChild(h);
      $(h).mousedown(function(b) {
        b.stopPropagation();
        Entry.documentMousedown.notify(b);
        Entry.do("objectEditButtonClick", c.id);
      });
      h.blur = function(b) {
        c.editObjectComplete();
      };
      Entry.objectEditable && Entry.objectDeletable && (h = Entry.createElement("div"), h.addClass("entryObjectDeleteWorkspace"), h.object = this, this.deleteView_ = h, this.view_.appendChild(h), h.bindOnClick(function(b) {
        Entry.engine.isState("run") || Entry.container.removeObject(this.object);
      }));
      h = Entry.createElement("div");
      h.addClass("entryObjectInformationWorkspace");
      h.object = this;
      this.isInformationToggle = !1;
      b.appendChild(h);
      this.informationView_ = h;
      b = Entry.createElement("div");
      b.addClass("entryObjectRotationWrapperWorkspace");
      b.object = this;
      this.view_.appendChild(b);
      var l = Entry.createElement("span");
      l.addClass("entryObjectCoordinateWorkspace");
      b.appendChild(l);
      g = Entry.createElement("span");
      g.addClass("entryObjectCoordinateSpanWorkspace");
      g.innerHTML = "X:";
      var m = Entry.createElement("input");
      m.addClass("entryObjectCoordinateInputWorkspace");
      m.setAttribute("readonly", !0);
      m.bindOnClick(function(b) {
        b.stopPropagation();
        this.select();
      });
      h = Entry.createElement("span");
      h.addClass("entryObjectCoordinateSpanWorkspace");
      h.innerHTML = "Y:";
      var q = Entry.createElement("input");
      q.addClass("entryObjectCoordinateInputWorkspace entryObjectCoordinateInputWorkspace_right");
      q.bindOnClick(function(b) {
        b.stopPropagation();
        this.select();
      });
      q.setAttribute("readonly", !0);
      var n = Entry.createElement("span");
      n.addClass("entryObjectCoordinateSizeWorkspace");
      n.innerHTML = Lang.Workspace.Size + " : ";
      var r = Entry.createElement("input");
      r.addClass("entryObjectCoordinateInputWorkspace", "entryObjectCoordinateInputWorkspace_size");
      r.bindOnClick(function(b) {
        b.stopPropagation();
        this.select();
      });
      r.setAttribute("readonly", !0);
      l.appendChild(g);
      l.appendChild(m);
      l.appendChild(h);
      l.appendChild(q);
      l.appendChild(n);
      l.appendChild(r);
      l.xInput_ = m;
      l.yInput_ = q;
      l.sizeInput_ = r;
      this.coordinateView_ = l;
      f = this;
      m.onkeypress = function(b) {
        13 == b.keyCode && f.editObjectValues(!1);
      };
      m.onblur = function(b) {
        Entry.Utils.isNumber(m.value) && f.entity.setX(Number(m.value));
        f.updateCoordinateView();
        Entry.stage.updateObject();
      };
      q.onkeypress = function(b) {
        13 == b.keyCode && f.editObjectValues(!1);
      };
      q.onblur = function(b) {
        Entry.Utils.isNumber(q.value) && f.entity.setY(Number(q.value));
        f.updateCoordinateView();
        Entry.stage.updateObject();
      };
      r.onkeypress = function(b) {
        13 == b.keyCode && f.editObjectValues(!1);
      };
      r.onblur = function(b) {
        Entry.Utils.isNumber(r.value) && f.entity.setSize(Number(r.value));
        f.updateCoordinateView();
        Entry.stage.updateObject();
      };
      l = Entry.createElement("div");
      l.addClass("entryObjectRotateLabelWrapperWorkspace");
      this.view_.appendChild(l);
      this.rotateLabelWrapperView_ = l;
      g = Entry.createElement("span");
      g.addClass("entryObjectRotateSpanWorkspace");
      g.innerHTML = Lang.Workspace.rotation + " : ";
      var t = Entry.createElement("input");
      t.addClass("entryObjectRotateInputWorkspace");
      t.setAttribute("readonly", !0);
      t.bindOnClick(function(b) {
        b.stopPropagation();
        this.select();
      });
      this.rotateSpan_ = g;
      this.rotateInput_ = t;
      h = Entry.createElement("span");
      h.addClass("entryObjectDirectionSpanWorkspace");
      h.innerHTML = Lang.Workspace.direction + " : ";
      var u = Entry.createElement("input");
      u.addClass("entryObjectDirectionInputWorkspace");
      u.setAttribute("readonly", !0);
      u.bindOnClick(function(b) {
        b.stopPropagation();
        this.select();
      });
      this.directionInput_ = u;
      l.appendChild(g);
      l.appendChild(t);
      l.appendChild(h);
      l.appendChild(u);
      l.rotateInput_ = t;
      l.directionInput_ = u;
      f = this;
      t.onkeypress = function(b) {
        13 == b.keyCode && f.editObjectValues(!1);
      };
      t.onblur = function(b) {
        b = t.value;
        -1 != b.indexOf("\u02da") && (b = b.substring(0, b.indexOf("\u02da")));
        Entry.Utils.isNumber(b) && f.entity.setRotation(Number(b));
        f.updateRotationView();
        Entry.stage.updateObject();
      };
      u.onkeypress = function(b) {
        13 == b.keyCode && f.editObjectValues(!1);
      };
      u.onblur = function(b) {
        b = u.value;
        -1 != b.indexOf("\u02da") && (b = b.substring(0, b.indexOf("\u02da")));
        Entry.Utils.isNumber(b) && f.entity.setDirection(Number(b));
        f.updateRotationView();
        Entry.stage.updateObject();
      };
      h = Entry.createElement("div");
      h.addClass("rotationMethodWrapper");
      b.appendChild(h);
      this.rotationMethodWrapper_ = h;
      b = Entry.createElement("span");
      b.addClass("entryObjectRotateMethodLabelWorkspace");
      h.appendChild(b);
      b.innerHTML = Lang.Workspace.rotate_method + " : ";
      b = Entry.createElement("div");
      b.addClass("entryObjectRotateModeWorkspace entryObjectRotateModeAWorkspace");
      b.object = this;
      this.rotateModeAView_ = b;
      h.appendChild(b);
      b.bindOnClick(function(b) {
        Entry.engine.isState("run") || this.object.getLock() || (this.object.initRotateValue("free"), this.object.setRotateMethod("free"));
      });
      b = Entry.createElement("div");
      b.addClass("entryObjectRotateModeWorkspace entryObjectRotateModeBWorkspace");
      b.object = this;
      this.rotateModeBView_ = b;
      h.appendChild(b);
      b.bindOnClick(function(b) {
        Entry.engine.isState("run") || this.object.getLock() || (this.object.initRotateValue("vertical"), this.object.setRotateMethod("vertical"));
      });
      b = Entry.createElement("div");
      b.addClass("entryObjectRotateModeWorkspace entryObjectRotateModeCWorkspace");
      b.object = this;
      this.rotateModeCView_ = b;
      h.appendChild(b);
      b.bindOnClick(function(b) {
        Entry.engine.isState("run") || this.object.getLock() || (this.object.initRotateValue("none"), this.object.setRotateMethod("none"));
      });
      this.updateThumbnailView();
      this.updateCoordinateView();
      this.updateRotateMethodView();
      this.updateInputViews();
      this.updateCoordinateView(!0);
      this.updateRotationView(!0);
      return this.view_;
    }
    if ("phone" == Entry.type) {
      return b = Entry.createElement("li", this.id), b.addClass("entryContainerListElementWorkspace"), b.object = this, b.bindOnClick(function(b) {
        Entry.container.getObject(this.id) && Entry.container.selectObject(this.id);
      }), $ && (c = this, context.attach("#" + this.id, [{text:Lang.Workspace.context_rename, href:"/", action:function(b) {
        b.preventDefault();
      }}, {text:Lang.Workspace.context_duplicate, href:"/", action:function(b) {
        b.preventDefault();
        Entry.container.addCloneObject(c);
      }}, {text:Lang.Workspace.context_remove, href:"/", action:function(b) {
        b.preventDefault();
        Entry.container.removeObject(c);
      }}])), this.view_ = b, g = Entry.createElement("ul"), g.addClass("objectInfoView"), h = Entry.createElement("li"), h.addClass("objectInfo_visible"), b = Entry.createElement("li"), b.addClass("objectInfo_lock"), g.appendChild(h), g.appendChild(b), this.view_.appendChild(g), b = Entry.createElement("div"), b.addClass("entryObjectThumbnailWorkspace"), this.view_.appendChild(b), this.thumbnailView_ = b, b = Entry.createElement("div"), b.addClass("entryObjectWrapperWorkspace"), this.view_.appendChild(b), 
      h = Entry.createElement("input"), h.addClass("entryObjectNameWorkspace"), b.appendChild(h), this.nameView_ = h, this.nameView_.entryObject = this, this.nameView_.onblur = function() {
        this.entryObject.name = this.value;
        Entry.playground.reloadPlayground();
      }, this.nameView_.onkeypress = function(b) {
        13 == b.keyCode && f.editObjectValues(!1);
      }, this.nameView_.value = this.name, Entry.objectEditable && Entry.objectDeletable && (h = Entry.createElement("div"), h.addClass("entryObjectDeletePhone"), h.object = this, this.deleteView_ = h, this.view_.appendChild(h), h.bindOnClick(function(b) {
        Entry.engine.isState("run") || Entry.container.removeObject(this.object);
      })), h = Entry.createElement("button"), h.addClass("entryObjectEditPhone"), h.object = this, h.bindOnClick(function(b) {
        if (b = Entry.container.getObject(this.id)) {
          Entry.container.selectObject(b.id), Entry.playground.injectObject(b);
        }
      }), this.view_.appendChild(h), h = Entry.createElement("div"), h.addClass("entryObjectInformationWorkspace"), h.object = this, this.isInformationToggle = !1, b.appendChild(h), this.informationView_ = h, l = Entry.createElement("div"), l.addClass("entryObjectRotateLabelWrapperWorkspace"), this.view_.appendChild(l), this.rotateLabelWrapperView_ = l, g = Entry.createElement("span"), g.addClass("entryObjectRotateSpanWorkspace"), g.innerHTML = Lang.Workspace.rotation + " : ", t = Entry.createElement("input"), 
      t.addClass("entryObjectRotateInputWorkspace"), this.rotateSpan_ = g, this.rotateInput_ = t, h = Entry.createElement("span"), h.addClass("entryObjectDirectionSpanWorkspace"), h.innerHTML = Lang.Workspace.direction + " : ", u = Entry.createElement("input"), u.addClass("entryObjectDirectionInputWorkspace"), this.directionInput_ = u, l.appendChild(g), l.appendChild(t), l.appendChild(h), l.appendChild(u), l.rotateInput_ = t, l.directionInput_ = u, f = this, t.onkeypress = function(b) {
        13 == b.keyCode && (b = t.value, -1 != b.indexOf("\u02da") && (b = b.substring(0, b.indexOf("\u02da"))), Entry.Utils.isNumber(b) && f.entity.setRotation(Number(b)), f.updateRotationView(), t.blur());
      }, t.onblur = function(b) {
        f.entity.setRotation(f.entity.getRotation());
        Entry.stage.updateObject();
      }, u.onkeypress = function(b) {
        13 == b.keyCode && (b = u.value, -1 != b.indexOf("\u02da") && (b = b.substring(0, b.indexOf("\u02da"))), Entry.Utils.isNumber(b) && f.entity.setDirection(Number(b)), f.updateRotationView(), u.blur());
      }, u.onblur = function(b) {
        f.entity.setDirection(f.entity.getDirection());
        Entry.stage.updateObject();
      }, b = Entry.createElement("div"), b.addClass("entryObjectRotationWrapperWorkspace"), b.object = this, this.view_.appendChild(b), l = Entry.createElement("span"), l.addClass("entryObjectCoordinateWorkspace"), b.appendChild(l), g = Entry.createElement("span"), g.addClass("entryObjectCoordinateSpanWorkspace"), g.innerHTML = "X:", m = Entry.createElement("input"), m.addClass("entryObjectCoordinateInputWorkspace"), h = Entry.createElement("span"), h.addClass("entryObjectCoordinateSpanWorkspace"), 
      h.innerHTML = "Y:", q = Entry.createElement("input"), q.addClass("entryObjectCoordinateInputWorkspace entryObjectCoordinateInputWorkspace_right"), n = Entry.createElement("span"), n.addClass("entryObjectCoordinateSpanWorkspace"), n.innerHTML = Lang.Workspace.Size, r = Entry.createElement("input"), r.addClass("entryObjectCoordinateInputWorkspace", "entryObjectCoordinateInputWorkspace_size"), l.appendChild(g), l.appendChild(m), l.appendChild(h), l.appendChild(q), l.appendChild(n), l.appendChild(r), 
      l.xInput_ = m, l.yInput_ = q, l.sizeInput_ = r, this.coordinateView_ = l, f = this, m.onkeypress = function(b) {
        13 == b.keyCode && (Entry.Utils.isNumber(m.value) && f.entity.setX(Number(m.value)), f.updateCoordinateView(), f.blur());
      }, m.onblur = function(b) {
        f.entity.setX(f.entity.getX());
        Entry.stage.updateObject();
      }, q.onkeypress = function(b) {
        13 == b.keyCode && (Entry.Utils.isNumber(q.value) && f.entity.setY(Number(q.value)), f.updateCoordinateView(), f.blur());
      }, q.onblur = function(b) {
        f.entity.setY(f.entity.getY());
        Entry.stage.updateObject();
      }, h = Entry.createElement("div"), h.addClass("rotationMethodWrapper"), b.appendChild(h), this.rotationMethodWrapper_ = h, b = Entry.createElement("span"), b.addClass("entryObjectRotateMethodLabelWorkspace"), h.appendChild(b), b.innerHTML = Lang.Workspace.rotate_method + " : ", b = Entry.createElement("div"), b.addClass("entryObjectRotateModeWorkspace"), b.addClass("entryObjectRotateModeAWorkspace"), b.object = this, this.rotateModeAView_ = b, h.appendChild(b), b.bindOnClick(function(b) {
        Entry.engine.isState("run") || this.object.setRotateMethod("free");
      }), b = Entry.createElement("div"), b.addClass("entryObjectRotateModeWorkspace"), b.addClass("entryObjectRotateModeBWorkspace"), b.object = this, this.rotateModeBView_ = b, h.appendChild(b), b.bindOnClick(function(b) {
        Entry.engine.isState("run") || this.object.setRotateMethod("vertical");
      }), b = Entry.createElement("div"), b.addClass("entryObjectRotateModeWorkspace"), b.addClass("entryObjectRotateModeCWorkspace"), b.object = this, this.rotateModeCView_ = b, h.appendChild(b), b.bindOnClick(function(b) {
        Entry.engine.isState("run") || this.object.setRotateMethod("none");
      }), this.updateThumbnailView(), this.updateCoordinateView(), this.updateRotateMethodView(), this.updateInputViews(), this.view_;
    }
  };
  c.setName = function(b) {
    Entry.assert("string" == typeof b, "object name must be string");
    this.name = b;
    this.nameView_.value = b;
  };
  c.setText = function(b) {
    Entry.assert("string" == typeof b, "object text must be string");
    this.text = b;
  };
  c.setScript = function(b) {
    this.script = b;
  };
  c.getScriptText = function() {
    return JSON.stringify(this.script.toJSON());
  };
  c.initEntity = function(b) {
    var c = {};
    c.x = c.y = 0;
    c.rotation = 0;
    c.direction = 90;
    if ("sprite" == this.objectType) {
      var e = b.sprite.pictures[0].dimension;
      c.regX = e.width / 2;
      c.regY = e.height / 2;
      c.scaleX = c.scaleY = "background" == b.sprite.category.main || "new" == b.sprite.category.main ? Math.max(270 / e.height, 480 / e.width) : "new" == b.sprite.category.main ? 1 : 200 / (e.width + e.height);
      c.width = e.width;
      c.height = e.height;
    } else {
      if ("textBox" == this.objectType) {
        if (c.regX = 25, c.regY = 12, c.scaleX = c.scaleY = 1.5, c.width = 50, c.height = 24, c.text = b.text, b.options) {
          if (b = b.options, e = "", b.bold && (e += "bold "), b.italic && (e += "italic "), c.underline = b.underline, c.strike = b.strike, c.font = e + "20px " + b.font.family, c.colour = b.colour, c.bgColor = b.background, c.lineBreak = b.lineBreak) {
            c.width = 256, c.height = 0.5625 * c.width, c.regX = c.width / 2, c.regY = c.height / 2;
          }
        } else {
          c.underline = !1, c.strike = !1, c.font = "20px Nanum Gothic", c.colour = "#000000", c.bgColor = "#ffffff";
        }
      }
    }
    return c;
  };
  c.updateThumbnailView = function() {
    var b = this.thumbnailView_, c = this.entity.picture, e = this.objectType;
    "sprite" == e ? c.fileurl ? b.style.backgroundImage = 'url("' + c.fileurl + '")' : (c = c.filename, b.style.backgroundImage = 'url("' + Entry.defaultPath + "/uploads/" + c.substring(0, 2) + "/" + c.substring(2, 4) + "/thumb/" + c + '.png")') : "textBox" == e && (b.style.backgroundImage = "url(" + (Entry.mediaFilePath + "/text_icon.png") + ")");
  };
  c.updateCoordinateView = function(b) {
    if ((this.isSelected() || b) && (b = this.coordinateView_) && b.xInput_ && b.yInput_) {
      var c = b.xInput_.value, e = b.yInput_.value, f = b.sizeInput_.value, g = this.entity, h = g.getX(1), k = g.getY(1), g = g.getSize(1);
      c != h && (b.xInput_.value = h);
      e != k && (b.yInput_.value = k);
      f != g && (b.sizeInput_.value = g);
    }
  };
  c.updateRotationView = function(b) {
    if (this.isSelected() && this.view_ || b) {
      b = this.getRotateMethod();
      var c = this.entity;
      "free" == b ? (this.rotateSpan_.removeClass("entryRemove"), this.rotateInput_.removeClass("entryRemove"), this.rotateInput_.value = c.getRotation(1) + "\u02da") : (this.rotateSpan_.addClass("entryRemove"), this.rotateInput_.addClass("entryRemove"));
      this.directionInput_.value = c.getDirection(1) + "\u02da";
    }
  };
  c.select = function(b) {
    console.log(this);
  };
  c.addPicture = function(b, c) {
    b.objectId = this.id;
    c || 0 === c ? this.pictures.splice(c, 0, b) : this.pictures.push(b);
    Entry.playground.injectPicture(this);
  };
  c.removePicture = function(b) {
    if (2 > this.pictures.length) {
      return !1;
    }
    var c = Entry.playground;
    b = this.getPicture(b);
    var e = this.pictures.indexOf(b);
    this.pictures.splice(e, 1);
    b === this.selectedPicture && c.selectPicture(this.pictures[0]);
    Entry.container.unCachePictures(this.entity, b);
    c.injectPicture(this);
    c.reloadPlayground();
    return !0;
  };
  c.getPicture = function(b) {
    if (!b) {
      return this.selectedPicture;
    }
    b = (b + "").trim();
    for (var c = this.pictures, e = c.length, f = 0; f < e; f++) {
      if (c[f].id == b) {
        return c[f];
      }
    }
    for (f = 0; f < e; f++) {
      if (c[f].name == b) {
        return c[f];
      }
    }
    b = Entry.parseNumber(b);
    return (!1 !== b || "boolean" != typeof b) && e >= b && 0 < b ? c[b - 1] : null;
  };
  c.setPicture = function(b) {
    for (var c in this.pictures) {
      if (b.id === this.pictures[c].id) {
        this.pictures[c] = b;
        return;
      }
    }
    throw Error("No picture found");
  };
  c.getPrevPicture = function(b) {
    for (var c = this.pictures, e = c.length, f = 0; f < e; f++) {
      if (c[f].id == b) {
        return c[0 == f ? e - 1 : f - 1];
      }
    }
  };
  c.getNextPicture = function(b) {
    for (var c = this.pictures, e = c.length, f = 0; f < e; f++) {
      if (c[f].id == b) {
        return c[f == e - 1 ? 0 : f + 1];
      }
    }
  };
  c.selectPicture = function(b) {
    var c = this.getPicture(b);
    if (c) {
      this.selectedPicture = c, this.entity.setImage(c), this.updateThumbnailView();
    } else {
      throw Error("No picture with pictureId : " + b);
    }
  };
  c.addSound = function(b, c) {
    b.id || (b.id = Entry.generateHash());
    Entry.initSound(b, c);
    c || 0 === c ? this.sounds.splice(c, 0, b) : this.sounds.push(b);
    Entry.playground.injectSound(this);
  };
  c.removeSound = function(b) {
    b = this.getSound(b);
    b = this.sounds.indexOf(b);
    this.sounds.splice(b, 1);
    Entry.playground.reloadPlayground();
    Entry.playground.injectSound(this);
  };
  c.getRotateMethod = function() {
    this.rotateMethod || (this.rotateMethod = "free");
    return this.rotateMethod;
  };
  c.setRotateMethod = function(b) {
    b || (b = "free");
    this.rotateMethod = b;
    this.updateRotateMethodView();
    Entry.stage.selectedObject && Entry.stage.selectedObject.entity && (Entry.stage.updateObject(), Entry.stage.updateHandle());
  };
  c.initRotateValue = function(b) {
    this.rotateMethod != b && (b = this.entity, b.rotation = 0.0, b.direction = 90.0, b.flip = !1);
  };
  c.updateRotateMethodView = function() {
    var b = this.rotateMethod;
    this.rotateModeAView_ && (this.rotateModeAView_.removeClass("selected"), this.rotateModeBView_.removeClass("selected"), this.rotateModeCView_.removeClass("selected"), "free" == b ? this.rotateModeAView_.addClass("selected") : "vertical" == b ? this.rotateModeBView_.addClass("selected") : this.rotateModeCView_.addClass("selected"), this.updateRotationView());
  };
  c.toggleInformation = function(b) {
    this.setRotateMethod(this.getRotateMethod());
    void 0 === b && (b = this.isInformationToggle = !this.isInformationToggle);
    b ? this.view_.addClass("informationToggle") : this.view_.removeClass("informationToggle");
  };
  c.addCloneEntity = function(b, c, e) {
    this.clonedEntities.length > Entry.maxCloneLimit || (b = new Entry.EntityObject(this), b.isClone = !0, c = c || this.entity, b.injectModel(c.picture ? c.picture : null, c.toJSON()), b.snapshot_ = c.snapshot_, c.effect && (b.effect = Entry.cloneSimpleObject(c.effect), b.applyFilter()), c.brush && Entry.setCloneBrush(b, c.brush), Entry.engine.raiseEventOnEntity(b, [b, "when_clone_start"]), b.isStarted = !0, this.addCloneVariables(this, b, c ? c.variables : null, c ? c.lists : null), this.clonedEntities.push(b), 
    Entry.stage.loadEntity(b));
  };
  c.initializeSplitter = function(b) {
    b.onmousedown = function(b) {
      Entry.container.disableSort();
      Entry.container.splitterEnable = !0;
    };
    document.addEventListener("mousemove", function(b) {
      Entry.container.splitterEnable && Entry.resizeElement({canvasWidth:b.x || b.clientX});
    });
    document.addEventListener("mouseup", function(b) {
      Entry.container.splitterEnable = !1;
      Entry.container.enableSort();
    });
  };
  c.isSelected = function() {
    return this.isSelected_;
  };
  c.toJSON = function(b) {
    var c = {};
    c.id = b ? Entry.generateHash() : this.id;
    c.name = this.name;
    "textBox" == this.objectType && (c.text = this.text);
    c.script = this.getScriptText();
    c.objectType = this.objectType;
    c.rotateMethod = this.getRotateMethod();
    c.scene = this.scene.id;
    c.sprite = {pictures:Entry.getPicturesJSON(this.pictures, b), sounds:Entry.getSoundsJSON(this.sounds, b)};
    "sprite" == this.objectType && (c.selectedPictureId = c.sprite.pictures[this.pictures.indexOf(this.selectedPicture)].id);
    c.lock = this.lock;
    c.entity = this.entity.toJSON();
    return c;
  };
  c.destroy = function() {
    this.entity && this.entity.destroy();
    this.view_ && Entry.removeElement(this.view_);
  };
  c.getSound = function(b) {
    b = (b + "").trim();
    for (var c = this.sounds, e = c.length, f = 0; f < e; f++) {
      if (c[f].id == b) {
        return c[f];
      }
    }
    for (f = 0; f < e; f++) {
      if (c[f].name == b) {
        return c[f];
      }
    }
    b = Entry.parseNumber(b);
    return (!1 !== b || "boolean" != typeof b) && e >= b && 0 < b ? c[b - 1] : null;
  };
  c.addCloneVariables = function(b, c, e, f) {
    c.variables = [];
    c.lists = [];
    e || (e = Entry.findObjsByKey(Entry.variableContainer.variables_, "object_", b.id));
    f || (f = Entry.findObjsByKey(Entry.variableContainer.lists_, "object_", b.id));
    for (b = 0; b < e.length; b++) {
      c.variables.push(e[b].clone());
    }
    for (b = 0; b < f.length; b++) {
      c.lists.push(f[b].clone());
    }
  };
  c.getLock = function() {
    return this.lock;
  };
  c.setLock = function(b) {
    this.lock = b;
    Entry.stage.updateObject();
    return b;
  };
  c.updateInputViews = function(b) {
    b = b || this.getLock();
    var c = [this.nameView_, this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];
    if (b && 1 != c[0].getAttribute("readonly")) {
      for (b = 0; b < c.length; b++) {
        c[b].removeClass("selectedEditingObject"), c[b].setAttribute("readonly", !1), this.isEditing = !1;
      }
    }
  };
  c.editObjectValues = function(b) {
    var c = this.getLock() ? [this.nameView_] : [this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];
    if (b) {
      var e = this.nameView_;
      $(c).removeClass("selectedNotEditingObject");
      $(e).removeClass("selectedNotEditingObject");
      window.setTimeout(function() {
        $(e).removeAttr("readonly");
        e.addClass("selectedEditingObject");
      });
      for (b = 0; b < c.length; b++) {
        $(c[b]).removeAttr("readonly"), c[b].addClass("selectedEditingObject");
      }
      this.isEditing = !0;
    } else {
      for (b = 0; b < c.length; b++) {
        c[b].blur(!0);
      }
      this.nameView_.blur(!0);
      this.blurAllInput();
      this.isEditing = !1;
    }
  };
  c.blurAllInput = function() {
    document.getElementsByClassName("");
    $(".selectedEditingObject").removeClass("selectedEditingObject");
    var b = [this.nameView_, this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];
    for (var c = 0; c < b.length; c++) {
      var e = b[c];
      e.addClass("selectedNotEditingObject");
      e.setAttribute("readonly", !0);
    }
  };
  c.addStampEntity = function(b) {
    b = new Entry.StampEntity(this, b);
    Entry.stage.loadEntity(b);
    this.clonedEntities.push(b);
    Entry.stage.sortZorder();
  };
  c.getClonedEntities = function() {
    return this.clonedEntities.filter(function(b) {
      return !b.isStamp;
    });
  };
  c.getStampEntities = function() {
    return this.clonedEntities.filter(function(b) {
      return b.isStamp;
    });
  };
  c.clearExecutor = function() {
    this.script.clearExecutors();
    for (var b = this.clonedEntities, c = b.length - 1; 0 <= c; c--) {
      b[c].removeClone(!0);
    }
  };
  c._rightClick = function(b) {
    if (this.isContextMenuEnabled()) {
      var c = this, e = [{text:Lang.Workspace.context_rename, callback:function(b) {
        b.stopPropagation();
        c.setLock(!1);
        c.editObjectValues(!0);
        c.nameView_.select();
      }}, {text:Lang.Workspace.context_duplicate, enable:!Entry.engine.isState("run"), callback:function() {
        Entry.container.addCloneObject(c);
      }}, {text:Lang.Workspace.context_remove, callback:function() {
        Entry.dispatchEvent("removeObject", c);
        Entry.container.removeObject(c);
      }}, {text:Lang.Workspace.copy_file, callback:function() {
        Entry.container.setCopiedObject(c);
      }}, {text:Lang.Blocks.Paste_blocks, enable:!Entry.engine.isState("run") && !!Entry.container.copiedObject, callback:function() {
        Entry.container.copiedObject ? Entry.container.addCloneObject(Entry.container.copiedObject) : Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.object_not_found_for_paste);
      }}];
      b = Entry.Utils.convertMouseEvent(b);
      Entry.ContextMenu.show(e, "workspace-contextmenu", {x:b.clientX, y:b.clientY});
    }
  };
  c.enableContextMenu = function() {
    this._isContextMenuEnabled = !0;
  };
  c.disableContextMenu = function() {
    this._isContextMenuEnabled = !1;
  };
  c.isContextMenuEnabled = function() {
    return this._isContextMenuEnabled && Entry.objectEditable;
  };
  c.toggleEditObject = function() {
    var b = this.isEditing;
    Entry.engine.isState("run") || !1 !== b || (this.editObjectValues(!b), Entry.playground.object !== this && Entry.container.selectObject(this.id), this.nameView_.select());
  };
  c.toggleEditObject = function() {
    var b = this.isEditing;
    Entry.engine.isState("run") || !1 !== b || (this.editObjectValues(!b), Entry.playground.object !== this && Entry.container.selectObject(this.id), this.nameView_.select());
  };
  c.getDom = function(b) {
    if (!b || 0 === b.length) {
      return this.view_;
    }
    if (1 <= b.length) {
      switch(b.shift()) {
        case "editButton":
          return this.editView_;
      }
    }
  };
})(Entry.EntryObject.prototype);
Entry.Painter = function() {
  this.toolbox = {selected:"cursor"};
  this.stroke = {enabled:!1, fillColor:"#000000", lineColor:"#000000", thickness:1, fill:!0, transparent:!1, style:"line", locked:!1};
  this.file = {id:Entry.generateHash(), name:"\uc0c8\uadf8\ub9bc", modified:!1, mode:"new"};
  this.font = {name:"KoPub Batang", size:20, style:"normal"};
  this.selectArea = {};
  this.firstStatement = !1;
};
Entry.Painter.prototype.initialize = function(c) {
  this.generateView(c);
  this.canvas = document.getElementById("entryPainterCanvas");
  this.canvas_ = document.getElementById("entryPainterCanvas_");
  this.stage = new createjs.Stage(this.canvas);
  this.stage.autoClear = !0;
  this.stage.enableDOMEvents(!0);
  this.stage.enableMouseOver(10);
  this.stage.mouseMoveOutside = !0;
  createjs.Touch.enable(this.stage);
  this.objectContainer = new createjs.Container;
  this.objectContainer.name = "container";
  this.stage.addChild(this.objectContainer);
  this.ctx = this.stage.canvas.getContext("2d");
  this.ctx.imageSmoothingEnabled = !1;
  this.ctx.webkitImageSmoothingEnabled = !1;
  this.ctx.mozImageSmoothingEnabled = !1;
  this.ctx.msImageSmoothingEnabled = !1;
  this.ctx.oImageSmoothingEnabled = !1;
  this.ctx_ = this.canvas_.getContext("2d");
  this.initDashedLine();
  this.initPicture();
  this.initCoordinator();
  this.initHandle();
  this.initDraw();
  var b = this;
  Entry.addEventListener("textUpdate", function() {
    var c = b.inputField.value();
    "" === c ? (b.inputField.hide(), delete b.inputField) : (b.inputField.hide(), b.drawText(c), b.selectToolbox("cursor"));
  });
  this.selectToolbox("cursor");
};
Entry.Painter.prototype.initHandle = function() {
  this._handle = new createjs.Container;
  this._handle.rect = new createjs.Shape;
  this._handle.addChild(this._handle.rect);
  var c = new createjs.Container;
  c.name = "move";
  c.width = 90;
  c.height = 90;
  c.x = 90;
  c.y = 90;
  c.rect = new createjs.Shape;
  var b = this;
  c.rect.on("mousedown", function(d) {
    "cursor" === b.toolbox.selected && (b.initCommand(), this.offset = {x:this.parent.x - this.x - d.stageX, y:this.parent.y - this.y - d.stageY}, this.parent.handleMode = "move", c.isSelectCenter = !1);
  });
  c.rect.on("pressmove", function(d) {
    "cursor" !== b.toolbox.selected || c.isSelectCenter || (b.doCommand(), this.parent.x = d.stageX + this.offset.x, this.parent.y = d.stageY + this.offset.y, b.updateImageHandle());
  });
  c.on("mouseup", function(c) {
    b.checkCommand();
  });
  c.rect.cursor = "move";
  c.addChild(c.rect);
  c.notch = new createjs.Shape;
  c.addChild(c.notch);
  c.NEHandle = this.generateCornerHandle();
  c.addChild(c.NEHandle);
  c.NWHandle = this.generateCornerHandle();
  c.addChild(c.NWHandle);
  c.SWHandle = this.generateCornerHandle();
  c.addChild(c.SWHandle);
  c.SEHandle = this.generateCornerHandle();
  c.addChild(c.SEHandle);
  c.EHandle = this.generateXHandle();
  c.addChild(c.EHandle);
  c.WHandle = this.generateXHandle();
  c.addChild(c.WHandle);
  c.NHandle = this.generateYHandle();
  c.addChild(c.NHandle);
  c.SHandle = this.generateYHandle();
  c.addChild(c.SHandle);
  c.RHandle = new createjs.Shape;
  c.RHandle.graphics.ss(2, 2, 0).beginFill("#888").s("#c1c7cd").f("#c1c7cd").dr(-2, -2, 8, 8);
  c.RHandle.on("mousedown", function(c) {
    b.initCommand();
  });
  c.RHandle.on("pressmove", function(c) {
    b.doCommand();
    var d = c.stageX - this.parent.x;
    c = c.stageY - this.parent.y;
    this.parent.rotation = 0 <= d ? Math.atan(c / d) / Math.PI * 180 + 90 : Math.atan(c / d) / Math.PI * 180 + 270;
    b.updateImageHandle();
  });
  c.RHandle.cursor = "crosshair";
  c.addChild(c.RHandle);
  c.on("mouseup", function(c) {
    b.checkCommand();
  });
  c.visible = !1;
  this.handle = c;
  this.stage.addChild(c);
  this.updateImageHandleCursor();
};
Entry.Painter.prototype.generateCornerHandle = function() {
  var c = this, b = new createjs.Shape;
  b.graphics.beginFill("#c1c7cd").ss(2, 2, 0).s("#c1c7cd").dr(-4, -4, 8, 8);
  b.on("mousedown", function(b) {
    c.initCommand();
    this.offset = {x:b.stageX - this.parent.x + this.parent.regX, y:b.stageY - this.parent.y + this.parent.regY};
  });
  b.on("pressmove", function(b) {
    c.doCommand();
    var d = Math.sqrt(Math.abs((b.stageX - this.parent.x + this.parent.regX) / this.offset.x * (b.stageY - this.parent.y + this.parent.regY) / this.offset.y));
    10 < this.parent.width * d && 10 < this.parent.height * d && (this.parent.width *= d, this.parent.height *= d, this.offset = {x:b.stageX - this.parent.x + this.parent.regX, y:b.stageY - this.parent.y + this.parent.regY});
    c.updateImageHandle();
  });
  b.on("mouseup", function(b) {
    c.checkCommand();
  });
  return b;
};
Entry.Painter.prototype.generateXHandle = function() {
  var c = this, b = new createjs.Shape;
  b.graphics.beginFill("#c1c7cd").ss(2, 2, 0).s("#c1c7cd").dr(-4, -4, 8, 8);
  b.on("mousedown", function(b) {
    c.initCommand();
    this.offset = {x:b.stageX - this.parent.x + this.parent.regX};
  });
  b.on("pressmove", function(b) {
    c.doCommand();
    var d = Math.abs((b.stageX - this.parent.x + this.parent.regX) / this.offset.x);
    10 < this.parent.width * d && (this.parent.width *= d, this.offset = {x:b.stageX - this.parent.x + this.parent.regX});
    c.updateImageHandle();
  });
  b.on("mouseup", function(b) {
    c.checkCommand();
  });
  return b;
};
Entry.Painter.prototype.generateYHandle = function() {
  var c = this, b = new createjs.Shape;
  b.graphics.beginFill("#c1c7cd").ss(2, 2, 0).s("#c1c7cd").dr(-4, -4, 8, 8);
  b.on("mousedown", function(b) {
    c.initCommand();
    this.offset = {y:b.stageY - this.parent.y + this.parent.regY};
  });
  b.on("pressmove", function(b) {
    c.doCommand();
    var d = Math.abs((b.stageY - this.parent.y + this.parent.regY) / this.offset.y);
    10 < this.parent.height * d && (this.parent.height *= d, this.offset = {y:b.stageY - this.parent.y + this.parent.regY});
    c.updateImageHandle();
  });
  b.on("mouseup", function(b) {
    c.checkCommand();
  });
  return b;
};
Entry.Painter.prototype.updateImageHandle = function() {
  if (this.handle.visible) {
    var c = this.handle, b = c.direction, d = c.width, e = c.height, f = c.regX, g = c.regY;
    c.rect.graphics.clear().f("rgba(0,0,1,0.01)").ss(2, 2, 0).s("#c1c7cd").lt(-d / 2, -e / 2).lt(0, -e / 2).lt(0, -e / 2).lt(+d / 2, -e / 2).lt(+d / 2, +e / 2).lt(-d / 2, +e / 2).cp();
    c.notch.graphics.clear().f("rgba(0,0,1,0.01)").ss(2, 2, 0).s("#c1c7cd").lt(0, -e / 2).lt(0, -e / 2 - 20).cp();
    c.NEHandle.x = +c.width / 2;
    c.NEHandle.y = -c.height / 2;
    c.NWHandle.x = -c.width / 2;
    c.NWHandle.y = -c.height / 2;
    c.SWHandle.x = -c.width / 2;
    c.SWHandle.y = +c.height / 2;
    c.SEHandle.x = +c.width / 2;
    c.SEHandle.y = +c.height / 2;
    c.EHandle.x = +c.width / 2;
    c.EHandle.y = 0;
    c.WHandle.x = -c.width / 2;
    c.WHandle.y = 0;
    c.NHandle.x = 0;
    c.NHandle.y = -c.height / 2;
    c.SHandle.x = 0;
    c.SHandle.y = +c.height / 2;
    c.RHandle.x = -2;
    c.RHandle.y = -c.height / 2 - 20 - 2;
    this.handle.visible && (d = this.selectedObject, this.selectedObject.text ? (d.width = this.selectedObject.width, d.height = this.selectedObject.height) : (d.width = d.image.width, d.height = d.image.height), d.scaleX = c.width / d.width, d.scaleY = c.height / d.height, d.x = c.x, d.y = c.y, d.regX = d.width / 2 + f / d.scaleX, d.regY = d.height / 2 + g / d.scaleY, d.rotation = c.rotation, d.direction = b, this.selectArea.x1 = c.x - c.width / 2, this.selectArea.y1 = c.y - c.height / 2, this.selectArea.x2 = 
    c.width, this.selectArea.y2 = c.height, this.objectWidthInput.value = Math.abs(d.width * d.scaleX).toFixed(0), this.objectHeightInput.value = Math.abs(d.height * d.scaleY).toFixed(0), this.objectRotateInput.value = (1 * d.rotation).toFixed(0));
    this.updateImageHandleCursor();
    this.stage.update();
  }
};
Entry.Painter.prototype.updateImageHandleCursor = function() {
  var c = this.handle;
  c.rect.cursor = "move";
  c.RHandle.cursor = "crosshair";
  for (var b = ["nwse-resize", "ns-resize", "nesw-resize", "ew-resize"], d = Math.floor((c.rotation + 22.5) % 180 / 45), e = 0; e < d; e++) {
    b.push(b.shift());
  }
  c.NHandle.cursor = b[1];
  c.NEHandle.cursor = b[2];
  c.EHandle.cursor = b[3];
  c.SEHandle.cursor = b[0];
  c.SHandle.cursor = b[1];
  c.SWHandle.cursor = b[2];
  c.WHandle.cursor = b[3];
  c.NWHandle.cursor = b[0];
};
Entry.Painter.prototype.clearCanvas = function(c) {
  this.clearHandle();
  c || this.initCommand();
  this.objectContainer.removeAllChildren();
  this.stage.update();
  this.colorLayerData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  c = 0;
  for (var b = this.colorLayerData.data.length; c < b; c++) {
    this.colorLayerData.data[c] = 255, this.colorLayerData.data[c + 1] = 255, this.colorLayerData.data[c + 2] = 255, this.colorLayerData.data[c + 3] = 255;
  }
  this.reloadContext();
};
Entry.Painter.prototype.newPicture = function() {
  var c = {dimension:{height:1, width:1}, fileurl:Entry.mediaFilePath + "_1x1.png", name:Lang.Workspace.new_picture};
  c.id = Entry.generateHash();
  Entry.playground.addPicture(c, !0);
};
Entry.Painter.prototype.initPicture = function() {
  var c = this;
  Entry.addEventListener("pictureSelected", function(b) {
    c.selectToolbox("cursor");
    if (c.file.id !== b.id) {
      c.file.modified && entrylms.confirm(Lang.Menus.save_modified_shape).then(function(b) {
        !0 === b && (c.file_ = JSON.parse(JSON.stringify(c.file)), c.file_save(!0));
      });
      c.file.modified = !1;
      c.clearCanvas(!0);
      var d = new Image;
      d.id = b.id ? b.id : Entry.generateHash();
      c.file.id = d.id;
      c.file.name = b.name;
      c.file.mode = "edit";
      d.src = b.fileurl ? b.fileurl : Entry.defaultPath + "/uploads/" + b.filename.substring(0, 2) + "/" + b.filename.substring(2, 4) + "/image/" + b.filename + ".png";
      d.onload = function(b) {
        c.addImage(b.target);
      };
    }
  });
  Entry.addEventListener("pictureImport", function(b) {
    c.addPicture(b);
  });
  Entry.addEventListener("pictureNameChanged", function(b) {
    c.file.name = b.name;
  });
  Entry.addEventListener("pictureClear", function(b) {
    c.file.modified = !1;
    c.file.id = "";
    c.file.name = "";
    c.clearCanvas();
  });
};
Entry.Painter.prototype.initDraw = function() {
  var c = this;
  this.stage.on("stagemousedown", function(b) {
    c.stagemousedown(b);
  });
  this.stage.on("stagemouseup", function(b) {
    c.stagemouseup(b);
  });
  this.stage.on("stagemousemove", function(b) {
    c.stagemousemove(b);
  });
};
Entry.Painter.prototype.selectObject = function(c, b) {
  this.selectedObject = c;
  this.handle.visible = c.visible;
  b ? (this.handle.width = this.copy.width, this.handle.height = this.copy.height, this.handle.x = this.selectArea.x1 + this.copy.width / 2, this.handle.y = this.selectArea.y1 + this.copy.height / 2) : (this.handle.width = c.scaleX * c.image.width, this.handle.height = c.scaleY * c.image.height, this.handle.x = c.x, this.handle.y = c.y, this.handle.regX = +(c.regX - c.image.width / 2) * c.scaleX, this.handle.regY = +(c.regY - c.image.height / 2) * c.scaleY);
  this.handle.rotation = c.rotation;
  this.handle.direction = 0;
  this.updateImageHandle();
};
Entry.Painter.prototype.selectTextObject = function(c) {
  this.selectedObject = c;
  var b = c.getTransformedBounds();
  this.handle.visible = c.visible;
  c.width || (this.selectedObject.width = b.width);
  c.height || (this.selectedObject.height = b.height);
  this.handle.width = c.scaleX * this.selectedObject.width;
  this.handle.height = c.scaleY * this.selectedObject.height;
  this.handle.x = c.x;
  this.handle.y = c.y;
  c.regX || (c.regX = c.width / 2);
  c.regY || (c.regY = c.height / 2);
  this.handle.regX = (c.regX - this.selectedObject.width / 2) * c.scaleX;
  this.handle.regY = (c.regY - this.selectedObject.height / 2) * c.scaleY;
  this.handle.rotation = c.rotation;
  this.handle.direction = 0;
  this.updateImageHandle();
};
Entry.Painter.prototype.updateHandle = function() {
  -1 < this.stage.getChildIndex(this._handle) && this.stage.removeChild(this._handle);
  -1 === this.stage.getChildIndex(this.handle) && this.stage.addChild(this.handle);
  var c = new createjs.Shape;
  c.graphics.clear().beginFill("#000").rect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2);
  this.handle.rect.hitArea = c;
  this.handle.rect.graphics.clear().setStrokeStyle(1, "round").beginStroke("#000000").drawDashedRect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2, 4);
  this.stage.update();
};
Entry.Painter.prototype.updateHandle_ = function() {
  this.stage.getChildIndex(-1 < this._handle) && this.stage.addChild(this._handle);
  this._handle.rect.graphics.clear().setStrokeStyle(1, "round").beginStroke("#cccccc").drawDashedRect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2, 2);
  this.stage.update();
};
Entry.Painter.prototype.matchTolerance = function(c, b, d, e, f) {
  var g = this.colorLayerData.data[c], h = this.colorLayerData.data[c + 1];
  c = this.colorLayerData.data[c + 2];
  return g >= b - f / 100 * b && g <= b + f / 100 * b && h >= d - f / 100 * d && h <= d + f / 100 * d && c >= e - f / 100 * e && c <= e + f / 100 * e;
};
Entry.Painter.prototype.matchColorOnly = function(c, b, d, e) {
  return b === this.colorLayerData.data[c] && d === this.colorLayerData.data[c + 1] && e === this.colorLayerData.data[c + 2] ? !0 : !1;
};
Entry.Painter.prototype.matchColor = function(c, b, d, e, f) {
  return b === this.colorLayerData.data[c] && d === this.colorLayerData.data[c + 1] && e === this.colorLayerData.data[c + 2] && f === this.colorLayerData.data[c + 3] ? !0 : !1;
};
Entry.Painter.prototype.colorPixel = function(c, b, d, e, f) {
  f || (f = 255);
  this.stroke.transparent && (f = e = d = b = 0);
  this.colorLayerData.data[c] = b;
  this.colorLayerData.data[c + 1] = d;
  this.colorLayerData.data[c + 2] = e;
  this.colorLayerData.data[c + 3] = f;
};
Entry.Painter.prototype.pickStrokeColor = function(c) {
  c = 4 * (Math.round(c.stageY) * this.canvas.width + Math.round(c.stageX));
  this.stroke.lineColor = Entry.rgb2hex(this.colorLayerData.data[c], this.colorLayerData.data[c + 1], this.colorLayerData.data[c + 2]);
  document.getElementById("entryPainterAttrCircle").style.backgroundColor = this.stroke.lineColor;
  document.getElementById("entryPainterAttrCircleInput").value = this.stroke.lineColor;
};
Entry.Painter.prototype.drawText = function(c) {
  var b = document.getElementById("entryPainterAttrFontStyle").value, d = document.getElementById("entryPainterAttrFontName").value, e = document.getElementById("entryPainterAttrFontSize").value;
  c = new createjs.Text(c, b + " " + e + 'px "' + d + '"', this.stroke.lineColor);
  c.textBaseline = "top";
  c.x = this.oldPt.x;
  c.y = this.oldPt.y;
  this.objectContainer.addChild(c);
  this.selectTextObject(c);
  this.file.modified = !0;
};
Entry.Painter.prototype.addImage = function(c) {
  var b = new createjs.Bitmap(c);
  this.objectContainer.addChild(b);
  b.x = this.stage.canvas.width / 2;
  b.y = this.stage.canvas.height / 2;
  b.regX = b.image.width / 2 | 0;
  b.regY = b.image.height / 2 | 0;
  if (540 < b.image.height) {
    var d = 540 / b.image.height;
    b.scaleX = d;
    b.scaleY = d;
  }
  b.name = c.id;
  b.id = c.id;
  this.selectObject(b);
  this.stage.update();
};
Entry.Painter.prototype.createBrush = function() {
  this.initCommand();
  this.brush = new createjs.Shape;
  this.objectContainer.addChild(this.brush);
  this.stage.update();
};
Entry.Painter.prototype.createEraser = function() {
  this.initCommand();
  this.eraser = new createjs.Shape;
  this.objectContainer.addChild(this.eraser);
  this.stage.update();
};
Entry.Painter.prototype.clearHandle = function() {
  this.handle.visible && (this.handle.visible = !1);
  this.coordinator.visible && (this.coordinator.visible = !1);
  this.stage.update();
};
Entry.Painter.prototype.initCommand = function() {
  var c = !1;
  this.handle.visible && (c = !0, this.handle.visible = !1);
  var b = !1;
  this.coordinator.visible && (b = !0, this.coordinator.visible = !1);
  (c || b) && this.stage.update();
  this.isCommandValid = !1;
  this.colorLayerModel = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  Entry.stateManager && this.firstStatement && Entry.stateManager.addCommand("edit sprite", this, this.restorePainter, this.colorLayerModel);
  this.firstStatement = !0;
  c && (this.handle.visible = !0);
  b && (this.coordinator.visible = !0);
  (c || b) && this.stage.update();
};
Entry.Painter.prototype.doCommand = function() {
  this.isCommandValid = !0;
};
Entry.Painter.prototype.checkCommand = function() {
  this.isCommandValid || Entry.dispatchEvent("cancelLastCommand");
};
Entry.Painter.prototype.restorePainter = function(c) {
  this.clearHandle();
  var b = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.putImageData(c, 0, 0);
  c = new Image;
  c.src = this.canvas.toDataURL();
  var d = this;
  c.onload = function(b) {
    b = new createjs.Bitmap(b.target);
    d.objectContainer.removeAllChildren();
    d.objectContainer.addChild(b);
  };
  Entry.stateManager && Entry.stateManager.addCommand("restore sprite", this, this.restorePainter, b);
};
Entry.Painter.prototype.platten = function() {
  this.colorLayerData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  this.reloadContext();
};
Entry.Painter.prototype.fill = function() {
  if (!this.stroke.locked) {
    this.stroke.locked = !0;
    this.initCommand();
    this.doCommand();
    this.clearHandle();
    var c = this.canvas.width, b = this.canvas.height;
    this.colorLayerData = this.ctx.getImageData(0, 0, c, b);
    var d = new createjs.Point(this.stage.mouseX, this.stage.mouseY);
    d.x = Math.round(d.x);
    d.y = Math.round(d.y);
    for (var e = 4 * (d.y * c + d.x), f = this.colorLayerData.data[e], g = this.colorLayerData.data[e + 1], h = this.colorLayerData.data[e + 2], k = this.colorLayerData.data[e + 3], l, m, d = [[d.x, d.y]], q = Entry.hex2rgb(this.stroke.lineColor); d.length;) {
      for (var e = d.pop(), n = e[0], r = e[1], e = 4 * (r * c + n); 0 <= r && this.matchColor(e, f, g, h, k);) {
        --r, e -= 4 * c;
      }
      e += 4 * c;
      r += 1;
      for (m = l = !1; r < b - 1 && this.matchColor(e, f, g, h, k);) {
        r += 1, this.colorPixel(e, q.r, q.g, q.b), 0 < n && (this.matchColor(e - 4, f, g, h, k) ? l || (d.push([n - 1, r]), l = !0) : l && (l = !1)), n < c - 1 && (this.matchColor(e + 4, f, g, h, k) ? m || (d.push([n + 1, r]), m = !0) : m && (m = !1)), e += 4 * c;
      }
      if (1080 < d.length) {
        break;
      }
    }
    this.file.modified = !0;
    this.reloadContext();
  }
};
Entry.Painter.prototype.reloadContext = function() {
  delete this.selectedObject;
  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.putImageData(this.colorLayerData, 0, 0);
  var c = new Image;
  c.src = this.canvas.toDataURL();
  var b = this;
  c.onload = function(c) {
    c = new createjs.Bitmap(c.target);
    b.objectContainer.removeAllChildren();
    b.objectContainer.addChild(c);
    b.stroke.locked = !1;
  };
};
Entry.Painter.prototype.move_pen = function() {
  var c = new createjs.Point(this.oldPt.x + this.stage.mouseX >> 1, this.oldPt.y + this.stage.mouseY >> 1);
  this.brush.graphics.setStrokeStyle(this.stroke.thickness, "round").beginStroke(this.stroke.lineColor).moveTo(c.x, c.y).curveTo(this.oldPt.x, this.oldPt.y, this.oldMidPt.x, this.oldMidPt.y);
  this.oldPt.x = this.stage.mouseX;
  this.oldPt.y = this.stage.mouseY;
  this.oldMidPt.x = c.x;
  this.oldMidPt.y = c.y;
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.move_line = function() {
  this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").moveTo(this.oldPt.x, this.oldPt.y).lineTo(this.stage.mouseX, this.stage.mouseY);
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.move_rect = function() {
  var c = this.stage.mouseX - this.oldPt.x, b = this.stage.mouseY - this.oldPt.y;
  event.shiftKey && (b = c);
  this.stroke.fill ? 0 === this.stroke.thickness ? this.brush.graphics.clear().setStrokeStyle(this.stroke.thickness, "round").beginFill(this.stroke.fillColor).drawRect(this.oldPt.x, this.oldPt.y, c, b) : this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").beginFill(this.stroke.fillColor).drawRect(this.oldPt.x, this.oldPt.y, c, b) : 0 === this.stroke.thickness ? this.brush.graphics.clear().setStrokeStyle(this.stroke.thickness, "round").drawRect(this.oldPt.x, 
  this.oldPt.y, c, b) : this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").drawRect(this.oldPt.x, this.oldPt.y, c, b);
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.move_circle = function() {
  var c = this.stage.mouseX - this.oldPt.x, b = this.stage.mouseY - this.oldPt.y;
  event.shiftKey && (b = c);
  this.stroke.fill ? 0 === this.stroke.thickness ? this.brush.graphics.clear().beginStroke(this.stroke.fillColor).setStrokeStyle(this.stroke.thickness, "round").beginFill(this.stroke.fillColor).drawEllipse(this.oldPt.x, this.oldPt.y, c, b) : this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").beginFill(this.stroke.fillColor).drawEllipse(this.oldPt.x, this.oldPt.y, c, b) : this.stroke.fill || (0 === this.stroke.thickness ? this.brush.graphics.clear().drawEllipse(this.oldPt.x, 
  this.oldPt.y, c, b) : this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").drawEllipse(this.oldPt.x, this.oldPt.y, c, b));
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.edit_copy = function() {
  this.selectArea ? (this.clearHandle(), this.selectedObject && delete this.selectedObject, this.copyLayerData = this.ctx.getImageData(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2), this.copy = {}, this.copy.width = this.selectArea.x2, this.copy.height = this.selectArea.y2, this.canvas_.width = this.copy.width, this.canvas_.height = this.copy.height, this.ctx_.clearRect(0, 0, this.canvas_.width, this.canvas_.height), this.ctx_.putImageData(this.copyLayerData, 0, 
  0)) : entrylms.alert("\ubcf5\uc0ac\ud560 \uc601\uc5ed\uc744 \uc120\ud0dd\ud558\uc138\uc694.");
};
Entry.Painter.prototype.edit_cut = function() {
  this.selectArea ? (this.clearHandle(), this.selectedObject && delete this.selectedObject, this.copyLayerData = this.ctx.getImageData(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2), this.copy = {}, this.copy.width = this.selectArea.x2, this.copy.height = this.selectArea.y2, this.canvas_.width = this.copy.width, this.canvas_.height = this.copy.height, this.ctx_.clearRect(0, 0, this.canvas_.width, this.canvas_.height), this.ctx_.putImageData(this.copyLayerData, 0, 
  0), this.ctx.clearRect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2), this.colorLayerData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height), this.reloadContext(), this.file.modified = !0) : entrylms.alert("\uc790\ub97c \uc601\uc5ed\uc744 \uc120\ud0dd\ud558\uc138\uc694.");
};
Entry.Painter.prototype.edit_paste = function() {
  var c = new Image;
  c.src = this.canvas_.toDataURL();
  var b = this;
  c.onload = function(c) {
    c = new createjs.Bitmap(c.target);
    c.x = b.canvas.width / 2;
    c.y = b.canvas.height / 2;
    c.regX = b.copy.width / 2 | 0;
    c.regY = b.copy.height / 2 | 0;
    c.id = Entry.generateHash();
    b.objectContainer.addChild(c);
    b.selectObject(c, !0);
  };
  this.file.modified = !0;
};
Entry.Painter.prototype.edit_select = function() {
  this.clearHandle();
  this.selectedObject && delete this.selectedObject;
  this.copyLayerData = this.ctx.getImageData(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2);
  this.copy = {};
  this.copy.width = this.selectArea.x2;
  this.copy.height = this.selectArea.y2;
  this.canvas_.width = this.copy.width;
  this.canvas_.height = this.copy.height;
  this.ctx_.clearRect(0, 0, this.canvas_.width, this.canvas_.height);
  this.ctx_.putImageData(this.copyLayerData, 0, 0);
  this.ctx.clearRect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2);
  this.colorLayerData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.putImageData(this.colorLayerData, 0, 0);
  var c = new Image;
  c.src = this.canvas.toDataURL();
  var b = this;
  c.onload = function(c) {
    c = new createjs.Bitmap(c.target);
    b.objectContainer.removeAllChildren();
    b.objectContainer.addChild(c);
    c = new Image;
    c.src = b.canvas_.toDataURL();
    c.onload = function(c) {
      c = new createjs.Bitmap(c.target);
      c.x = b.selectArea.x1 + b.copy.width / 2;
      c.y = b.selectArea.y1 + b.copy.height / 2;
      c.regX = b.copy.width / 2 | 0;
      c.regY = b.copy.height / 2 | 0;
      c.id = Entry.generateHash();
      c.name = c.id;
      b.objectContainer.addChild(c);
      b.selectObject(c, !0);
    };
  };
};
Entry.Painter.prototype.move_erase = function(c) {
  c = new createjs.Point(this.oldPt.x + this.stage.mouseX >> 1, this.oldPt.y + this.stage.mouseY >> 1);
  this.eraser.graphics.setStrokeStyle(this.stroke.thickness, "round").beginStroke("#ffffff").moveTo(c.x, c.y).curveTo(this.oldPt.x, this.oldPt.y, this.oldMidPt.x, this.oldMidPt.y);
  this.oldPt.x = this.stage.mouseX;
  this.oldPt.y = this.stage.mouseY;
  this.oldMidPt.x = c.x;
  this.oldMidPt.y = c.y;
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.settingShapeBlur = function() {
  this.objectWidthInput.blur();
  this.objectHeightInput.blur();
  this.objectRotateInput.blur();
};
Entry.Painter.prototype.stagemousedown = function(c) {
  "picture" == Entry.playground.getViewMode() && (this.settingShapeBlur(), this.oldPt = new createjs.Point(c.stageX, c.stageY), this.oldMidPt = this.oldPt.clone(), "select" === this.toolbox.selected ? this.stage.addChild(this._handle) : "spoid" === this.toolbox.selected ? this.pickStrokeColor(c) : "text" === this.toolbox.selected ? (this.showInputField(c), this.stage.update()) : "erase" === this.toolbox.selected ? (this.createEraser(), this.stroke.enabled = !0) : "fill" === this.toolbox.selected ? 
  this.fill() : "cursor" !== this.toolbox.selected && (this.createBrush(), this.stroke.enabled = !0));
};
Entry.Painter.prototype.stagemousemove = function(c) {
  "picture" == Entry.playground.getViewMode() && ("select" === this.toolbox.selected && -1 < this.stage.getChildIndex(this._handle) ? (this.selectArea.x1 = this.oldPt.x, this.selectArea.y1 = this.oldPt.y, this.selectArea.x2 = c.stageX - this.oldPt.x, this.selectArea.y2 = c.stageY - this.oldPt.y, this.updateHandle_()) : this.stroke.enabled && (this.doCommand(), "pen" === this.toolbox.selected ? this.move_pen(c) : "line" === this.toolbox.selected ? this.move_line(c) : "rect" === this.toolbox.selected ? 
  this.move_rect(c) : "circle" === this.toolbox.selected ? this.move_circle(c) : "erase" === this.toolbox.selected && this.move_erase(c)), this.painterTopStageXY.innerHTML = "x:" + c.stageX.toFixed(1) + ", y:" + c.stageY.toFixed(1));
};
Entry.Painter.prototype.stagemouseup = function(c) {
  "picture" == Entry.playground.getViewMode() && ("select" === this.toolbox.selected ? (this.selectArea.x1 = this.oldPt.x, this.selectArea.y1 = this.oldPt.y, this.selectArea.x2 = c.stageX - this.oldPt.x, this.selectArea.y2 = c.stageY - this.oldPt.y, this.stage.removeChild(this._handle), this.stage.update(), 0 < this.selectArea.x2 && 0 < this.selectArea.y2 && this.edit_select(), this.selectToolbox("cursor")) : "cursor" !== this.toolbox.selected && this.stroke.enabled && (-1 < this.objectContainer.getChildIndex(this.eraser) && 
  this.eraser.graphics.endStroke(), -1 < this.objectContainer.getChildIndex(this.brush) && this.brush.graphics.endStroke(), this.clearHandle(), this.platten(), this.stroke.enabled = !1, this.checkCommand()));
};
Entry.Painter.prototype.file_save = function(c) {
  this.clearHandle();
  this.transparent();
  this.trim();
  var b = this.canvas_.toDataURL();
  Entry.dispatchEvent("saveCanvasImage", {file:c ? this.file_ : this.file, image:b});
  this.file.modified = !1;
};
Entry.Painter.prototype.transparent = function() {
  var c = this.canvas.width, b = this.canvas.height;
  this.colorLayerData = this.ctx.getImageData(0, 0, c, b);
  var d = c * (b - 1) * 4, e = 4 * (c - 1), f = 4 * (c * b - 1);
  this.matchColorOnly(0, 255, 255, 255) ? this.fillTransparent(1, 1) : this.matchColorOnly(d, 255, 255, 255) ? this.fillTransparent(1, b) : this.matchColorOnly(e, 255, 255, 255) ? this.fillTransparent(c, 1) : this.matchColorOnly(f, 255, 255, 255) && this.fillTransparent(c, b);
};
Entry.Painter.prototype.fillTransparent = function(c, b) {
  this.stage.mouseX = c;
  this.stage.mouseY = b;
  this.stroke.transparent = !0;
  this.fill();
};
Entry.Painter.prototype.trim = function() {
  var c = this.canvas.width, b = this.ctx.getImageData(0, 0, c, this.canvas.height), d = b.data.length, e, f = null, g = null, h = null, k = null;
  for (e = 0; e < d; e += 4) {
    if (0 !== b.data[e + 3]) {
      h = e / 4 % c;
      var l = ~~(e / 4 / c);
      null === f && (f = l);
      null === g ? g = h : h < g && (g = h);
      null === k ? k = l : k < l && (k = l);
    }
  }
  c = k - f;
  b = h - g;
  0 === c || 0 === b ? (f = this.ctx.getImageData(0, 0, 1, 1), f.data[0] = 255, f.data[1] = 255, f.data[2] = 255, f.data[3] = 255, this.canvas_.width = 1, this.canvas_.height = 1) : (f = this.ctx.getImageData(g, f, b, c), this.canvas_.width = b, this.canvas_.height = c);
  this.ctx_.putImageData(f, 0, 0);
};
Entry.Painter.prototype.showInputField = function(c) {
  this.inputField ? (Entry.dispatchEvent("textUpdate"), delete this.inputField) : (this.initCommand(), this.doCommand(), this.inputField = new CanvasInput({canvas:document.getElementById("entryPainterCanvas"), fontSize:20, fontFamily:this.font.name, fontColor:"#000", width:650, padding:8, borderWidth:1, borderColor:"#000", borderRadius:3, boxShadow:"1px 1px 0px #fff", innerShadow:"0px 0px 5px rgba(0, 0, 0, 0.5)", x:c.stageX, y:c.stageY, onsubmit:function() {
    Entry.dispatchEvent("textUpdate");
  }}), this.inputField.show());
};
Entry.Painter.prototype.addPicture = function(c) {
  this.initCommand();
  var b = new Image;
  b.id = Entry.generateHash();
  b.src = c.fileurl ? c.fileurl : Entry.defaultPath + "/uploads/" + c.filename.substring(0, 2) + "/" + c.filename.substring(2, 4) + "/image/" + c.filename + ".png";
  var d = this;
  b.onload = function(b) {
    d.addImage(b.target);
    d.selectToolbox("cursor");
  };
};
Entry.Painter.prototype.initCoordinator = function() {
  var c = new createjs.Container, b = new createjs.Bitmap(Entry.mediaFilePath + "/workspace_coordinate.png");
  c.addChild(b);
  this.stage.addChild(c);
  c.visible = !1;
  this.coordinator = c;
};
Entry.Painter.prototype.toggleCoordinator = function() {
  this.coordinator.visible = !this.coordinator.visible;
  this.stage.update();
};
Entry.Painter.prototype.initDashedLine = function() {
  createjs.Graphics.prototype.dashedLineTo = function(c, b, d, e, f) {
    this.moveTo(c, b);
    var g = d - c, h = e - b;
    f = Math.floor(Math.sqrt(g * g + h * h) / f);
    for (var g = g / f, h = h / f, k = 0; k++ < f;) {
      c += g, b += h, this[0 === k % 2 ? "moveTo" : "lineTo"](c, b);
    }
    this[0 === k % 2 ? "moveTo" : "lineTo"](d, e);
    return this;
  };
  createjs.Graphics.prototype.drawDashedRect = function(c, b, d, e, f) {
    this.moveTo(c, b);
    d = c + d;
    e = b + e;
    this.dashedLineTo(c, b, d, b, f);
    this.dashedLineTo(d, b, d, e, f);
    this.dashedLineTo(d, e, c, e, f);
    this.dashedLineTo(c, e, c, b, f);
    return this;
  };
  createjs.Graphics.prototype.drawResizableDashedRect = function(c, b, d, e, f, g) {
    this.moveTo(c, b);
    d = c + d;
    e = b + e;
    this.dashedLineTo(c + g, b, d - g, b, f);
    this.dashedLineTo(d, b + g, d, e - g, f);
    this.dashedLineTo(d - g, e, c + g, e, f);
    this.dashedLineTo(c, e - g, c, b + g, f);
    return this;
  };
};
Entry.Painter.prototype.generateView = function(c) {
  var b = this;
  this.view_ = c;
  if (!Entry.type || "workspace" == Entry.type) {
    this.view_.addClass("entryPainterWorkspace");
    var d = Entry.createElement("div", "entryPainterTop");
    d.addClass("entryPlaygroundPainterTop");
    this.view_.appendChild(d);
    var e = Entry.createElement("div", "entryPainterToolbox");
    e.addClass("entryPlaygroundPainterToolbox");
    this.view_.appendChild(e);
    var f = Entry.createElement("div", "entryPainterToolboxTop");
    f.addClass("entryPainterToolboxTop");
    e.appendChild(f);
    var g = Entry.createElement("div", "entryPainterContainer");
    g.addClass("entryPlaygroundPainterContainer");
    this.view_.appendChild(g);
    f = Entry.createElement("canvas", "entryPainterCanvas");
    f.width = 960;
    f.height = 540;
    f.addClass("entryPlaygroundPainterCanvas");
    g.appendChild(f);
    f = Entry.createElement("canvas", "entryPainterCanvas_");
    f.addClass("entryRemove");
    f.width = 960;
    f.height = 540;
    g.appendChild(f);
    var h = Entry.createElement("div", "entryPainterAttr");
    h.addClass("entryPlaygroundPainterAttr");
    this.view_.appendChild(h);
    this.flipObject = Entry.createElement("div", "entryPictureFlip");
    this.flipObject.addClass("entryPlaygroundPainterFlip");
    h.appendChild(this.flipObject);
    f = Entry.createElement("div", "entryPictureFlipX");
    f.title = "\uc88c\uc6b0\ub4a4\uc9d1\uae30";
    f.bindOnClick(function() {
      b.selectedObject && (b.selectedObject.scaleX *= -1, b.selectedObject.text ? b.selectTextObject(b.selectedObject) : b.selectObject(b.selectedObject), b.updateImageHandle(), b.stage.update());
    });
    f.addClass("entryPlaygroundPainterFlipX");
    this.flipObject.appendChild(f);
    f = Entry.createElement("div", "entryPictureFlipY");
    f.title = "\uc0c1\ud558\ub4a4\uc9d1\uae30";
    f.bindOnClick(function() {
      b.selectedObject && (b.selectedObject.scaleY *= -1, b.selectedObject.text ? b.selectTextObject(b.selectedObject) : b.selectObject(b.selectedObject), b.updateImageHandle(), b.stage.update());
    });
    f.addClass("entryPlaygroundPainterFlipY");
    this.flipObject.appendChild(f);
    Entry.addEventListener("windowResized", function(b) {
      var d = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
      b = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
      var e = parseInt(document.getElementById("entryCanvas").style.width), d = d - (e + 240), e = b - 349;
      c.style.width = d + "px";
      g.style.width = d - 54 + "px";
      g.style.height = e + "px";
      h.style.top = e + 30 + "px";
      h.style.height = b - e + "px";
    });
    var k = Entry.createElement("nav", "entryPainterTopMenu");
    k.addClass("entryPlaygroundPainterTopMenu");
    d.appendChild(k);
    f = Entry.createElement("ul");
    k.appendChild(f);
    var l = Entry.createElement("li");
    k.appendChild(l);
    k = Entry.createElement("a", "entryPainterTopMenuFileNew");
    k.bindOnClick(function() {
      b.newPicture();
    });
    k.addClass("entryPlaygroundPainterTopMenuFileNew");
    k.innerHTML = Lang.Workspace.new_picture;
    l.appendChild(k);
    k = Entry.createElement("li", "entryPainterTopMenuFile");
    k.addClass("entryPlaygroundPainterTopMenuFile");
    k.innerHTML = Lang.Workspace.painter_file;
    f.appendChild(k);
    l = Entry.createElement("ul");
    k.appendChild(l);
    k = Entry.createElement("li");
    l.appendChild(k);
    var m = Entry.createElement("a", "entryPainterTopMenuFileSave");
    m.bindOnClick(function() {
      b.file_save(!1);
    });
    m.addClass("entryPainterTopMenuFileSave");
    m.innerHTML = Lang.Workspace.painter_file_save;
    k.appendChild(m);
    k = Entry.createElement("li");
    l.appendChild(k);
    l = Entry.createElement("a", "entryPainterTopMenuFileSaveAs");
    l.bindOnClick(function() {
      b.file.mode = "new";
      b.file_save(!1);
    });
    l.addClass("entryPlaygroundPainterTopMenuFileSaveAs");
    l.innerHTML = Lang.Workspace.painter_file_saveas;
    k.appendChild(l);
    l = Entry.createElement("li", "entryPainterTopMenuEdit");
    l.addClass("entryPlaygroundPainterTopMenuEdit");
    l.innerHTML = Lang.Workspace.painter_edit;
    f.appendChild(l);
    f = Entry.createElement("ul");
    l.appendChild(f);
    l = Entry.createElement("li");
    f.appendChild(l);
    k = Entry.createElement("a", "entryPainterTopMenuEditImportLink");
    k.bindOnClick(function() {
      Entry.dispatchEvent("openPictureImport");
    });
    k.addClass("entryPainterTopMenuEditImport");
    k.innerHTML = Lang.Workspace.get_file;
    l.appendChild(k);
    l = Entry.createElement("li");
    f.appendChild(l);
    k = Entry.createElement("a", "entryPainterTopMenuEditCopy");
    k.bindOnClick(function() {
      b.edit_copy();
    });
    k.addClass("entryPlaygroundPainterTopMenuEditCopy");
    k.innerHTML = Lang.Workspace.copy_file;
    l.appendChild(k);
    l = Entry.createElement("li");
    f.appendChild(l);
    k = Entry.createElement("a", "entryPainterTopMenuEditCut");
    k.bindOnClick(function() {
      b.edit_cut();
    });
    k.addClass("entryPlaygroundPainterTopMenuEditCut");
    k.innerHTML = Lang.Workspace.cut_picture;
    l.appendChild(k);
    l = Entry.createElement("li");
    f.appendChild(l);
    k = Entry.createElement("a", "entryPainterTopMenuEditPaste");
    k.bindOnClick(function() {
      b.edit_paste();
    });
    k.addClass("entryPlaygroundPainterTopMenuEditPaste");
    k.innerHTML = Lang.Workspace.paste_picture;
    l.appendChild(k);
    l = Entry.createElement("li");
    f.appendChild(l);
    f = Entry.createElement("a", "entryPainterTopMenuEditEraseAll");
    f.addClass("entryPlaygroundPainterTopMenuEditEraseAll");
    f.innerHTML = Lang.Workspace.remove_all;
    f.bindOnClick(function() {
      b.clearCanvas();
    });
    l.appendChild(f);
    this.painterTopStageXY = f = Entry.createElement("div", "entryPainterTopStageXY");
    f.addClass("entryPlaygroundPainterTopStageXY");
    d.appendChild(f);
    f = Entry.createElement("ul", "entryPainterTopToolbar");
    f.addClass("entryPlaygroundPainterTopToolbar");
    d.appendChild(f);
    d = Entry.createElement("li", "entryPainterTopToolbarUndo");
    d.bindOnClick(function() {
    });
    d.addClass("entryPlaygroundPainterTopToolbar");
    f.appendChild(d);
    d = Entry.createElement("li", "entryPainterTopToolbarRedo");
    d.bindOnClick(function() {
    });
    d.addClass("entryPlaygroundPainterTopToolbar");
    f.appendChild(d);
    d = Entry.createElement("ul");
    d.addClass("entryPlaygroundPainterToolboxContainer");
    e.appendChild(d);
    this.toolboxCursor = Entry.createElement("li", "entryPainterToolboxCursor");
    this.toolboxCursor.title = "\uc774\ub3d9";
    this.toolboxCursor.bindOnClick(function() {
      b.selectToolbox("cursor");
    });
    this.toolboxCursor.addClass("entryPlaygroundPainterToolboxCursor");
    d.appendChild(this.toolboxCursor);
    this.toolboxSelect = Entry.createElement("li", "entryPainterToolboxSelect");
    this.toolboxSelect.title = "\uc790\ub974\uae30";
    this.toolboxSelect.bindOnClick(function() {
      b.selectToolbox("select");
    });
    this.toolboxSelect.addClass("entryPlaygroundPainterToolboxSelect");
    d.appendChild(this.toolboxSelect);
    this.toolboxPen = Entry.createElement("li", "entryPainterToolboxPen");
    this.toolboxPen.title = "\ud39c";
    this.toolboxPen.bindOnClick(function() {
      b.selectToolbox("pen");
    });
    this.toolboxPen.addClass("entryPlaygroundPainterToolboxPen");
    d.appendChild(this.toolboxPen);
    this.toolboxLine = Entry.createElement("li", "entryPainterToolboxLine");
    this.toolboxLine.title = "\uc9c1\uc120";
    this.toolboxLine.bindOnClick(function() {
      b.selectToolbox("line");
    });
    this.toolboxLine.addClass("entryPlaygroundPainterToolboxLine");
    d.appendChild(this.toolboxLine);
    this.toolboxRect = Entry.createElement("li", "entryPainterToolboxRect");
    this.toolboxRect.title = "\uc0ac\uac01\ud615";
    this.toolboxRect.bindOnClick(function() {
      b.selectToolbox("rect");
    });
    this.toolboxRect.addClass("entryPlaygroundPainterToolboxRect");
    d.appendChild(this.toolboxRect);
    this.toolboxCircle = Entry.createElement("li", "entryPainterToolboxCircle");
    this.toolboxCircle.title = "\uc6d0";
    this.toolboxCircle.bindOnClick(function() {
      b.selectToolbox("circle");
    });
    this.toolboxCircle.addClass("entryPlaygroundPainterToolboxCircle");
    d.appendChild(this.toolboxCircle);
    this.toolboxText = Entry.createElement("li", "entryPainterToolboxText");
    this.toolboxText.title = "\uae00\uc0c1\uc790";
    this.toolboxText.bindOnClick(function() {
      b.selectToolbox("text");
    });
    this.toolboxText.addClass("entryPlaygroundPainterToolboxText");
    d.appendChild(this.toolboxText);
    this.toolboxFill = Entry.createElement("li", "entryPainterToolboxFill");
    this.toolboxFill.bindOnClick(function() {
      b.selectToolbox("fill");
    });
    this.toolboxFill.addClass("entryPlaygroundPainterToolboxFill");
    d.appendChild(this.toolboxFill);
    this.toolboxErase = Entry.createElement("li", "entryPainterToolboxErase");
    this.toolboxErase.title = "\uc9c0\uc6b0\uae30";
    this.toolboxErase.bindOnClick(function() {
      b.selectToolbox("erase");
    });
    this.toolboxErase.addClass("entryPlaygroundPainterToolboxErase");
    d.appendChild(this.toolboxErase);
    e = Entry.createElement("li", "entryPainterToolboxCoordinate");
    e.title = "\uc88c\ud45c";
    e.bindOnClick(function() {
      b.toggleCoordinator();
    });
    e.addClass("entryPlaygroundPainterToolboxCoordinate");
    d.appendChild(e);
    this.attrResizeArea = Entry.createElement("fieldset", "painterAttrResize");
    this.attrResizeArea.addClass("entryPlaygroundPainterAttrResize");
    h.appendChild(this.attrResizeArea);
    e = Entry.createElement("legend");
    e.innerHTML = Lang.Workspace.picture_size;
    this.attrResizeArea.appendChild(e);
    e = Entry.createElement("div", "painterAttrWrapper");
    e.addClass("painterAttrWrapper");
    this.attrResizeArea.appendChild(e);
    d = Entry.createElement("div");
    d.addClass("entryPlaygroundPainterAttrResizeX");
    e.appendChild(d);
    f = Entry.createElement("div");
    f.addClass("entryPlaygroundPainterAttrResizeXTop");
    f.innerHTML = "X";
    d.appendChild(f);
    this.objectWidthInput = Entry.createElement("input", "entryPainterAttrWidth");
    this.objectWidthInput.onblur = function() {
      if (!Entry.Utils.isNumber(this.value)) {
        return entrylms.alert("\uc22b\uc790\ub9cc \uc785\ub825 \uac00\ub2a5\ud569\ub2c8\ub2e4."), !1;
      }
      b.handle.width = this.value;
      b.updateImageHandle();
    };
    this.objectWidthInput.addClass("entryPlaygroundPainterNumberInput");
    d.appendChild(this.objectWidthInput);
    d = Entry.createElement("div");
    d.addClass("entryPlaygroundPainterSizeText");
    d.innerHTML = "x";
    e.appendChild(d);
    d = Entry.createElement("div");
    d.addClass("entryPlaygroundAttrReiszeY");
    e.appendChild(d);
    e = Entry.createElement("div");
    e.addClass("entryPlaygroundPainterAttrResizeYTop");
    e.innerHTML = "Y";
    d.appendChild(e);
    this.objectHeightInput = Entry.createElement("input", "entryPainterAttrHeight");
    this.objectHeightInput.onblur = function() {
      if (!Entry.Utils.isNumber(this.value)) {
        return entrylms.alert("\uc22b\uc790\ub9cc \uc785\ub825 \uac00\ub2a5\ud569\ub2c8\ub2e4."), !1;
      }
      b.handle.height = this.value;
      b.updateImageHandle();
    };
    this.objectHeightInput.addClass("entryPlaygroundPainterNumberInput");
    d.appendChild(this.objectHeightInput);
    this.attrRotateArea = Entry.createElement("div", "painterAttrRotateArea");
    this.attrRotateArea.addClass("painterAttrRotateArea");
    h.appendChild(this.attrRotateArea);
    e = Entry.createElement("div");
    e.addClass("painterAttrRotateName");
    e.innerHTML = Lang.Workspace.picture_rotation;
    this.attrRotateArea.appendChild(e);
    e = Entry.createElement("fieldset", "entryPainterAttrRotate");
    e.addClass("entryPlaygroundPainterAttrRotate");
    this.attrRotateArea.appendChild(e);
    d = Entry.createElement("div");
    d.addClass("painterAttrRotateTop");
    d.innerHTML = "\u03bf";
    e.appendChild(d);
    this.objectRotateInput = Entry.createElement("input", "entryPainterAttrDegree");
    this.objectRotateInput.onblur = function() {
      if (!Entry.Utils.isNumber(this.value)) {
        return entrylms.alert("\uc22b\uc790\ub9cc \uc785\ub825 \uac00\ub2a5\ud569\ub2c8\ub2e4."), !1;
      }
      360 <= this.value ? this.value %= 360 : 0 > this.value && (this.value = 360 + this.value % 360);
      b.handle.rotation = this.value;
      b.updateImageHandle();
    };
    this.objectRotateInput.addClass("entryPlaygroundPainterNumberInput");
    this.objectRotateInput.defaultValue = "0";
    e.appendChild(this.objectRotateInput);
    this.attrColorArea = Entry.createElement("fieldset", "entryPainterAttrColor");
    this.attrColorArea.addClass("entryPlaygroundPainterAttrColor");
    h.appendChild(this.attrColorArea);
    var q = Entry.createElement("div");
    q.addClass("entryPlaygroundPainterAttrColorContainer");
    this.attrColorArea.appendChild(q);
    this.attrCircleArea = Entry.createElement("div");
    this.attrCircleArea.addClass("painterAttrCircleArea");
    h.appendChild(this.attrCircleArea);
    e = Entry.createElement("div", "entryPainterAttrCircle");
    e.addClass("painterAttrCircle");
    this.attrCircleArea.appendChild(e);
    this.attrCircleArea.painterAttrCircle = e;
    e = Entry.createElement("input", "entryPainterAttrCircleInput");
    e.value = "#000000";
    e.addClass("painterAttrCircleInput");
    this.attrCircleArea.appendChild(e);
    this.attrColorSpoid = Entry.createElement("div");
    this.attrColorSpoid.bindOnClick(function() {
      b.selectToolbox("spoid");
    });
    this.attrColorSpoid.addClass("painterAttrColorSpoid");
    h.appendChild(this.attrColorSpoid);
    Entry.getColourCodes().forEach(function(c) {
      var d = Entry.createElement("div");
      d.addClass("entryPlaygroundPainterAttrColorElement");
      "transparent" === c ? d.style.backgroundImage = "url(" + (Entry.mediaFilePath + "/transparent.png") + ")" : d.style.backgroundColor = c;
      d.bindOnClick(function(d) {
        "transparent" === c ? (b.stroke.transparent = !0, b.stroke.lineColor = "#ffffff") : (b.stroke.transparent = !1, t && (document.getElementById("entryPainterShapeBackgroundColor").style.backgroundColor = c, b.stroke.fillColor = c), t || (document.getElementById("entryPainterShapeLineColor").style.backgroundColor = c, b.stroke.lineColor = c));
        document.getElementById("entryPainterAttrCircle").style.backgroundColor = b.stroke.lineColor;
        document.getElementById("entryPainterAttrCircleInput").value = c;
      });
      q.appendChild(d);
    });
    this.attrThickArea = Entry.createElement("div", "painterAttrThickArea");
    this.attrThickArea.addClass("entryPlaygroundentryPlaygroundPainterAttrThickArea");
    h.appendChild(this.attrThickArea);
    e = Entry.createElement("legend");
    e.addClass("painterAttrThickName");
    e.innerHTML = Lang.Workspace.thickness;
    this.attrThickArea.appendChild(e);
    var n = Entry.createElement("fieldset", "entryPainterAttrThick");
    n.addClass("entryPlaygroundPainterAttrThick");
    this.attrThickArea.appendChild(n);
    e = Entry.createElement("div");
    e.addClass("paintAttrThickTop");
    n.appendChild(e);
    f = Entry.createElement("select", "entryPainterAttrThick");
    f.addClass("entryPlaygroundPainterAttrThickInput");
    f.size = "1";
    f.onchange = function(c) {
      b.stroke.thickness = c.target.value;
    };
    for (d = 1; 10 >= d; d++) {
      e = Entry.createElement("option"), e.value = d, e.innerHTML = d, f.appendChild(e);
    }
    n.appendChild(f);
    e = Entry.createElement("div", "entryPainterShapeLineColor");
    e.addClass("painterAttrShapeLineColor");
    d = Entry.createElement("div", "entryPainterShapeInnerBackground");
    d.addClass("painterAttrShapeInnerBackground");
    e.appendChild(d);
    n.appendChild(e);
    this.attrThickArea.painterAttrShapeLineColor = e;
    n.bindOnClick(function() {
      r.style.zIndex = "1";
      this.style.zIndex = "10";
      t = !1;
    });
    this.attrBackgroundArea = Entry.createElement("div", "painterAttrBackgroundArea");
    this.attrBackgroundArea.addClass("entryPlaygroundPainterBackgroundArea");
    h.appendChild(this.attrBackgroundArea);
    e = Entry.createElement("fieldset", "entryPainterAttrbackground");
    e.addClass("entryPlaygroundPainterAttrBackground");
    this.attrBackgroundArea.appendChild(e);
    d = Entry.createElement("div");
    d.addClass("paintAttrBackgroundTop");
    e.appendChild(d);
    var r = Entry.createElement("div", "entryPainterShapeBackgroundColor");
    r.addClass("painterAttrShapeBackgroundColor");
    this.attrBackgroundArea.painterAttrShapeBackgroundColor = r;
    d.appendChild(r);
    var t = !1;
    r.bindOnClick(function(b) {
      n.style.zIndex = "1";
      this.style.zIndex = "10";
      t = !0;
    });
    this.attrFontArea = Entry.createElement("div", "painterAttrFont");
    this.attrFontArea.addClass("entryPlaygroundPainterAttrFont");
    h.appendChild(this.attrFontArea);
    f = Entry.createElement("div");
    f.addClass("entryPlaygroundPainterAttrTop");
    this.attrFontArea.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryPlaygroundPaintAttrTop_");
    f.appendChild(e);
    e = Entry.createElement("legend");
    e.addClass("panterAttrFontTitle");
    e.innerHTML = Lang.Workspace.textStyle;
    l = Entry.createElement("select", "entryPainterAttrFontName");
    l.addClass("entryPlaygroundPainterAttrFontName");
    l.size = "1";
    l.onchange = function(c) {
      b.font.name = c.target.value;
    };
    for (d = 0; d < Entry.fonts.length; d++) {
      k = Entry.fonts[d], e = Entry.createElement("option"), e.value = k.family, e.innerHTML = k.name, l.appendChild(e);
    }
    f.appendChild(l);
    f = Entry.createElement("div");
    f.addClass("painterAttrFontSizeArea");
    this.attrFontArea.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("painterAttrFontSizeTop");
    f.appendChild(e);
    l = Entry.createElement("select", "entryPainterAttrFontSize");
    l.addClass("entryPlaygroundPainterAttrFontSize");
    l.size = "1";
    l.onchange = function(c) {
      b.font.size = c.target.value;
    };
    for (d = 20; 72 >= d; d++) {
      e = Entry.createElement("option"), e.value = d, e.innerHTML = d, l.appendChild(e);
    }
    f.appendChild(l);
    f = Entry.createElement("div");
    f.addClass("entryPlaygroundPainterAttrFontStyleArea");
    this.attrFontArea.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryPlaygroundPainterAttrFontTop");
    f.appendChild(e);
    l = Entry.createElement("select", "entryPainterAttrFontStyle");
    l.addClass("entryPlaygroundPainterAttrFontStyle");
    l.size = "1";
    l.onchange = function(c) {
      b.font.style = c.target.value;
    };
    k = [{label:"\ubcf4\ud1b5", value:"normal"}, {label:"\uad75\uac8c", value:"bold"}, {label:"\uae30\uc6b8\uc784", value:"italic"}];
    for (d = 0; d < k.length; d++) {
      m = k[d], e = Entry.createElement("option"), e.value = m.value, e.innerHTML = m.label, l.appendChild(e);
    }
    f.appendChild(l);
    this.attrLineArea = Entry.createElement("div", "painterAttrLineStyle");
    this.attrLineArea.addClass("entryPlaygroundPainterAttrLineStyle");
    h.appendChild(this.attrLineArea);
    var u = Entry.createElement("div");
    u.addClass("entryPlaygroundPainterAttrLineStyleLine");
    this.attrLineArea.appendChild(u);
    var x = Entry.createElement("div");
    x.addClass("entryPlaygroundPaitnerAttrLineArea");
    this.attrLineArea.appendChild(x);
    e = Entry.createElement("div");
    e.addClass("entryPlaygroundPainterAttrLineStyleLine1");
    x.appendChild(e);
    e.value = "line";
    var v = Entry.createElement("div");
    v.addClass("painterAttrLineStyleBackgroundLine");
    u.bindOnClick(function(b) {
      x.removeClass("entryRemove");
    });
    x.blur = function(b) {
      this.addClass("entryRemove");
    };
    x.onmouseleave = function(b) {
      this.addClass("entryRemove");
    };
    e.bindOnClick(function(b) {
      this.attrLineArea.removeClass(u);
      this.attrLineArea.appendChild(v);
      this.attrLineArea.onchange(b);
      x.blur();
    });
    v.bindOnClick(function(b) {
      x.removeClass("entryRemove");
    });
    this.attrLineArea.onchange = function(c) {
      b.stroke.style = c.target.value;
    };
    x.blur();
  }
};
Entry.Painter.prototype.restoreHandle = function() {
  this.selectedObject && !1 === this.handle.visible && (this.handle.visible = !0, this.stage.update());
};
Entry.Painter.prototype.initDisplay = function() {
  this.stroke.enabled = !1;
  this.toolboxCursor.addClass("entryPlaygroundPainterToolboxCursor");
  this.toolboxCursor.removeClass("entryToolboxCursorClicked");
  this.toolboxSelect.addClass("entryPlaygroundPainterToolboxSelect");
  this.toolboxSelect.removeClass("entryToolboxSelectClicked");
  this.toolboxPen.addClass("entryPlaygroundPainterToolboxPen");
  this.toolboxPen.removeClass("entryToolboxPenClicked");
  this.toolboxLine.addClass("entryPlaygroundPainterToolboxLine");
  this.toolboxLine.removeClass("entryToolboxLineClicked");
  this.toolboxRect.addClass("entryPlaygroundPainterToolboxRect");
  this.toolboxRect.removeClass("entryToolboxRectClicked");
  this.toolboxCircle.addClass("entryPlaygroundPainterToolboxCircle");
  this.toolboxCircle.removeClass("entryToolBoxCircleClicked");
  this.toolboxText.addClass("entryPlaygroundPainterToolboxText");
  this.toolboxText.removeClass("entryToolBoxTextClicked");
  this.toolboxFill.addClass("entryPlaygroundPainterToolboxFill");
  this.toolboxFill.removeClass("entryToolBoxFillClicked");
  this.toolboxErase.addClass("entryPlaygroundPainterToolboxErase");
  this.toolboxErase.removeClass("entryToolBoxEraseClicked");
  this.attrColorSpoid.addClass("painterAttrColorSpoid");
  this.attrColorSpoid.removeClass("painterAttrColorSpoidClicked");
  this.attrResizeArea.addClass("entryRemove");
  this.attrRotateArea.addClass("entryRemove");
  this.attrThickArea.addClass("entryRemove");
  this.attrFontArea.addClass("entryRemove");
  this.attrLineArea.addClass("entryRemove");
  this.attrColorArea.addClass("entryRemove");
  this.attrCircleArea.addClass("entryRemove");
  this.attrColorSpoid.addClass("entryRemove");
  this.attrFontArea.addClass("entryRemove");
  this.attrBackgroundArea.addClass("entryRemove");
  this.flipObject.addClass("entryRemove");
  this.attrThickArea.painterAttrShapeLineColor.addClass("entryRemove");
  this.attrBackgroundArea.painterAttrShapeBackgroundColor.addClass("entryRemove");
  this.attrCircleArea.painterAttrCircle.addClass("entryRemove");
  this.inputField && !this.inputField._isHidden && (this.inputField.hide(), this.stage.update());
};
Entry.Painter.prototype.selectToolbox = function(c) {
  this.toolbox.selected = c;
  "erase" != c && $(".entryPlaygroundPainterContainer").removeClass("dd");
  this.initDisplay();
  "cursor" !== c && this.clearHandle();
  "text" !== c && this.inputField && delete this.inputField;
  switch(c) {
    case "cursor":
      this.restoreHandle();
      this.toolboxCursor.addClass("entryToolboxCursorClicked");
      this.attrResizeArea.removeClass("entryRemove");
      this.attrRotateArea.removeClass("entryRemove");
      this.flipObject.removeClass("entryRemove");
      break;
    case "select":
      this.toolboxSelect.addClass("entryToolboxSelectClicked");
      break;
    case "pen":
      this.toolboxPen.addClass("entryToolboxPenClicked");
      this.attrThickArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrThickArea.painterAttrShapeLineColor.removeClass("entryRemove");
      break;
    case "line":
      this.toolboxLine.addClass("entryToolboxLineClicked");
      this.attrThickArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrThickArea.painterAttrShapeLineColor.removeClass("entryRemove");
      break;
    case "rect":
      this.toolboxRect.addClass("entryToolboxRectClicked");
      this.attrThickArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrBackgroundArea.removeClass("entryRemove");
      this.attrThickArea.painterAttrShapeLineColor.removeClass("entryRemove");
      this.attrBackgroundArea.painterAttrShapeBackgroundColor.removeClass("entryRemove");
      break;
    case "circle":
      this.toolboxCircle.addClass("entryToolBoxCircleClicked");
      this.attrThickArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrThickArea.painterAttrShapeLineColor.removeClass("entryRemove");
      this.attrBackgroundArea.removeClass("entryRemove");
      this.attrBackgroundArea.painterAttrShapeBackgroundColor.removeClass("entryRemove");
      break;
    case "text":
      this.toolboxText.addClass("entryToolBoxTextClicked");
      this.attrFontArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrCircleArea.painterAttrCircle.removeClass("entryRemove");
      break;
    case "fill":
      this.toolboxFill.addClass("entryToolBoxFillClicked");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrCircleArea.painterAttrCircle.removeClass("entryRemove");
      break;
    case "erase":
      $(".entryPlaygroundPainterContainer").addClass("dd");
      this.toolboxErase.addClass("entryToolBoxEraseClicked");
      this.attrThickArea.removeClass("entryRemove");
      break;
    case "spoid":
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("painterAttrColorSpoid");
      this.attrColorSpoid.addClass("painterAttrColorSpoidClicked");
      break;
    case "coordinate":
      this.toggleCoordinator();
  }
};
Entry.Painter2 = function(c) {
  this.view = c;
  this.baseUrl = Entry.painterBaseUrl || "/lib/literallycanvas/lib/img";
  this.file = {id:Entry.generateHash(), name:"\uc0c8\uadf8\ub9bc", modified:!1, mode:"new"};
  Entry.addEventListener("pictureImport", function(b) {
    this.addPicture(b);
  }.bind(this));
  this.clipboard = null;
};
(function(c) {
  c.initialize = function() {
    if (!this.lc) {
      var b = this.baseUrl, c = new Image;
      c.src = b + "/transparent-pattern.png";
      this.lc = LC.init(this.view, {imageURLPrefix:b, zoomMax:3.0, zoomMin:0.5, toolbarPosition:"bottom", imageSize:{width:960, height:540}, backgroundShapes:[LC.createShape("Rectangle", {x:0, y:0, width:960, height:540, strokeWidth:0, strokeColor:"transparent"})]});
      c.onload = function() {
        this.lc.repaintLayer("background");
      }.bind(this);
      b = function(b) {
        b && (b.shape && !b.opts && b.shape.isPass || b.opts && b.opts.isPass) ? Entry.do("processPicture", b, this.lc) : Entry.do("editPicture", b, this.lc);
        this.file.modified = !0;
      }.bind(this);
      this.lc.on("clear", b);
      this.lc.on("remove", b);
      this.lc.on("shapeEdit", b);
      this.lc.on("shapeSave", b);
      this.lc.on("toolChange", function(b) {
        this.updateEditMenu();
      }.bind(this));
      this.lc.on("lc-pointerdrag", this.stagemousemove.bind(this));
      this.lc.on("lc-pointermove", this.stagemousemove.bind(this));
      this.initTopBar();
      this.updateEditMenu();
      Entry.keyPressed && Entry.keyPressed.attach(this, this._keyboardPressControl);
      Entry.keyUpped && Entry.keyUpped.attach(this, this._keyboardUpControl);
    }
  };
  c.show = function() {
    this.lc || this.initialize();
    this.isShow = !0;
  };
  c.hide = function() {
    this.isShow = !1;
  };
  c.changePicture = function(b) {
    this.file && this.file.id === b.id || (this.file.modified ? entrylms.confirm(Lang.Menus.save_modified_shape).then(function(c) {
      !0 === c && this.file_save(!0);
      this.afterModified(b);
    }.bind(this)) : this.afterModified(b));
  };
  c.afterModified = function(b) {
    this.file.modified = !1;
    this.lc.clear(!1);
    this.file.id = b.id || Entry.generateHash();
    this.file.name = b.name;
    this.file.mode = "edit";
    this.file.objectId = b.objectId;
    this.addPicture(b, !0);
    this.lc.undoStack = [];
    Entry.stateManager.removeAllPictureCommand();
  };
  c.addPicture = function(b, c) {
    var d = new Image;
    d.src = b.fileurl ? b.fileurl : Entry.defaultPath + "/uploads/" + b.filename.substring(0, 2) + "/" + b.filename.substring(2, 4) + "/image/" + b.filename + ".png";
    b = b.dimension;
    var f = LC.createShape("Image", {x:480, y:270, width:b.width, height:b.height, image:d});
    this.lc.saveShape(f, !c);
    d.onload = function() {
      this.lc.setTool(this.lc.tools.SelectShape);
      this.lc.tool.setShape(this.lc, f);
    }.bind(this);
  };
  c.copy = function() {
    if ("SelectShape" === this.lc.tool.name && this.lc.tool.selectedShape) {
      var b = this.lc.tool.selectedShape;
      this.clipboard = {className:b.className, data:b.toJSON()};
      this.updateEditMenu();
    }
  };
  c.cut = function() {
    "SelectShape" === this.lc.tool.name && this.lc.tool.selectedShape && (this.copy(), this.lc.removeShape(this.lc.tool.selectedShape), this.lc.tool.setShape(this.lc, null));
  };
  c.paste = function() {
    if (this.clipboard) {
      var b = this.lc.addShape(this.clipboard);
      this.lc.setTool(this.lc.tools.SelectShape);
      this.lc.tool.setShape(this.lc, b);
    }
  };
  c.updateEditMenu = function() {
    var b = "SelectShape" === this.lc.tool.name ? "block" : "none";
    this._cutButton.style.display = b;
    this._copyButton.style.display = b;
    this._pasteButton.style.display = this.clipboard ? "block" : "none";
  };
  c.file_save = function(b) {
    this.lc.trigger("dispose");
    var c = this.lc.getImage().toDataURL();
    this.file_ = JSON.parse(JSON.stringify(this.file));
    Entry.dispatchEvent("saveCanvasImage", {file:this.file_, image:c, task:b});
    this.file.modified = !1;
  };
  c.newPicture = function() {
    var b = {dimension:{height:1, width:1}, fileurl:Entry.mediaFilePath + "_1x1.png", name:Lang.Workspace.new_picture};
    b.id = Entry.generateHash();
    this.file && this.file.objectId && (b.objectId = this.file.objectId);
    Entry.playground.addPicture(b, !0);
  };
  c._keyboardPressControl = function(b) {
    if (this.isShow && !Entry.Utils.isInInput(b)) {
      var c = b.keyCode || b.which, e = b.ctrlKey;
      8 == c || 46 == c ? (this.cut(), b.preventDefault()) : e && (67 == c ? this.copy() : 88 == c && this.cut());
      e && 86 == c && this.paste();
      this.lc.trigger("keyDown", b);
    }
  };
  c._keyboardUpControl = function(b) {
    this.lc.trigger("keyUp", b);
  };
  c.initTopBar = function() {
    var b = this, c = Entry.createElement(document.getElementById("canvas-top-menu"));
    c.addClass("entryPlaygroundPainterTop");
    c.addClass("entryPainterTop");
    var e = Entry.createElement("nav", "entryPainterTopMenu");
    e.addClass("entryPlaygroundPainterTopMenu");
    c.appendChild(e);
    var f = Entry.createElement("ul");
    e.appendChild(f);
    var g = Entry.createElement("li");
    e.appendChild(g);
    e = Entry.createElement("a", "entryPainterTopMenuFileNew");
    e.bindOnClick(function() {
      b.newPicture();
    });
    e.addClass("entryPlaygroundPainterTopMenuFileNew");
    e.innerHTML = Lang.Workspace.new_picture;
    g.appendChild(e);
    e = Entry.createElement("li", "entryPainterTopMenuFile");
    e.addClass("entryPlaygroundPainterTopMenuFile");
    e.innerHTML = Lang.Workspace.painter_file;
    f.appendChild(e);
    g = Entry.createElement("ul");
    e.appendChild(g);
    e = Entry.createElement("li");
    g.appendChild(e);
    var h = Entry.createElement("a", "entryPainterTopMenuFileSave");
    h.bindOnClick(function() {
      b.file_save(!1);
    });
    h.addClass("entryPainterTopMenuFileSave");
    h.innerHTML = Lang.Workspace.painter_file_save;
    e.appendChild(h);
    e = Entry.createElement("li");
    g.appendChild(e);
    g = Entry.createElement("a", "entryPainterTopMenuFileSaveAs");
    g.bindOnClick(function() {
      b.file.mode = "new";
      b.file_save(!1);
    });
    g.addClass("entryPlaygroundPainterTopMenuFileSaveAs");
    g.innerHTML = Lang.Workspace.painter_file_saveas;
    e.appendChild(g);
    g = Entry.createElement("li", "entryPainterTopMenuEdit");
    g.addClass("entryPlaygroundPainterTopMenuEdit");
    g.innerHTML = Lang.Workspace.painter_edit;
    f.appendChild(g);
    f = Entry.createElement("ul");
    g.appendChild(f);
    g = Entry.createElement("li");
    f.appendChild(g);
    e = Entry.createElement("a", "entryPainterTopMenuEditImportLink");
    e.bindOnClick(function() {
      Entry.dispatchEvent("openPictureImport");
    });
    e.addClass("entryPainterTopMenuEditImport");
    e.innerHTML = Lang.Workspace.get_file;
    g.appendChild(e);
    g = Entry.createElement("li");
    f.appendChild(g);
    e = Entry.createElement("a", "entryPainterTopMenuEditCopy");
    e.bindOnClick(function() {
      b.copy();
    });
    e.addClass("entryPlaygroundPainterTopMenuEditCopy");
    e.innerHTML = Lang.Workspace.copy_file;
    g.appendChild(e);
    this._copyButton = g;
    g = Entry.createElement("li");
    f.appendChild(g);
    e = Entry.createElement("a", "entryPainterTopMenuEditCut");
    e.bindOnClick(function() {
      b.cut();
    });
    e.addClass("entryPlaygroundPainterTopMenuEditCut");
    e.innerHTML = Lang.Workspace.cut_picture;
    g.appendChild(e);
    this._cutButton = g;
    g = Entry.createElement("li");
    f.appendChild(g);
    e = Entry.createElement("a", "entryPainterTopMenuEditPaste");
    e.bindOnClick(function() {
      b.paste();
    });
    e.addClass("entryPlaygroundPainterTopMenuEditPaste");
    e.innerHTML = Lang.Workspace.paste_picture;
    g.appendChild(e);
    this._pasteButton = g;
    g = Entry.createElement("li");
    f.appendChild(g);
    f = Entry.createElement("a", "entryPainterTopMenuEditEraseAll");
    f.addClass("entryPlaygroundPainterTopMenuEditEraseAll");
    f.innerHTML = Lang.Workspace.remove_all;
    f.bindOnClick(function() {
      b.lc.clear();
    });
    g.appendChild(f);
    this.painterTopStageXY = f = Entry.createElement("div", "entryPainterTopStageXY");
    f.addClass("entryPlaygroundPainterTopStageXY");
    c.appendChild(f);
    Entry.addEventListener("pictureSelected", this.changePicture.bind(this));
  };
  c.stagemousemove = function(b) {
    this.painterTopStageXY.textContent = "x:" + b.x.toFixed(1) + ", y:" + b.y.toFixed(1);
  };
})(Entry.Painter2.prototype);
Entry.BlockParser = function(c) {
  this.syntax = c;
  this._iterVariableCount = 0;
  this._iterVariableChunk = ["i", "j", "k"];
};
(function(c) {
  c.Code = function(b) {
    if (b instanceof Entry.Thread) {
      return this.Thread(b);
    }
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    var c = "";
    b = b.getThreads();
    for (var e = 0; e < b.length; e++) {
      c += this.Thread(b[e]);
    }
    return c;
  };
  c.Thread = function(b) {
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    var c = "";
    b = b.getBlocks();
    for (var e = 0; e < b.length; e++) {
      c += this.Block(b[e]);
    }
    return c;
  };
  c.Block = function(b) {
    var c = b._schema.syntax;
    return c ? this[c[0]](b) : "";
  };
  c.Program = function(b) {
    return "";
  };
  c.Scope = function(b) {
    b = b._schema.syntax.concat();
    return b.splice(1, b.length - 1).join(".") + "();\n";
  };
  c.BasicFunction = function(b) {
    b = this.Thread(b.statements[0]);
    return "function promise() {\n" + this.indent(b) + "}\n";
  };
  c.BasicIteration = function(b) {
    var c = b.params[0], e = this.publishIterateVariable();
    b = this.Thread(b.statements[0]);
    this.unpublishIterateVariable();
    return "for (var " + e + " = 0; " + e + " < " + c + "; " + e + "++){\n" + this.indent(b) + "}\n";
  };
  c.BasicIf = function(b) {
    var c = this.Thread(b.statements[0]);
    return "if (" + b._schema.syntax.concat()[1] + ") {\n" + this.indent(c) + "}\n";
  };
  c.BasicWhile = function(b) {
    var c = this.Thread(b.statements[0]);
    return "while (" + b._schema.syntax.concat()[1] + ") {\n" + this.indent(c) + "}\n";
  };
  c.indent = function(b) {
    var c = "    ";
    b = b.split("\n");
    b.pop();
    return c += b.join("\n    ") + "\n";
  };
  c.publishIterateVariable = function() {
    var b = "", c = this._iterVariableCount;
    do {
      b = this._iterVariableChunk[c % 3] + b, c = parseInt(c / 3) - 1, 0 === c && (b = this._iterVariableChunk[0] + b);
    } while (0 < c);
    this._iterVariableCount++;
    return b;
  };
  c.unpublishIterateVariable = function() {
    this._iterVariableCount && this._iterVariableCount--;
  };
})(Entry.BlockParser.prototype);
Entry.JSParser = function(c) {
  this.syntax = c;
  this.scopeChain = [];
  this.scope = null;
};
(function(c) {
  c.Program = function(b) {
    var c = [], e = [];
    e.push({type:this.syntax.Program});
    var f = this.initScope(b), e = e.concat(this.BlockStatement(b));
    this.unloadScope();
    c.push(e);
    return c = c.concat(f);
  };
  c.Identifier = function(b, c) {
    return c ? c[b.name] : this.scope[b.name];
  };
  c.ExpressionStatement = function(b) {
    b = b.expression;
    return this[b.type](b);
  };
  c.ForStatement = function(b) {
    var c = b.init;
    var e = b.test;
    var f = b.update, g = b.body;
    if (this.syntax.ForStatement) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    g = this[g.type](g);
    c = c.declarations[0].init.value;
    var h = e.operator;
    e = e.right.value;
    var k = 0;
    "++" != f.operator && (f = c, c = e, e = f);
    switch(h) {
      case "<":
        k = e - c;
        break;
      case "<=":
        k = e + 1 - c;
        break;
      case ">":
        k = c - e;
        break;
      case ">=":
        k = c + 1 - e;
    }
    return this.BasicIteration(b, k, g);
  };
  c.BlockStatement = function(b) {
    var c = [];
    b = b.body;
    for (var e = 0; e < b.length; e++) {
      var f = b[e], g = this[f.type](f);
      if (g) {
        if (void 0 === g.type) {
          throw {message:"\ud574\ub2f9\ud558\ub294 \ube14\ub85d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.", node:f};
        }
        g && c.push(g);
      }
    }
    return c;
  };
  c.EmptyStatement = function(b) {
    throw {message:"empty\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.DebuggerStatement = function(b) {
    throw {message:"debugger\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.WithStatement = function(b) {
    throw {message:"with\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ReturnStaement = function(b) {
    throw {message:"return\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.LabeledStatement = function(b) {
    throw {message:"label\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.BreakStatement = function(b) {
    throw {message:"break\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ContinueStatement = function(b) {
    throw {message:"continue\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.IfStatement = function(b) {
    if (this.syntax.IfStatement) {
      throw {message:"if\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return this.BasicIf(b);
  };
  c.SwitchStatement = function(b) {
    throw {message:"switch\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.SwitchCase = function(b) {
    throw {message:"switch ~ case\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ThrowStatement = function(b) {
    throw {message:"throw\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.TryStatement = function(b) {
    throw {message:"try\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.CatchClause = function(b) {
    throw {message:"catch\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.WhileStatement = function(b) {
    var c = b.body, e = this.syntax.WhileStatement, c = this[c.type](c);
    if (e) {
      throw {message:"while\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return this.BasicWhile(b, c);
  };
  c.DoWhileStatement = function(b) {
    throw {message:"do ~ while\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ForInStatement = function(b) {
    throw {message:"for ~ in\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.FunctionDeclaration = function(b) {
    if (this.syntax.FunctionDeclaration) {
      throw {message:"function\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return null;
  };
  c.VariableDeclaration = function(b) {
    throw {message:"var\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ThisExpression = function(b) {
    return this.scope.this;
  };
  c.ArrayExpression = function(b) {
    throw {message:"array\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ObjectExpression = function(b) {
    throw {message:"object\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.Property = function(b) {
    throw {message:"init, get, set\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.FunctionExpression = function(b) {
    throw {message:"function\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.UnaryExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  c.UnaryOperator = function() {
    return "- + ! ~ typeof void delete".split(" ");
  };
  c.updateOperator = function() {
    return ["++", "--"];
  };
  c.BinaryOperator = function() {
    return "== != === !== < <= > >= << >> >>> + - * / % , ^ & in instanceof".split(" ");
  };
  c.AssignmentExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  c.AssignmentOperator = function() {
    return "= += -= *= /= %= <<= >>= >>>= ,= ^= &=".split(" ");
  };
  c.LogicalExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  c.LogicalOperator = function() {
    return ["||", "&&"];
  };
  c.MemberExpression = function(b) {
    var c = b.object, e = b.property;
    console.log(c.type);
    c = this[c.type](c);
    console.log(c);
    e = this[e.type](e, c);
    if (Object(c) !== c || Object.getPrototypeOf(c) !== Object.prototype) {
      throw {message:c + "\uc740(\ub294) \uc798\ubabb\ub41c \uba64\ubc84 \ubcc0\uc218\uc785\ub2c8\ub2e4.", node:b};
    }
    c = e;
    if (!c) {
      throw {message:e + "\uc774(\uac00) \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.", node:b};
    }
    return c;
  };
  c.ConditionalExpression = function(b) {
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.UpdateExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub801\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  c.CallExpression = function(b) {
    b = b.callee;
    return {type:this[b.type](b)};
  };
  c.NewExpression = function(b) {
    throw {message:"new\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.SequenceExpression = function(b) {
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.initScope = function(b) {
    if (null === this.scope) {
      var c = function() {
      };
      c.prototype = this.syntax.Scope;
    } else {
      c = function() {
      }, c.prototype = this.scope;
    }
    this.scope = new c;
    this.scopeChain.push(this.scope);
    return this.scanDefinition(b);
  };
  c.unloadScope = function() {
    this.scopeChain.pop();
    this.scope = this.scopeChain.length ? this.scopeChain[this.scopeChain.length - 1] : null;
  };
  c.scanDefinition = function(b) {
    b = b.body;
    for (var c = [], e = 0; e < b.length; e++) {
      var f = b[e];
      "FunctionDeclaration" === f.type && (this.scope[f.id.name] = this.scope.promise, this.syntax.BasicFunction && (f = f.body, c.push([{type:this.syntax.BasicFunction, statements:[this[f.type](f)]}])));
    }
    return c;
  };
  c.BasicFunction = function(b, c) {
    return null;
  };
  c.BasicIteration = function(b, c, e) {
    var d = this.syntax.BasicIteration;
    if (!d) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return {params:[c], type:d, statements:[e]};
  };
  c.BasicWhile = function(b, c) {
    var d = b.test.raw;
    if (this.syntax.BasicWhile[d]) {
      return {type:this.syntax.BasicWhile[d], statements:[c]};
    }
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
  };
  c.BasicIf = function(b) {
    var c = b.consequent, c = this[c.type](c);
    try {
      var e = "", f = "===" === b.test.operator ? "==" : b.test.operator;
      if ("Identifier" === b.test.left.type && "Literal" === b.test.right.type) {
        e = b.test.left.name + " " + f + " " + b.test.right.raw;
      } else {
        if ("Literal" === b.test.left.type && "Identifier" === b.test.right.type) {
          e = b.test.right.name + " " + f + " " + b.test.left.raw;
        } else {
          throw Error();
        }
      }
      if (this.syntax.BasicIf[e]) {
        return Array.isArray(c) || "object" !== typeof c || (c = [c]), {type:this.syntax.BasicIf[e], statements:[c]};
      }
      throw Error();
    } catch (g) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
    }
  };
})(Entry.JSParser.prototype);
Entry.ParserOld = {};
Entry.Parser = function(c, b, d) {
  this._mode = c;
  this.syntax = {};
  this.codeMirror = d;
  this._lang = b || "js";
  this.availableCode = [];
  "maze" === c && (this._stageId = Number(Ntry.configManager.getConfig("stageId")), "object" == typeof NtryData && this.setAvailableCode(NtryData.config[this._stageId].availableCode, NtryData.player[this._stageId].code));
  this.mappingSyntax(c);
  switch(this._lang) {
    case "js":
      this._parser = new Entry.JSParser(this.syntax);
      b = this.syntax;
      var e = {}, f;
      for (f in b.Scope) {
        e[f + "();\n"] = b.Scope[f];
      }
      "BasicIf" in b && (e.front = "BasicIf");
      CodeMirror.commands.javascriptComplete = function(b) {
        CodeMirror.showHint(b, null, {globalScope:e});
      };
      d.on("keyup", function(b, c) {
        !b.state.completionActive && 65 <= c.keyCode && 95 >= c.keyCode && CodeMirror.showHint(b, null, {completeSingle:!1, globalScope:e});
      });
      break;
    case "block":
      this._parser = new Entry.BlockParser(this.syntax);
  }
};
(function(c) {
  c.parse = function(b) {
    var c = null;
    switch(this._lang) {
      case "js":
        try {
          var e = acorn.parse(b), c = this._parser.Program(e);
        } catch (f) {
          this.codeMirror && (f instanceof SyntaxError ? (b = {from:{line:f.loc.line - 1, ch:f.loc.column - 2}, to:{line:f.loc.line - 1, ch:f.loc.column + 1}}, f.message = "\ubb38\ubc95 \uc624\ub958\uc785\ub2c8\ub2e4.") : (b = this.getLineNumber(f.node.start, f.node.end), b.message = f.message, b.severity = "error", this.codeMirror.markText(b.from, b.to, {className:"CodeMirror-lint-mark-error", __annotation:b, clearOnEnter:!0})), Entry.toast.alert("Error", f.message)), c = [];
        }
        break;
      case "block":
        b = this._parser.Code(b).match(/(.*{.*[\S|\s]+?}|.+)/g), c = Array.isArray(b) ? b.reduce(function(b, c, d) {
          1 === d && (b += "\n");
          return (-1 < c.indexOf("function") ? c + b : b + c) + "\n";
        }) : "";
    }
    return c;
  };
  c.getLineNumber = function(b, c) {
    var d = this.codeMirror.getValue(), f = {from:{}, to:{}};
    b = d.substring(0, b).split(/\n/gi);
    f.from.line = b.length - 1;
    f.from.ch = b[b.length - 1].length;
    c = d.substring(0, c).split(/\n/gi);
    f.to.line = c.length - 1;
    f.to.ch = c[c.length - 1].length;
    return f;
  };
  c.mappingSyntax = function(b) {
    for (var c = Object.keys(Entry.block), e = 0; e < c.length; e++) {
      var f = c[e], g = Entry.block[f];
      if (g.mode === b && -1 < this.availableCode.indexOf(f) && (g = g.syntax)) {
        for (var h = this.syntax, k = 0; k < g.length; k++) {
          var l = g[k];
          if (k === g.length - 2 && "function" === typeof g[k + 1]) {
            h[l] = g[k + 1];
            break;
          }
          h[l] || (h[l] = {});
          k === g.length - 1 ? h[l] = f : h = h[l];
        }
      }
    }
  };
  c.setAvailableCode = function(b, c) {
    var d = [];
    b.forEach(function(b, c) {
      b.forEach(function(b, c) {
        d.push(b.type);
      });
    });
    c instanceof Entry.Code ? c.getBlockList().forEach(function(b) {
      b.type !== NtryData.START && -1 === d.indexOf(b.type) && d.push(b.type);
    }) : c.forEach(function(b, c) {
      b.forEach(function(b, c) {
        b.type !== NtryData.START && -1 === d.indexOf(b.type) && d.push(b.type);
      });
    });
    this.availableCode = this.availableCode.concat(d);
  };
})(Entry.Parser.prototype);
Entry.Pdf = function(c) {
  this.generateView(c);
};
p = Entry.Pdf.prototype;
p.generateView = function(c) {
  var b = Entry.createElement("div", "entryPdfWorkspace");
  b.addClass("entryRemove");
  this._view = b;
  var d = "/pdfjs/web/viewer.html";
  c && "" != c && (d += "?file=" + c);
  pdfViewIframe = Entry.createElement("iframe", "entryPdfIframeWorkspace");
  pdfViewIframe.setAttribute("id", "pdfViewIframe");
  pdfViewIframe.setAttribute("frameborder", 0);
  pdfViewIframe.setAttribute("src", d);
  b.appendChild(pdfViewIframe);
};
p.getView = function() {
  return this._view;
};
p.resize = function() {
  var c = document.getElementById("entryContainerWorkspaceId"), b = document.getElementById("pdfViewIframe");
  w = c.offsetWidth;
  b.width = w + "px";
  b.height = 9 * w / 16 + "px";
};
Entry.FieldTrashcan = function(c) {
  c && this.setBoard(c);
  this.dragBlockObserver = this.dragBlock = null;
  this.isOver = !1;
  Entry.windowResized && Entry.windowResized.attach(this, this.setPosition);
};
(function(c) {
  c._generateView = function() {
    this.svgGroup = this.board.svg.elem("g");
    this.renderStart();
    this._addControl();
  };
  c.renderStart = function() {
    var b = Entry.mediaFilePath + "delete_";
    this.trashcanTop = this.svgGroup.elem("image", {href:b + "cover.png", width:60, height:20});
    this.svgGroup.elem("image", {href:b + "body.png", y:20, width:60, height:60});
  };
  c._addControl = function() {
    $(this.svgGroup).bind("mousedown", function(b) {
      Entry.Utils.isRightButton(b) && (b.stopPropagation(), $("#entryWorkspaceBoard").css("background", "white"));
    });
  };
  c.updateDragBlock = function() {
    var b = this.board.dragBlock, c = this.dragBlockObserver;
    c && (c.destroy(), this.dragBlockObserver = null);
    b ? this.dragBlockObserver = b.observe(this, "checkBlock", ["x", "y"]) : (this.isOver && this.dragBlock && !this.dragBlock.block.getPrevBlock() && (Entry.do("destroyThread", this.dragBlock.block.thread, "trashcan").isPass(!0, !0), createjs.Sound.play("entryDelete")), this.tAnimation(!1));
    this.dragBlock = b;
  };
  c.checkBlock = function() {
    var b = this.dragBlock;
    if (b && b.block.isDeletable()) {
      var c = this.board.offset(), e = this.getPosition(), f = e.x + c.left, c = e.y + c.top;
      if (b = b.dragInstance) {
        var g = b.offsetX;
        var h = b.offsetY;
      }
      this.tAnimation(g >= f && h >= c);
    }
  };
  c.align = function() {
    var b = this.getPosition();
    this.svgGroup.attr({transform:"translate(" + b.x + "," + b.y + ")"});
  };
  c.setPosition = function() {
    if (this.board) {
      var b = this.board.svgDom;
      this._x = b.width() - 110;
      this._y = b.height() - 110;
      this.align();
    }
  };
  c.getPosition = function() {
    return {x:this._x, y:this._y};
  };
  c.tAnimation = function(b) {
    if (b !== this.isOver) {
      b = void 0 === b ? !0 : b;
      var c = this.trashcanTop;
      var e = b ? {translateX:15, translateY:-25, rotateZ:30} : {translateX:0, translateY:0, rotateZ:0};
      $(c).velocity(e, {duration:50});
      this.isOver = b;
    }
  };
  c.setBoard = function(b) {
    this._dragBlockObserver && this._dragBlockObserver.destroy();
    this.board = b;
    this.svgGroup || this._generateView();
    var c = b.svg, e = c.firstChild;
    e ? c.insertBefore(this.svgGroup, e) : c.appendChild(this.svgGroup);
    this._dragBlockObserver = b.observe(this, "updateDragBlock", ["dragBlock"]);
    this.svgGroup.attr({filter:"url(#entryTrashcanFilter_" + b.suffix + ")"});
    this.setPosition();
  };
})(Entry.FieldTrashcan.prototype);
Entry.Queue = function() {
  this.tail = this.head = null;
};
function Node(c) {
  this.data = c;
  this.next = null;
}
(function(c) {
  c.enqueue = function(b) {
    b = new Node(b);
    null === this.head ? this.head = b : this.tail.next = b;
    this.tail = b;
  };
  c.dequeue = function() {
    if (null !== this.head) {
      var b = this.head.data;
      this.head = this.head.next;
    }
    return b;
  };
  c.clear = function() {
    for (; this.dequeue();) {
    }
  };
  c.toString = function() {
    for (var b = this.head, c = []; b;) {
      c.push(b.data), b = b.next;
    }
    return c.toString();
  };
})(Entry.Queue.prototype);
Entry.TextCodingUtil = {};
(function(c) {
  this._funcParams;
  this._funcParamQ;
  this._currentObject;
  c.initQueue = function() {
    this._funcParamQ = new Entry.Queue;
    this._funcNameQ = new Entry.Queue;
  };
  c.clearQueue = function() {
    this._funcParamQ.clear();
    this._funcNameQ.clear();
  };
  c.indent = function(b) {
    var c = "\t";
    b = b.split("\n");
    b.pop();
    c += b.join("\n\t");
    return c = "\t" + c.trim();
  };
  c.isNumeric = function(b) {
    b = String(Math.abs(b));
    return b.match(/^-?\d+$|^-\d+$/) || b.match(/^-?\d+\.\d+$/) ? !0 : !1;
  };
  c.isBinaryOperator = function(b) {
    return "==" == b || ">" == b || "<" == b || ">=" == b || "<=" == b || "+" == b || "-" == b || "*" == b || "/" == b ? !0 : !1;
  };
  c.logicalExpressionConvert = function(b) {
    switch(b) {
      case "&&":
        b = null;
        break;
      case "||":
        b = null;
    }
    return b;
  };
  c.dropdownDynamicNameToIdConvertor = function(b, c, e) {
    var d = Entry.scene.selectedScene;
    if ("scenes" == c) {
      var g = Entry.scene.getScenes(), h;
      for (h in g) {
        if (e = g[h], b == e.name) {
          return e.id;
        }
      }
    } else {
      if ("spritesWithMouse" == c || "spritesWithSelf" == c || "collision" == c || "clone" == c) {
        var g = Entry.container.getAllObjects(), k;
        for (k in g) {
          if (e = g[k], e.scene.id == d.id && b == e.name) {
            return e.id;
          }
        }
      } else {
        if ("variables" == c) {
          var l = Entry.variableContainer.variables_;
          for (g in l) {
            if (d = l[g], d.name_ == b) {
              if (e) {
                if (e.id == d.object_) {
                  return d.id_;
                }
              } else {
                return d.id_;
              }
            }
          }
        } else {
          if ("lists" == c) {
            for (g in l = Entry.variableContainer.lists_, l) {
              if (d = l[g], d.name_ == b) {
                if (e) {
                  if (e.id == d.object_) {
                    return d.id_;
                  }
                } else {
                  return d.id_;
                }
              }
            }
          } else {
            if ("messages" == c) {
              for (g in e = Entry.variableContainer.messages_, e) {
                if (l = e[g], l.name == b) {
                  return l.id;
                }
              }
            } else {
              if ("pictures" == c) {
                for (l in e = Entry.playground.object, g = e.pictures, g) {
                  if (e = g[l], e.name == b) {
                    return e.id;
                  }
                }
              } else {
                if ("sounds" == c) {
                  for (l in e = Entry.playground.object, g = e.sounds, g) {
                    if (e = g[l], e.name == b) {
                      return e.id;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return b;
  };
  c.dropdownDynamicIdToNameConvertor = function(b, c) {
    switch(c) {
      case "variables":
        var d = Entry.variableContainer.variables_;
        for (h in d) {
          var f = d[h];
          if (f.id_ == b) {
            var g = f.object_ ? "self." + f.name_ : f.name_;
            break;
          }
        }
        break;
      case "lists":
        f = Entry.variableContainer.lists_;
        for (h in f) {
          if (d = f[h], d.id_ == b) {
            g = d.object_ ? "self." + d.name_ : d.name_;
            break;
          }
        }
        break;
      case "messages":
        f = Entry.variableContainer.messages_;
        for (h in f) {
          if (d = f[h], d.id == b) {
            g = d.name;
            break;
          }
        }
        break;
      case "pictures":
        var h = Entry.container.getAllObjects();
        for (d in h) {
          var k = h[d];
          k = k.pictures;
          for (f in k) {
            if (c = k[f], c.id == b) {
              return g = c.name;
            }
          }
        }
        break;
      case "sounds":
        h = Entry.container.getAllObjects();
        for (d in h) {
          for (f in k = h[d], k = k.sounds, k) {
            if (c = k[f], c.id == b) {
              return g = c.name;
            }
          }
        }
        break;
      case "scenes":
        d = Entry.scene.getScenes();
        for (k in d) {
          if (f = d[k], f.id == b) {
            g = f.name;
            break;
          }
        }
        break;
      case "clone":
        "self" == b ? g = b : (h = Entry.container.objects_.filter(function(c) {
          return c.id === b;
        }), g = h[0] ? h[0].name : null);
    }
    return g;
  };
  c.getDynamicIdByNumber = function(b, c) {
    var d = b;
    if (Entry.getMainWS() && Entry.getMainWS().vimBoard) {
      d = Entry.getMainWS().vimBoard;
    } else {
      return d;
    }
    var f = d._currentObject;
    if ("number" == typeof b) {
      if (d = "None", "pictures" == c.menuName) {
        if (0 < b) {
          c = Entry.container.getAllObjects();
          for (var g in c) {
            var h = c[g];
            if (h.id == f.id && (h = h.pictures[b - 1])) {
              d = h.name;
              break;
            }
          }
        }
      } else {
        if ("sounds" == c.menuName && 0 < b) {
          for (g in c = Entry.container.getAllObjects(), c) {
            if (h = c[g], h.id == f.id && (h = h.sounds[b - 1])) {
              d = h.name;
              break;
            }
          }
        }
      }
    } else {
      d = Entry.TextCodingUtil.dropdownDynamicNameToIdConvertor(b, c.menuName);
    }
    return d;
  };
  c.isLocalType = function(b, c) {
    if ("variables" == c) {
      c = Entry.variableContainer.variables_;
      for (var d in c) {
        var f = c[d];
        if (f.id_ == b) {
          if (f.object_) {
            return !0;
          }
          break;
        }
      }
    } else {
      if ("lists" == c) {
        for (d in c = Entry.variableContainer.lists_, c) {
          if (f = c[d], f.id_ == b) {
            if (f.object_) {
              return !0;
            }
            break;
          }
        }
      }
    }
    return !1;
  };
  c.binaryOperatorValueConvertor = function(b) {
    switch(b) {
      case '"EQUAL"':
        b = "==";
        break;
      case '"GREATER"':
        b = ">";
        break;
      case '"LESS"':
        b = "<";
        break;
      case '"GREATER_OR_EQUAL"':
        b = ">=";
        break;
      case '"LESS_OR_EQUAL"':
        b = "<=";
        break;
      case '"\uadf8\ub9ac\uace0"':
        b = "&&";
        break;
      case '"\ub610\ub294"':
        b = "||";
        break;
      case '"PLUS"':
        b = "+";
        break;
      case '"MINUS"':
        b = "-";
        break;
      case '"MULTI"':
        b = "*";
        break;
      case '"DIVIDE"':
        b = "/";
    }
    return b;
  };
  c.variableListFilter = function(b, c, e) {
    if ("None" == e) {
      return e;
    }
    var d = e;
    b = b.data.type;
    "change_variable" == b || "set_variable" == b || "get_variable" == b ? 1 == c && (d = eval(e)) : "length_of_list" == b || "is_included_in_list" == b ? 2 == c && (d = eval(e)) : "value_of_index_from_list" == b ? 2 == c ? d = eval(e) : 4 == c && this.isNumeric(e) && (d = e - 1) : "remove_value_from_list" == b ? 2 == c ? d = eval(e) : 1 == c && this.isNumeric(e) && (d = e - 1) : "insert_value_to_list" == b ? 2 == c ? d = eval(e) : 3 == c && this.isNumeric(e) && (d = e - 1) : "change_value_list_index" == 
    b ? 1 == c ? d = eval(e) : 2 == c && this.isNumeric(e) && (d = e - 1) : "add_value_to_list" == b && 2 == c && (d = eval(e));
    return d;
  };
  c.isGlobalVariableExisted = function(b) {
    var c = Entry.variableContainer.variables_, e;
    for (e in c) {
      var f = c[e];
      if (null === f.object_ && f.name_ == b) {
        return !0;
      }
    }
    return !1;
  };
  c.updateGlobalVariable = function(b, c) {
    var d = Entry.variableContainer.variables_, f;
    for (f in d) {
      var g = d[f];
      if (null === g.object_ && g.name_ == b) {
        d = g.toJSON();
        d.name = b;
        d.value = c;
        g.syncModel_(d);
        Entry.variableContainer.updateList();
        break;
      }
    }
  };
  c.createGlobalVariable = function(b, c) {
    this.isGlobalVariableExisted(b) || (Entry.variableContainer.addVariable({name:b, value:c, variableType:"variable"}), Entry.variableContainer.updateList());
  };
  c.isLocalVariableExisted = function(b, c) {
    var d = Entry.variableContainer.variables_, f;
    for (f in d) {
      var g = d[f];
      if (g.object_ === c.id && g.name_ == b) {
        return !0;
      }
    }
    return !1;
  };
  c.updateLocalVariable = function(b, c, e) {
    var d = Entry.variableContainer.variables_, g;
    for (g in d) {
      var h = d[g];
      if (h.object_ === e.id && h.name_ == b) {
        e = h.toJSON();
        e.name = b;
        e.value = c;
        h.syncModel_(e);
        Entry.variableContainer.updateList();
        break;
      }
    }
  };
  c.createLocalVariable = function(b, c, e) {
    this.isLocalVariableExisted(b, e) || (Entry.variableContainer.addVariable({name:b, value:c, object:e.id, variableType:"variable"}), Entry.variableContainer.updateList());
  };
  c.isLocalVariable = function(b) {
    var c = Entry.playground.object, e = Entry.variableContainer.variables_, f;
    for (f in e) {
      var g = e[f];
      if (g.object_ == c.id && g.id_ == b) {
        return !0;
      }
    }
    return !1;
  };
  c.isGlobalListExisted = function(b) {
    var c = Entry.variableContainer.lists_, e;
    for (e in c) {
      var f = c[e];
      if (null === f.object_ && f.name_ == b) {
        return !0;
      }
    }
    return !1;
  };
  c.updateGlobalList = function(b, c) {
    var d = Entry.variableContainer.lists_, f;
    for (f in d) {
      var g = d[f];
      if (null === g.object_ && g.name_ == b) {
        list = {x:g.x_, y:g.y_, id:g.id_, visible:g.visible_, name:b, isCloud:g.isCloud_, width:g.width_, height:g.height_, array:c};
        g.syncModel_(list);
        g.updateView();
        Entry.variableContainer.updateList();
        break;
      }
    }
  };
  c.createGlobalList = function(b, c) {
    this.isGlobalListExisted(b) || (Entry.variableContainer.addList({name:b, array:c, variableType:"list"}), Entry.variableContainer.updateList());
  };
  c.isLocalListExisted = function(b, c) {
    if (!c) {
      return !1;
    }
    var d = Entry.variableContainer.lists_, f;
    for (f in d) {
      var g = d[f];
      if (g.object_ === c.id && g.name_ == b) {
        return !0;
      }
    }
    return !1;
  };
  c.updateLocalList = function(b, c, e) {
    var d = Entry.variableContainer.lists_, g;
    for (g in d) {
      var h = d[g];
      if (h.object_ === e.id && h.name_ == b) {
        h.syncModel_({x:h.x_, y:h.y_, id:h.id_, visible:h.visible_, name:b, isCloud:h.isCloud_, width:h.width_, height:h.height_, array:c});
        h.updateView();
        Entry.variableContainer.updateList();
        break;
      }
    }
  };
  c.createLocalList = function(b, c, e) {
    this.isLocalListExisted(b, e) || (Entry.variableContainer.addList({name:b, array:c, object:e.id, variableType:"list"}), Entry.variableContainer.updateList());
  };
  c.isLocalList = function(b) {
    var c = Entry.playground.object, e = Entry.variableContainer.lists_, f;
    for (f in e) {
      var g = e[f];
      if (g.object_ == c.id && g.id_ == b) {
        return !0;
      }
    }
    return !1;
  };
  c.createMessage = function(b) {
    Entry.isExist(b, "name", Entry.variableContainer.messages_) || (Entry.variableContainer.addMessage({name:b}), Entry.variableContainer.updateList());
  };
  c.isEventBlock = function(b) {
    b = b.data.type;
    return "when_run_button_click" == b || "when_some_key_pressed" == b || "mouse_clicked" == b || "mouse_click_cancled" == b || "when_object_click" == b || "when_object_click_canceled" == b || "when_message_cast" == b || "when_scene_start" == b || "when_clone_start" == b ? !0 : !1;
  };
  c.isEntryEventBlockWithParam = function(b) {
    b = b.data.type;
    return "when_some_key_pressed" == b || "when_message_cast" == b ? !0 : !1;
  };
  c.isEventBlockByType = function(b) {
    return "when_run_button_click" == b || "when_some_key_pressed" == b || "mouse_clicked" == b || "mouse_click_cancled" == b || "when_object_click" == b || "when_object_click_canceled" == b || "when_message_cast" == b || "when_scene_start" == b || "when_clone_start" == b ? !0 : !1;
  };
  c.makeDefinition = function(b) {
    var c = /(%.)/mi;
    b = Entry.block[b.data.type].syntax.py[0].split(c);
    for (var e = "", f = 0; f < b.length; f++) {
      var g = b[f], e = c.test(g) ? e + "event" : e + g;
    }
    return e;
  };
  c.entryEventFilter = function(b) {
    var c = b.indexOf("("), e = b.indexOf(")"), f = b.substring(0, c);
    b = b.substring(c + 1, e);
    if (b = b.replace(/\"/g, "")) {
      b = isNaN(b) ? b.replace(/ /g, "_space_") : "num" + b, "None" == b && (b = "none");
    }
    return f + "(" + b + "):\n";
  };
  c.entryEventFuncFilter = function(b) {
    var c = !1;
    b = b.split("\n");
    for (var e in b) {
      var f = b[e], g = b[e].trim();
      var h = g.indexOf(":");
      var k = "";
      0 < h && (k = g.substring(0, h + 1));
      k = k.split("(");
      k = k[0];
      "def when_press_key" == k || "def when_get_signal" == k ? (f = f.replace(/def /, ""), h = f.indexOf(":"), g = c = "", 0 < h && (c = f.substring(0, h), g = f.substring(h + 1, f.length)), h = g ? c.concat("\n").concat(g.trim()) : c, b[e] = h, c = !0) : c && (h = b[e], h = h.replace(/\t/g, "    "), h = h.replace(/    /, ""), b[e] = h);
    }
    return b.join("\n");
  };
  c.eventBlockSyntaxFilter = function(b) {
    if ("when_start" == b || "when_press_key" == b || "when_click_mouse_on" == b || "when_click_mouse_off" == b || "when_click_object_on" == b || "when_click_object_off" == b || "when_get_signal" == b || "when_start_scene" == b || "when_make_clone" == b) {
      return "def " + b;
    }
  };
  c.isEntryEventFunc = function(b) {
    return "def when_start" == b || "def when_press_key" == b || "def when_click_mouse_on" == b || "def when_click_mouse_off" == b || "def when_click_object_on" == b || "def when_click_object_off" == b || "def when_get_signal" == b || "def when_start_scene" == b || "def when_make_clone" == b ? !0 : !1;
  };
  c.isEntryEventFuncByFullText = function(b) {
    var c = b.indexOf("(");
    b = b.substring(0, c);
    return "def when_start" == b || "def when_press_key" == b || "def when_click_mouse_on" == b || "def when_click_mouse_off" == b || "def when_click_object_on" == b || "def when_click_object_off" == b || "def when_get_signal" == b || "def when_start_scene" == b || "def when_make_clone" == b || "def entry_event_start" == b || "def entry_event_key" == b || "def entry_event_mouse_down" == b || "def entry_event_mouse_up" == b || "def entry_event_object_down" == b || "def entry_event_object_up" == b || 
    "def entry_event_signal" == b || "def entry_event_scene_start" == b || "def entry_event_clone_create" == b ? !0 : !1;
  };
  c.eventBlockSyntaxFilter = function(b) {
    if ("when_start" == b || "when_press_key" == b || "when_click_mouse_on" == b || "when_click_mouse_off" == b || "when_click_object_on" == b || "when_click_object_off" == b || "when_get_signal" == b || "when_start_scene" == b || "when_make_clone" == b || "entry_event_start" == b || "entry_event_key" == b || "entry_event_mouse_down" == b || "entry_event_mouse_up" == b || "entry_event_object_down" == b || "entry_event_object_up" == b || "entry_event_signal" == b || "entry_event_scene_start" == b || 
    "entry_event_clone_create" == b) {
      return "def " + b;
    }
  };
  c.isEntryEventFuncName = function(b) {
    return "when_start" == b || "when_press_key" == b || "when_click_mouse_on" == b || "when_click_mouse_off" == b || "when_click_object_on" == b || "when_click_object_off" == b || "when_get_signal" == b || "when_start_scene" == b || "when_make_clone" == b || "entry_event_start" == b || "entry_event_key" == b || "entry_event_mouse_down" == b || "entry_event_mouse_up" == b || "entry_event_object_down" == b || "entry_event_object_up" == b || "entry_event_signal" == b || "entry_event_scene_start" == 
    b || "entry_event_clone_create" == b ? !0 : !1;
  };
  c.isEntryEventFuncByType = function(b) {
    return "when_run_button_click" == b || "when_some_key_pressed" == b || "mouse_clicked" == b || "mouse_click_cancled" == b || "when_object_click" == b || "when_object_click_canceled" == b || "when_message_cast" == b || "when_scene_start" == b || "when_clone_start" == b ? !0 : !1;
  };
  c.isEntryEventFuncNameWithParam = function(b) {
    var c = b.lastIndexOf("_");
    return 0 < c && (b = b.substring(0, c), "when_press_key" == b || "when_get_signal" == b) ? !0 : !1;
  };
  c.searchFuncDefParam = function(b) {
    "function_field_label" == b.data.type && this._funcNameQ.enqueue(b.data.params[0]);
    return b && b.data && b.data.params && b.data.params[1] ? ("function_field_string" != b.data.type && "function_field_boolean" != b.data.type || this._funcParamQ.enqueue(b.data.params[0].data.type), this.searchFuncDefParam(b.data.params[1])) : b;
  };
  c.isEntryEventFuncTypeWithParam = function(b) {
    return "when_some_key_pressed" == b.type || "when_message_cast" == b.type ? !0 : !1;
  };
  c.isEntryEventDesignatedParamName = function(b) {
    var c = !1;
    "key" == b ? c = !0 : "signal" == b && (c = !0);
    return c;
  };
  c.gatherFuncDefParam = function(b) {
    if (b && b.data) {
      if (b.data.params[0]) {
        if (b.data.params[0].data) {
          var c = b.data.params[0].data.type;
          "function_field_string" != b.data.type && "function_field_boolean" != b.data.type || this._funcParamQ.enqueue(c);
        } else {
          "function_field_label" == b.data.type && this._funcNameQ.enqueue(b.data.params[0]);
        }
      }
      if (b.data.params[1]) {
        var e = this.searchFuncDefParam(b.data.params[1]);
        e.data.params[0].data && (c = e.data.params[0].data.type, "function_field_string" != e.data.type && "function_field_boolean" != e.data.type || this._funcParamQ.enqueue(c));
        e.data.params[1] && e.data.params[1].data.params[0].data && (c = e.data.params[1].data.params[0].data.type, "function_field_string" != e.data.params[1].data.type && "function_field_boolean" != e.data.params[1].data.type || this._funcParamQ.enqueue(c));
      }
    }
    return e;
  };
  c.getLastParam = function(b) {
    b && b.data && b.data.params[1] && (b = this.getLastParam(b.data.params[1]));
    return b;
  };
  c.isFuncContentsMatch = function(b, c, e, f, g) {
    var d, k = !0;
    if (c.length != b.length) {
      return !1;
    }
    for (var l = 0; l < b.length && k; l++) {
      var k = !1, m = b[l], q = c[l];
      if (m && !q) {
        k = !1;
        break;
      }
      if (!m && q) {
        k = !1;
        break;
      }
      m._schema && m._schema.template && (d = m._schema.template.trim().split(" ")[0] == q.funcName ? !0 : !1);
      if (q.type == m.data.type || d) {
        k = !0;
        g != q.type && (k = !1);
        var n = q.params, r = m.data.params, t = [];
        if (void 0 == n || null == n) {
          n = [];
        }
        if (void 0 == r || null == r) {
          r = [];
        }
        r.map(function(b, c) {
          b && t.push(b);
        });
        r = t;
        t = [];
        n.map(function(b, c) {
          b && t.push(b);
        });
        n = t;
        if (n.length == r.length) {
          for (var k = !0, u = 0; u < n.length && k; u++) {
            if (k = !1, "object" !== typeof n[u]) {
              k = n[u] == r[u] ? !0 : !1;
            } else {
              if (n[u].name) {
                var x = f[n[u].name];
                x ? r[u].data.type == x && (k = !0) : n[u].params && r[u].data.params && n[u].params[0] == r[u].data.params[0] && (k = !0);
              } else {
                "True" == n[u].type || "False" == n[u].type ? r[u].data ? n[u].type == r[u].data.type && (k = !0) : n[u].type == r[u].type && (k = !0) : n[u].type && n[u].params && (k = this.isFuncContentsParamsMatch(r[u], n[u], e, f));
              }
            }
          }
          if (k && q.statements && 0 != q.statements.length) {
            for (var v in q.statements) {
              k = this.isFuncContentsMatch(m.data.statements[v]._data, q.statements[v], e, f);
            }
          }
        } else {
          k = !1;
          break;
        }
      } else {
        k = !1;
        break;
      }
    }
    return k;
  };
  c.isFuncContentsParamsMatch = function(b, c, e, f) {
    var d = c.type, h = b.data.type;
    "text" == d ? d = "literal" : "number" == d ? d = "literal" : c.isParamFromFunc && (d = f[d]);
    "text" == h ? h = "literal" : "number" == h && (h = "literal");
    if (d == h) {
      if (c = c.params, d = b.data.params, c || d) {
        if (c.length == d.length) {
          b = !0;
          for (var k in c) {
            if (!b) {
              break;
            }
            b = !1;
            var h = c[k], l = d[k];
            if (h || l) {
              if ("object" !== typeof h) {
                h == l && (b = !0);
              } else {
                if (h.name) {
                  var m = f[h.name];
                  m ? l.data.type == m && (b = !0) : h.params[0] == l.data.params[0] && (b = !0);
                } else {
                  "True" == h.type || "False" == h.type ? l.data ? h.type == l.data.type && (b = !0) : h.type == l.type && (b = !0) : h.type && h.params && (b = this.isFuncContentsParamsMatch(l, h, e, f));
                }
              }
            } else {
              b = !0;
            }
          }
        } else {
          b = !1;
        }
      } else {
        b = !0;
      }
    } else {
      b = !1;
    }
    return b;
  };
  c.isParamBlock = function(b) {
    b = b.type;
    return "ai_boolean_distance" == b || "ai_distance_value" == b || "ai_boolean_object" == b || "ai_boolean_and" == b ? !0 : !1;
  };
  c.hasBlockInfo = function(b, c) {
    var d = !1, f;
    for (f in c) {
      var g = c[f];
      if (f == b.type) {
        for (var h in g) {
          var k = g[h];
          if (k.start == b.start && k.end == b.end) {
            d = !0;
            break;
          }
        }
      }
    }
    return d;
  };
  c.makeFuncParamBlock = function(b, c, e) {
    var d, g = b.params, h;
    for (h in g) {
      if ((d = g[h]) && "object" == typeof d) {
        if (d.type && d.params && 0 != d.params.length) {
          this.makeFuncParamBlock(d, c, e);
        } else {
          if (d.type && d.params && 0 == d.params.length) {
            var k = d.type;
            if (k = c[k]) {
              d = {}, d.type = k, d.params = [], b.params[h] = d;
            }
          } else {
            d.name ? (k = d.name, (k = c[k]) ? (d = {}, d.type = k, d.params = [], b.params[h] = d) : "get_variable" != d.type && (k = d.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, k, e, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))) : d.object && d.property && (k = d.object.name + "." + d.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, k, 
            e, Entry.TextCodingError.SUBJECT_CONV_VARIABLE));
          }
        }
      }
    }
    if ((b = b.statements) && b[0] && 0 != b[0].length) {
      var g = b[0];
      for (l in g) {
        this.makeFuncParamBlock(g[l], c, e);
      }
    }
    if (b && b[1] && 0 != b[1].length) {
      var l = b[1];
      for (var m in l) {
        this.makeFuncParamBlock(l[m], c, e);
      }
    }
  };
  c.updateBlockInfo = function(b, c) {
    var d = c[b.type];
    if (d && Array.isArray(d) && 0 != d.legnth) {
      for (var f in d) {
        if (c = d[f], c.start == b.start && c.end == b.end) {
          break;
        } else {
          var g = {};
          g.start = b.start;
          g.end = b.end;
          d.push(g);
        }
      }
    } else {
      c[b.type] = [], g = {}, g.start = b.start, g.end = b.end, c[b.type].push(g);
    }
  };
  c.assembleRepeatWhileTrueBlock = function(b, c) {
    if ("repeat_while_true" == b.data.type) {
      b = c.split(" ");
      var d = b.length - 1, f = b[d];
      "until" == f ? (b.splice(1, 0, "not"), b.splice(d + 1, 1), c = b.join(" ")) : "while" == f && (b.splice(d, 1), c = b.join(" "));
    }
    return c;
  };
  c.isJudgementBlock = function(b) {
    return "is_clicked" == b || "is_press_some_key" == b || "reach_something" == b || "boolean_basic_operator" == b || "boolean_and" == b || "boolean_or" == b || "boolean_not" == b ? !0 : !1;
  };
  c.isCalculationBlock = function(b) {
    return "calc_basic" == b || "calc_rand" == b || "coordinate_mouse" == b || "coordinate_object" == b || "get_sound_volume" == b || "quotient_and_mod" == b || "calc_operation" == b || "get_project_timer_value" == b || "get_date" == b || "distance_something" == b || "get_sound_duration" == b || "length_of_string" == b || "combine_something" == b || "char_at" == b || "substring" == b || "index_of_string" == b || "replace_string" == b || "change_string_case" == b ? !0 : !1;
  };
  c.isVariableDeclarationBlock = function(b) {
    return "set_variable" == b ? !0 : !1;
  };
  c.isHWParamBlock = function(b) {
    return "hamster_hand_found" == b || "hamster_value" == b || "arduino_get_port_number" == b || "arduino_get_number_sensor_value" == b || "arduino_get_digital_value" == b || "arduino_convert_scale" == b || "arduino_ext_get_analog_value" == b || "arduino_ext_get_analog_value_map" == b || "arduino_ext_get_ultrasonic_value" == b || "arduino_ext_get_digital" == b || "arduino_ext_tone_list" == b || "arduino_ext_octave_list" == b ? !0 : !1;
  };
  c.isMaterialBlock = function(b) {
    return "get_canvas_input_value" == b || "get_variable" == b || "value_of_index_from_list" == b || "length_of_list" == b || "is_included_in_list" == b ? !0 : !1;
  };
  c.jsAdjustSyntax = function(b, c) {
    if ("ai_boolean_distance" == b.data.type) {
      var d = c.split(" ");
      b = d[0].split("_");
      b[1] = b[1].substring(1, b[1].length - 1);
      b[1] = b[1].toLowerCase();
      b = b.join("_");
      c = d[1];
      c = this.bTojBinaryOperatorConvertor(c);
      d = d[2];
      b = b + " " + c + " " + d;
    } else {
      "ai_boolean_object" == b.data.type ? (d = c.split(" "), b = d[0].split("_"), b[1] = b[1].substring(1, b[1].length - 1), b[1] = b[1].toLowerCase(), b = b.join("_"), c = d[1], d = d[2], b = b + " " + c + " " + d) : "ai_distance_value" == b.data.type ? (d = c.split(" "), b = d[0].split("_"), b[1] = b[1].substring(1, b[1].length - 1), b[1] = b[1].toLowerCase(), b = b.join("_")) : b = c;
    }
    return b;
  };
  c.bTojBinaryOperatorConvertor = function(b) {
    switch(b) {
      case "'BIGGER'":
        var c = ">";
        break;
      case "'BIGGER_EQUAL'":
        c = ">=";
        break;
      case "'EQUAL'":
        c = "==";
        break;
      case "'SMALLER'":
        c = "<";
        break;
      case "'SMALLER_EQUAL'":
        c = "<=";
    }
    return c;
  };
  c.jTobBinaryOperatorConvertor = function(b) {
    switch(b) {
      case ">":
        var c = "BIGGER";
        break;
      case ">=":
        c = "BIGGER_EQUAL";
        break;
      case "==":
        c = "EQUAL";
        break;
      case "<":
        c = "SMALLER";
        break;
      case "<=":
        c = "SMALLER_EQUAL";
    }
    return c;
  };
  c.radarVariableConvertor = function(b) {
    return b.split("_")[1].toUpperCase();
  };
  c.tTobDropdownValueConvertor = function(b) {
    return "stone" == b ? "OBSTACLE" : "wall" == b ? b.toUpperCase() : "item" == b ? b.toUpperCase() : b;
  };
  c.canConvertTextModeForOverlayMode = function(b) {
    var c;
    Entry.getMainWS().oldMode == Entry.Workspace.MODE_OVERLAYBOARD && b == Entry.Workspace.MODE_VIMBOARD && (c = Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_EDITOR]);
    return c;
  };
  c.isNamesIncludeSpace = function() {
    var b = Entry.variableContainer;
    if (b) {
      for (var c = b.variables_ || [], e = 0; e < c.length; e++) {
        if (/ /.test(c[e].name_)) {
          return Lang.TextCoding[Entry.TextCodingError.ALERT_VARIABLE_EMPTY_TEXT];
        }
      }
      c = b.lists_ || [];
      for (e = 0; e < c.length; e++) {
        if (/ /.test(c[e].name_)) {
          return Lang.TextCoding[Entry.TextCodingError.ALERT_LIST_EMPTY_TEXT];
        }
      }
      var c = Lang.TextCoding, f = Entry.TextCodingError, g = c[f.ALERT_FUNCTION_NAME_DISORDER], h = c[f.ALERT_FUNCTION_NAME_FIELD_MULTI], f = c[f.ALERT_FUNCTION_NAME_EMPTY_TEXT], c = b.functions_ || {};
      for (e in c) {
        if (b = (b = c[e].content.getEventMap("funcDef")[0]) && b.params[0]) {
          if ("function_field_label" !== b.type) {
            return g;
          }
          b = b.params;
          if (!b[1]) {
            if (/ /.test(b[0])) {
              return f;
            }
          } else {
            if (this.hasFunctionFieldLabel(b[1])) {
              return h;
            }
          }
        }
      }
      return !1;
    }
  };
  c.isNameIncludeSpace = function(b, c) {
    return / /.test(b) ? "variable" == c ? Lang.TextCoding[Entry.TextCodingError.ALERT_VARIABLE_EMPTY_TEXT_ADD_CHANGE] : "list" == c ? Lang.TextCoding[Entry.TextCodingError.ALERT_LIST_EMPTY_TEXT_ADD_CHANGE] : "function" == c ? Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_EMPTY_TEXT_ADD_CHANGE] : !1 : !1;
  };
  c.isNameIncludeNotValidChar = function() {
    var b = Entry.variableContainer;
    if (b) {
      for (var c = b.variables_ || [], e = 0; e < c.length; e++) {
        if (this.checkName(c[e].name_, "v")) {
          return this.checkName(c[e].name_, "v");
        }
      }
      c = b.lists_ || [];
      for (e = 0; e < c.length; e++) {
        if (this.checkName(c[e].name_, "l")) {
          return this.checkName(c[e].name_, "l");
        }
      }
    }
  };
  c.hasFunctionFieldLabel = function(b) {
    if (b && b.data) {
      if ("function_field_label" == b.data.type) {
        return !0;
      }
      var c = b.data.params;
      return c[0] && (b = c[0].data.type, "function_field_label" == b || c[0].data.params && this.hasFunctionFieldLabel(c[0])) || c[1] && (b = c[1].data.type, "function_field_label" == b || c[1].data.params && this.hasFunctionFieldLabel(c[1])) ? !0 : !1;
    }
  };
  c.makeExpressionStatementForEntryEvent = function(b, c) {
    var d = {}, f = {type:"CallExpression"}, g = {};
    g.name = b;
    g.type = "Identifier";
    f.callee = g;
    arguments = [];
    g = {type:"Literal"};
    g.value = c;
    arguments.push(g);
    f.arguments = arguments;
    d.expression = f;
    d.type = "ExpressionStatement";
    return d;
  };
  c.setMathParams = function(b, c) {
    if ("pow" == b) {
      var d = "square";
      c[3] = d;
    } else {
      "sqrt" == b ? (d = "root", c[3] = d) : "sin" == b ? (d = "sin", c[3] = d) : "cos" == b ? (d = "cos", c[3] = d) : "tan" == b ? (d = "tan", c[3] = d) : "asin" == b ? (d = "asin_radian", c[3] = d) : "acos" == b ? (d = "acos_radian", c[3] = d) : "atan" == b ? (d = "atan_radian", c[3] = d) : "log" == b ? (d = "ln", c[3] = d) : "log10" == b ? (d = "log", c[3] = d) : "floor" == b ? (d = "floor", c[3] = d) : "ceil" == b ? (d = "ceil", c[3] = d) : "round" == b ? (d = "round", c[3] = d) : "factorial" == 
      b ? (d = "factorial", c[3] = d) : "fabs" == b && (d = "abs", c[3] = d);
    }
    return d;
  };
  c.isMathExpression = function(b) {
    return "Entry.math_operation" == b.split("(")[0] ? !0 : !1;
  };
  c.makeMathExpression = function(b) {
    var c = b;
    var e = b.split("(")[1].split(",");
    b = e[0];
    e = e[1];
    e = e.substring(2, e.length - 2).trim();
    "square" == e ? (mathProperty = "pow", c = "math." + mathProperty, c = c + "(" + b + ")") : "root" == e ? (mathProperty = "sqrt", c = "math." + mathProperty, c = c + "(" + b + ")") : "sin" == e ? (mathProperty = "sin", c = "math." + mathProperty, c = c + "(" + b + ")") : "cos" == e ? (mathProperty = "cos", c = "math." + mathProperty, c = c + "(" + b + ")") : "tan" == e ? (mathProperty = "tan", c = "math." + mathProperty, c = c + "(" + b + ")") : "asin_radian" == e ? (mathProperty = "asin", c = 
    "math." + mathProperty, c = c + "(" + b + ")") : "acos_radian" == e ? (mathProperty = "acos", c = "math." + mathProperty, c = c + "(" + b + ")") : "atan_radian" == e ? (mathProperty = "atan", c = "math." + mathProperty, c = c + "(" + b + ")") : "ln" == e ? (mathProperty = "log", c = "math." + mathProperty, c = c + "(" + b + ")") : "log" == e ? (mathProperty = "log10", c = "math." + mathProperty, c = c + "(" + b + ")") : "floor" == e ? (mathProperty = "floor", c = "math." + mathProperty, c = c + 
    "(" + b + ")") : "ceil" == e ? (mathProperty = "ceil", c = "math." + mathProperty, c = c + "(" + b + ")") : "round" == e ? (mathProperty = "round", c = "math." + mathProperty, c = c + "(" + b + ")") : "factorial" == e ? (mathProperty = "factorial", c = "math." + mathProperty, c = c + "(" + b + ")") : "abs" == e && (mathProperty = "fabs", c = "math." + mathProperty, c = c + "(" + b + ")");
    return c;
  };
  c.checkName = function(b, c) {
    var d = /^[0-9]$/g;
    if (d.test(b[0])) {
      return Lang.Menus["textcoding_numberError_" + c];
    }
    d = /[\{\}\[\]\/?.,;:|\)*~`!^\-+<>@\#$%&\\\=\(\'\"]/gi;
    return d.test(b) ? Lang.Menus["textcoding_specialCharError_" + c] : "and assert break class continue def del elif else except exec finally for from global if import in is lambda not or pass print raise return try while with yield".split(" ").includes(b) ? Lang.Menus["textcoding_bookedError_1" + c] + b + Lang.Menus["textcoding_bookedError_2" + c] : !1;
  };
  c.generateVariablesDeclaration = function() {
    var b = "", c = Entry.playground.object, e = Entry.variableContainer;
    if (e) {
      for (var e = e.variables_ || [], f = e.length - 1; 0 <= f; f--) {
        var g = e[f], h = g.name_, k = g.value_;
        if (g.object_) {
          if (g.object_ == c.id) {
            h = "self." + h;
          } else {
            continue;
          }
        }
        "string" === typeof k && (k = '"()"'.replace("()", k));
        b += h + " = " + k + "\n";
      }
      return b;
    }
  };
  c.generateListsDeclaration = function() {
    var b = "", c = Entry.playground.object, e = Entry.variableContainer;
    if (e) {
      targets = e.lists_ || [];
      for (e = targets.length - 1; 0 <= e; e--) {
        var f = targets[e], g = f.name_, h = "", k = f.array_;
        if (f.object_) {
          if (f.object_ == c.id) {
            g = "self." + g;
          } else {
            continue;
          }
        }
        for (var l in k) {
          f = k[l].data;
          if (isNaN(f) || 1 < f.length && "0" === String(f)[0]) {
            f = '"' + f + '"';
          }
          if ("number" === typeof f || 0 < f.trim().length) {
            h += f;
          }
          l != k.length - 1 && (h += ", ");
        }
        b += g + " = [" + h + "]\n";
      }
      return b;
    }
  };
  c.isVariableNumber = function(b, c) {
    var d = Entry.playground.object, f = Entry.variableContainer.variables_, g;
    for (g in f) {
      var h = f[g];
      if ("global" == c) {
        if (null === h.object_ && h.id_ == b && Entry.Utils.isNumber(h.value_)) {
          return !0;
        }
      } else {
        if ("local" == c && h.object_ === d.id && h.id_ == b && Entry.Utils.isNumber(h.value_)) {
          return !0;
        }
      }
    }
    return !1;
  };
  c.generateForStmtIndex = function(b, c) {
    var d = Math.floor(b / 3);
    c = ["i", "j", "k"][b % 3] + (c || "");
    return d ? this.generateForStmtIndex(d - 1, c) : c;
  };
  c.isExpressionLiteral = function(b, c) {
    switch(b.type) {
      case "CallExpression":
        if ("MemberExpression" === b.callee.type && (b = b.callee.property.name, b = c["%2"][b])) {
          return "basic_string_field" === Entry.block[b.key].skeleton;
        }
        break;
      case "Literal":
        return !0;
    }
    return !1;
  };
  c.isNameInEntryData = function(b, c) {
    return this.isGlobalVariableExisted(b) || this.isLocalVariableExisted(b, c) || this.isGlobalListExisted(b) || this.isLocalListExisted(b);
  };
})(Entry.TextCodingUtil);
Entry.Workspace = function(c) {
  Entry.Model(this, !1);
  this.dSetMode = Entry.Utils.debounce(this.setMode, 200);
  this.observe(this, "_handleChangeBoard", ["selectedBoard"], !1);
  this.trashcan = new Entry.FieldTrashcan;
  this.readOnly = void 0 === c.readOnly ? !1 : c.readOnly;
  this.blockViewMouseUpEvent = new Entry.Event(this);
  this.widgetUpdateEvent = new Entry.Event(this);
  this._blockViewMouseUpEvent = null;
  this.widgetUpdateEveryTime = !1;
  var b = c.blockMenu;
  b && (this.blockMenu = new Entry.BlockMenu(b.dom, b.align, b.categoryData, b.scroll, this.readOnly), this.blockMenu.workspace = this, this.blockMenu.observe(this, "_setSelectedBlockView", ["selectedBlockView"], !1));
  if (b = c.board) {
    b.workspace = this, b.readOnly = this.readOnly, this.board = new Entry.Board(b), this.board.observe(this, "_setSelectedBlockView", ["selectedBlockView"], !1), this.set({selectedBoard:this.board});
  }
  if (b = c.vimBoard) {
    this.vimBoard = new Entry.Vim(b.dom), this.vimBoard.workspace = this;
  }
  this.board && this.vimBoard && this.vimBoard.hide();
  Entry.GlobalSvg.createDom();
  this.mode = Entry.Workspace.MODE_BOARD;
  this.attachKeyboardCapture();
  this.changeEvent = new Entry.Event(this);
  Entry.commander.setCurrentEditor("board", this.board);
  this.textType = void 0 !== c.textType ? c.textType : Entry.Vim.TEXT_TYPE_PY;
  this.mode = this.oldMode = Entry.Workspace.MODE_BOARD;
};
Entry.Workspace.MODE_BOARD = 0;
Entry.Workspace.MODE_VIMBOARD = 1;
Entry.Workspace.MODE_OVERLAYBOARD = 2;
(function(c) {
  c.schema = {selectedBlockView:null, selectedBoard:null};
  c.getBoard = function() {
    return this.board;
  };
  c.getSelectedBoard = function() {
    return this.selectedBoard;
  };
  c.getBlockMenu = function() {
    return this.blockMenu;
  };
  c.getVimBoard = function() {
    return this.vimBoard;
  };
  c.getMode = function() {
    return this.mode;
  };
  c.setMode = function(b, c) {
    var d = Entry.playground, d = d && d.object;
    "workspace" !== Entry.type || d ? d = !0 : (entrylms.alert("\uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ube0c\uc81d\ud2b8\ub97c \ucd94\uac00\ud55c \ud6c4 \uc2dc\ub3c4\ud574\uc8fc\uc138\uc694."), d = !1);
    if (!d) {
      return !1;
    }
    Entry.disposeEvent.notify();
    Entry.Utils.isNumber(b) ? this.mode = b : (this.mode = b.boardType, this.runType = b.runType, this.textType = b.textType);
    this.mode = Number(this.mode);
    if (this.oldMode !== this.mode) {
      var f = Entry.Vim;
      var d = Entry.Workspace, g = this.blockMenu;
      switch(this.mode) {
        case d.MODE_VIMBOARD:
          if (f = Entry.TextCodingUtil.isNamesIncludeSpace()) {
            entrylms.alert(f);
            b = {};
            b.boardType = d.MODE_BOARD;
            b.textType = -1;
            Entry.getMainWS().setMode(b);
            break;
          }
          if (f = Entry.TextCodingUtil.isNameIncludeNotValidChar()) {
            entrylms.alert(f);
            b = {};
            b.boardType = d.MODE_BOARD;
            b.textType = -1;
            Entry.getMainWS().setMode(b);
            return;
          }
          if (f = Entry.TextCodingUtil.canConvertTextModeForOverlayMode(Entry.Workspace.MODE_VIMBOARD)) {
            entrylms.alert(f);
            return;
          }
          this.board && this.board.hide();
          this.overlayBoard && this.overlayBoard.hide();
          this.set({selectedBoard:this.vimBoard});
          this.vimBoard.show();
          g.banClass("functionInit", !0);
          this.codeToText(this.board.code, b);
          this.board.clear();
          this.oldTextType = this.textType;
          break;
        case d.MODE_BOARD:
          try {
            this.board.show(), g.unbanClass("functionInit", !0), this.set({selectedBoard:this.board}), this.textToCode(this.oldMode, this.oldTextType), this.overlayBoard && this.overlayBoard.hide(), this.oldTextType = this.textType, this.vimBoard && this.vimBoard.hide();
          } catch (h) {
            this.board && this.board.code && this.board.code.clear(), this.board && this.board.hide(), this.set({selectedBoard:this.vimBoard}), g.banClass("functionInit"), this.mode = d.MODE_VIMBOARD, this.oldTextType == f.TEXT_TYPE_JS ? (b.boardType = d.MODE_VIMBOARD, b.textType = f.TEXT_TYPE_JS, b.runType = f.MAZE_MODE, this.oldTextType = f.TEXT_TYPE_JS) : this.oldTextType == f.TEXT_TYPE_PY && (b.boardType = d.MODE_VIMBOARD, b.textType = f.TEXT_TYPE_PY, b.runType = f.WORKSPACE_MODE, this.oldTextType = 
            f.TEXT_TYPE_PY), Entry.getMainWS().setMode(b);
          }
          Entry.commander.setCurrentEditor("board", this.board);
          break;
        case d.MODE_OVERLAYBOARD:
          this.oldMode == d.MODE_VIMBOARD ? this.overlayModefrom = d.MODE_VIMBOARD : this.oldMode == d.MODE_BOARD && (this.overlayModefrom = d.MODE_BOARD), this.overlayBoard || this.initOverlayBoard(), this.overlayBoard.show(), this.set({selectedBoard:this.overlayBoard}), Entry.commander.setCurrentEditor("board", this.overlayBoard);
      }
      this.oldMode = this.mode;
      Entry.isTextMode = this.mode == d.MODE_VIMBOARD;
      g.align();
      Entry.dispatchEvent("workspaceChangeMode");
      this.changeEvent.notify(c);
      Entry.dispatchEvent("cancelBlockMenuDynamic");
    }
  };
  c.changeBoardCode = function(b, c) {
    this._syncTextCode();
    var d = this.mode === Entry.Workspace.MODE_VIMBOARD;
    this.board.changeCode(b, d, c);
    d && (b = {}, b.textType = this.textType, b.boardType = this.boardType, b.runType = this.runType, this.codeToText(this.board.code, b));
  };
  c.changeOverlayBoardCode = function(b) {
    this.overlayBoard && this.overlayBoard.changeCode(b);
  };
  c.changeBlockMenuCode = function(b) {
    this.blockMenu.changeCode(b);
  };
  c.textToCode = function(b, c) {
    if (this.vimBoard && b === Entry.Workspace.MODE_VIMBOARD) {
      b = this.vimBoard.textToCode(c);
      var d = this.board.code;
      d.load(b);
      this.changeBoardCode(d);
      setTimeout(function() {
        d.view && (d.view.reDraw(), this.board.alignThreads());
      }.bind(this), 0);
    }
  };
  c.codeToText = function(b, c) {
    if (this.vimBoard) {
      return b = b || this.board.code, c = c || {textType:this.textType, boardType:this.boardType, runType:this.runType}, this.vimBoard.codeToText(b, c);
    }
  };
  c.getCodeToText = function(b) {
    if (this.vimBoard) {
      return this.vimBoard.getCodeToText(b);
    }
  };
  c._setSelectedBlockView = function() {
    var b = this.board.selectedBlockView || this.blockMenu.selectedBlockView || (this.overlayBoard ? this.overlayBoard.selectedBlockView : null);
    this._unbindBlockViewMouseUpEvent();
    this.set({selectedBlockView:b});
    if (b) {
      var c = this;
      this._blockViewMouseUpEvent = b.mouseUpEvent.attach(this, function() {
        c.blockViewMouseUpEvent.notify(b);
      });
    }
  };
  c.initOverlayBoard = function() {
    this.overlayBoard = new Entry.Board({dom:this.board.view, workspace:this, isOverlay:!0});
    this.overlayBoard.changeCode(new Entry.Code([]));
    this.overlayBoard.workspace = this;
    this.overlayBoard.observe(this, "_setSelectedBlockView", ["selectedBlockView"], !1);
  };
  c._keyboardControl = function(b, c) {
    function d(b, c) {
      return b ? !0 : (entrylms.alert(c || "\uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ube0c\uc81d\ud2b8\ub97c \ucd94\uac00\ud55c \ud6c4 \uc2dc\ub3c4\ud574\uc8fc\uc138\uc694."), !1);
    }
    if (!Entry.Loader || Entry.Loader.isLoaded()) {
      var f = b.keyCode || b.which, g = b.ctrlKey, h = b.shiftKey, k = b.altKey, l = Entry.playground, m = l && l.object ? l.object : void 0;
      if (!Entry.Utils.isInInput(b) || c) {
        var q = this._isVimMode(), n = this.selectedBlockView;
        c = this.selectedBoard;
        var r = c.readOnly;
        if (g) {
          g = [219, 221];
          if (-1 < g.indexOf(f) && !d(m)) {
            return;
          }
          switch(f) {
            case 86:
              !r && c && c instanceof Entry.Board && Entry.clipboard && Entry.do("addThread", Entry.clipboard).value.getFirstBlock().copyToClipboard();
              break;
            case 219:
              if (Entry.getMainWS().oldMode == Entry.Workspace.MODE_OVERLAYBOARD) {
                return;
              }
              if (f = Entry.TextCodingUtil.isNamesIncludeSpace()) {
                entrylms.alert(f);
                return;
              }
              this.dSetMode({boardType:Entry.Workspace.MODE_BOARD, textType:-1});
              b.preventDefault();
              break;
            case 221:
              if (f = Entry.TextCodingUtil.canConvertTextModeForOverlayMode(Entry.Workspace.MODE_VIMBOARD)) {
                entrylms.alert(f);
                return;
              }
              if (f = Entry.TextCodingUtil.isNamesIncludeSpace()) {
                entrylms.alert(f);
                return;
              }
              this.dSetMode({boardType:Entry.Workspace.MODE_VIMBOARD, textType:Entry.Vim.TEXT_TYPE_PY, runType:Entry.Vim.WORKSPACE_MODE});
              b.preventDefault();
              break;
            case 67:
              n && !n.isInBlockMenu && n.block.isDeletable() && n.block.isCopyable() && n.block.copyToClipboard();
              break;
            case 88:
              !r && n && !n.isInBlockMenu && n.block.isDeletable() && function(b) {
                b.copyToClipboard();
                b.destroy(!0, !0);
                n.getBoard().setSelectedBlock(null);
              }(n.block);
          }
        } else {
          if (k) {
            g = [49, 50, 51, 52, 219, 221];
            if (-1 < g.indexOf(f) && !d(m)) {
              return;
            }
            switch(f) {
              case 49:
                l.changeViewMode("code");
                b.preventDefault();
                break;
              case 50:
                l.changeViewMode("picture");
                b.preventDefault();
                break;
              case 51:
                l.changeViewMode("sound");
                b.preventDefault();
                break;
              case 52:
                l.toggleOnVariableView();
                l.changeViewMode("variable");
                b.preventDefault();
                break;
              case 219:
                Entry.container && (b.preventDefault(), Entry.container.selectNeighborObject("prev"));
                break;
              case 221:
                Entry.container && (b.preventDefault(), Entry.container.selectNeighborObject("next"));
            }
          } else {
            if (h) {
              switch(f) {
                case 9:
                  q && (CodeMirror.commands.indentLess(this.vimBoard.codeMirror), b.preventDefault());
              }
            } else {
              switch(f) {
                case 9:
                  q && (CodeMirror.commands.indentMore(this.vimBoard.codeMirror), b.preventDefault());
                  break;
                case 8:
                case 46:
                  r || !n || n.isInBlockMenu || !n.block.isDeletable() || n.isFieldEditing() || (Entry.do("destroyBlock", n.block), this.board.set({selectedBlockView:null}), b.preventDefault());
              }
            }
          }
        }
        setTimeout(function() {
          Entry.disposeEvent && Entry.disposeEvent.notify(b);
        }, 0);
      }
    }
  };
  c._handleChangeBoard = function() {
    var b = this.selectedBoard;
    b && b.constructor === Entry.Board && this.trashcan.setBoard(b);
  };
  c._syncTextCode = function() {
    if (!(this.mode !== Entry.Workspace.MODE_VIMBOARD || Entry.engine && Entry.engine.isState("run"))) {
      var b = this.vimBoard.textToCode(this.textType), c = this.board.code;
      c && c.load(b);
    }
  };
  c.addVimBoard = function(b) {
    this.vimBoard || (this.vimBoard = new Entry.Vim(b), this.vimBoard.workspace = this, this.vimBoard.hide());
  };
  c.getParserType = function() {
    return this.vimBoard._parserType;
  };
  c.getBlockViewRenderMode = function() {
    switch(this.mode) {
      case Entry.Workspace.MODE_BOARD:
      case Entry.Workspace.MODE_OVERLAYBOARD:
        return Entry.BlockView.RENDER_MODE_BLOCK;
      case Entry.Workspace.MODE_VIMBOARD:
        return Entry.BlockView.RENDER_MODE_TEXT;
    }
  };
  c._isVimMode = function() {
    return this.oldMode === Entry.Workspace.MODE_VIMBOARD;
  };
  c.isVimMode = c._isVimMode;
  c.attachKeyboardCapture = function() {
    Entry.keyPressed && (this._keyboardEvent && this.detachKeyboardCapture(), this._keyboardEvent = Entry.keyPressed.attach(this, this._keyboardControl));
  };
  c.detachKeyboardCapture = function() {
    Entry.keyPressed && this._keyboardEvent && (Entry.keyPressed.detach(this._keyboardEvent), delete this._keyboardEvent);
  };
  c._unbindBlockViewMouseUpEvent = function() {
    this._blockViewMouseUpEvent && (this.selectedBlockView.mouseUpEvent.detach(this._blockViewMouseUpEvent), this._blockViewMouseUpEvent = null);
  };
  c.setWidgetUpdateEveryTime = function(b) {
    this.widgetUpdateEveryTime = !!b;
  };
})(Entry.Workspace.prototype);
Entry.BlockDriver = function() {
};
(function(c) {
  c.convert = function() {
    var b = new Date, c;
    for (c in Entry.block) {
      "function" === typeof Entry.block[c] && this._convertBlock(c);
    }
    console.log((new Date).getTime() - b.getTime());
  };
  c._convertBlock = function(b) {
    function c(b) {
      var d = {type:b.getAttribute("type"), index:{}};
      b = $(b).children();
      if (!b) {
        return d;
      }
      for (var e = 0; e < b.length; e++) {
        var f = b[e], g = f.tagName, h = $(f).children()[0], k = f.getAttribute("name");
        "value" === g ? "block" == h.nodeName && (d.params || (d.params = []), d.params.push(c(h)), d.index[k] = d.params.length - 1) : "field" === g && (d.params || (d.params = []), d.params.push(f.textContent), d.index[k] = d.params.length - 1);
      }
      return d;
    }
    var e = Blockly.Blocks[b], f = EntryStatic.blockInfo[b];
    if (f) {
      var g = f.class;
      var h = f.isNotFor;
      if (f = f.xml) {
        f = $.parseXML(f);
        var k = c(f.childNodes[0]);
      }
    }
    k = (new Entry.BlockMockup(e, k, b)).toJSON();
    k.class = g;
    k.isNotFor = h;
    _.isEmpty(k.paramsKeyMap) && delete k.paramsKeyMap;
    _.isEmpty(k.statementsKeyMap) && delete k.statementsKeyMap;
    k.func = Entry.block[b];
    -1 < "NUMBER TRUE FALSE TEXT FUNCTION_PARAM_BOOLEAN FUNCTION_PARAM_STRING TRUE_UN".split(" ").indexOf(b.toUpperCase()) && (k.isPrimitive = !0);
    Entry.block[b] = k;
  };
})(Entry.BlockDriver.prototype);
Entry.BlockMockup = function(c, b, d) {
  this.templates = [];
  this.params = [];
  this.statements = [];
  this.color = "";
  this.output = this.isNext = this.isPrev = !1;
  this.fieldCount = 0;
  this.events = {};
  this.def = b || {};
  this.paramsKeyMap = {};
  this.statementsKeyMap = {};
  this.definition = {params:[], type:this.def.type};
  this.simulate(c);
  this.def = this.definition;
};
(function(c) {
  c.simulate = function(b) {
    b.sensorList && (this.sensorList = b.sensorList);
    b.portList && (this.portList = b.portList);
    b.init.call(this);
    b.whenAdd && (this.events.blockViewAdd || (this.events.blockViewAdd = []), this.events.blockViewAdd.push(b.whenAdd));
    b.whenRemove && (this.events.blockViewDestroy || (this.events.blockViewDestroy = []), this.events.blockViewDestroy.push(b.whenRemove));
  };
  c.toJSON = function() {
    function b(c) {
      if (c && (c = c.params)) {
        for (var d = 0; d < c.length; d++) {
          var e = c[d];
          e && (delete e.index, b(e));
        }
      }
    }
    var c = "";
    this.output ? c = "Boolean" === this.output ? "basic_boolean_field" : "basic_string_field" : !this.isPrev && this.isNext ? c = "basic_event" : 1 == this.statements.length ? c = "basic_loop" : 2 == this.statements.length ? c = "basic_double_loop" : this.isPrev && this.isNext ? c = "basic" : this.isPrev && !this.isNext && (c = "basic_without_next");
    b(this.def);
    var e = /dummy_/mi, f;
    for (f in this.paramsKeyMap) {
      e.test(f) && delete this.paramsKeyMap[f];
    }
    for (f in this.statementsKeyMap) {
      e.test(f) && delete this.statementsKeyMap[f];
    }
    return {color:this.color, skeleton:c, statements:this.statements, template:this.templates.filter(function(b) {
      return "string" === typeof b;
    }).join(" "), params:this.params, events:this.events, def:this.def, paramsKeyMap:this.paramsKeyMap, statementsKeyMap:this.statementsKeyMap};
  };
  c.appendDummyInput = function() {
    return this;
  };
  c.appendValueInput = function(b) {
    this.def && this.def.index && (void 0 !== this.def.index[b] ? this.definition.params.push(this.def.params[this.def.index[b]]) : this.definition.params.push(null));
    this.params.push({type:"Block", accept:"string"});
    this._addToParamsKeyMap(b);
    this.templates.push(this.getFieldCount());
    return this;
  };
  c.appendStatementInput = function(b) {
    this._addToStatementsKeyMap(b);
    this.statements.push({accept:"basic"});
  };
  c.setCheck = function(b) {
    var c = this.params;
    "Boolean" === b && (c[c.length - 1].accept = "boolean");
  };
  c.appendField = function(b, c) {
    if (!b) {
      return this;
    }
    "string" === typeof b && 0 < b.length ? c ? (b = {type:"Text", text:b, color:c}, this.params.push(b), this._addToParamsKeyMap(), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[c] ? this.definition.params.push(this.def.params[this.def.index[c]]) : this.definition.params.push(void 0)) : this.templates.push(b) : b.constructor == Blockly.FieldIcon ? ("start" === b.type ? this.params.push({type:"Indicator", img:b.src_, size:17, position:{x:0, y:-2}}) : 
    this.params.push({type:"Indicator", img:b.src_, size:12}), this._addToParamsKeyMap(), this.templates.push(this.getFieldCount()), this.definition && this.definition.params.push(null)) : b.constructor == Blockly.FieldDropdown ? (this.params.push({type:"Dropdown", options:b.menuGenerator_, value:b.menuGenerator_[0][1], fontSize:11}), this._addToParamsKeyMap(c), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[c] ? this.definition.params.push(this.def.params[this.def.index[c]]) : 
    this.definition.params.push(void 0)) : b.constructor == Blockly.FieldDropdownDynamic ? (this.params.push({type:"DropdownDynamic", value:null, menuName:b.menuName_, fontSize:11}), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[c] ? this.definition.params.push(this.def.params[this.def.index[c]]) : this.definition.params.push(void 0), this._addToParamsKeyMap(c)) : b.constructor == Blockly.FieldTextInput ? (this.params.push({type:"TextInput", value:10}), 
    this.templates.push(this.getFieldCount()), this._addToParamsKeyMap(c)) : b.constructor == Blockly.FieldAngle ? (this.params.push({type:"Angle"}), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[c] ? this.definition.params.push(this.def.params[this.def.index[c]]) : this.definition.params.push(null), this._addToParamsKeyMap(c)) : b.constructor == Blockly.FieldKeydownInput ? (this.params.push({type:"Keyboard", value:81}), this.templates.push(this.getFieldCount()), 
    void 0 !== this.def.index[c] ? this.definition.params.push(this.def.params[this.def.index[c]]) : this.definition.params.push(void 0), this._addToParamsKeyMap(c)) : b.constructor == Blockly.FieldColour ? (this.params.push({type:"Color"}), this.templates.push(this.getFieldCount()), this._addToParamsKeyMap(c)) : console.log("else", b);
    return this;
  };
  c.setColour = function(b) {
    this.color = b;
  };
  c.setInputsInline = function() {
  };
  c.setOutput = function(b, c) {
    b && (this.output = c);
  };
  c.setPreviousStatement = function(b) {
    this.isPrev = b;
  };
  c.setNextStatement = function(b) {
    this.isNext = b;
  };
  c.setEditable = function(b) {
  };
  c.getFieldCount = function() {
    this.fieldCount++;
    return "%" + this.fieldCount;
  };
  c._addToParamsKeyMap = function(b) {
    b = b ? b : "dummy_" + Entry.Utils.generateId();
    var c = this.paramsKeyMap;
    c[b] = Object.keys(c).length;
  };
  c._addToStatementsKeyMap = function(b) {
    b = b ? b : "dummy_" + Entry.Utils.generateId();
    var c = this.statementsKeyMap;
    c[b] = Object.keys(c).length;
  };
})(Entry.BlockMockup.prototype);
Entry.Playground = function() {
  this.enableArduino = this.isTextBGMode_ = !1;
  this.viewMode_ = "default";
  Entry.addEventListener("textEdited", this.injectText);
  Entry.addEventListener("hwChanged", this.updateHW);
};
(function(c) {
  c.setMode = function(b) {
    console.log("playground setMode", b);
    this.mainWorkspace.setMode(b);
  };
  c.generateView = function(b, c) {
    this.view_ = b;
    this.view_.addClass("entryPlayground");
    c && "workspace" != c ? "phone" == c && (this.view_.addClass("entryPlaygroundPhone"), b = Entry.createElement("div", "entryCategoryTab"), b.addClass("entryPlaygroundTabPhone"), Entry.view_.insertBefore(b, this.view_), this.generateTabView(b), this.tabView_ = b, b = Entry.createElement("div", "entryCurtain"), b.addClass("entryPlaygroundCurtainPhone"), b.addClass("entryRemove"), b.innerHTML = Lang.Workspace.cannot_edit_click_to_stop, b.bindOnClick(function() {
      Entry.engine.toggleStop();
    }), this.view_.appendChild(b), this.curtainView_ = b, Entry.pictureEditable && (b = Entry.createElement("div", "entryPicture"), b.addClass("entryPlaygroundPicturePhone"), b.addClass("entryRemove"), this.view_.appendChild(b), this.generatePictureView(b), this.pictureView_ = b), b = Entry.createElement("div", "entryText"), b.addClass("entryRemove"), this.view_.appendChild(b), this.generateTextView(b), this.textView_ = b, Entry.soundEditable && (b = Entry.createElement("div", "entrySound"), b.addClass("entryPlaygroundSoundWorkspacePhone"), 
    b.addClass("entryRemove"), this.view_.appendChild(b), this.generateSoundView(b), this.soundView_ = b), b = Entry.createElement("div", "entryDefault"), this.view_.appendChild(b), this.generateDefaultView(b), this.defaultView_ = b, b = Entry.createElement("div", "entryCode"), b.addClass("entryPlaygroundCodePhone"), this.view_.appendChild(b), this.generateCodeView(b), this.codeView_ = this.codeView_ = b, Entry.addEventListener("run", function(b) {
      Entry.playground.curtainView_.removeClass("entryRemove");
    }), Entry.addEventListener("stop", function(b) {
      Entry.playground.curtainView_.addClass("entryRemove");
    })) : (this.view_.addClass("entryPlaygroundWorkspace"), b = Entry.createElement("div", "entryCategoryTab"), b.addClass("entryPlaygroundTabWorkspace"), this.view_.appendChild(b), this.generateTabView(b), this.tabView_ = b, b = Entry.createElement("div", "entryCurtain"), b.addClass("entryPlaygroundCurtainWorkspace"), b.addClass("entryRemove"), c = Lang.Workspace.cannot_edit_click_to_stop.split("."), b.innerHTML = c[0] + ".<br/>" + c[1], b.addEventListener("click", function() {
      Entry.engine.toggleStop();
    }), this.view_.appendChild(b), this.curtainView_ = b, b = Entry.createElement("div", "entryPicture"), b.addClass("entryPlaygroundPictureWorkspace"), b.addClass("entryRemove"), this.view_.appendChild(b), this.generatePictureView(b), this.pictureView_ = b, b = Entry.createElement("div", "entryText"), b.addClass("entryPlaygroundTextWorkspace"), b.addClass("entryRemove"), this.view_.appendChild(b), this.generateTextView(b), this.textView_ = b, b = Entry.createElement("div", "entrySound"), b.addClass("entryPlaygroundSoundWorkspace"), 
    b.addClass("entryRemove"), this.view_.appendChild(b), this.generateSoundView(b), this.soundView_ = b, b = Entry.createElement("div", "entryDefault"), b.addClass("entryPlaygroundDefaultWorkspace"), this.view_.appendChild(b), this.generateDefaultView(b), this.defaultView_ = b, b = Entry.createElement("div", "entryCode"), b.addClass("entryPlaygroundCodeWorkspace"), b.addClass("entryRemove"), this.view_.appendChild(b), this.generateCodeView(b), this.codeView_ = b, c = Entry.createElement("div"), 
    c.addClass("entryPlaygroundResizeWorkspace", "entryRemove"), this.resizeHandle_ = c, this.view_.appendChild(c), this.initializeResizeHandle(c), this.codeView_ = b, Entry.addEventListener("run", function(b) {
      Entry.playground.curtainView_.removeClass("entryRemove");
    }), Entry.addEventListener("stop", function(b) {
      Entry.playground.curtainView_.addClass("entryRemove");
    }));
    this.applyTabOption();
  };
  c.generateDefaultView = function(b) {
    return b;
  };
  c.generateTabView = function(b) {
    var c = this, e = Entry.createElement("ul");
    e.addClass("entryTabListWorkspace");
    this.tabList_ = e;
    b.appendChild(e);
    this.tabViewElements = {};
    b = Entry.createElement("li", "entryCodeTab");
    b.innerHTML = Lang.Workspace.tab_code;
    b.addClass("entryTabListItemWorkspace entryTabSelected");
    e.appendChild(b);
    b.bindOnClick(function(b) {
      Entry.do("playgroundChangeViewMode", "code", c.selectedViewMode);
    });
    this._codeTab = this.tabViewElements.code = b;
    b = Entry.createElement("li", "entryPictureTab");
    b.innerHTML = Lang.Workspace.tab_picture;
    b.addClass("entryTabListItemWorkspace");
    e.appendChild(b);
    b.bindOnClick(function(b) {
      Entry.do("playgroundChangeViewMode", "picture", c.selectedViewMode);
    });
    this.pictureTab = this.tabViewElements.picture = b;
    b = Entry.createElement("li", "entryTextboxTab");
    b.innerHTML = Lang.Workspace.tab_text;
    b.addClass("entryTabListItemWorkspace");
    e.appendChild(b);
    b.bindOnClick(function(b) {
      Entry.do("playgroundChangeViewMode", "text", c.selectedViewMode);
    });
    this.tabViewElements.text = b;
    b.addClass("entryRemove");
    this.textboxTab = b;
    b = Entry.createElement("li", "entrySoundTab");
    b.innerHTML = Lang.Workspace.tab_sound;
    b.addClass("entryTabListItemWorkspace");
    e.appendChild(b);
    b.bindOnClick(function(b) {
      Entry.do("playgroundChangeViewMode", "sound", c.selectedViewMode);
    });
    this.soundTab = this.tabViewElements.sound = b;
    b = Entry.createElement("li", "entryVariableTab");
    b.innerHTML = Lang.Workspace.tab_attribute;
    b.addClass("entryTabListItemWorkspace entryVariableTabWorkspace");
    e.appendChild(b);
    b.bindOnClick(function(b) {
      Entry.do("playgroundChangeViewMode", "variable", c.selectedViewMode);
    });
    this.variableTab = this.tabViewElements.variable = b;
  };
  c.generateCodeView = function(b) {
    var c = this.createVariableView();
    b.appendChild(c);
    this.variableView_ = c;
    b = Entry.Dom(b);
    c = Entry.Dom("div", {parent:b, id:"entryWorkspaceBoard", class:"entryWorkspaceBoard"});
    b = {blockMenu:{dom:Entry.Dom("div", {parent:b, id:"entryWorkspaceBlockMenu", class:"entryWorkspaceBlockMenu"}), align:"LEFT", categoryData:EntryStatic.getAllBlocks(), scroll:!0}, board:{dom:c}, readOnly:Entry.readOnly};
    Entry.textCodingEnable && (b.vimBoard = {dom:c});
    this.mainWorkspace = new Entry.Workspace(b);
    this.blockMenu = this.mainWorkspace.blockMenu;
    this.board = this.mainWorkspace.board;
    this.blockMenu.banClass("checker");
    this.vimBoard = this.mainWorkspace.vimBoard;
    Entry.hw && this.updateHW();
  };
  c.generatePictureView = function(b) {
    if ("workspace" == Entry.type) {
      var c = Entry.createElement("div", "entryAddPicture");
      c.addClass("entryPlaygroundAddPicture");
      c.bindOnClick(function(b) {
        !Entry.container || Entry.container.isSceneObjectsExist() ? Entry.do("playgroundClickAddPicture") : Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.add_object_alert_msg);
      });
      var e = Entry.createElement("div", "entryAddPictureInner");
      e.addClass("entryPlaygroundAddPictureInner");
      e.innerHTML = Lang.Workspace.picture_add;
      c.appendChild(e);
      b.appendChild(c);
      this._pictureAddButton = e;
      e = Entry.createElement("ul", "entryPictureList");
      e.addClass("entryPlaygroundPictureList");
      $ && $(e).sortable({start:function(b, c) {
        c.item.data("start_pos", c.item.index());
      }, stop:function(b, c) {
        b = c.item.data("start_pos");
        c = c.item.index();
        Entry.playground.movePicture(b, c);
      }, axis:"y"});
      b.appendChild(e);
      this.pictureListView_ = e;
      e = Entry.createElement("div", "entryPainter");
      e.addClass("entryPlaygroundPainter");
      b.appendChild(e);
      this.painter = new Entry.Painter2(e);
    } else {
      "phone" == Entry.type && (c = Entry.createElement("div", "entryAddPicture"), c.addClass("entryPlaygroundAddPicturePhone"), c.bindOnClick(function(b) {
        Entry.dispatchEvent("openPictureManager");
      }), e = Entry.createElement("div", "entryAddPictureInner"), e.addClass("entryPlaygroundAddPictureInnerPhone"), e.innerHTML = Lang.Workspace.picture_add, c.appendChild(e), b.appendChild(c), e = Entry.createElement("ul", "entryPictureList"), e.addClass("entryPlaygroundPictureListPhone"), $ && $(e).sortable({start:function(b, c) {
        c.item.data("start_pos", c.item.index());
      }, stop:function(b, c) {
        b = c.item.data("start_pos");
        c = c.item.index();
        Entry.playground.movePicture(b, c);
      }, axis:"y"}), b.appendChild(e), this.pictureListView_ = e);
    }
  };
  c.generateTextView = function(b) {
    var c = Entry.createElement("div");
    b.appendChild(c);
    var e = Entry.createElement("div");
    e.addClass("textProperties");
    c.appendChild(e);
    b = Entry.createElement("div");
    b.addClass("entryTextFontSelect");
    e.appendChild(b);
    var f = Entry.createElement("select", "entryPainterAttrFontName");
    f.addClass("entryPlaygroundPainterAttrFontName", "entryTextFontSelecter");
    f.size = "1";
    f.onchange = function(b) {
      b = b.target.value;
      if ("Nanum Pen Script" == b || "Jeju Hallasan" == b) {
        var c = r.value;
        Entry.playground.object.entity.getLineBreak() && (c = t.value);
        null != /[\u4E00-\u9FFF]/.exec(c) && (b = "KoPub Batang", f.value = b, entrylms.alert(Lang.Menus.not_supported_text));
      }
      Entry.playground.object.entity.setFontType(b);
    };
    for (var g = 0; g < Entry.fonts.length; g++) {
      var h = Entry.fonts[g], k = Entry.createElement("option");
      k.value = h.family;
      k.innerHTML = h.name;
      f.appendChild(k);
    }
    this.fontName_ = f;
    b.appendChild(f);
    b = Entry.createElement("ul");
    b.addClass("entryPlayground_text_buttons");
    e.appendChild(b);
    g = Entry.createElement("li");
    g.addClass("entryPlaygroundTextAlignLeft");
    g.bindOnClick(function(b) {
      Entry.playground.setFontAlign(Entry.TEXT_ALIGN_LEFT);
    });
    b.appendChild(g);
    this.alignLeftBtn = g;
    g = Entry.createElement("li");
    g.addClass("entryPlaygroundTextAlignCenter");
    g.bindOnClick(function(b) {
      Entry.playground.setFontAlign(Entry.TEXT_ALIGN_CENTER);
    });
    b.appendChild(g);
    this.alignCenterBtn = g;
    g = Entry.createElement("li");
    g.addClass("entryPlaygroundTextAlignRight");
    g.bindOnClick(function(b) {
      Entry.playground.setFontAlign(Entry.TEXT_ALIGN_RIGHT);
    });
    b.appendChild(g);
    this.alignRightBtn = g;
    g = Entry.createElement("li");
    b.appendChild(g);
    e = Entry.createElement("a");
    g.appendChild(e);
    e.bindOnClick(function() {
      Entry.playground.object.entity.toggleFontBold() ? l.src = Entry.mediaFilePath + "text_button_bold_true.png" : l.src = Entry.mediaFilePath + "text_button_bold_false.png";
    });
    var l = Entry.createElement("img", "entryPlaygroundText_boldImage");
    e.appendChild(l);
    l.src = Entry.mediaFilePath + "text_button_bold_false.png";
    g = Entry.createElement("li");
    b.appendChild(g);
    e = Entry.createElement("a");
    g.appendChild(e);
    e.bindOnClick(function() {
      var b = !Entry.playground.object.entity.getUnderLine() || !1;
      m.src = Entry.mediaFilePath + "text_button_underline_" + b + ".png";
      Entry.playground.object.entity.setUnderLine(b);
    });
    var m = Entry.createElement("img", "entryPlaygroundText_underlineImage");
    e.appendChild(m);
    m.src = Entry.mediaFilePath + "text_button_underline_false.png";
    g = Entry.createElement("li");
    b.appendChild(g);
    e = Entry.createElement("a");
    g.appendChild(e);
    e.bindOnClick(function() {
      Entry.playground.object.entity.toggleFontItalic() ? q.src = Entry.mediaFilePath + "text_button_italic_true.png" : q.src = Entry.mediaFilePath + "/text_button_italic_false.png";
    });
    var q = Entry.createElement("img", "entryPlaygroundText_italicImage");
    e.appendChild(q);
    q.src = Entry.mediaFilePath + "text_button_italic_false.png";
    g = Entry.createElement("li");
    b.appendChild(g);
    e = Entry.createElement("a");
    g.appendChild(e);
    e.bindOnClick(function() {
      var b = !Entry.playground.object.entity.getStrike() || !1;
      Entry.playground.object.entity.setStrike(b);
      n.src = Entry.mediaFilePath + "text_button_strike_" + b + ".png";
    });
    var n = Entry.createElement("img", "entryPlaygroundText_strikeImage");
    e.appendChild(n);
    n.src = Entry.mediaFilePath + "text_button_strike_false.png";
    e = Entry.createElement("li");
    b.appendChild(e);
    g = Entry.createElement("a");
    e.appendChild(g);
    g.bindOnClick(function() {
      Entry.playground.toggleColourChooser("foreground");
    });
    e = Entry.createElement("img");
    g.appendChild(e);
    e.src = Entry.mediaFilePath + "text_button_color_false.png";
    e = Entry.createElement("li");
    b.appendChild(e);
    b = Entry.createElement("a");
    e.appendChild(b);
    b.bindOnClick(function() {
      Entry.playground.toggleColourChooser("background");
    });
    e = Entry.createElement("img");
    b.appendChild(e);
    e.src = Entry.mediaFilePath + "text_button_background_false.png";
    e = Entry.createElement("div");
    e.addClass("entryPlayground_fgColorDiv");
    h = Entry.createElement("div");
    h.addClass("entryPlayground_bgColorDiv");
    g.appendChild(e);
    b.appendChild(h);
    h = Entry.createElement("div");
    h.addClass("entryPlaygroundTextColoursWrapper");
    this.coloursWrapper = h;
    g.appendChild(h);
    k = Entry.getColourCodes();
    for (g = 0; g < k.length; g++) {
      e = Entry.createElement("div"), e.addClass("modal_colour"), e.setAttribute("colour", k[g]), e.style.backgroundColor = k[g], 0 === g && e.addClass("modalColourTrans"), e.bindOnClick(function(b) {
        Entry.playground.setTextColour(b.target.getAttribute("colour"));
      }), h.appendChild(e);
    }
    h.style.display = "none";
    h = Entry.createElement("div");
    h.addClass("entryPlaygroundTextBackgroundsWrapper");
    this.backgroundsWrapper = h;
    b.appendChild(h);
    for (g = 0; g < k.length; g++) {
      e = Entry.createElement("div"), e.addClass("modal_colour"), e.setAttribute("colour", k[g]), e.style.backgroundColor = k[g], 0 === g && e.addClass("modalColourTrans"), e.bindOnClick(function(b) {
        Entry.playground.setBackgroundColour(b.target.getAttribute("colour"));
      }), h.appendChild(e);
    }
    h.style.display = "none";
    var r = Entry.createElement("input");
    r.addClass("entryPlayground_textBox");
    b = function() {
      var b = Entry.getElementsByClassName("entryPlaygroundPainterAttrFontName")[0];
      "Nanum Pen Script" != b.value && "Jeju Hallasan" != b.value || null == /[\u4E00-\u9FFF]/.exec(this.value) || (b.value = "KoPub Batang", Entry.playground.object.entity.setFontType("KoPub Batang"), entrylms.alert(Lang.Menus.not_supported_text));
      Entry.playground.object.setText(this.value);
      Entry.playground.object.entity.setText(this.value);
    };
    r.onkeyup = b;
    r.onchange = b;
    r.addEventListener("focusin", function() {
      r.prevText = r.value;
    });
    r.onblur = function() {
      r.value !== r.prevText && Entry.do("editText", r.value, r.prevText);
    };
    this.textEditInput = r;
    c.appendChild(r);
    var t = Entry.createElement("textarea");
    t.addClass("entryPlayground_textArea");
    t.style.display = "none";
    t.onkeyup = b;
    t.onchange = b;
    t.addEventListener("focusin", function() {
      t.prevText = t.value;
    });
    t.onblur = function() {
      t.value !== t.prevText && Entry.do("editText", t.value, t.prevText);
    };
    this.textEditArea = t;
    c.appendChild(t);
    b = Entry.createElement("div");
    b.addClass("entryPlaygroundFontSizeWrapper");
    c.appendChild(b);
    this.fontSizeWrapper = b;
    var u = Entry.createElement("div");
    u.addClass("entryPlaygroundFontSizeSlider");
    b.appendChild(u);
    var x = Entry.createElement("div");
    x.addClass("entryPlaygroundFontSizeIndicator");
    u.appendChild(x);
    this.fontSizeIndiciator = x;
    var v = Entry.createElement("div");
    v.addClass("entryPlaygroundFontSizeKnob");
    u.appendChild(v);
    this.fontSizeKnob = v;
    g = Entry.createElement("div");
    g.addClass("entryPlaygroundFontSizeLabel");
    g.innerHTML = Lang.General.font_size;
    b.appendChild(g);
    var y = !1, A = 0;
    v.onmousedown = function(b) {
      y = !0;
      A = $(u).offset().left;
    };
    v.addEventListener("touchstart", function(b) {
      y = !0;
      A = $(u).offset().left;
    });
    document.addEventListener("mousemove", function(b) {
      y && (b = b.pageX - A, b = Math.max(b, 5), b = Math.min(b, 88), v.style.left = b + "px", b /= 0.88, x.style.width = b + "%", Entry.playground.object.entity.setFontSize(b));
    });
    document.addEventListener("touchmove", function(b) {
      y && (b = b.touches[0].pageX - A, b = Math.max(b, 5), b = Math.min(b, 88), v.style.left = b + "px", b /= 0.88, x.style.width = b + "%", Entry.playground.object.entity.setFontSize(b));
    });
    document.addEventListener("mouseup", function(b) {
      y = !1;
    });
    document.addEventListener("touchend", function(b) {
      y = !1;
    });
    b = Entry.createElement("div");
    b.addClass("entryPlaygroundLinebreakWrapper");
    c.appendChild(b);
    c = Entry.createElement("hr");
    c.addClass("entryPlaygroundLinebreakHorizontal");
    b.appendChild(c);
    c = Entry.createElement("div");
    c.addClass("entryPlaygroundLinebreakButtons");
    b.appendChild(c);
    g = Entry.createElement("img");
    g.bindOnClick(function() {
      Entry.playground.toggleLineBreak(!1);
      B.innerHTML = Lang.Menus.linebreak_off_desc_1;
      C.innerHTML = Lang.Menus.linebreak_off_desc_2;
      z.innerHTML = Lang.Menus.linebreak_off_desc_3;
    });
    g.src = Entry.mediaFilePath + "text-linebreak-off-true.png";
    c.appendChild(g);
    this.linebreakOffImage = g;
    g = Entry.createElement("img");
    g.bindOnClick(function() {
      Entry.playground.toggleLineBreak(!0);
      B.innerHTML = Lang.Menus.linebreak_on_desc_1;
      C.innerHTML = Lang.Menus.linebreak_on_desc_2;
      z.innerHTML = Lang.Menus.linebreak_on_desc_3;
    });
    g.src = Entry.mediaFilePath + "text-linebreak-on-false.png";
    c.appendChild(g);
    this.linebreakOnImage = g;
    c = Entry.createElement("div");
    c.addClass("entryPlaygroundLinebreakDescription");
    b.appendChild(c);
    var B = Entry.createElement("p");
    B.innerHTML = Lang.Menus.linebreak_off_desc_1;
    c.appendChild(B);
    b = Entry.createElement("ul");
    c.appendChild(b);
    var C = Entry.createElement("li");
    C.innerHTML = Lang.Menus.linebreak_off_desc_2;
    b.appendChild(C);
    var z = Entry.createElement("li");
    z.innerHTML = Lang.Menus.linebreak_off_desc_3;
    b.appendChild(z);
  };
  c.generateSoundView = function(b) {
    if ("workspace" == Entry.type) {
      var c = Entry.createElement("div", "entryAddSound");
      c.addClass("entryPlaygroundAddSound");
      c.bindOnClick(function(b) {
        !Entry.container || Entry.container.isSceneObjectsExist() ? Entry.do("playgroundClickAddSound") : Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.add_object_alert_msg);
      });
      var e = Entry.createElement("div", "entryAddSoundInner");
      e.addClass("entryPlaygroundAddSoundInner");
      e.innerHTML = Lang.Workspace.sound_add;
      c.appendChild(e);
      b.appendChild(c);
      c = Entry.createElement("ul", "entrySoundList");
      c.addClass("entryPlaygroundSoundList");
      $ && $(c).sortable({start:function(b, c) {
        c.item.data("start_pos", c.item.index());
      }, stop:function(b, c) {
        b = c.item.data("start_pos");
        c = c.item.index();
        Entry.playground.moveSound(b, c);
      }, axis:"y"});
      b.appendChild(c);
      this.soundListView_ = c;
      this._soundAddButton = e;
    } else {
      "phone" == Entry.type && (c = Entry.createElement("div", "entryAddSound"), c.addClass("entryPlaygroundAddSoundPhone"), c.bindOnClick(function(b) {
        Entry.dispatchEvent("openSoundManager");
      }), e = Entry.createElement("div", "entryAddSoundInner"), e.addClass("entryPlaygroundAddSoundInnerPhone"), e.innerHTML = Lang.Workspace.sound_add, c.appendChild(e), b.appendChild(c), c = Entry.createElement("ul", "entrySoundList"), c.addClass("entryPlaygroundSoundListPhone"), $ && $(c).sortable({start:function(b, c) {
        c.item.data("start_pos", c.item.index());
      }, stop:function(b, c) {
        b = c.item.data("start_pos");
        c = c.item.index();
        Entry.playground.moveSound(b, c);
      }, axis:"y"}), b.appendChild(c), this.soundListView_ = c);
    }
  };
  c.injectObject = function(b) {
    if (!b) {
      this.changeViewMode("code"), this.object = null;
    } else {
      if (b !== this.object) {
        this.object && this.object.toggleInformation(!1);
        this.object = b;
        this.setMenu(b.objectType);
        this.injectCode();
        "sprite" == b.objectType && Entry.pictureEditable ? (this.tabViewElements.text && this.tabViewElements.text.addClass("entryRemove"), this.tabViewElements.picture && this.tabViewElements.picture.removeClass("entryRemove")) : "textBox" == b.objectType && (this.tabViewElements.picture && this.tabViewElements.picture.addClass("entryRemove"), this.tabViewElements.text && this.tabViewElements.text.removeClass("entryRemove"));
        var c = this.viewMode_;
        "default" == c ? this.changeViewMode("code") : "variable" == c ? this.changeViewMode("variable") : "picture" != c && "text" != c || "textBox" != b.objectType ? "text" != c && "picture" != c || "sprite" != b.objectType ? "sound" == c && this.changeViewMode("sound") : this.changeViewMode("picture") : this.changeViewMode("text");
        this.reloadPlayground();
      }
    }
  };
  c.injectCode = function() {
    var b = Entry.getMainWS();
    if (b) {
      var c = this.object, e = b.vimBoard;
      e && Entry.textCodingEnable && !e._parser._onError && (e._changedObject = c, e._currentScene = c.scene);
      var e = b.getBoard(), f = Entry.engine, e = f && f.isState("run") ? void 0 : e.adjustThreadsPosition.bind(e);
      b.changeBoardCode(c.script, e);
    }
  };
  c.injectPicture = function() {
    var b = this.pictureListView_;
    if (b) {
      for (; b.hasChildNodes();) {
        b.removeChild(b.lastChild);
      }
      if (this.object) {
        for (var c = this.object.pictures, e = 0, f = c.length; e < f; e++) {
          var g = c[e];
          !g.view && Entry.playground.generatePictureElement(g);
          g = c[e].view;
          g.orderHolder.innerHTML = e + 1;
          b.appendChild(g);
        }
        this.selectPicture(this.object.selectedPicture);
      } else {
        Entry.dispatchEvent("pictureClear");
      }
    }
  };
  c.addPicture = function(b, c) {
    b = Entry.cloneSimpleObject(b);
    !0 === c && delete b.id;
    delete b.view;
    b = Entry.Utils.copy(b);
    b.id || (b.id = Entry.generateHash());
    b.name = Entry.getOrderedName(b.name, this.object.pictures);
    this.generatePictureElement(b);
    Entry.do("objectAddPicture", b.objectId || this.object.id, b);
    this.injectPicture();
    this.selectPicture(b);
  };
  c.setPicture = function(b) {
    var c = Entry.container.getPictureElement(b.id, b.objectId), e = $(c);
    if (c) {
      b.view = c;
      c.picture = b;
      c = e.find("#t_" + b.id)[0];
      if (b.fileurl) {
        c.style.backgroundImage = 'url("' + b.fileurl + '")';
      } else {
        var f = b.filename;
        c.style.backgroundImage = 'url("' + Entry.defaultPath + "/uploads/" + f.substring(0, 2) + "/" + f.substring(2, 4) + "/thumb/" + f + '.png")';
      }
      e.find("#s_" + b.id)[0].innerHTML = b.dimension.width + " X " + b.dimension.height;
    }
    Entry.container.setPicture(b);
  };
  c.downloadPicture = function(b) {
    b = Entry.playground.object.getPicture(b);
    b.fileurl ? window.open("/api/sprite/download/entryjs/" + encodeURIComponent(b.fileurl) + "/" + encodeURIComponent(b.name) + ".png") : window.open("/api/sprite/download/image/" + encodeURIComponent(b.filename) + "/" + encodeURIComponent(b.name) + ".png");
  };
  c.clonePicture = function(b) {
    b = Entry.playground.object.getPicture(b);
    this.addPicture(b, !0);
  };
  c.selectPicture = function(b) {
    for (var c = this.object.pictures, e = 0, f = c.length; e < f; e++) {
      var g = c[e], h = g.view;
      g.id === b.id ? h.addClass("entryPictureSelected") : h.removeClass("entryPictureSelected");
    }
    var k;
    b && b.id && (k = Entry.container.selectPicture(b.id, b.objectId));
    this.object.id === k && (b.objectId || (b.objectId = this.object.id), Entry.dispatchEvent("pictureSelected", b));
  };
  c.movePicture = function(b, c) {
    this.object.pictures.splice(c, 0, this.object.pictures.splice(b, 1)[0]);
    this.injectPicture();
    Entry.stage.sortZorder();
  };
  c.injectText = function() {
    if (Entry.playground.object) {
      Entry.playground.textEditInput.value = Entry.playground.object.entity.getText();
      Entry.playground.textEditArea.value = Entry.playground.object.entity.getText();
      $("#entryPainterAttrFontName").val(Entry.playground.object.entity.getFontName());
      if (Entry.playground.object.entity.font) {
        var b = -1 < Entry.playground.object.entity.font.indexOf("bold") || !1;
        $("#entryPlaygroundText_boldImage").attr("src", Entry.mediaFilePath + "text_button_bold_" + b + ".png");
        b = -1 < Entry.playground.object.entity.font.indexOf("italic") || !1;
        $("#entryPlaygroundText_italicImage").attr("src", Entry.mediaFilePath + "text_button_italic_" + b + ".png");
      }
      b = Entry.playground.object.entity.getUnderLine() || !1;
      $("#entryPlaygroundText_underlineImage").attr("src", Entry.mediaFilePath + "text_button_underline_" + b + ".png");
      b = Entry.playground.object.entity.getStrike() || !1;
      $("#entryPlaygroundText_strikeImage").attr("src", Entry.mediaFilePath + "text_button_strike_" + b + ".png");
      $(".entryPlayground_fgColorDiv").css("backgroundColor", Entry.playground.object.entity.colour);
      $(".entryPlayground_bgColorDiv").css("backgroundColor", Entry.playground.object.entity.bgColour);
      Entry.playground.toggleLineBreak(Entry.playground.object.entity.getLineBreak());
      Entry.playground.object.entity.getLineBreak() && ($(".entryPlaygroundLinebreakDescription > p").html(Lang.Menus.linebreak_on_desc_1), $(".entryPlaygroundLinebreakDescription > ul > li").eq(0).html(Lang.Menus.linebreak_on_desc_2), $(".entryPlaygroundLinebreakDescription > ul > li").eq(1).html(Lang.Menus.linebreak_on_desc_3));
      Entry.playground.setFontAlign(Entry.playground.object.entity.getTextAlign());
      b = Entry.playground.object.entity.getFontSize();
      Entry.playground.fontSizeIndiciator.style.width = b + "%";
      Entry.playground.fontSizeKnob.style.left = 0.88 * b + "px";
    }
  };
  c.injectSound = function() {
    var b = this.soundListView_;
    if (b) {
      for (; b.hasChildNodes();) {
        b.removeChild(b.lastChild);
      }
      if (this.object) {
        for (var c = this.object.sounds, e = 0, f = c.length; e < f; e++) {
          var g = c[e];
          !g.view && Entry.playground.generateSoundElement(g);
          g = g.view;
          g.orderHolder.innerHTML = e + 1;
          b.appendChild(g);
        }
      }
    }
  };
  c.moveSound = function(b, c) {
    this.object.sounds.splice(c, 0, this.object.sounds.splice(b, 1)[0]);
    this.updateListViewOrder("sound");
    Entry.stage.sortZorder();
  };
  c.addSound = function(b, c, e) {
    b = Entry.cloneSimpleObject(b);
    delete b.view;
    !0 === e && delete b.id;
    b = Entry.Utils.copy(b);
    b.id || (b.id = Entry.generateHash());
    b.name = Entry.getOrderedName(b.name, this.object.sounds);
    this.generateSoundElement(b);
    Entry.do("objectAddSound", this.object.id, b);
    this.injectSound();
  };
  c.downloadSound = function(b) {
    b = Entry.playground.object.getSound(b);
    b.fileurl ? -1 < b.fileurl.indexOf("bark.mp3") ? window.open("/api/sprite/download/entryjs/" + encodeURIComponent(b.fileurl) + "/" + encodeURIComponent(b.name + ".mp3")) : window.open(b.fileurl) : window.open("/api/sprite/download/sound/" + encodeURIComponent(b.filename) + "/" + encodeURIComponent(b.name));
  };
  c.changeViewMode = function(b) {
    for (var c in this.tabViewElements) {
      this.tabViewElements[c].removeClass("entryTabSelected");
    }
    "default" != b && this.tabViewElements[b].addClass("entryTabSelected");
    if ("variable" == b) {
      Entry.playground.toggleOnVariableView(), this.tabViewElements.code.removeClass("entryTabSelected"), this.tabViewElements[b].addClass("entryTabSelected");
    } else {
      var e = this.view_.children;
      for (c = 0; c < e.length; c++) {
        var f = e[c];
        -1 < f.id.toUpperCase().indexOf(b.toUpperCase()) ? f.removeClass("entryRemove") : f.addClass("entryRemove");
      }
      Entry.pictureEditable && ("picture" == b ? (this.painter.show(), this.pictureView_.object && this.pictureView_.object == this.object) ? this.object && this.pictureListView_ && !this.pictureListView_.hasChildNodes() && (c = this.object.pictures) && c.length && this.injectPicture() : (this.pictureView_.object = this.object, this.injectPicture()) : this.painter.hide());
      "sound" == b && (this.soundView_.object && this.soundView_.object == this.object ? this.object && this.soundListView_ && !this.soundListView_.hasChildNodes() && (c = this.object.sounds) && c.length && this.injectSound() : (this.soundView_.object = this.object, this.injectSound()));
      if ("text" == b && "textBox" == this.object.objectType || this.textView_.object != this.object) {
        this.textView_.object = this.object, this.injectText();
      }
      "code" == b && (this.resizeHandle_ && this.resizeHandle_.removeClass("entryRemove"), this.blockMenu.reDraw());
      Entry.engine.isState("run") && this.curtainView_.removeClass("entryRemove");
      this.selectedViewMode = this.viewMode_ = b;
      this.toggleOffVariableView();
    }
  };
  c.createVariableView = function() {
    var b = Entry.createElement("div");
    Entry.type && "workspace" != Entry.type ? "phone" == Entry.type && b.addClass("entryVariablePanelPhone") : b.addClass("entryVariablePanelWorkspace");
    this.variableViewWrapper_ = b;
    Entry.variableContainer.createDom(b);
    return b;
  };
  c.toggleOnVariableView = function() {
    Entry.playground.changeViewMode("code");
    this.hideBlockMenu();
    Entry.variableContainer.updateList();
    this.variableView_.removeClass("entryRemove");
    this.resizeHandle_.removeClass("entryRemove");
    this.selectedViewMode = this.viewMode_ = "variable";
  };
  c.toggleOffVariableView = function() {
    this.showBlockMenu();
    this.variableView_.addClass("entryRemove");
  };
  c.editBlock = function() {
    var b = Entry.playground;
    Entry.stateManager && Entry.stateManager.addCommand("edit block", b, b.restoreBlock, b.object, b.object.getScriptText());
  };
  c.mouseupBlock = function() {
    if (Entry.reporter) {
      var b = Entry.playground, c = b.object;
      Entry.reporter.report(new Entry.State("edit block mouseup", b, b.restoreBlock, c, c.getScriptText()));
    }
  };
  c.restoreBlock = function(b, c) {
    Entry.container.selectObject(b.id);
    Entry.stateManager && Entry.stateManager.addCommand("restore block", this, this.restoreBlock, this.object, this.object.getScriptText());
    Blockly.Xml.textToDom(c);
  };
  c.setMenu = function(b) {
    if (this.currentObjectType != b) {
      var c = this.blockMenu;
      c.unbanClass(this.currentObjectType, !0);
      c.banClass(b, !0);
      c.setMenu(!0);
      this.currentObjectType = b;
    }
  };
  c.hideTabs = function() {
    var b = ["picture", "text", "sound", "variable"], c;
    for (c in b) {
      this.hideTab([b[c]]);
    }
  };
  c.hideTab = function(b) {
    this.tabViewElements[b] && (this.tabViewElements[b].addClass("hideTab"), this.tabViewElements[b].removeClass("showTab"));
  };
  c.showTabs = function() {
    var b = ["picture", "text", "sound", "variable"], c;
    for (c in b) {
      this.showTab(b[c]);
    }
  };
  c.showTab = function(b) {
    this.tabViewElements[b] && (this.tabViewElements[b].addClass("showTab"), this.tabViewElements[b].removeClass("hideTab"));
  };
  c.initializeResizeHandle = function(b) {
    $(b).bind("mousedown touchstart", function(b) {
      Entry.playground.resizing = !0;
      Entry.documentMousemove && (Entry.playground.resizeEvent = Entry.documentMousemove.attach(this, function(b) {
        Entry.playground.resizing && Entry.resizeElement({menuWidth:b.clientX - Entry.interfaceState.canvasWidth});
      }));
    });
    $(document).bind("mouseup touchend", function(b) {
      if (b = Entry.playground.resizeEvent) {
        Entry.playground.resizing = !1, Entry.documentMousemove.detach(b), delete Entry.playground.resizeEvent;
      }
    });
  };
  c.reloadPlayground = function() {
    var b = Entry.engine;
    if (!b || !b.isState("run")) {
      if (b = this.mainWorkspace) {
        b.getBoard().reDraw(), b.getBlockMenu().reDraw();
      }
    }
  };
  c.flushPlayground = function() {
    this.object = null;
    if (Entry.playground && Entry.playground.view_) {
      this.injectPicture();
      this.injectSound();
      var b = Entry.playground.mainWorkspace.getBoard();
      b.clear();
      b.changeCode(null);
    }
  };
  c.refreshPlayground = function() {
    Entry.playground && Entry.playground.view_ && ("picture" === this.getViewMode() && this.injectPicture(), "sound" === this.getViewMode() && this.injectSound());
  };
  c.updateListViewOrder = function(b) {
    b = "picture" == b ? this.pictureListView_.childNodes : this.soundListView_.childNodes;
    for (var c = 0, e = b.length; c < e; c++) {
      b[c].orderHolder.innerHTML = c + 1;
    }
  };
  c.generatePictureElement = function(b) {
    function c() {
      if ("" === this.value.trim()) {
        Entry.deAttachEventListener(this, "blur", c), entrylms.alert(Lang.Workspace.enter_the_name), this.focus(), Entry.attachEventListener(this, "blur", c);
      } else {
        for (var b = $(".entryPlaygroundPictureName"), d = 0; d < b.length; d++) {
          if (b.eq(d).val() == h.value && b[d] != this) {
            Entry.deAttachEventListener(this, "blur", c);
            entrylms.alert(Lang.Workspace.name_already_exists);
            this.focus();
            Entry.attachEventListener(this, "blur", c);
            return;
          }
        }
        b = this.value;
        this.picture.name = b;
        if (d = Entry.playground) {
          if (d.object) {
            var e = d.object.getPicture(this.picture.id);
            e && (e.name = b);
          }
          (e = d.painter) && e.file && (e.file.name = b);
          d.reloadPlayground();
        }
        Entry.dispatchEvent("pictureNameChanged", this.picture);
      }
    }
    var e = Entry.createElement("li", b.id);
    b.view = e;
    e.addClass("entryPlaygroundPictureElement");
    e.picture = b;
    e.bindOnClick(function(b) {
      Entry.playground.selectPicture(this.picture);
    });
    Entry.Utils.disableContextmenu(b.view);
    Entry.ContextMenu.onContextmenu($(b.view), function() {
      Entry.ContextMenu.show([{text:Lang.Workspace.context_rename, callback:function() {
        h.focus();
      }}, {text:Lang.Workspace.context_duplicate, callback:function() {
        Entry.playground.clonePicture(b.id);
      }}, {text:Lang.Workspace.context_remove, callback:function() {
        Entry.playground.object.removePicture(b.id) ? (Entry.removeElement(e), Entry.dispatchEvent("removePicture", b), Entry.toast.success(Lang.Workspace.shape_remove_ok, b.name + " " + Lang.Workspace.shape_remove_ok_msg)) : Entry.toast.alert(Lang.Workspace.shape_remove_fail, Lang.Workspace.shape_remove_fail_msg);
      }}, {divider:!0}, {text:Lang.Workspace.context_download, callback:function() {
        Entry.playground.downloadPicture(b.id);
      }}], "workspace-contextmenu");
    });
    var f = Entry.createElement("div");
    f.addClass("entryPlaygroundPictureOrder");
    e.orderHolder = f;
    e.appendChild(f);
    f = Entry.createElement("div", "t_" + b.id);
    f.addClass("entryPlaygroundPictureThumbnail");
    if (b.fileurl) {
      f.style.backgroundImage = 'url("' + b.fileurl + '")';
    } else {
      var g = b.filename;
      f.style.backgroundImage = 'url("' + Entry.defaultPath + "/uploads/" + g.substring(0, 2) + "/" + g.substring(2, 4) + "/thumb/" + g + '.png")';
    }
    e.appendChild(f);
    var h = Entry.createElement("input");
    h.addClass("entryPlaygroundPictureName");
    h.addClass("entryEllipsis");
    h.picture = b;
    h.value = b.name;
    Entry.attachEventListener(h, "blur", c);
    h.onkeypress = function(b) {
      13 == b.keyCode && this.blur();
    };
    e.appendChild(h);
    f = Entry.createElement("div", "s_" + b.id);
    f.addClass("entryPlaygroundPictureSize");
    f.innerHTML = b.dimension.width + " X " + b.dimension.height;
    e.appendChild(f);
  };
  c.generateSoundElement = function(b) {
    function c() {
      if ("" === this.value.trim()) {
        Entry.deAttachEventListener(this, "blur", c), entrylms.alert(Lang.Workspace.enter_the_name), this.focus(), Entry.attachEventListener(this, "blur", c);
      } else {
        for (var b = $(".entryPlaygroundSoundName"), d = 0; d < b.length; d++) {
          if (b.eq(d).val() == l.value && b[d] != this) {
            Entry.deAttachEventListener(this, "blur", c);
            entrylms.alert(Lang.Workspace.name_already_exists);
            this.focus();
            Entry.attachEventListener(this, "blur", c);
            return;
          }
        }
        this.sound.name = this.value;
        Entry.playground.reloadPlayground();
      }
    }
    var e = Entry.createElement("sound", b.id);
    b.view = e;
    e.addClass("entryPlaygroundSoundElement");
    e.sound = b;
    Entry.Utils.disableContextmenu(b.view);
    Entry.ContextMenu.onContextmenu($(b.view), function() {
      Entry.ContextMenu.show([{text:Lang.Workspace.context_rename, callback:function() {
        l.focus();
      }}, {text:Lang.Workspace.context_duplicate, callback:function() {
        Entry.playground.addSound(b, !0, !0);
      }}, {text:Lang.Workspace.context_remove, callback:function() {
        Entry.do("objectRemoveSound", Entry.playground.object.id, b) ? (Entry.removeElement(e), Entry.dispatchEvent("removeSound", b), Entry.toast.success(Lang.Workspace.sound_remove_ok, b.name + " " + Lang.Workspace.sound_remove_ok_msg)) : Entry.toast.alert(Lang.Workspace.sound_remove_fail, "");
        Entry.removeElement(e);
      }}, {divider:!0}, {text:Lang.Workspace.context_download, callback:function() {
        Entry.playground.downloadSound(b.id);
      }}], "workspace-contextmenu");
    });
    var f = Entry.createElement("div");
    f.addClass("entryPlaygroundSoundOrder");
    e.orderHolder = f;
    e.appendChild(f);
    var g = Entry.createElement("div");
    g.addClass("entryPlaygroundSoundThumbnail");
    g.addClass("entryPlaygroundSoundPlay");
    var h = !1, k;
    g.addEventListener("click", function() {
      h ? (h = !1, g.removeClass("entryPlaygroundSoundStop"), g.addClass("entryPlaygroundSoundPlay"), k.stop()) : (h = !0, g.removeClass("entryPlaygroundSoundPlay"), g.addClass("entryPlaygroundSoundStop"), k = createjs.Sound.play(b.id), k.addEventListener("complete", function(b) {
        g.removeClass("entryPlaygroundSoundStop");
        g.addClass("entryPlaygroundSoundPlay");
        h = !1;
      }), k.addEventListener("loop", function(b) {
      }), k.addEventListener("failed", function(b) {
      }));
    });
    e.appendChild(g);
    var l = Entry.createElement("input");
    l.addClass("entryPlaygroundSoundName");
    l.sound = b;
    l.value = b.name;
    Entry.attachEventListener(l, "blur", c);
    l.onkeypress = function(b) {
      13 == b.keyCode && this.blur();
    };
    e.appendChild(l);
    f = Entry.createElement("div");
    f.addClass("entryPlaygroundSoundLength");
    f.innerHTML = b.duration + " " + Lang.General.second;
    e.appendChild(f);
  };
  c.toggleColourChooser = function(b) {
    "foreground" === b ? "none" === this.coloursWrapper.style.display ? (this.coloursWrapper.style.display = "block", this.backgroundsWrapper.style.display = "none") : this.coloursWrapper.style.display = "none" : "background" === b && ("none" === this.backgroundsWrapper.style.display ? (this.backgroundsWrapper.style.display = "block", this.coloursWrapper.style.display = "none") : this.backgroundsWrapper.style.display = "none");
  };
  c.setTextColour = function(b) {
    Entry.playground.object.entity.setColour(b);
    Entry.playground.toggleColourChooser("foreground");
    $(".entryPlayground_fgColorDiv").css("backgroundColor", b);
  };
  c.setBackgroundColour = function(b) {
    Entry.playground.object.entity.setBGColour(b);
    Entry.playground.toggleColourChooser("background");
    $(".entryPlayground_bgColorDiv").css("backgroundColor", b);
  };
  c.isTextBGMode = function() {
    return this.isTextBGMode_;
  };
  c.checkVariables = function() {
    Entry.forEBS || (Entry.variableContainer.lists_.length ? this.blockMenu.unbanClass("listNotExist") : this.blockMenu.banClass("listNotExist"), Entry.variableContainer.variables_.length ? this.blockMenu.unbanClass("variableNotExist") : this.blockMenu.banClass("variableNotExist"));
  };
  c.getViewMode = function() {
    return this.viewMode_;
  };
  c.updateHW = function() {
    var b = Entry.playground.mainWorkspace;
    if (b && (b = b.blockMenu)) {
      var c = Entry.hw;
      c && c.connected ? (b.banClass("arduinoDisconnected", !0), c.banHW(), c.hwModule ? (b.banClass("arduinoConnect", !0), b.unbanClass("arduinoConnected", !0), b.unbanClass(c.hwModule.name)) : (b.banClass("arduinoConnected", !0), b.unbanClass("arduinoConnect", !0))) : (b.banClass("arduinoConnected", !0), b.banClass("arduinoConnect", !0), b.unbanClass("arduinoDisconnected", !0), Entry.hw.banHW());
      b.hwCodeOutdated = !0;
      b.reDraw();
    }
  };
  c.toggleLineBreak = function(b) {
    this.object && "textBox" == this.object.objectType && (b ? (Entry.playground.object.entity.setLineBreak(!0), $(".entryPlayground_textArea").css("display", "block"), $(".entryPlayground_textBox").css("display", "none"), this.linebreakOffImage.src = Entry.mediaFilePath + "text-linebreak-off-false.png", this.linebreakOnImage.src = Entry.mediaFilePath + "text-linebreak-on-true.png", this.fontSizeWrapper.removeClass("entryHide")) : (Entry.playground.object.entity.setLineBreak(!1), $(".entryPlayground_textArea").css("display", 
    "none"), $(".entryPlayground_textBox").css("display", "block"), this.linebreakOffImage.src = Entry.mediaFilePath + "text-linebreak-off-true.png", this.linebreakOnImage.src = Entry.mediaFilePath + "text-linebreak-on-false.png", this.fontSizeWrapper.addClass("entryHide")));
  };
  c.setFontAlign = function(b) {
    if ("textBox" == this.object.objectType) {
      this.alignLeftBtn.removeClass("toggle");
      this.alignCenterBtn.removeClass("toggle");
      this.alignRightBtn.removeClass("toggle");
      switch(b) {
        case Entry.TEXT_ALIGN_LEFT:
          this.alignLeftBtn.addClass("toggle");
          break;
        case Entry.TEXT_ALIGN_CENTER:
          this.alignCenterBtn.addClass("toggle");
          break;
        case Entry.TEXT_ALIGN_RIGHT:
          this.alignRightBtn.addClass("toggle");
      }
      this.object.entity.setTextAlign(b);
    }
  };
  c.hideBlockMenu = function() {
    this.mainWorkspace.getBlockMenu().hide();
  };
  c.showBlockMenu = function() {
    this.mainWorkspace.getBlockMenu().show();
  };
  c.getDom = function(b) {
    if (1 <= b.length) {
      switch(b.shift()) {
        case "tabViewElements":
          return this.tabViewElements[b.shift()];
        case "blockMenu":
          return this.blockMenu.getDom(b);
        case "board":
          return this.board.getDom(b);
        case "pictureAddButton":
          return this._pictureAddButton;
        case "soundAddButton":
          return this._soundAddButton;
      }
    }
  };
  c.applyTabOption = function() {
    this.textboxTab.addClass("entryRemove");
    this.pictureTab.addClass("entryRemove");
    this.soundTab.addClass("entryRemove");
    this.variableTab.addClass("entryRemove");
    Entry.pictureEditable && (this.pictureTab.removeClass("entryRemove"), this.textboxTab.removeClass("entryRemove"));
    Entry.soundEditable && this.soundTab.removeClass("entryRemove");
    Entry.hasVariableManager && this.variableTab.removeClass("entryRemove");
  };
})(Entry.Playground.prototype);
Entry.Popup = function(c) {
  Entry.assert(!window.popup, "Popup exist");
  this.body_ = Entry.createElement("div");
  this.body_.addClass("entryPopup");
  c && this.body_.addClass(c);
  this.body_.bindOnClick(function(b) {
    b.target == this && this.popup.remove();
  });
  this.body_.popup = this;
  document.body.appendChild(this.body_);
  this.window_ = Entry.createElement("div");
  this.window_.addClass("entryPopupWindow");
  Entry.targetChecker && this.window_.addClass("targetCheckerPopup");
  "tablet" === Entry.device && this.window_.addClass("tablet");
  this.window_.bindOnClick(function() {
  });
  Entry.addEventListener("windowResized", this.resize);
  window.popup = this;
  this.resize();
  this.body_.appendChild(this.window_);
};
Entry.Popup.prototype.remove = function() {
  for (; this.window_.hasChildNodes();) {
    "workspace" == Entry.type ? Entry.view_.insertBefore(this.window_.firstChild, Entry.container.view_) : Entry.view_.insertBefore(this.window_.lastChild, Entry.view_.firstChild);
  }
  $("body").css("overflow", "auto");
  Entry.removeElement(this.body_);
  window.popup = null;
  Entry.removeEventListener("windowResized", this.resize);
  Entry.engine.popup = null;
  Entry.windowResized.notify();
  "workspace" === Entry.type && Entry.targetChecker && Entry.targetChecker.getStatusView().remove();
};
Entry.Popup.prototype.resize = function(c) {
  c = window.popup.window_;
  var b = Entry.targetChecker ? 126 : 35, d = 0.9 * window.innerWidth, e = 0.9 * window.innerHeight - b;
  9 * d <= 16 * e ? e = d / 16 * 9 + b : (d = 16 * e / 9, e += b);
  c.style.width = String(d) + "px";
  c.style.height = String(e) + "px";
  Entry.stage && Entry.stage.updateBoundRect();
};
Entry.Popup.prototype.removeMouseDispose = function(c) {
  this.body_.unBindOnClick();
};
Entry.popupHelper = function(c) {
  this.popupList = {};
  this.nextPopupList = [];
  this.nowContent;
  c && (window.popupHelper = null);
  Entry.assert(!window.popupHelper, "Popup exist");
  var b = ["confirm", "spinner"], d = ["entryPopupHelperTopSpan", "entryPopupHelperBottomSpan", "entryPopupHelperLeftSpan", "entryPopupHelperRightSpan"];
  this.body_ = Entry.Dom("div", {classes:["entryPopup", "hiddenPopup", "popupHelper"]});
  var e = this;
  this.body_.bindOnClick(function(c) {
    if (!(e.nowContent && -1 < b.indexOf(e.nowContent.prop("type")))) {
      var f = $(c.target);
      d.forEach(function(b) {
        f.hasClass(b) && e.hide();
      });
      c.target == e && e.hide();
    }
  });
  window.popupHelper = this;
  this.body_.prop("popup", this);
  Entry.Dom("div", {class:"entryPopupHelperTopSpan", parent:this.body_});
  c = Entry.Dom("div", {class:"entryPopupHelperMiddleSpan", parent:this.body_});
  Entry.Dom("div", {class:"entryPopupHelperBottomSpan", parent:this.body_});
  Entry.Dom("div", {class:"entryPopupHelperLeftSpan", parent:c});
  this.window_ = Entry.Dom("div", {class:"entryPopupHelperWindow", parent:c});
  Entry.Dom("div", {class:"entryPopupHelperRightSpan", parent:c});
  $("body").append(this.body_);
};
Entry.popupHelper.prototype.clearPopup = function() {
  for (var c = this.popupWrapper_.children.length - 1; 2 < c; c--) {
    this.popupWrapper_.removeChild(this.popupWrapper_.children[c]);
  }
};
Entry.popupHelper.prototype.addPopup = function(c, b) {
  var d = Entry.Dom("div"), e = Entry.Dom("div", {class:"entryPopupHelperCloseButton"});
  e.bindOnClick(function() {
    b.closeEvent ? b.closeEvent(this) : this.hide();
  }.bind(this));
  var f = Entry.Dom("div", {class:"entryPopupHelperWrapper"});
  f.append(e);
  b.title && (e = Entry.Dom("div", {class:"entryPopupHelperTitle"}), f.append(e), e.text(b.title));
  d.addClass(c);
  d.append(f);
  d.popupWrapper_ = f;
  d.prop("type", b.type);
  "function" === typeof b.setPopupLayout && b.setPopupLayout(d);
  d._obj = b;
  this.popupList[c] = d;
};
Entry.popupHelper.prototype.hasPopup = function(c) {
  return !!this.popupList[c];
};
Entry.popupHelper.prototype.setPopup = function(c) {
};
Entry.popupHelper.prototype.remove = function(c) {
  0 < this.window_.children().length && this.window_.children().remove();
  delete this.popupList[c];
  this.nowContent = void 0;
  this.body_.addClass("hiddenPopup");
  0 < this.nextPopupList.length && this.show(this.nextPopupList.shift());
};
Entry.popupHelper.prototype.resize = function(c) {
};
Entry.popupHelper.prototype.show = function(c, b) {
  function d(b) {
    e.window_.append(e.popupList[b]);
    e.nowContent = e.popupList[b];
    e.body_.removeClass("hiddenPopup");
  }
  var e = this;
  b ? 0 < this.window_.children().length ? this.nextPopupList.push(c) : (this.window_.children().detach(), d(c)) : (this.window_.children().detach(), d(c));
  if (this.nowContent && this.nowContent._obj && this.nowContent._obj.onShow) {
    this.nowContent._obj.onShow();
  }
};
Entry.popupHelper.prototype.hide = function() {
  this.nowContent = void 0;
  this.body_.addClass("hiddenPopup");
  this.window_.children().detach();
  0 < this.nextPopupList.length && this.show(this.nextPopupList.shift());
};
Entry.popupHelper.prototype.addClass = function(c) {
  c && this.body_.addClass(c);
};
Entry.PopupList = function(c) {
  this.view = c;
};
(function(c) {
  c.getView = function() {
    return this.view;
  };
  c.resize = function() {
  };
})(Entry.PopupList.prototype);
Entry.getStartProject = function(c) {
  return {category:"\uae30\ud0c0", scenes:[{name:Lang.Blocks.SCENE + " 1", id:"7dwq"}], variables:[{name:Lang.Workspace.Variable_Timer, id:"brih", visible:!1, value:"0", variableType:"timer", x:150, y:-70, array:[], object:null, isCloud:!1}, {name:Lang.Blocks.VARIABLE_get_canvas_input_value, id:"1vu8", visible:!1, value:"0", variableType:"answer", x:150, y:-100, array:[], object:null, isCloud:!1}], objects:[{id:"7y0y", name:"\uc5d4\ud2b8\ub9ac\ubd07", label:{ko:"\uc5d4\ud2b8\ub9ac\ubd07", en:"Entrybot"}, 
  script:[[{type:"when_run_button_click", x:40, y:50}, {type:"repeat_basic", statements:[[{type:"move_direction"}]]}]], selectedPictureId:"vx80", objectType:"sprite", rotateMethod:"free", scene:"7dwq", sprite:{sounds:[{duration:1.3000000000000000, ext:".mp3", id:"8el5", fileurl:c + "media/bark.mp3", name:"\uac15\uc544\uc9c0 \uc9d6\ub294\uc18c\ub9ac", label:{ko:"\uac15\uc544\uc9c0 \uc9d6\ub294\uc18c\ub9ac", en:"Doggi's Bark"}}], pictures:[{id:"vx80", fileurl:c + "media/entrybot1.png", name:Lang.Blocks.walking_entryBot + 
  "1", scale:100, dimension:{width:284, height:350}}, {id:"4t48", fileurl:c + "media/entrybot2.png", name:Lang.Blocks.walking_entryBot + "2", scale:100, dimension:{width:284, height:350}}]}, entity:{x:0, y:0, regX:142, regY:175, scaleX:0.3154574132492113, scaleY:0.3154574132492113, rotation:0, direction:90, width:284, height:350, visible:!0}, lock:!1, active:!0}], speed:60};
};
Entry.Reporter = function(c) {
  this.projectId = this.userId = null;
  this.isRealTime = c;
  this.activities = [];
};
Entry.Reporter.prototype.start = function(c, b, d) {
  this.isRealTime && (-1 < window.location.href.indexOf("localhost") ? this.io = io("localhost:7000") : this.io = io("play04.play-entry.com:7000"), this.io.emit("activity", {message:"start", userId:b, projectId:c, time:d}));
  this.userId = b;
  this.projectId = c;
};
Entry.Reporter.prototype.report = function(c) {
  if (!this.isRealTime || this.io) {
    var b = [], d;
    for (d in c.params) {
      var e = c.params[d];
      "object" !== typeof e ? b.push(e) : e.id && b.push(e.id);
    }
    c = {message:c.message, userId:this.userId, projectId:this.projectId, time:c.time, params:b};
    this.isRealTime ? this.io.emit("activity", c) : this.activities.push(c);
  }
};
Entry.Scene = function() {
  var c = this;
  this.scenes_ = [];
  this.selectedScene = null;
  this.maxCount = 20;
  $(window).on("resize", function(b) {
    c.resize();
  });
  c.disposeEvent = Entry.disposeEvent.attach(this, function(b) {
    var c = document.activeElement;
    b && c && c !== b.target && $(c).hasClass("entrySceneFieldWorkspace") && c.blur();
  });
};
Entry.Scene.prototype.generateView = function(c, b) {
  var d = this;
  this.view_ = c;
  this.view_.addClass("entryScene");
  b && "workspace" != b || (this.view_.addClass("entrySceneWorkspace"), $(this.view_).on("mousedown", function(b) {
    var c = $(this).offset(), e = $(window), h = b.pageX - c.left + e.scrollLeft();
    b = b.pageY - c.top + e.scrollTop();
    b = 40 - b;
    c = -40 / 55;
    e = $(d.selectedScene.view).find(".entrySceneRemoveButtonCoverWorkspace").offset().left;
    !(h < e || h > e + 55) && b > 40 + c * (h - e) && (h = d.getNextScene()) && (h = $(h.view), $(document).trigger("mouseup"), h.trigger("mousedown"));
  }), c = Entry.createElement("ul"), c.addClass("entrySceneListWorkspace"), Entry.sceneEditable && $ && $(c).sortable({start:function(b, c) {
    c.item.data("start_pos", c.item.index());
    $(c.item[0]).clone(!0);
  }, stop:function(b, c) {
    b = c.item.data("start_pos");
    c = c.item.index();
    Entry.scene.moveScene(b, c);
  }, axis:"x", tolerance:"pointer"}), this.view_.appendChild(c), this.listView_ = c, Entry.sceneEditable && (c = Entry.createElement("span"), c.addClass("entrySceneElementWorkspace"), c.addClass("entrySceneAddButtonWorkspace"), c.bindOnClick(function(b) {
    Entry.engine.isState("run") || Entry.scene.addScene();
  }), this.view_.appendChild(c), this.addButton_ = c));
};
Entry.Scene.prototype.generateElement = function(c) {
  var b = this, d = Entry.createElement("li", c.id);
  document.createDocumentFragment("div").appendChild(d);
  d.addClass("entrySceneElementWorkspace  entrySceneButtonWorkspace minValue");
  $(d).on("mousedown", function(b) {
    Entry.engine.isState("run") ? b.preventDefault() : Entry.scene.selectScene(c);
  });
  var e = Entry.createElement("input");
  e.addClass("entrySceneFieldWorkspace");
  e.value = c.name;
  Entry.sceneEditable || (e.disabled = "disabled");
  var f = Entry.createElement("span");
  f.addClass("entrySceneLeftWorkspace");
  d.appendChild(f);
  f = Entry.createElement("span");
  f.addClass("entrySceneInputCover");
  d.appendChild(f);
  c.inputWrapper = f;
  e.onkeyup = function(d) {
    d = d.keyCode;
    Entry.isArrowOrBackspace(d) || (c.name = this.value, 13 == d && this.blur(), 10 < this.value.length && (this.value = this.value.substring(0, 10), c.name = this.value, this.blur()), setTimeout(function() {
      b.resize();
    }, 0));
  };
  e.onblur = function(d) {
    e.value = this.value;
    c.name = this.value;
    b.resize();
  };
  f.appendChild(e);
  d.nameField = e;
  f = Entry.createElement("span");
  f.addClass("entrySceneRemoveButtonCoverWorkspace");
  d.appendChild(f);
  if (Entry.sceneEditable) {
    var g = Entry.createElement("button");
    g.addClass("entrySceneRemoveButtonWorkspace");
    g.scene = c;
    g.bindOnClick(function(b) {
      b.stopPropagation();
      Entry.engine.isState("run") || entrylms.confirm(Lang.Workspace.will_you_delete_scene).then(function(b) {
        !0 === b && Entry.scene.removeScene(this.scene);
      }.bind(this));
    });
    f.appendChild(g);
  }
  Entry.Utils.disableContextmenu(d);
  Entry.ContextMenu.onContextmenu($(d), function(b) {
    var d = [{text:Lang.Workspace.duplicate_scene, enable:Entry.engine.isState("stop") && !this.isMax(), callback:function() {
      Entry.scene.cloneScene(c);
    }}];
    Entry.ContextMenu.show(d, "workspace-contextmenu", b);
  }.bind(this));
  return c.view = d;
};
Entry.Scene.prototype.updateView = function() {
  if (!Entry.type || "workspace" == Entry.type) {
    for (var c = this.listView_, b = $(c).children().length; b < this.getScenes().length; b++) {
      c.appendChild(this.getScenes()[b].view);
    }
    this.addButton_ && (this.getScenes(), this.isMax() ? this.addButton_.addClass("entryRemove") : this.addButton_.removeClass("entryRemove"));
  }
  this.resize();
};
Entry.Scene.prototype.addScenes = function(c) {
  if ((this.scenes_ = c) && 0 !== c.length) {
    for (var b = 0, d = c.length; b < d; b++) {
      this.generateElement(c[b]);
    }
  } else {
    this.scenes_ = [], this.scenes_.push(this.createScene());
  }
  this.selectScene(this.getScenes()[0]);
};
Entry.Scene.prototype.addScene = function(c, b) {
  void 0 === c && (c = this.createScene());
  c.view || this.generateElement(c);
  b || "number" == typeof b ? this.getScenes().splice(b, 0, c) : this.getScenes().push(c);
  Entry.stage.objectContainers.push(Entry.stage.createObjectContainer(c));
  this.selectScene(c);
  this.updateView();
  Entry.creationChangedEvent && Entry.creationChangedEvent.notify();
  return c;
};
Entry.Scene.prototype.removeScene = function(c) {
  if (1 >= this.getScenes().length) {
    Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.Scene_delete_error, !1);
  } else {
    var b = this.getScenes().indexOf(this.getSceneById(c.id));
    this.getScenes().splice(b, 1);
    for (var b = Entry.container.getSceneObjects(c), d = 0; d < b.length; d++) {
      Entry.container.removeObject(b[d]);
    }
    Entry.stage.removeObjectContainer(c);
    $(c.view).remove();
    this.selectScene();
  }
};
Entry.Scene.prototype.selectScene = function(c) {
  c = c || this.getScenes()[0];
  var b = Entry.container;
  b.resetSceneDuringRun();
  if (!this.selectedScene || this.selectedScene.id != c.id) {
    var d = this.selectedScene;
    if (d) {
      d = d.view;
      d.removeClass("selectedScene");
      var e = document.activeElement;
      e === d.nameField && e.blur();
    }
    this.selectedScene = c;
    c.view.addClass("selectedScene");
    d = Entry.stage;
    e = Entry.playground;
    b.setCurrentObjects();
    d.selectObjectContainer(c);
    var f = b.getCurrentObjects()[0];
    if (f && "minimize" !== Entry.type) {
      b.selectObject(f.id), e.refreshPlayground();
    } else {
      if (Entry.isTextMode) {
        var g = (f = Entry.getMainWS()) && f.vimBoard;
        if (g) {
          var h = g._currentObject, k = g._currentScene, l = g._parser;
          try {
            c.id != k.id && f._syncTextCode();
          } catch (m) {
          }
          if (l._onError) {
            b.selectObject(h.id, !0);
            return;
          }
        }
        g && g.clearText();
      }
      d.selectObject(null);
      e.flushPlayground();
      Entry.variableContainer.updateList();
    }
    !b.listView_ && d.sortZorder();
    b.updateListView();
    this.updateView();
    Entry.requestUpdate = !0;
  }
};
Entry.Scene.prototype.toJSON = function() {
  for (var c = [], b = this.getScenes().length, d = 0; d < b; d++) {
    var e = this.getScenes()[d], f = e.view, g = e.inputWrapper;
    delete e.view;
    delete e.inputWrapper;
    c.push(JSON.parse(JSON.stringify(e)));
    e.view = f;
    e.inputWrapper = g;
  }
  return c;
};
Entry.Scene.prototype.moveScene = function(c, b) {
  this.getScenes().splice(b, 0, this.getScenes().splice(c, 1)[0]);
  Entry.container.updateObjectsOrder();
  Entry.stage.sortZorder();
  $(".entrySceneElementWorkspace").removeAttr("style");
};
Entry.Scene.prototype.getSceneById = function(c) {
  for (var b = this.getScenes(), d = 0; d < b.length; d++) {
    if (b[d].id == c) {
      return b[d];
    }
  }
  return !1;
};
Entry.Scene.prototype.getScenes = function() {
  return this.scenes_;
};
Entry.Scene.prototype.takeStartSceneSnapshot = function() {
  this.sceneBeforeRun = this.selectedScene;
};
Entry.Scene.prototype.loadStartSceneSnapshot = function() {
  this.selectScene(this.sceneBeforeRun);
  this.sceneBeforeRun = null;
};
Entry.Scene.prototype.createScene = function() {
  var c = Entry.getOrderedName(Lang.Blocks.SCENE + " ", this.scenes_, "name");
  /[0-9]/.test(c) || (c += "1");
  c = {name:c, id:Entry.generateHash()};
  this.generateElement(c);
  return c;
};
Entry.Scene.prototype.cloneScene = function(c) {
  if (this.isMax()) {
    Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.Scene_add_error, !1);
  } else {
    var b = {name:(Lang.Workspace.cloned_scene + c.name).substring(0, 10), id:Entry.generateHash()};
    this.generateElement(b);
    this.addScene(b);
    var d = Entry.container;
    c = d.getSceneObjects(c);
    try {
      var e = [], f = [];
      this.isSceneCloning = !0;
      for (var g = c.length - 1; 0 <= g; g--) {
        var h = c[g], k = d.addCloneObject(h, b.id);
        e.push(h.id);
        f.push(k.id);
      }
      d.adjustClonedValues(e, f);
      var l = Entry.getMainWS();
      l && l.board && l.board.reDraw();
      this._focusSceneNameField(b);
      this.isSceneCloning = !1;
    } catch (m) {
      console.log("error", m);
    }
  }
};
Entry.Scene.prototype.resize = function() {
  var c = this.getScenes(), b = this.selectedScene, d = c[0];
  if (0 !== c.length && d) {
    var e = $(d.view).offset().left;
    parseFloat($(b.view).css("margin-left"));
    var d = Math.floor($(this.view_).width() - e - 5), f = e + 15, e = 0, g = 0, h;
    for (h in c) {
      var k = c[h];
      var l = k.view;
      l.addClass("minValue");
      var m = l === this.selectedScene.view;
      var l = $(l), q = parseFloat(Entry.computeInputWidth(k.name)), n = 10 * q / 9;
      k === this.selectedScene && (e = n - q);
      $(k.inputWrapper).width(n + "px");
      k = l.width();
      m && (g = k);
      f += k + -40;
    }
    if (f > d) {
      for (h in k = c.length - 1, d = d - Math.round(g || $(b.view).width()) - 30.5 * k - e, d = Math.floor(d / k), c) {
        k = c[h], b.id != k.id ? (k.view.removeClass("minValue"), $(k.inputWrapper).width(d)) : k.view.addClass("minValue");
      }
    }
  }
};
Entry.Scene.prototype.getNextScene = function() {
  var c = this.getScenes();
  return c[c.indexOf(this.selectedScene) + 1];
};
Entry.Scene.prototype.isMax = function() {
  return this.scenes_.length >= this.maxCount;
};
Entry.Scene.prototype.clear = function() {
  this.scenes_.forEach(function(c) {
    Entry.stage.removeObjectContainer(c);
  });
  $(this.listView_).html("");
  this.scenes_ = [];
  this.selectedScene = null;
};
Entry.Scene.prototype._focusSceneNameField = function(c) {
  (c = c.view && c.view.nameField) && c.focus && c.focus();
};
Entry.Script = function(c) {
  this.entity = c;
};
p = Entry.Script.prototype;
p.init = function(c, b, d) {
  Entry.assert("BLOCK" == c.tagName.toUpperCase(), c.tagName);
  this.type = c.getAttribute("type");
  this.id = Number(c.getAttribute("id"));
  c.getElementsByTagName("mutation").length && c.getElementsByTagName("mutation")[0].hasAttribute("hashid") && (this.hashId = c.childNodes[0].getAttribute("hashid"));
  "REPEAT" == this.type.substr(0, 6).toUpperCase() && (this.isRepeat = !0);
  b instanceof Entry.Script && (this.previousScript = b, b.parentScript && (this.parentScript = b.parentScript));
  d instanceof Entry.Script && (this.parentScript = d);
  c = c.childNodes;
  for (b = 0; b < c.length; b++) {
    if (d = c[b], "NEXT" == d.tagName.toUpperCase()) {
      this.nextScript = new Entry.Script(this.entity), this.register && (this.nextScript.register = this.register), this.nextScript.init(c[b].childNodes[0], this);
    } else {
      if ("VALUE" == d.tagName.toUpperCase()) {
        this.values || (this.values = {});
        var e = new Entry.Script(this.entity);
        this.register && (e.register = this.register);
        e.init(d.childNodes[0]);
        this.values[d.getAttribute("name")] = e;
      } else {
        "FIELD" == d.tagName.toUpperCase() ? (this.fields || (this.fields = {}), this.fields[d.getAttribute("name")] = d.textContent) : "STATEMENT" == d.tagName.toUpperCase() && (this.statements || (this.statements = {}), e = new Entry.Script(this.entity), this.register && (e.register = this.register), e.init(d.childNodes[0], null, this), e.key = d.getAttribute("name"), this.statements[d.getAttribute("name")] = e);
      }
    }
  }
};
p.clone = function(c, b) {
  var d, e = new Entry.Script(c);
  e.id = this.id;
  e.type = this.type;
  e.isRepeat = this.isRepeat;
  if (this.parentScript && !this.previousScript && 2 != b) {
    for (e.parentScript = this.parentScript.clone(c), d = e.parentScript.statements[this.key] = e; d.nextScript;) {
      d = d.nextScript, d.parentScript = e.parentScript;
    }
  }
  this.nextScript && 1 != b && (e.nextScript = this.nextScript.clone(c, 0), e.nextScript.previousScript = this);
  this.previousScript && 0 !== b && (e.previousScript = this.previousScript.clone(c, 1), e.previousScript.previousScript = this);
  if (this.fields) {
    e.fields = {};
    for (var f in this.fields) {
      e.fields[f] = this.fields[f];
    }
  }
  if (this.values) {
    for (f in e.values = {}, this.values) {
      e.values[f] = this.values[f].clone(c);
    }
  }
  if (this.statements) {
    for (f in e.statements = {}, this.statements) {
      for (e.statements[f] = this.statements[f].clone(c, 2), d = e.statements[f], d.parentScript = e; d.nextScript;) {
        d = d.nextScript, d.parentScript = e;
      }
    }
  }
  return e;
};
p.getStatement = function(c) {
  return this.statements[c];
};
p.compute = function() {
};
p.getValue = function(c) {
  return this.values[c].run();
};
p.getNumberValue = function(c) {
  return Number(this.values[c].run());
};
p.getStringValue = function(c) {
  return String(this.values[c].run());
};
p.getBooleanValue = function(c) {
  return this.values[c].run() ? !0 : !1;
};
p.getField = function(c) {
  return this.fields[c];
};
p.getStringField = function(c) {
  return String(this.fields[c]);
};
p.getNumberField = function(c) {
  return Number(this.fields[c]);
};
p.callReturn = function() {
  return this.nextScript ? this.nextScript : this.parentScript ? this.parentScript : null;
};
p.run = function() {
  return Entry.block[this.type](this.entity, this);
};
Entry.Stage = function() {
  this.variables = {};
  this.background = new createjs.Shape;
  this.background.graphics.beginFill("#ffffff").drawRect(-480, -240, 960, 480);
  this.objectContainers = [];
  this.selectedObjectContainer = null;
  this.variableContainer = new createjs.Container;
  this.dialogContainer = new createjs.Container;
  this.selectedObject = null;
  this.isObjectClick = !1;
  this._entitySelectable = !0;
};
Entry.Stage.prototype.initStage = function(c) {
  this.canvas = new createjs.Stage(c.id);
  this.canvas.x = 320;
  this.canvas.y = 180;
  this.canvas.scaleX = this.canvas.scaleY = 2 / 1.5;
  createjs.Touch.enable(this.canvas);
  this.canvas.enableMouseOver(10);
  this.canvas.mouseMoveOutside = !0;
  this.canvas.addChild(this.background);
  this.canvas.addChild(this.variableContainer);
  this.canvas.addChild(this.dialogContainer);
  this.inputField = null;
  this.initCoordinator();
  this.initHandle();
  this.mouseCoordinate = {x:0, y:0};
  if (Entry.isPhone()) {
    c.ontouchstart = function(b) {
      Entry.dispatchEvent("canvasClick", b);
      Entry.stage.isClick = !0;
    }, c.ontouchend = function(b) {
      Entry.stage.isClick = !1;
      Entry.dispatchEvent("canvasClickCanceled", b);
    };
  } else {
    var b = function(b) {
      Entry.dispatchEvent("canvasClick", b);
      Entry.stage.isClick = !0;
    };
    c.onmousedown = b;
    c.ontouchstart = b;
    b = function(b) {
      Entry.stage.isClick = !1;
      Entry.dispatchEvent("canvasClickCanceled", b);
    };
    c.onmouseup = b;
    c.ontouchend = b;
    $(document).click(function(b) {
      Entry.stage.focused = "entryCanvas" === b.target.id ? !0 : !1;
    });
  }
  Entry.addEventListener("canvasClick", function(b) {
    Entry.stage.isObjectClick = !1;
  });
  Entry.windowResized.attach(this, function() {
    Entry.stage.updateBoundRect();
  });
  $(window).scroll(function() {
    Entry.stage.updateBoundRect();
  });
  b = function(b) {
    b.preventDefault();
    b = Entry.Utils.convertMouseEvent(b);
    var c = Entry.stage.getBoundRect(), d = Entry.Utils.getScrollPos(), e = -270 * ((b.pageY - c.top - d.top) / c.height - 0.5);
    this.mouseCoordinate = {x:Entry.Utils.toFixed(480 * ((b.pageX - c.left - d.left) / c.width - 0.5)), y:Entry.Utils.toFixed(e)};
    Entry.dispatchEvent("stageMouseMove");
  }.bind(this);
  c.onmousemove = b;
  c.ontouchmove = b;
  c.onmouseout = function(b) {
    Entry.dispatchEvent("stageMouseOut");
  };
  Entry.addEventListener("updateObject", d);
  Entry.addEventListener("run", function(b) {
    Entry.removeEventListener("updateObject", d);
  });
  Entry.addEventListener("stop", function(b) {
    Entry.addEventListener("updateObject", d);
  });
  var d = function(b) {
    Entry.engine.isState("stop") && Entry.stage.updateObject();
  };
  Entry.addEventListener("canvasInputComplete", function(b) {
    try {
      var c = Entry.stage.inputField.value();
      Entry.stage.hideInputField();
      if (c) {
        var d = Entry.container;
        d.setInputValue(c);
        d.inputValue.complete = !0;
      }
    } catch (h) {
    }
  });
  this.initWall();
  this.render();
};
Entry.Stage.prototype.render = function() {
  Entry.stage.timer && clearTimeout(Entry.stage.timer);
  var c = (new Date).getTime();
  Entry.stage.update();
  c = (new Date).getTime() - c;
  Entry.stage.timer = setTimeout(Entry.stage.render, 16 - c % 16 + 16 * Math.floor(c / 16));
};
Entry.Stage.prototype.update = function() {
  if ("invisible" !== Entry.type) {
    if (Entry.requestUpdate) {
      Entry.engine.isState("stop") && this.objectUpdated ? (this.canvas.update(), this.objectUpdated = !1) : this.canvas.update();
      var c = this.inputField;
      c && !c._isHidden && c.render();
      Entry.requestUpdateTwice ? Entry.requestUpdateTwice = !1 : Entry.requestUpdate = !1;
    } else {
      Entry.requestUpdate = !1;
    }
  }
};
Entry.Stage.prototype.loadObject = function(c) {
  var b = c.entity.object;
  this.getObjectContainerByScene(c.scene).addChild(b);
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.loadEntity = function(c) {
  Entry.stage.getObjectContainerByScene(c.parent.scene).addChild(c.object);
  this.sortZorder();
};
Entry.Stage.prototype.unloadEntity = function(c) {
  Entry.stage.getObjectContainerByScene(c.parent.scene).removeChild(c.object);
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.loadVariable = function(c) {
  var b = c.view_;
  this.variables[c.id] = b;
  this.variableContainer.addChild(b);
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.removeVariable = function(c) {
  this.variableContainer.removeChild(c.view_);
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.loadDialog = function(c) {
  this.dialogContainer.addChild(c.object);
};
Entry.Stage.prototype.unloadDialog = function(c) {
  this.dialogContainer.removeChild(c.object);
};
Entry.Stage.prototype.sortZorder = function() {
  for (var c = Entry.container.getCurrentObjects(), b = this.selectedObjectContainer, d = 0, e = c.length - 1; 0 <= e; e--) {
    var f = c[e];
    f.clonedEntities.forEach(function(c) {
      c.shape && b.setChildIndex(c.shape, d++);
      b.setChildIndex(c.object, d++);
    });
    f = f.entity;
    f.shape && b.setChildIndex(f.shape, d++);
    b.setChildIndex(f.object, d++);
  }
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.initCoordinator = function() {
  var c = new createjs.Container, b = new createjs.Bitmap(Entry.mediaFilePath + "workspace_coordinate.png");
  b.scaleX = 0.5;
  b.scaleY = 0.5;
  b.x = -240;
  b.y = -135;
  c.mouseEnabled = !1;
  c.tickEnabled = !1;
  c.tickChildren = !1;
  c.visible = !1;
  c.addChild(b);
  this.canvas.addChild(c);
  this.coordinator = c;
};
Entry.Stage.prototype.toggleCoordinator = function() {
  this.coordinator.visible = !this.coordinator.visible;
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.selectObject = function(c) {
  this.selectedObject = c ? c : null;
  this.updateObject();
};
Entry.Stage.prototype.initHandle = function() {
  this.handle = new EaselHandle(this.canvas);
  this.handle.setChangeListener(this, this.updateHandle);
  this.handle.setEditStartListener(this, this.startEdit);
  this.handle.setEditEndListener(this, this.endEdit);
};
Entry.Stage.prototype.updateObject = function() {
  if ("invisible" !== Entry.type && (Entry.requestUpdate = !0, this.handle.setDraggable(!0), !this.editEntity)) {
    var c = this.selectedObject;
    if (c) {
      "textBox" == c.objectType ? this.handle.toggleCenter(!1) : this.handle.toggleCenter(!0);
      "free" == c.getRotateMethod() ? this.handle.toggleRotation(!0) : this.handle.toggleRotation(!1);
      this.handle.toggleDirection(!0);
      c.getLock() ? (this.handle.toggleRotation(!1), this.handle.toggleDirection(!1), this.handle.toggleResize(!1), this.handle.toggleCenter(!1), this.handle.setDraggable(!1)) : this.handle.toggleResize(!0);
      this.handle.setVisible(!0);
      var b = c.entity;
      this.handle.setWidth(b.getScaleX() * b.getWidth());
      this.handle.setHeight(b.getScaleY() * b.getHeight());
      if ("textBox" == b.type) {
        if (b.getLineBreak()) {
          var d = b.regX * b.scaleX;
          var e = -b.regY * b.scaleY;
        } else {
          var f = b.getTextAlign();
          e = -b.regY * b.scaleY;
          switch(f) {
            case Entry.TEXT_ALIGN_LEFT:
              d = -b.getWidth() / 2 * b.scaleX;
              break;
            case Entry.TEXT_ALIGN_CENTER:
              d = b.regX * b.scaleX;
              break;
            case Entry.TEXT_ALIGN_RIGHT:
              d = b.getWidth() / 2 * b.scaleX;
          }
        }
      } else {
        d = (b.regX - b.width / 2) * b.scaleX, e = (b.height / 2 - b.regY) * b.scaleY;
      }
      f = b.getRotation() / 180 * Math.PI;
      this.handle.setX(b.getX() - d * Math.cos(f) - e * Math.sin(f));
      this.handle.setY(-b.getY() - d * Math.sin(f) + e * Math.cos(f));
      this.handle.setRegX((b.regX - b.width / 2) * b.scaleX);
      this.handle.setRegY((b.regY - b.height / 2) * b.scaleY);
      this.handle.setRotation(b.getRotation());
      this.handle.setDirection(b.getDirection());
      this.objectUpdated = !0;
      this.handle.setVisible(c.entity.getVisible());
      c.entity.getVisible() && this.handle.render();
    } else {
      this.handle.setVisible(!1);
    }
  }
};
Entry.Stage.prototype.updateHandle = function() {
  this.editEntity = !0;
  var c = this.handle, b = this.selectedObject.entity;
  if (b.lineBreak) {
    b.setHeight(c.height / b.getScaleY()), b.setWidth(c.width / b.getScaleX());
  } else {
    if (0 !== b.width) {
      var d = Math.abs(c.width / b.width);
      b.flip && (d *= -1);
      b.setScaleX(d);
    }
    0 !== b.height && b.setScaleY(c.height / b.height);
  }
  d = c.rotation / 180 * Math.PI;
  if ("textBox" == b.type) {
    if (b.syncFont(), b.getLineBreak()) {
      b.setX(c.x), b.setY(-c.y);
    } else {
      switch(b.getTextAlign()) {
        case Entry.TEXT_ALIGN_LEFT:
          b.setX(c.x - c.width / 2 * Math.cos(d));
          b.setY(-c.y + c.width / 2 * Math.sin(d));
          break;
        case Entry.TEXT_ALIGN_CENTER:
          b.setX(c.x);
          b.setY(-c.y);
          break;
        case Entry.TEXT_ALIGN_RIGHT:
          b.setX(c.x + c.width / 2 * Math.cos(d)), b.setY(-c.y - c.width / 2 * Math.sin(d));
      }
    }
  } else {
    var e = b.width / 2 + c.regX / b.scaleX;
    b.setX(c.x + c.regX * Math.cos(d) - c.regY * Math.sin(d));
    b.setRegX(e);
    e = b.height / 2 + c.regY / b.scaleY;
    b.setY(-c.y - c.regX * Math.sin(d) - c.regY * Math.cos(d));
    b.setRegY(e);
  }
  b.setDirection(c.direction);
  b.setRotation(c.rotation);
  this.selectedObject.entity.doCommand();
  this.editEntity = !1;
};
Entry.Stage.prototype.startEdit = function() {
  var c = this.selectedObject;
  c && c.entity.initCommand();
};
Entry.Stage.prototype.endEdit = function() {
  this.selectedObject.entity.checkCommand();
};
Entry.Stage.prototype.initWall = function() {
  var c = new createjs.Container;
  c.mouseEnabled = !1;
  var b = new Image;
  b.src = Entry.mediaFilePath + "media/bound.png";
  c.up = new createjs.Bitmap;
  c.up.scaleX = 16;
  c.up.y = -165;
  c.up.x = -240;
  c.up.image = b;
  c.addChild(c.up);
  c.down = new createjs.Bitmap;
  c.down.scaleX = 16;
  c.down.y = 135;
  c.down.x = -240;
  c.down.image = b;
  c.addChild(c.down);
  c.right = new createjs.Bitmap;
  c.right.scaleY = 9;
  c.right.y = -135;
  c.right.x = 240;
  c.right.image = b;
  c.addChild(c.right);
  c.left = new createjs.Bitmap;
  c.left.scaleY = 9;
  c.left.y = -135;
  c.left.x = -270;
  c.left.image = b;
  c.addChild(c.left);
  this.canvas.addChild(c);
  this.wall = c;
};
Entry.Stage.prototype.showInputField = function() {
  if (!this.inputField) {
    var c = 1 / 1.5;
    this.inputField = new CanvasInput({canvas:document.getElementById("entryCanvas"), fontSize:30 * c, fontFamily:"NanumGothic", fontColor:"#212121", width:Math.round(556 * c), height:26 * c, padding:8 * c, borderWidth:1 * c, borderColor:"#000", borderRadius:3, boxShadow:"none", innerShadow:"0px 0px 5px rgba(0, 0, 0, 0.5)", x:202 * c, y:450 * c, topPosition:!0, onsubmit:function() {
      Entry.dispatchEvent("canvasInputComplete");
    }});
  }
  var c = new createjs.Container, b = new Image, d = new createjs.Bitmap;
  b.onload = function() {
    d.image = this;
    Entry.requestUpdate = !0;
  };
  b.src = Entry.mediaFilePath + "confirm_button.png";
  d.scaleX = 0.23;
  d.scaleY = 0.23;
  d.x = 160;
  d.y = 89;
  d.cursor = "pointer";
  d.image = b;
  c.addChild(d);
  c.on("mousedown", function(b) {
    Entry.dispatchEvent("canvasInputComplete");
  });
  this.inputSubmitButton || (this.inputField.value(""), this.canvas.addChild(c), this.inputSubmitButton = c);
  this.inputField.show();
  Entry.requestUpdateTwice = !0;
};
Entry.Stage.prototype.hideInputField = function() {
  this.inputField && this.inputField.value() && this.inputField.value("");
  this.inputSubmitButton && (this.canvas.removeChild(this.inputSubmitButton), this.inputSubmitButton = null);
  this.inputField && this.inputField.hide();
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.initObjectContainers = function() {
  var c = Entry.scene.scenes_;
  if (c && 0 !== c.length) {
    for (var b = 0; b < c.length; b++) {
      this.objectContainers[b] = this.createObjectContainer(c[b]);
    }
    this.selectedObjectContainer = this.objectContainers[0];
  } else {
    c = this.createObjectContainer(Entry.scene.selectedScene), this.objectContainers.push(c), this.selectedObjectContainer = c;
  }
  "invisible" !== Entry.type && this.canvas.addChild(this.selectedObjectContainer);
  this.selectObjectContainer(Entry.scene.selectedScene);
};
Entry.Stage.prototype.selectObjectContainer = function(c) {
  var b = this.objectContainers, d = this.canvas;
  d && b && b.length && (b.forEach(function(b) {
    d.removeChild(b);
  }), this.selectedObjectContainer = this.getObjectContainerByScene(c), d.addChildAt(this.selectedObjectContainer, 2));
};
Entry.Stage.prototype.createObjectContainer = function(c) {
  var b = new createjs.Container;
  b.scene = c;
  return b;
};
Entry.Stage.prototype.removeObjectContainer = function(c) {
  var b = this.objectContainers;
  c = this.getObjectContainerByScene(c);
  this.canvas && this.canvas.removeChild(c);
  b.splice(this.objectContainers.indexOf(c), 1);
};
Entry.Stage.prototype.getObjectContainerByScene = function(c) {
  for (var b = this.objectContainers, d = 0; d < b.length; d++) {
    if (b[d].scene.id == c.id) {
      return b[d];
    }
  }
};
Entry.Stage.prototype.moveSprite = function(c) {
  if (this.selectedObject && Entry.stage.focused && !this.selectedObject.getLock()) {
    var b = 5;
    c.shiftKey && (b = 1);
    var d = this.selectedObject.entity;
    switch(c.keyCode) {
      case 38:
        d.setY(d.getY() + b);
        break;
      case 40:
        d.setY(d.getY() - b);
        break;
      case 37:
        d.setX(d.getX() - b);
        break;
      case 39:
        d.setX(d.getX() + b);
    }
    this.updateObject();
  }
};
Entry.Stage.prototype.getBoundRect = function(c) {
  return this._boundRect ? this._boundRect : this.updateBoundRect();
};
Entry.Stage.prototype.updateBoundRect = function(c) {
  return this._boundRect = this.canvas.canvas.getBoundingClientRect();
};
Entry.Stage.prototype.getDom = function(c) {
  if ("canvas" === c.shift()) {
    return this.canvas.canvas;
  }
};
Entry.Stage.prototype.setEntitySelectable = function(c) {
  this._entitySelectable = c;
};
Entry.Stage.prototype.isEntitySelectable = function() {
  return Entry.engine.isState("stop") && this._entitySelectable;
};
Entry.StampEntity = function(c, b) {
  this.parent = c;
  this.type = c.objectType;
  this.isStamp = this.isClone = !0;
  this.width = b.getWidth();
  this.height = b.getHeight();
  "sprite" == this.type && (this.object = b.object.clone(), this.object.mouseEnabled = !1, this.object.tickEnabled = !1, this.object.filters = null, b.effect && (this.effect = Entry.cloneSimpleObject(b.effect), this.applyFilter()));
  this.object.entity = this;
};
(function(c, b) {
  "applyFilter removeClone getWidth getHeight getInitialEffectValue destroy cache".split(" ").forEach(function(d) {
    c[d] = b[d];
  });
})(Entry.StampEntity.prototype, Entry.EntityObject.prototype);
Entry.JsAstGenerator = function() {
};
(function(c) {
  c.generate = function(b) {
    return arcon.parse(b);
  };
})(Entry.JsAstGenerator.prototype);
Entry.PyAstGenerator = function() {
};
(function(c) {
  c.generate = function(b) {
    var c;
    var e = filbert.parse;
    var f = {locations:!0, ranges:!0};
    try {
      return e(b, f);
    } catch (h) {
      var f = h.message.split("'"), g = Entry.TextCodingError.TITLE_SYNTAX;
      console.log("msgTokens", f);
      "Unexpected token" == f[0].trim() ? (e = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_TOKEN, b = Entry.TextCodingError.SUBJECT_SYNTAX_TOKEN) : "Unexpected character" == f[0].trim() ? (e = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER, b = Entry.TextCodingError.SUBJECT_SYNTAX_CHARACTER) : "Unexpected indent" == f[0].trim() ? (e = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER, b = Entry.TextCodingError.SUBJECT_SYNTAX_INDENT) : (e = Entry.TextCodingError.MESSAGE_SYNTAX_DEFAULT, 
      b = Entry.TextCodingError.SUBJECT_SYNTAX_DEFAULT);
      f[1] && (c = f[1]);
      h.title = Lang.TextCoding[g];
      h.message = Lang.TextCoding[e];
      h.keyword = c ? c : "";
      h.subject = Lang.TextCoding[b];
      throw h;
    }
  };
})(Entry.PyAstGenerator.prototype);
Entry.Map = function() {
  this._map = {repo:{}};
};
(function(c) {
  c.getKey = function(b) {
    return b;
  };
  c.put = function(b, c) {
    b = this.getKey(b);
    this._map.repo[b] = c;
  };
  c.contains = function(b) {
    b = this.getKey(b);
    return this._map.repo[b] ? !0 : !1;
  };
  c.get = function(b) {
    b = this.getKey(b);
    return this._map.repo[b] ? this._map.repo[b] : null;
  };
  c.remove = function(b) {
    var c = this.getKey(b);
    this.contains(b) && (this._map.repo[c] = void 0);
  };
  c.clear = function() {
    this._map.repo = {};
  };
  c.toString = function() {
    return this._map.repo;
  };
})(Entry.Map.prototype);
Entry.TextCodingError = {};
(function(c) {
  c.TITLE_SYNTAX = "title_syntax";
  c.TITLE_CONVERTING = "title_converting";
  c.MESSAGE_SYNTAX_DEFAULT = "message_syntax_default";
  c.MESSAGE_SYNTAX_UNEXPECTED_TOKEN = "message_syntax_unexpected_token";
  c.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER = "message_syntax_unexpected_character";
  c.MESSAGE_SYNTAX_UNEXPECTED_INDENT = "message_syntax_unexpected_indent";
  c.MESSAGE_CONV_DEFAULT = "message_conv_default";
  c.MESSAGE_CONV_NO_SUPPORT = "message_conv_no_support";
  c.MESSAGE_CONV_NO_VARIABLE = "message_conv_no_variable";
  c.MESSAGE_CONV_NO_LIST = "message_conv_no_list";
  c.MESSAGE_CONV_NO_OBJECT = "message_conv_no_object";
  c.MESSAGE_CONV_NO_FUNCTION = "message_conv_no_function";
  c.MESSAGE_CONV_NO_ENTRY_EVENT_FUNCTION = "message_conv_no_entry_event_function";
  c.SUBJECT_SYNTAX_DEFAULT = "subject_syntax_default";
  c.SUBJECT_SYNTAX_TOKEN = "subject_syntax_token";
  c.SUBJECT_SYNTAX_CHARACTER = "subject_syntax_character";
  c.SUBJECT_SYNTAX_INDENT = "subject_syntax_indent";
  c.SUBJECT_CONV_DEFAULT = "subject_conv_default";
  c.SUBJECT_CONV_GENERAL = "subject_conv_general";
  c.SUBJECT_CONV_VARIABLE = "subject_conv_variable";
  c.SUBJECT_CONV_LIST = "subject_conv_list";
  c.SUBJECT_CONV_OBJECT = "subject_conv_object";
  c.SUBJECT_CONV_FUNCTION = "subject_conv_function";
  c.ALERT_VARIABLE_EMPTY_TEXT_ADD_CHANGE = "alert_variable_empty_text_add_change";
  c.ALERT_LIST_EMPTY_TEXT_ADD_CHANGE = "alert_list_empty_text_add_change";
  c.ALERT_FUNCTION_NAME_EMPTY_TEXT_ADD_CHANGE = "alert_function_name_empty_text_add_change";
  c.ALERT_VARIABLE_EMPTY_TEXT = "alert_variable_empty_text";
  c.ALERT_LIST_EMPTY_TEXT = "alert_list_empty_text";
  c.ALERT_FUNCTION_NAME_EMPTY_TEXT = "alert_function_name_empty_text";
  c.ALERT_FUNCTION_NAME_FIELD_MULTI = "alert_function_name_field_multi";
  c.ALERT_FUNCTION_NAME_DISORDER = "alert_function_name_disorder";
  c.ALERT_FUNCTION_EDITOR = "alert_function_editor";
  c.ALERT_FUNCTION_NO_SUPPORT = "alert_function_no_support";
  c.ALERT_LIST_NO_SUPPORT = "alert_list_no_support";
  c.ALERT_VARIABLE_NO_SUPPORT = "alert_variable_no_support";
  c.ALERT_SIGNAL_NO_SUPPORT = "alert_signal_no_support";
  c.ALERT_LEGACY_NO_SUPPORT = "alert_legacy_no_support";
  c.ALERT_NO_SAVE_ON_ERROR = "alert_no_save_on_error";
  var b = {};
  c.error = function(c, e, f, g, h) {
    console.log("error control", c, e, f, g);
    c = this.getErrorInfo(c, e, f, g, h);
    b.title = c.title;
    b.message = c.message;
    b.line = g;
    throw b;
  };
  c.getErrorInfo = function(b, c, f, g, h) {
    var d = {};
    d.title = Lang.TextCoding[b];
    c = Lang.TextCoding[c];
    b = h ? Lang.TextCoding[h] : Lang.TextCoding[this.SUBJECT_CONV_GENERAL];
    "object" === typeof g && (g = g.start.line + 2);
    d.message = "[" + b + "] " + (f ? "'" + f + "' " : "") + " : " + c + " (line " + g + ")";
    return d;
  };
})(Entry.TextCodingError);
Entry.PyHint = function(c) {
  this.syntax = c;
  this.scope = {};
  this.lastHW = null;
  this.scope._global = [];
  this.scope._list = [];
  for (var b in c) {
    c[b].syntax && 0 > b.indexOf("%") && 0 > c[b].key.indexOf("function_field") ? this.scope._global.push(b) : "if" === b.substr(0, 2) ? this.scope._global.push(b) : "while" === b.substr(0, 5) && this.scope._global.push(b);
  }
  this.addScope("Entry");
  this.addScope("random");
  this.addScope("math");
  this.addScope("%2", "_list");
  this._blockMenu = Entry.playground.mainWorkspace.blockMenu;
  CodeMirror.registerHelper("hint", "python", this.pythonHint.bind(this));
  c = function(b) {
    Entry.hw.hwModule ? (b = Entry.hw.hwModule.name, b = b[0].toUpperCase() + b.slice(1), "ArduinoExt" === b && (b = "Arduino"), this.addScope(b), this.lastHW = b) : (this.removeScope(this.lastHW), this.lastHW = null);
  }.bind(this);
  Entry.addEventListener("hwChanged", c);
  Entry.hw.hwModule && c();
};
(function(c) {
  c.pythonHint = function(b) {
    var c = b.getCursor(), e = b.getLineTokens(c.line);
    b = e.pop();
    for (var f = [], g = []; b && c.ch <= b.start;) {
      b = e.pop();
    }
    if (!b) {
      return null;
    }
    var h = b.start, k = this.hintFunc, l = this.syntax;
    switch(b.type) {
      case "builtin":
        var m = e[e.length - 2] && "def" === e[e.length - 2].string ? null : b.string;
      case "def":
        !m && (f = e[e.length - 2]) && (m = "def " + b.string, h = f.start);
      case "keyword":
        m || (m = b.string);
      case "variable":
        m || (m = b.string);
        f = this.fuzzySearch(this.getScope("_global"), m);
        f = f.map(function(b) {
          var c = l, d = b.split("#")[0], d = d.split("\n").join(" "), d = d.replace(/%\d+/gi, ""), d = d.replace(/\$\d+/gi, "");
          if (-1 < b.indexOf(".")) {
            b = b.split(".");
            c = l[b[0]];
            var e = b.shift();
            b = b.join(".");
          }
          c[b].key && g.push(c[b].key);
          return {displayText:d, hint:k, syntax:c[b], localKey:e};
        });
        break;
      case "property":
        var q = e[e.length - 2];
        if (q) {
          m = this.getScope(q.string);
          m.length ? m = this.fuzzySearch(m, b.string) : Entry.variableContainer.getListByName(q.string) ? (m = this.fuzzySearch(this.getScope("%2"), b.string), q.string = "%2") : m = [];
          var f = m.map(function(b) {
            var c = b.split("#")[0], c = c.split("\n")[0];
            return {displayText:c, hint:k, syntax:l[q.string][b]};
          }), n = this.syntax[q.string], g = m.map(function(b) {
            return n[b].key;
          });
        }
    }
    g.length ? this._blockMenu._setDynamic(g) : this._blockMenu._cancelDynamic();
    return {list:f, from:CodeMirror.Pos(c.line, h), to:CodeMirror.Pos(c.line, b.end)};
  };
  c.addScope = function(b) {
    if (this.syntax[b] && !this.scope[b]) {
      var c = this.syntax[b], e = Object.keys(c), e = e.filter(function(b) {
        return 0 > b.indexOf("#") && !Entry.block[c[b].key].deprecated;
      });
      this.scope[b] = e;
      this.scope._global.unshift(b);
      e = e.map(function(c) {
        return b + "." + c;
      });
      this.scope._global = this.scope._global.concat(e);
    }
  };
  c.removeScope = function(b) {
    if (this.scope[b]) {
      var c = this.syntax[b], e = Object.keys(c), e = e.filter(function(b) {
        return 0 > b.indexOf("#") && !Entry.block[c[b].key].deprecated;
      }), e = e.map(function(c) {
        return b + "." + c;
      });
      for (this.scope._global.splice(this.scope._global.indexOf(b), 1); e.length;) {
        var f = e.pop();
        this.scope._global.splice(this.scope._global.indexOf(f), 1);
      }
      delete this.scope[b];
    }
  };
  c.getScope = function(b) {
    return this.scope[b] ? this.scope[b] : [];
  };
  c.fuzzySearch = function(b, c, e) {
    e = e || {};
    e.escapeLetter = "#";
    b = Entry.Utils.fuzzy.filter(c, b, e).slice(0, 20);
    return b = b.map(function(b) {
      return b.original;
    });
  };
  c.hintFunc = function(b, c, e) {
    var d = e.syntax;
    var g = c.from.ch;
    d.syntax ? (d = d.syntax, e.localKey && (d = e.localKey + "." + d), d = d.split("."), 1 < d.length && d.shift(), d = d.join("."), -1 < d.indexOf("%") ? (g += d.indexOf("%"), d = d.replace(/%\d+/gi, "")) : g += d.length, d = d.replace(/\$\d+/gi, "")) : (d = e.displayText + ".", g += d.length);
    -1 < d.indexOf("\n") && (d = d.split("\n").join("\n" + "\t".repeat(c.from.ch)));
    if (-1 < d.indexOf(":")) {
      for (var h = b.getCursor(), h = b.getLineTokens(h.line), k = h.shift(); h.length && "keyword" !== k.type;) {
        k = h.shift();
      }
      g -= c.from.ch - k.start;
      c.from.ch = k.start;
    }
    b.replaceRange(d, c.from, c.to);
    b.setCursor({line:c.from.line, ch:g});
    Entry.helper.renderBlock(e.syntax.key);
  };
})(Entry.PyHint.prototype);
Entry.BlockToJsParser = function(c, b) {
  this._type = "BlockToJsParser";
  this.syntax = c;
  this._parentParser = b;
  this._iterVariableCount = 0;
  this._iterVariableChunk = ["i", "j", "k"];
};
(function(c) {
  c.Code = function(b, c) {
    this._parseMode = c;
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    c = "";
    b = b._data;
    for (var d = 0; d < b.length; d++) {
      c += this.Thread(b[d]);
    }
    return c.trim();
  };
  c.Thread = function(b) {
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    for (var c = "", e = b.getBlocks(), f = 0; f < e.length; f++) {
      b = e[f], f != e.length - 1 ? (b = this.Block(b), this._parseMode == Entry.Parser.PARSE_GENERAL ? c += b + "\n" : this._parseMode == Entry.Parser.PARSE_SYNTAX && (c = b + "\n")) : (b = this.Block(b), this._parseMode == Entry.Parser.PARSE_GENERAL ? c += b : this._parseMode == Entry.Parser.PARSE_SYNTAX && (c = b));
    }
    return c + "\n";
  };
  c.Block = function(b) {
    var c = b._schema.syntax.js ? b._schema.syntax.js : b._schema.syntax;
    return c ? b = this[c[0]](b) : "";
  };
  c.Program = function(b) {
    return "";
  };
  c.Scope = function(b) {
    var c = !1, e = "", f = /(%.)/mi;
    if (b._schema.syntax.js) {
      var g = b._schema.syntax.js.concat();
      c = !0;
    } else {
      g = b._schema.syntax.concat();
    }
    g.shift();
    g = g[0].split(f);
    for (var h = b._schema.params, k = b.data.params, l = 0; l < g.length; l++) {
      var m = g[l];
      0 !== m.length && "Scope" !== m && ("Judge" === m ? c = !0 : f.test(m) ? (m = m.split("%")[1], m = parseInt(m) - 1, h[m] && "Image" != h[m].type && ("Block" == h[m].type ? (m = this.Block(k[m]), e += m) : e += this[h[m].type](k[m], h[m]))) : e += m);
    }
    "#" == e.charAt(e.length - 1) && (c = !0, e = e.substring(0, e.length - 1), e = e.trim());
    c || (e += "();");
    return e = Entry.TextCodingUtil.jsAdjustSyntax(b, e);
  };
  c.BasicFunction = function(b) {
    b = this.Thread(b.statements[0]);
    return "function promise() {\n" + this.indent(b).trim() + "}";
  };
  c.BasicIteration = function(b) {
    var c = b.params[0], e = this.publishIterateVariable();
    b = this.Thread(b.statements[0]);
    this.unpublishIterateVariable();
    return "for (var " + e + " = 0; " + e + " < " + c + "; " + e + "++) {\n" + this.indent(b) + "}";
  };
  c.BasicIf = function(b) {
    if (2 == b.data.statements.length) {
      var c = this.Thread(b.statements[0]);
      var e = this.Thread(b.statements[1]);
      var f = b._schema.syntax.concat();
      f = (b = b.data.params[0]) && "True" == b.data.type ? f[1] : void 0 === b ? f[1] : this.Block(b);
      c = "if (" + f + ") {\n" + this.indent(c) + "}\nelse {\n" + this.indent(e) + "}\n";
    } else {
      c = this.Thread(b.statements[0]), f = b._schema.syntax.concat(), f = (b = b.data.params[0]) && "True" == b.data.type ? f[1] : void 0 === b ? f[1] : this.Block(b), c = "if (" + f + ") {\n" + this.indent(c) + "}\n";
    }
    return c;
  };
  c.BasicWhile = function(b) {
    var c = this.Thread(b.statements[0]);
    return "while (" + b._schema.syntax.concat()[1] + ") {\n" + this.indent(c) + "}\n";
  };
  c.indent = function(b) {
    var c = "";
    b = b.split("\n");
    for (var e in b) {
      var f = b[e];
      0 != f.length && (c += "\t" + f + "\n");
    }
    return c;
  };
  c.publishIterateVariable = function() {
    var b = "", c = this._iterVariableCount;
    do {
      b = this._iterVariableChunk[c % 3] + b, c = parseInt(c / 3) - 1, 0 === c && (b = this._iterVariableChunk[0] + b);
    } while (0 < c);
    this._iterVariableCount++;
    return b;
  };
  c.unpublishIterateVariable = function() {
    this._iterVariableCount && this._iterVariableCount--;
  };
  c.Dropdown = function(b) {
    "OBSTACLE" == b ? b = "stone" : "ITEM" == b ? b = b.toLowerCase() : "WALL" == b && (b = b.toLowerCase());
    return "'" + b + "'";
  };
  c.TextInput = function(b) {
    return b;
  };
  c.DropdownDynamic = function(b, c) {
    return b = "null" == b ? "none" : Entry.TextCodingUtil.dropdownDynamicValueConvertor(b, c);
  };
  c.searchSyntax = function(b) {
    b instanceof Entry.BlockView && (b = b.block);
    return this._parentParser.parse(b, Entry.Parser.PARSE_SYNTAX);
  };
  c.getAssistScope = function() {
    if (this._assist) {
      return this._assist;
    }
    var b = {}, c;
    for (c in this.syntax.Scope) {
      0 > c.indexOf("%") && (b[c + "();\n"] = this.syntax.Scope[c]);
    }
    return this._assist = b;
  };
})(Entry.BlockToJsParser.prototype);
Entry.KeyboardCode = {};
(function(c) {
  c.map = {backspace:8, tab:9, enter:13, shift:16, ctrl:17, alt:18, pausebreak:19, capslock:20, esc:27, space:32, pageup:33, pagedown:34, end:35, home:36, left:37, up:38, right:39, down:40, insert:45, "delete":46, 0:48, 1:49, 2:50, 3:51, 4:52, 5:53, 6:54, 7:55, 8:56, 9:57, a:65, b:66, c:67, d:68, e:69, f:70, g:71, h:72, i:73, j:74, k:75, l:76, m:77, n:78, o:79, p:80, q:81, r:82, s:83, t:84, u:85, v:86, w:87, x:88, y:89, z:90, windows:91, rightclick:93, numpad0:96, numpad1:97, numpad2:98, numpad3:99, 
  numpad4:100, numpad5:101, numpad6:102, numpad7:103, numpad8:104, numpad9:105, "numpad*":106, "numpad+":107, "numpad-":109, "numpad.":110, "numpad/":111, f1:112, f2:113, f3:114, f4:115, f5:116, f6:117, f7:118, f8:119, f9:120, f10:121, f11:122, f12:123, numlock:144, scrolllock:145, mycomputer:182, mycalculator:183, ";":186, "=":187, ",":188, "-":189, ".":190, "/":191, "`":192, "[":219, "\\":220, "]":221, "'":222};
})(Entry.KeyboardCode);
Entry.BlockToPyParser = function() {
  this._type = "BlockToPyParser";
  this._funcParamMap = new Entry.Map;
  this._funcDefMap = {};
  this._listDeclaration = this._variableDeclaration = null;
  this._forIdCharIndex = 0;
};
(function(c) {
  c.Code = function(b, c) {
    this._parseMode = c;
    if (b) {
      if (b instanceof Entry.Thread) {
        return this.Thread(b);
      }
      if (b instanceof Entry.Block) {
        return this.Block(b);
      }
      c = "";
      b = b.getThreads();
      for (var d = 0; d < b.length; d++) {
        this._forIdCharIndex = 0, c += this.Thread(b[d]) + "\n";
      }
      return c = c.trim();
    }
  };
  c.Thread = function(b) {
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    var c = "";
    b = b.getBlocks();
    for (var e = !1, f = "", g = "", h = 0; h < b.length; h++) {
      var k = b[h];
      this._parseMode == Entry.Parser.PARSE_GENERAL ? 0 == h ? (e = Entry.TextCodingUtil.isEventBlock(k)) ? f = this.Block(k) + "\n" : g += this.Block(k) + "\n" : 0 != h && (k = this.Block(k) + "\n", g += k) : this._parseMode == Entry.Parser.PARSE_SYNTAX && (c = (e = Entry.TextCodingUtil.isEventBlock(k)) ? "" : this.Block(k) + "\n");
    }
    this._parseMode == Entry.Parser.PARSE_GENERAL && (e && (g = Entry.TextCodingUtil.indent(g)), c = f + g + "\n");
    return c = c.trim() + "\n";
  };
  c.Block = function(b, c) {
    var d;
    if (!(b && b instanceof Entry.Block)) {
      return "";
    }
    !b._schema && b.loadSchema();
    c = "";
    var f;
    if (f = this.searchSyntax(b)) {
      var g = f.syntax;
    }
    if (this.isFunc(b)) {
      if (this._hasRootFunc || (this._rootFuncId = b.data.type, this._funcDefMap[b.data.type] = this.makeFuncDef(b, this._hasRootFunc), this._hasRootFunc = !1), this.isRegisteredFunc(b) && (g = this.makeFuncSyntax(b)), this._parseMode == Entry.Parser.PARSE_SYNTAX) {
        return g;
      }
    } else {
      this.isFuncStmtParam(b) && (c += b.data.type);
    }
    if (!g || null === g) {
      return c;
    }
    var h = /(%.)/mi, k = /(\$.)/mi;
    g = g.split(h);
    for (var l = b._schema.params, m = b.data.params, q = 0; q < g.length; q++) {
      var n = g[q];
      if (0 !== n.length) {
        if ("% " == n) {
          c += n;
        } else {
          if (h.test(n)) {
            n = n.split("%")[1];
            var r = Number(n) - 1;
            if (l[r] && "Indicator" != l[r].type) {
              if ("Block" == l[r].type) {
                n = this.Block(m[r]).trim();
                f.textParams && f.textParams[r] && (d = f.textParams[r]);
                if (r = this._funcParamMap.get(n)) {
                  n = r;
                } else {
                  r = n.split("_");
                  var t = r[0];
                  2 == r.length && ("stringParam" == t ? n = "string_param" : "booleanParam" == t && (n = "boolean_param"));
                }
                d && "index" == d.paramType && (Entry.Utils.isNumber(n) ? --n : (r = n.split("+"), " 1)" == r[r.length - 1] ? (delete r[r.length - 1], n = r.join("+"), n = n.substring(1, n.length - 2)) : n += " - 1"));
                d && "integer" == d.paramType && Entry.Utils.isNumber(n) && Entry.isFloat(n) && (c = c.replace("randint", "uniform"));
                c += n;
              } else {
                n = f.textParams ? f.textParams : [], n = this["Field" + l[r].type](m[r], n[r]), c += n, f && "repeat_while_true" == f.key && (c = Entry.TextCodingUtil.assembleRepeatWhileTrueBlock(b, c));
              }
            }
          } else {
            if (k.test(n)) {
              for (n = n.split(k), t = 0; t < n.length; t++) {
                r = n[t], 0 !== r.length && (k.test(r) ? (r = Number(r.split("$")[1]) - 1, c += Entry.TextCodingUtil.indent(this.Thread(b.statements[r]))) : c += r);
              }
            } else {
              f && "repeat_basic" == f.key && 0 == q && (n = n.split(" "), n[1] = Entry.TextCodingUtil.generateForStmtIndex(this._forIdCharIndex++), n = n.join(" ")), c += n;
            }
          }
        }
      }
    }
    return c;
  };
  c.searchSyntax = function(b) {
    if (b instanceof Entry.BlockView) {
      var c = b.block._schema;
      var e = b.block.data.params;
    } else {
      b instanceof Entry.Block ? (c = b._schema, e = b.params) : c = b;
    }
    if (c && c.syntax) {
      for (b = c.syntax.py.concat(); b.length;) {
        c = !1;
        var f = b.shift();
        if ("string" === typeof f) {
          return {syntax:f, template:f};
        }
        if (f.params) {
          for (var g = 0; g < f.params.length; g++) {
            if (f.params[g] && f.params[g] !== e[g]) {
              c = !0;
              break;
            }
          }
        }
        f.template || (f.template = f.syntax);
        if (!c) {
          return f;
        }
      }
    }
    return null;
  };
  c.FieldAngle = function(b, c) {
    c && c.converter && (b = c.converter(b));
    return b;
  };
  c.FieldColor = function(b, c) {
    c && c.converter && (b = c.converter(null, b));
    return b;
  };
  c.FieldDropdown = function(b, c) {
    if ("object" == typeof b) {
      return "None".replace(/\"/gm, "");
    }
    if (c && c.converter && c.options) {
      var d = c.options, f;
      for (f in d) {
        var g = d[f][0], h = d[f][1];
        if (b == h) {
          return c.converter(g, h);
        }
      }
      b = c.converter(b, b);
    }
    return b;
  };
  c.FieldDropdownDynamic = function(b, c) {
    if ("object" == typeof b) {
      return "None".replace(/\"/gm, "");
    }
    if (c && c.converter && c.options) {
      var d = c.options, f;
      for (f in d) {
        var g = d[f][0];
        var h = d[f][1];
        if (b == h) {
          return (b = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(h, c.menuName)) && (g = b), c.converter(g, h);
        }
      }
      b = (h = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(b, c.menuName)) ? c.converter(h, h) : c.converter(b, b);
      /None/.test(b) && (b = b.replace(/\"/gm, ""));
    }
    return b;
  };
  c.FieldImage = function(b, c) {
    c && c.converter && (b = c.converter(null, b));
    return b;
  };
  c.FieldIndicator = function(b, c) {
    return b;
  };
  c.FieldKeyboard = function(b, c) {
    if (/None/.test(b)) {
      return b.replace(/\"/gm, "");
    }
    var d = Entry.KeyboardCode.map, f;
    for (f in d) {
      if (d[f] == b) {
        b = f;
        break;
      }
    }
    c && c.converter && (b = c.converter(b, null));
    return b = b.toLowerCase();
  };
  c.FieldOutput = function(b, c) {
    return b;
  };
  c.FieldText = function(b, c) {
    c && c.converter && (b = c.converter(null, b));
    return b;
  };
  c.FieldTextInput = function(b, c) {
    if ("number" != typeof b) {
      b = b.replace("\t", "    ");
      var d = b.split(/ /);
      b.length == d.length - 1 && (b = '"()"'.replace("()", b));
    }
    c && c.converter && (b = c.converter(null, b));
    return b;
  };
  c.FieldNumber = function(b, c) {
    c && c.converter && (b = c.converter(null, b));
    return b;
  };
  c.isFunc = function(b) {
    return b && b.data && b.data.type ? "func" == b.data.type.split("_")[0] ? !0 : !1 : !1;
  };
  c.isRegisteredFunc = function(b) {
    b = b.data.type.split("_");
    return !!Entry.variableContainer.functions_[b[1]];
  };
  c.isFuncStmtParam = function(b) {
    if (!b || !b.data || !b.data.type) {
      return !1;
    }
    b = b.data.type.split("_")[0];
    return "stringParam" == b || "booleanParam" == b ? !0 : !1;
  };
  c.makeFuncSyntax = function(b) {
    var c;
    if (b && b._schema) {
      if (b._schema.template) {
        var e = b._schema.template.trim();
      } else {
        if (b._schema.params) {
          var f = b._schema.params;
        } else {
          b && !b._schema && this._hasRootFunc && (b = Entry.block[this._rootFuncId], f = b.block.params, e = b.block.template);
        }
      }
    }
    b = /(%.)/mi;
    e && (c = e.trim().split(b));
    var g = e = "", h;
    for (h in c) {
      var k = c[h].trim();
      if (b.test(k)) {
        var l = k.split("%")[1];
        1 != l && (--l, k = l - 1, f && f[k] && "Indicator" == f[k].type || (g += "%".concat(l).concat(", ")));
      } else {
        k = k.split(" "), e += k.join("__");
      }
    }
    k = g.lastIndexOf(",");
    g = g.substring(0, k);
    return e.trim().concat("(").concat(g.trim()).concat(")");
  };
  c.makeFuncDef = function(b, c) {
    if (this.isRegisteredFunc(b)) {
      var d = "";
      if (b = this.getFuncInfo(b)) {
        var d = d + b.name, f = "";
        if (b.params && 0 != b.params.length) {
          for (var g in b.params) {
            f += b.params[g], g != b.params.length - 1 && (f = f.concat(", "));
          }
          f = f.trim();
        }
        d = d.concat("(").concat(f).concat(")");
        if (c) {
          return d;
        }
        this._hasRootFunc = !0;
        d = ("def " + d).concat(":\n");
        if (b.statements && b.statements.length) {
          c = "";
          for (var h in b.statements) {
            g = b.statements[h], c = this.getFuncInfo(g) ? c + this.makeFuncDef(g, !0).concat("\n") : c + this.Block(g).concat("\n");
          }
          d += Entry.TextCodingUtil.indent(c).concat("\n");
        }
        return d.trim();
      }
    }
  };
  c.getFuncInfo = function(b) {
    var c = {}, e = b.getFuncId(), f = e && Entry.variableContainer.getFunction(e);
    if (!f) {
      return null;
    }
    e = f.block.template.split(/%\d/)[0].trim().split(" ").join("__");
    Entry.TextCodingUtil.initQueue();
    var f = f.content.getEventMap("funcDef")[0].getThread().getBlocks(), g = f.shift();
    Entry.TextCodingUtil.gatherFuncDefParam(g.getParam(0));
    var h = this, k = [];
    if (this._hasRootFunc) {
      b.params.filter(function(b) {
        return b instanceof Entry.Block;
      }).forEach(function(b) {
        if (b = h.Block(b)) {
          b = h._funcParamMap.get(b) || b, k.push(b);
        }
      });
    } else {
      for (b = []; g = Entry.TextCodingUtil._funcParamQ.dequeue();) {
        b.push(g);
      }
      b.forEach(function(b, c) {
        /(string|boolean)Param/.test(b) && (c = "param" + ++c, k.push(c), h._funcParamMap.put(b, c));
      });
    }
    Entry.TextCodingUtil.clearQueue();
    e && (c.name = e);
    0 !== k.length && (c.params = k);
    0 !== f.length && (c.statements = f);
    return c;
  };
})(Entry.BlockToPyParser.prototype);
Entry.JsToBlockParser = function(c, b) {
  this._type = "JsToBlockParser";
  this.syntax = c;
  this.scopeChain = [];
  this.scope = null;
  this._blockCount = 0;
  this._blockInfo = {};
  this._parentParser = b;
};
(function(c) {
  c.Program = function(b) {
    var c = [], e = [];
    e.push({type:this.syntax.Program});
    for (var f in b) {
      var g = b[f];
      if ("Program" != g.type) {
        return;
      }
      this.initScope(g);
      var g = this.BlockStatement(g), h;
      for (h in g) {
        e.push(g[h]);
      }
      this.unloadScope();
      0 != e.length && c.push(e);
    }
    return c;
  };
  c.Identifier = function(b) {
    return b.name;
  };
  c.Literal = function(b, c) {
    return !0 === b.value ? {type:"True"} : !1 === b.value ? {type:"False"} : "ai_distance_value" == c ? b.value : "ai_boolean_object" == c ? b.value : {type:"text", params:[b.value]};
  };
  c.ExpressionStatement = function(b) {
    b = b.expression;
    return this[b.type](b);
  };
  c.ForStatement = function(b) {
    var c = b.init;
    var e = b.test;
    var f = b.update, g = b.body;
    if (this.syntax.ForStatement) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    g = this[g.type](g);
    c = c.declarations[0].init.value;
    var h = e.operator;
    e = e.right.value;
    var k = 0;
    "++" != f.operator && (f = c, c = e, e = f);
    switch(h) {
      case "<":
        k = e - c;
        break;
      case "<=":
        k = e + 1 - c;
        break;
      case ">":
        k = c - e;
        break;
      case ">=":
        k = c + 1 - e;
    }
    return this.BasicIteration(b, k, g);
  };
  c.BlockStatement = function(b) {
    var c = [];
    b = b.body;
    for (var e = 0; e < b.length; e++) {
      var f = b[e], g = this[f.type](f);
      Entry.TextCodingUtil.hasBlockInfo(f, this._blockInfo) || this._blockCount++;
      Entry.TextCodingUtil.updateBlockInfo(f, this._blockInfo);
      if (g) {
        if (void 0 === g.type) {
          throw {title:"\ube14\ub85d\ubcc0\ud658 \uc624\ub958", message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ube14\ub85d\uc785\ub2c8\ub2e4.", node:f, blockCount:this._blockCount};
        }
        Entry.TextCodingUtil.isParamBlock(g) || g && c.push(g);
      }
    }
    return c;
  };
  c.EmptyStatement = function(b) {
    throw {message:"empty\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.DebuggerStatement = function(b) {
    throw {message:"debugger\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.WithStatement = function(b) {
    throw {message:"with\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ReturnStaement = function(b) {
    throw {message:"return\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.LabeledStatement = function(b) {
    throw {message:"label\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.BreakStatement = function(b) {
    throw {message:"break\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ContinueStatement = function(b) {
    throw {message:"continue\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.IfStatement = function(b) {
    if (this.syntax.BasicIf) {
      return this.BasicIf(b);
    }
    throw {message:"if\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.SwitchStatement = function(b) {
    throw {message:"switch\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.SwitchCase = function(b) {
    throw {message:"switch ~ case\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ThrowStatement = function(b) {
    throw {message:"throw\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.TryStatement = function(b) {
    throw {message:"try\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.CatchClause = function(b) {
    throw {message:"catch\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.WhileStatement = function(b) {
    var c = b.body, e = this.syntax.WhileStatement, c = this[c.type](c);
    if (e) {
      throw {message:"while\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return this.BasicWhile(b, c);
  };
  c.DoWhileStatement = function(b) {
    throw {message:"do ~ while\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ForInStatement = function(b) {
    throw {message:"for ~ in\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.FunctionDeclaration = function(b) {
    if (this.syntax.FunctionDeclaration) {
      throw {message:"function\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return null;
  };
  c.VariableDeclaration = function(b) {
    throw {message:"var\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ThisExpression = function(b) {
    return this.scope.this;
  };
  c.ArrayExpression = function(b) {
    throw {message:"array\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.ObjectExpression = function(b) {
    throw {message:"object\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.Property = function(b) {
    throw {message:"init, get, set\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.FunctionExpression = function(b) {
    throw {message:"function\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.UnaryExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  c.UnaryOperator = function() {
    return "- + ! ~ typeof void delete".split(" ");
  };
  c.updateOperator = function() {
    return ["++", "--"];
  };
  c.BinaryOperator = function() {
    return "== != === !== < <= > >= << >> >>> + - * / % , ^ & in instanceof".split(" ");
  };
  c.AssignmentExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  c.AssignmentOperator = function() {
    return "= += -= *= /= %= <<= >>= >>>= ,= ^= &=".split(" ");
  };
  c.BinaryExpression = function(b) {
    var c = {};
    var e = String(b.operator);
    var f = b.left.name;
    switch(e) {
      case "==":
        var g = "object_up" == f || "object_right" == f || "object_down" == f ? "ai_boolean_object" : "radar_up" == f || "radar_right" == f || "radar_down" == f ? "ai_boolean_distance" : null;
        break;
      case "<":
        g = "ai_boolean_distance";
        break;
      case "<=":
        g = "ai_boolean_distance";
        break;
      case ">":
        g = "ai_boolean_distance";
        break;
      case ">=":
        g = "ai_boolean_distance";
    }
    if (g) {
      f = [];
      var h = b.left;
      if ("Literal" == h.type || "Identifier" == h.type) {
        arguments = [];
        arguments.push(h);
        h = Entry.block[g].params;
        for (var k in h) {
          e = h[k].type, "Indicator" == e ? (e = {raw:null, type:"Literal", value:null}, k < arguments.length && arguments.splice(k, 0, e)) : "Text" == e && (e = {raw:"", type:"Literal", value:""}, k < arguments.length && arguments.splice(k, 0, e));
        }
        for (var l in arguments) {
          h = arguments[l], h = this[h.type](h), (h = Entry.TextCodingUtil.radarVariableConvertor(h)) && null != h && f.push(h);
        }
      } else {
        h = this[h.type](h), (h = Entry.TextCodingUtil.radarVariableConvertor(h)) && f.push(h);
      }
      if (e = String(b.operator)) {
        (h = e = Entry.TextCodingUtil.jTobBinaryOperatorConvertor(e)) && f.push(h), c.operator = e;
      }
      h = b.right;
      if ("Literal" == h.type || "Identifier" == h.type) {
        arguments = [];
        arguments.push(h);
        h = Entry.block[g].params;
        for (k in h) {
          e = h[k].type, "Indicator" == e ? (e = {raw:null, type:"Literal", value:null}, k < arguments.length && arguments.splice(k, 0, e)) : "Text" == e && (e = {raw:"", type:"Literal", value:""}, k < arguments.length && arguments.splice(k, 0, e));
        }
        for (l in arguments) {
          if (h = arguments[l], h = this[h.type](h), "string" == typeof h && (k = h.split("_"), "radar" == k[0] && (h = {type:"ai_distance_value", params:[]}, h.params.push(k[1].toUpperCase()))), h && null != h && ("ai_boolean_object" == g && (h = h.params[0], f.splice(1, 1)), h = Entry.TextCodingUtil.tTobDropdownValueConvertor(h), f.push(h), f[2] && "text" != f[2].type && "ai_distance_value" != f[2].type)) {
            throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
          }
        }
      } else {
        h = this[h.type](h), "ai_boolean_object" == g && (h = h.params[0], f.splice(1, 1)), h && f.push(h);
      }
      c.type = g;
      c.params = f;
    } else {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
    }
    return c;
  };
  c.LogicalExpression = function(b) {
    var c = {};
    var e = String(b.operator);
    switch(e) {
      case "&&":
        var f = "ai_boolean_and";
        break;
      default:
        f = "ai_boolean_and";
    }
    var g = [];
    e = b.left;
    if ("Literal" == e.type || "Identifier" == e.type) {
      arguments = [];
      arguments.push(e);
      e = Entry.block[f].params;
      for (var h in e) {
        var k = e[h].type;
        "Indicator" == k ? (k = {raw:null, type:"Literal", value:null}, h < arguments.length && arguments.splice(h, 0, k)) : "Text" == k && (k = {raw:"", type:"Literal", value:""}, h < arguments.length && arguments.splice(h, 0, k));
      }
      for (var l in arguments) {
        e = arguments[l], (e = this[e.type](e)) && null != e && g.push(e);
      }
    } else {
      (e = this[e.type](e)) && g.push(e);
    }
    if (e = String(b.operator)) {
      e = Entry.TextCodingUtil.logicalExpressionConvert(e), g.push(e);
    }
    e = b.right;
    if ("Literal" == e.type || "Identifier" == e.type) {
      arguments = [];
      arguments.push(e);
      e = Entry.block[f].params;
      for (h in e) {
        k = e[h].type, "Indicator" == k ? (k = {raw:null, type:"Literal", value:null}, h < arguments.length && arguments.splice(h, 0, k)) : "Text" == k && (k = {raw:"", type:"Literal", value:""}, h < arguments.length && arguments.splice(h, 0, k));
      }
      for (l in arguments) {
        e = arguments[l], (e = this[e.type](e)) && null != e && g.push(e);
      }
      if ("True" != g[0].type && "ai_boolean_distance" != g[0].type && "ai_boolean_object" != g[0].type && "ai_boolean_and" != g[0].type && "ai_distance_value" != g[0].type) {
        throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub801\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
      }
      if ("True" != g[2].type && "ai_boolean_distance" != g[2].type && "ai_boolean_object" != g[2].type && "ai_boolean_and" != g[2].type && "ai_distance_value" != g[2].type) {
        throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub801\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
      }
    } else {
      (e = this[e.type](e)) && g.push(e);
    }
    c.type = f;
    c.params = g;
    return c;
  };
  c.LogicalOperator = function() {
    return ["||", "&&"];
  };
  c.MemberExpression = function(b) {
    var c = b.object, e = b.property, c = this[c.type](c), e = this[e.type](e, c);
    if (Object(c) !== c || Object.getPrototypeOf(c) !== Object.prototype) {
      throw {message:c + "\uc740(\ub294) \uc798\ubabb\ub41c \uba64\ubc84 \ubcc0\uc218\uc785\ub2c8\ub2e4.", node:b};
    }
    c = e;
    if (!c) {
      throw {message:e + "\uc774(\uac00) \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.", node:b};
    }
    return c;
  };
  c.ConditionalExpression = function(b) {
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.UpdateExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub801\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  c.CallExpression = function(b) {
    for (var c = b.callee, e = b.arguments, f = [], g = this[c.type](c), g = this.syntax.Scope[g], h = Entry.block[g].params, k = 0; k < e.length; k++) {
      var l = e[k], l = this[l.type](l, g), m = h[k].type;
      "Dropdown" == m ? f.push(l) : "Block" === m ? f.push("string" == typeof l ? {type:"text", params:[l]} : "number" == typeof l ? {type:"number", params:[l]} : l) : f.push(l);
      if (l.type !== m && this._parentParser) {
        var l = Lang.Msgs.warn, m = this._parentParser.getLineNumber(b.start, b.end).from.line + 1, q = Lang.TextCoding.warn_unnecessary_arguments, q = q.replace("&(calleeName)", c.name).replace("&(lineNumber)", m);
        Entry.toast.warning(l, q);
      }
    }
    return {type:g, params:f};
  };
  c.NewExpression = function(b) {
    throw {message:"new\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.SequenceExpression = function(b) {
    throw {message:"SequenceExpression \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  c.initScope = function(b) {
    if (null === this.scope) {
      var c = function() {
      };
      c.prototype = this.syntax.Scope;
    } else {
      c = function() {
      }, c.prototype = this.scope;
    }
    this.scope = new c;
    this.scopeChain.push(this.scope);
    return this.scanDefinition(b);
  };
  c.unloadScope = function() {
    this.scopeChain.pop();
    this.scope = this.scopeChain.length ? this.scopeChain[this.scopeChain.length - 1] : null;
  };
  c.scanDefinition = function(b) {
    b = b.body;
    for (var c = [], e = 0; e < b.length; e++) {
      var f = b[e];
      "FunctionDeclaration" === f.type && (this.scope[f.id.name] = this.scope.promise, this.syntax.BasicFunction && (f = f.body, c.push([{type:this.syntax.BasicFunction, statements:[this[f.type](f)]}])));
    }
    return c;
  };
  c.BasicFunction = function(b, c) {
    return null;
  };
  c.BasicIteration = function(b, c, e) {
    if (10 < c) {
      throw {message:"\ubc18\ubcf5 \uc22b\uc790\uac12\uc774 10\uc744 \ub118\uc73c\uba74 \uc548\ub429\ub2c8\ub2e4.", node:b.test};
    }
    var d = this.syntax.BasicIteration;
    if (!d) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return {params:[c], type:d, statements:[e]};
  };
  c.BasicWhile = function(b, c) {
    var d = b.test.raw;
    if (this.syntax.BasicWhile[d]) {
      return {type:this.syntax.BasicWhile[d], statements:[c]};
    }
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
  };
  c.BasicIf = function(b) {
    var c, e, f = {params:[], statements:[]}, g = [], h = [], k = [], l = b.consequent;
    l && (e = this[l.type](l));
    (l = b.alternate) && (c = this[l.type](l));
    try {
      var m = b.test.operator ? "===" === b.test.operator ? "==" : b.test.operator : null;
      var q = b.test.left && b.test.right ? b.test.left.name + b.test.right.value : null;
      if ("frontwall" == q && "==" == m) {
        var n = this.syntax.BasicIf["front == 'wall'"];
      } else {
        if ("fronthump" == q && "==" == m) {
          n = this.syntax.BasicIf["front == 'hump'"];
        } else {
          if ("frontstone" == q && "==" == m) {
            n = this.syntax.BasicIf["front == 'stone'"];
          } else {
            if ("frontbee" == q && "==" == m) {
              n = this.syntax.BasicIf["front == 'bee'"];
            } else {
              if (b.test.value || b.test.left && b.test.right) {
                n = "ai_if_else";
                var r = this[b.test.type](b.test, this.syntax.Scope);
                k.push(r);
              } else {
                throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
              }
            }
          }
        }
      }
      n ? (e && 0 != e.length && f.statements.push(e), c && 0 != c.length && f.statements.push(c), n && (f.type = n), k && 0 != k.length && (f.params = k)) : (e && 0 != e.length && (g = e), c && 0 != c.length && (h = c), n && (f.type = n), k && 0 != k.length && (f.params = k), f.statements = [g, h]);
      return f;
    } catch (t) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
    }
  };
  c.searchSyntax = function(b) {
    return null;
  };
})(Entry.JsToBlockParser.prototype);
Entry.CodeMap = {};
(function(c) {
  c.Entry = {start_neighbor_scene:[{"\ub2e4\uc74c":"next", "\uc774\uc804":"pre"}], stop_object:[{thisOnly:"self", thisThread:"this", otherThread:"others", self:"thisOnly", "this":"thisThread", others:"otherThread", "\ubaa8\ub4e0":"all", "\uc790\uc2e0":"thisOnly", "\uc774":"thisThread", "\uc790\uc2e0\uc758 \ub2e4\ub978":"otherThread"}], change_to_next_shape:[{prev:"pre", pre:"prev", "\ub2e4\uc74c":"next", "\uc774\uc804":"prev"}], add_effect_amount:[{"\uc0c9\uae54":"color", "\ubc1d\uae30":"brightness", 
  "\ud22c\uba85\ub3c4":"transparency"}], change_effect_amount:[{"\uc0c9\uae54":"color", "\ubc1d\uae30":"brightness", "\ud22c\uba85\ub3c4":"transparency"}], change_object_index:[{front:"FRONT", forward:"FORWARD", backward:"BACKWARD", back:"BACK", "\ub9e8 \uc55e":"FRONT", "\uc55e":"FORWARD", "\ub4a4":"BACKWARD", "\ub9e8 \ub4a4":"BACK"}], set_color:[{red:"#FF0000", orange:"#FF9966", yellow:"#FFFF66", green:"#009900", blue:"#3333FF", navy:"#000099", purple:"#993399", black:"#000000", white:"#FFFFFF", 
  brown:"#990000"}], reach_something:[null, {mouse:"mouse_pointer", wall:"edge", wall_up:"edge_up", wall_down:"edge_down", wall_right:"edge_right", wall_left:"edge_left", mouse_pointer:"mouse", edge:"wall", edge_up:"wall_up", edge_down:"wall_down", edge_right:"wall_right", edge_left:"wall_left", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}, null], create_clone:[{"\uc790\uc2e0":"self", self:"self"}], locate:[{mouse:"mouse_pointer", mouse_pointer:"mouse", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}], 
  locate_object_time:[null, {mouse:"mouse_pointer", mouse_pointer:"mouse", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}], see_angle_object:[{mouse:"mouse_pointer", mouse_pointer:"mouse", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}], coordinate_mouse:[null, {X:"x", Y:"y"}, null], coordinate_object:[null, {"\uc790\uc2e0":"self", self:"self"}, null, {"\ud06c\uae30":"size", "\ubc29\ud5a5":"rotation", "\uc774\ub3d9 \ubc29\ud5a5":"direction", "\ubaa8\uc591 \ubc88\ud638":"picture_index", "\ubaa8\uc591 \uc774\ub984":"picture_name", 
  picture_index:"shape_number", picture_name:"shape_name", shape_number:"picture_index", shape_name:"picture_name"}], choose_project_timer_action:[null, {start:"START", stop:"STOP", reset:"RESET"}], set_visible_project_timer:[null, {show:"SHOW", hide:"HIDE"}], get_date:[null, {year:"YEAR", month:"MONTH", day:"DAY", hour:"HOUR", minute:"MINUTE", second:"SECOND"}], distance_something:[null, {mouse:"mouse_pointer", mouse_pointer:"mouse", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}], set_visible_answer:[{show:"SHOW", 
  hide:"HIDE"}]};
  c.Arduino = {arduino_ext_analog_list:[{a0:"0", a1:"1", a2:"2", a3:"3", a4:"4", a5:"5"}], arduino_get_digital_toggle:[{on:"high", off:"low", high:"on", low:"off"}]};
  c.Hamster = {hamster_play_note_for:[{4:"hamster.note_c", 5:"hamster.note_c_sharp", 6:"hamster.note_d", 7:"hamster.note_e_flat", 8:"hamster.note_e", 9:"hamster.note_f", 10:"hamster.note_f_sharp", 11:"hamster.note_g", 12:"hamster.note_g_sharp", 13:"hamster.note_a", 14:"hamster.note_b_flat", 15:"hamster.note_b", "hamster.note_c":4, "hamster.note_c_sharp":5, "hamster.note_d_flat":5, "hamster.note_d":6, "hamster.note_e_flat":7, "hamster.note_d_sharp":7, "hamster.note_e":8, "hamster.note_f":9, "hamster.note_f_sharp":10, 
  "hamster.note_g_flat":10, "hamster.note_g":11, "hamster.note_g_sharp":12, "hamster.note_a_flat":12, "hamster.note_a":13, "hamster.note_b_flat":14, "hamster.note_a_sharp":14, "hamster.note_b":15}, null, null]};
  c.Turtle = {touching_colors:{1:"turtle.color_black", 2:"turtle.color_red", 3:"turtle.color_orange", 4:"turtle.color_yellow", 5:"turtle.color_green", 6:"turtle.color_cyan", 7:"turtle.color_blue", 8:"turtle.color_magenta", 9:"turtle.color_white", "turtle.color_black":1, "turtle.color_red":2, "turtle.color_orange":3, "turtle.color_yellow":4, "turtle.color_green":5, "turtle.color_cyan":6, "turtle.color_sky_blue":6, "turtle.color_blue":7, "turtle.color_magenta":8, "turtle.color_purple":8, "turtle.color_white":9}, 
  pattern_colors:{1:"turtle.color_red", 3:"turtle.color_yellow", 4:"turtle.color_green", 5:"turtle.color_cyan", 6:"turtle.color_blue", 7:"turtle.color_magenta", "turtle.color_red":1, "turtle.color_yellow":3, "turtle.color_green":4, "turtle.color_cyan":5, "turtle.color_sky_blue":5, "turtle.color_blue":6, "turtle.color_magenta":7, "turtle.color_purple":7}, units:{CM:"turtle.unit_cm", DEG:"turtle.unit_deg", SEC:"turtle.unit_sec", PULSE:"turtle.unit_pulse", "turtle.unit_cm":"CM", "turtle.unit_deg":"DEG", 
  "turtle.unit_sec":"SEC", "turtle.unit_pulse":"PULSE"}, head_tail:{HEAD:"turtle.head", TAIL:"turtle.tail", "turtle.head":"HEAD", "turtle.tail":"TAIL"}, line_colors:{10:"turtle.color_black", 11:"turtle.color_red", 13:"turtle.color_green", 15:"turtle.color_blue", 17:"turtle.color_any", "turtle.color_black":10, "turtle.color_red":11, "turtle.color_green":13, "turtle.color_blue":15, "turtle.color_any":17}, target_colors:{61:"turtle.color_red", 62:"turtle.color_yellow", 63:"turtle.color_green", 64:"turtle.color_cyan", 
  65:"turtle.color_blue", 66:"turtle.color_magenta", 67:"turtle.color_any", "turtle.color_red":61, "turtle.color_yellow":62, "turtle.color_green":63, "turtle.color_cyan":64, "turtle.color_sky_blue":64, "turtle.color_blue":65, "turtle.color_magenta":66, "turtle.color_purple":66, "turtle.color_any":67}, color_lines:{71:"turtle.color_red", 73:"turtle.color_green", 75:"turtle.color_blue", 77:"turtle.color_any", "turtle.color_red":71, "turtle.color_green":73, "turtle.color_blue":75, "turtle.color_any":77}, 
  led_colors:{RED:"turtle.color_red", ORANGE:"turtle.color_orange", YELLOW:"turtle.color_yellow", GREEN:"turtle.color_green", CYAN:"turtle.color_cyan", BLUE:"turtle.color_blue", VIOLET:"turtle.color_violet", MAGENTA:"turtle.color_magenta", WHITE:"turtle.color_white", "turtle.color_red":"RED", "turtle.color_orange":"ORANGE", "turtle.color_yellow":"YELLOW", "turtle.color_green":"GREEN", "turtle.color_cyan":"CYAN", "turtle.color_sky_blue":"CYAN", "turtle.color_blue":"BLUE", "turtle.color_violet":"VIOLET", 
  "turtle.color_magenta":"MAGENTA", "turtle.color_purple":"MAGENTA", "turtle.color_white":"WHITE"}, sounds:{1:"turtle.sound_beep", 2:"turtle.sound_random", 3:"turtle.sound_siren", 4:"turtle.sound_engine", 5:"turtle.sound_robot", 6:"turtle.sound_march", 7:"turtle.sound_birthday", 8:"turtle.sound_dibidibidip", 9:"turtle.sound_good_job", "turtle.sound_beep":1, "turtle.sound_random":2, "turtle.sound_siren":3, "turtle.sound_engine":4, "turtle.sound_robot":5, "turtle.sound_march":6, "turtle.sound_birthday":7, 
  "turtle.sound_dibidibidip":8, "turtle.sound_good_job":9}, notes:{4:"turtle.note_c", 5:"turtle.note_c_sharp", 6:"turtle.note_d", 7:"turtle.note_e_flat", 8:"turtle.note_e", 9:"turtle.note_f", 10:"turtle.note_f_sharp", 11:"turtle.note_g", 12:"turtle.note_g_sharp", 13:"turtle.note_a", 14:"turtle.note_b_flat", 15:"turtle.note_b", "turtle.note_c":4, "turtle.note_c_sharp":5, "turtle.note_d_flat":5, "turtle.note_d":6, "turtle.note_e_flat":7, "turtle.note_d_sharp":7, "turtle.note_e":8, "turtle.note_f":9, 
  "turtle.note_f_sharp":10, "turtle.note_g_flat":10, "turtle.note_g":11, "turtle.note_g_sharp":12, "turtle.note_a_flat":12, "turtle.note_a":13, "turtle.note_b_flat":14, "turtle.note_a_sharp":14, "turtle.note_b":15}};
})(Entry.CodeMap);
Entry.PyToBlockParser = function(c) {
  this._type = "PyToBlockParser";
  this.dic = c["#dic"];
  this.blockSyntax = c;
  this._funcParamMap = {};
  this._funcMap = {};
  this._isInFuncDef = !1;
};
(function(c) {
  c.util = Entry.TextCodingUtil;
  c.binaryOperator = {"==":"EQUAL", ">":"GREATER", "<":"LESS", ">=":"GREATER_OR_EQUAL", "<=":"LESS_OR_EQUAL"};
  c.arithmeticOperator = {"+":"PLUS", "-":"MINUS", "*":"MULTI", "/":"DIVIDE"};
  c.divideOperator = {"//":"QUOTIENT", "%":"MOD"};
  c.logicalOperator = {"&&":"AND", "||":"OR"};
  c.Programs = function(b) {
    try {
      return this.processPrograms(b);
    } catch (d) {
      throw b = {}, b.title = d.title, b.message = d.message, b.line = d.line, b;
    }
  };
  c.processPrograms = function(b) {
    this.createFunctionMap();
    this._funcParamMap = {};
    this._isInFuncDef = !1;
    var c = Entry.playground.mainWorkspace;
    if (c && !c.board.code) {
      return [];
    }
    this.object = c ? c.board.code.object : Entry.playground.object;
    if (!b[0]) {
      return [];
    }
    (c = b[0].body) && c[0] && "ExpressionStatement" === c[0].type && "AssignmentExpression" === c[0].expression.type ? (c = this.getVariables(b[0]), b.splice(0, 1), b = b.map(this.Node, this), b = c.concat(b)) : b = b.map(this.Node, this);
    return b.filter(function(b) {
      return 0 < b.length;
    });
  };
  c.Program = function(b) {
    b = b.body.map(function(b) {
      var c = this.Node(b);
      this.assert("object" === typeof c, "", b, "NO_SUPPORT", "GENERAL");
      return c;
    }, this);
    return b[0].constructor == Array ? b[0] : b;
  };
  c.ExpressionStatement = function(b) {
    return this.Node(b.expression);
  };
  c.CallExpression = function(b) {
    var c = b.callee, e = b.arguments, f = this.Node(c);
    f.type && "Identifier" === b.callee.type && (f = c.name);
    if ("string" === typeof f && "MemberExpression" === c.type && this[f]) {
      return this[f](b);
    }
    if ("Identifier" === c.type) {
      if (this._funcMap[f]) {
        f = {type:"func_" + this._funcMap[f][e.length]};
      } else {
        if (this[f]) {
          return this[f](b);
        }
        e = this.blockSyntax[f];
        this.assert(e && e.key, "", c, "NO_FUNCTION", "GENERAL");
        f = this.Block({}, e);
      }
    }
    f.preParams && (b.arguments = f.preParams.concat(b.arguments), delete f.preParams);
    b.arguments && (f.params = this.Arguments(f.type, b.arguments, f.params));
    "is_press_some_key" == f.type && (f.params = [Entry.KeyboardCode.map[b.arguments[0].value] + ""]);
    return f;
  };
  c.Identifier = function(b) {
    b = b.name;
    if (this._isInFuncDef && this._funcParamMap[b]) {
      return {type:"stringParam_" + this._funcParamMap[b]};
    }
    var c = Entry.variableContainer.getVariableByName(b);
    return c ? {type:"get_variable", params:[c.id_]} : (c = Entry.variableContainer.getListByName(b)) ? {type:"get_list", params:[c.id_]} : b;
  };
  c.VariableDeclaration = function(b) {
    return b.declarations.map(this.Node, this);
  };
  c.VariableDeclarator = function(b) {
    return b.init && b.init.arguments ? b.init.arguments.map(this.Node, this) : [];
  };
  c.AssignmentExpression = function(b) {
    var c = {params:[]};
    switch(b.left.type) {
      case "MemberExpression":
        c.type = "change_value_list_index";
        var e = b.left.object.name;
        if ("self" === e) {
          c.type = "set_variable";
          var f = Entry.variableContainer.getVariableByName(b.left.property.name, !0, this.object.id);
          f || (Entry.variableContainer.addVariable({variableType:"variable", name:b.left.property.name, visible:!0, object:this.object.id, value:0}), f = Entry.variableContainer.getVariableByName(b.left.property.name, !0, this.object.id));
          c.params.push(f.id_);
        } else {
          f = Entry.variableContainer.getListByName(e), this.assert(f, e, b.left.object, "NO_LIST", "LIST"), c.params.push(f.id_), c.params.push(this.ListIndex(this.Node(b.left.property.arguments[1])));
        }
        break;
      case "Identifier":
        c.type = "set_variable";
        f = Entry.variableContainer.getVariableByName(b.left.name, !1);
        f || (Entry.variableContainer.addVariable({variableType:"variable", name:b.left.name, visible:!0, value:0}), f = Entry.variableContainer.getVariableByName(b.left.name, !1));
        c.params.push(f.id_);
        break;
      default:
        this.assert(!1, "error", b.left, "NO_SUPPORT", "GENERAL");
    }
    e = this.Node(b.right);
    switch(b.operator) {
      case "=":
        break;
      case "+=":
        if ("set_variable" === c.type) {
          c.type = "change_variable";
          break;
        }
      default:
        var g = this.arithmeticOperator[b.operator[0]];
        g && (e = {type:"calc_basic", params:["set_variable" === c.type ? {type:"get_variable", params:[f.id_]} : {type:"value_of_index_from_list", params:[void 0, f.id_, void 0, this.ListIndex(this.Node(b.left.property.arguments[1]))]}, g, e]});
    }
    c.params.push(e);
    return c;
  };
  c.Literal = function(b, c, e) {
    var d = b.value;
    switch(typeof d) {
      case "boolean":
        return {type:d ? "True" : "False"};
    }
    switch(c ? c.type : "Block") {
      case "DropdownDynamic":
        return this.DropdownDynamic(d, c);
      case "Block":
        return e && e.type ? {type:e.type, params:this.Arguments(e.type, [b])} : {type:"number", params:[this.getValue(b)]};
      default:
        return this.getValue(b);
    }
  };
  c.MemberExpression = function(b) {
    var c = {};
    if ("self" === b.object.name) {
      var e = Entry.variableContainer.getVariableByName(b.property.name, !0, this.object.id);
      if (e) {
        return {type:"get_variable", params:[e.id_]};
      }
      if (e = Entry.variableContainer.getListByName(b.property.name, !0, this.object.id)) {
        return {type:"get_list", params:[e.id_]};
      }
      this.assert(e, "variable not exist", b);
    } else {
      if ("Literal" === b.object.type) {
        var f = "%2";
        c.preParams = [b.object];
      } else {
        f = this.Node(b.object);
      }
    }
    "object" === typeof f && (c.preParams = "get_list" === f.type ? [f.params[0]] : [b.object], f = "%2");
    e = b.property;
    if ("CallExpression" === e.type) {
      return this.SubscriptIndex(b);
    }
    if ("_pySlice" === e.name) {
      f = this.blockSyntax["%2[%4:%6]"];
    } else {
      if (b = f + "." + e.name, this.blockSyntax[f] && this.blockSyntax[f][e.name]) {
        if (this[b]) {
          return b;
        }
        f = this.blockSyntax[f][e.name];
      } else {
        return b;
      }
    }
    this.Block(c, f);
    return c;
  };
  c.WhileStatement = function(b) {
    var c = {statements:[this.setParams(b.body.body)]}, e = b.test;
    "True" === e.raw ? c.type = "repeat_inf" : (c.type = "repeat_while_true", c.params = "UnaryExpression" === e.type && "!" === e.operator ? [this.Node(b.test.argument), "until"] : [this.Node(b.test), "while"]);
    return c;
  };
  c.BlockStatement = function(b) {
    b = b.body.map(this.Node, this);
    b.constructor == Array && b[0].length && (0 < b.length && b[b.length - 1][0].params.push(b[0][0][0]), b = b[b.length - 1][0]);
    return b;
  };
  c.IfStatement = function(b) {
    var c;
    if ((c = b.alternate) && c.body && c.body[0] && "type" in c.body[0] && "ForInStatement" === c.body[0].type) {
      c = b.alternate.body.map(this.Node, this), b.consequent.body[0].body.body.shift(), b = b.consequent.body[0].body.body, c[0].statements.push(this.setParams(b));
    } else {
      if ("alternate" in b && b.alternate) {
        c = b.consequent ? b.consequent.body.map(this.Node, this) : [];
        var e = b.alternate ? b.alternate.body.map(this.Node, this) : [];
        c = {type:"if_else", statements:[c, e], params:[this.Node(b.test)]};
      } else {
        c = {type:"_if", statements:[this.setParams(b.consequent.body)], params:[this.Node(b.test)]};
      }
    }
    return c;
  };
  c.ForStatement = function(b) {
    b = b.body.body;
    return this.Node(b[b.length - 1]);
  };
  c.ForInStatement = function(b) {
    return {type:"repeat_basic", params:[], statements:[]};
  };
  c.BreakStatement = function(b) {
    return {type:this.blockSyntax.break.key};
  };
  c.UnaryExpression = function(b) {
    switch(b.operator) {
      case "!":
        return {type:"boolean_not", params:[void 0, this.Node(b.argument)]};
      case "-":
      case "+":
        return b = this.Node(b.argument), this.assert("number" === b.type, "Can't convert this operation"), b.params = ["-" + b.params[0]], b;
      default:
        throw Error("Unary operator " + b.operator + " is not supported");
    }
  };
  c.LogicalExpression = function(b) {
    return {type:"boolean_and_or", params:[this.Node(b.left), this.logicalOperator[b.operator], this.Node(b.right)]};
  };
  c.BinaryExpression = function(b) {
    var c = b.operator;
    if (this.binaryOperator[c]) {
      var e = "boolean_basic_operator";
      c = this.binaryOperator[c];
    } else {
      if (this.arithmeticOperator[c]) {
        e = "calc_basic", c = this.arithmeticOperator[c];
      } else {
        if (this.divideOperator[c]) {
          return {type:"quotient_and_mod", params:[void 0, this.Node(b.left), void 0, this.Node(b.right), void 0, this.divideOperator[c]]};
        }
        throw Error("Not supported operator " + b.operator);
      }
    }
    return {type:e, params:[this.Node(b.left), c, this.Node(b.right)]};
  };
  c.FunctionDeclaration = function(b) {
    var c = b.id.name;
    this.assert(!this._isInFuncDef, c, b, "NO_ENTRY_EVENT_FUNCTION", "FUNCTION");
    this._isInFuncDef = !0;
    var e = {};
    this.assert(b.body.body[0], c, b, "NO_OBJECT", "OBJECT");
    var f = b.body.body[0].argument.callee.object.body.body;
    if ("when_press_key" === c) {
      if (b.arguments && b.arguments[0]) {
        var g = b.arguments[0].name;
        e.params = [null, Entry.KeyboardCode.map[g] + ""];
      } else {
        e.params = [null, null];
      }
    }
    "when_get_signal" === c && (b.arguments && b.arguments[0] ? (g = b.arguments[0].name, e.params = [null, this.getMessage(g)]) : e.params = [null, null]);
    if (g = this.blockSyntax["def " + c]) {
      return e.type = g.key, b = this.setParams(f), b.unshift(e), this._isInFuncDef = !1, b;
    }
    this.createFunction(b, c, f);
    this._isInFuncDef = !1;
    return [];
  };
  c.FunctionExpression = function(b) {
    return this.Node(b.body);
  };
  c.ReturnStatement = function(b) {
    return b.argument.arguments.map(this.Node, this);
  };
  c.NewExpression = function(b) {
    return this.Node(b.callee);
  };
  c.SubscriptIndex = function(b) {
    var c = "get_list" === this.Node(b.object).type ? this.blockSyntax["%2[%4]"] : this.blockSyntax["%2[%4]#char_at"];
    c = this.Block({}, c);
    c.params = this.Arguments(c.type, b.property.arguments);
    return c;
  };
  c.Arguments = function(b, c, e) {
    var d = Entry.block[b];
    if (b && "func_" === b.substr(0, 5) || !d) {
      e = c;
    } else {
      var g = this.PySyntax(d, e).match(/%\d+/g, "");
      if (!g) {
        return [];
      }
      e = e || [];
      for (var h = 0; h < g.length; h++) {
        var k = parseInt(g[h].substring(1)) - 1;
        e[k] = c[h];
      }
      var l = d.def && d.def.params ? d.def.params : void 0;
    }
    c = e.map(function(b, c) {
      if (b && b.type) {
        var e = d ? d.params[c] : null;
        c = this.Node(b, "Literal" === b.type ? e : void 0, "Literal" === b.type && l ? l[c] : void 0);
        this.assert(!("string" === typeof c && "Identifier" === b.type), c, b, "NO_VARIABLE", "VARIABLE");
        e && ("Block" !== e.type && c && c.params ? c = c.params[0] : "Block" === e.type && e.isListIndex && (c = this.ListIndex(c)));
        return c;
      }
      return b;
    }, this);
    var m = this.CodeMap(b);
    m && (c = c.map(function(b, c) {
      return m[c] ? m[c][b] || b : b;
    }));
    return c;
  };
  c.getValue = function(b) {
    if ("Literal" === b.type) {
      var c = b.raw;
      if ("None" !== c) {
        return b.value.constructor === String ? c = b.raw.includes('"') || b.raw.includes("'") ? b.raw.substr(1, b.raw.length - 2) : b.raw : b.value.constructor === Number && (c = b.value), c;
      }
    } else {
      return c = this.Node(b), c.params && c.params[0] ? c.params[0] : null;
    }
  };
  c.getMessage = function(b) {
    if (b) {
      b = b.replace(/_space_/gi, " ");
      var c = Entry.variableContainer.messages_.filter(function(c) {
        return c.name === b;
      });
      0 >= c.length && (Entry.variableContainer.addMessage({name:b}), c = Entry.variableContainer.messages_.filter(function(c) {
        return c.name === b;
      }));
      return object = c && 0 < c.length ? c[0].id : b;
    }
  };
  c.DropdownDynamic = function(b, c) {
    var d;
    switch(c.menuName) {
      case "sprites":
      case "spritesWithMouse":
        return c = (c = Entry.container.objects_.filter(function(c) {
          return c.name === b;
        })) && 0 < c.length ? c[0].id : b;
      case "spritesWithSelf":
        return b ? "self" == b ? c = b : (c = Entry.container.objects_.filter(function(c) {
          return c.name === b;
        }), c = c[0].id) : c = "None", c;
      case "collision":
        return c = (c = Entry.container.objects_.filter(function(c) {
          return c.name === b;
        })) && 0 < c.length ? c[0].id : b;
      case "pictures":
        return (c = this.object.getPicture(b)) ? c.id : void 0;
      case "messages":
        return this.getMessage(b);
      case "variables":
        if (!b) {
          break;
        }
        b = b.split(".");
        return (c = 1 < b.length ? Entry.variableContainer.getVariableByName(b[1], !0, this.object.id) : Entry.variableContainer.getVariableByName(b[0], !1, this.object.id)) ? c.id_ : void 0;
      case "lists":
        if (!b) {
          break;
        }
        b = b.split(".");
        return (c = 1 < b.length ? Entry.variableContainer.getListByName(b[1], !0, this.object.id) : Entry.variableContainer.getListByName(b[0], !1, this.object.id)) ? c.id_ : void 0;
      case "scenes":
        return c = Entry.scene.scenes_.filter(function(c) {
          return c.name === b;
        }), c[0] ? c[0].id : void 0;
      case "sounds":
        return b && (d = this.object.getSound(b)), d ? d.id : void 0;
      case "clone":
        return b ? "self" == b ? c = b : (c = Entry.container.objects_.filter(function(c) {
          return c.name === b;
        }), c = c[0] ? c[0].id : null) : c = null, c;
    }
  };
  c.Node = function(b, c) {
    var d = !1;
    "string" === typeof b && b !== c.type ? this.assert(!1, c.name || c.value || c.operator, c, "NO_SUPPORT", "GENERAL") : "string" === typeof b && (d = !0);
    var f = Array.prototype.slice.call(arguments);
    d && f.shift();
    c = f[0];
    if (!this[c.type]) {
      throw Error(c.type + " is not supported");
    }
    return this[c.type].apply(this, f);
  };
  c.PySyntax = function(b, c) {
    if (c) {
      var d = b.syntax.py.filter(function(b) {
        if (!b.params) {
          return !1;
        }
        var d = !0;
        b.params.map(function(b, e) {
          b != c[e] && (d = !1);
        });
        return d;
      });
      if (d.length) {
        return d[0].syntax;
      }
    }
    b = b.syntax.py[0];
    return b.syntax || b;
  };
  c.CodeMap = function(b) {
    var c = Entry.block[b];
    if (c && c.syntax && c.syntax.py && (c = c.syntax.py[0].syntax) && (c = c.split("(")[0].split("."), !(2 > c.length) && (c = c[0], Entry.CodeMap[c] && Entry.CodeMap[c][b]))) {
      return Entry.CodeMap[c][b];
    }
  };
  c.Block = function(b, c) {
    b.type = c.key;
    c.params && (b.params = c.params.concat());
    return b;
  };
  c.ListIndex = function(b) {
    this.isParamPrimitive(b) ? b.params = [Number(b.params[0]) + 1] : b = "calc_basic" === b.type && "MINUS" === b.params[1] && this.isParamPrimitive(b.params[2]) && "1" === b.params[2].params[0] + "" ? b.params[0] : {type:"calc_basic", params:[b, "PLUS", {type:"text", params:["1"]}]};
    return b;
  };
  c.isParamPrimitive = function(b) {
    return b && ("number" === b.type || "text" === b.type);
  };
  c.assert = function(b, c, e, f, g) {
    b || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError["MESSAGE_CONV_" + (f || "NO_SUPPORT")], c, e.loc, Entry.TextCodingError["SUBJECT_CONV_" + (g || "GENERAL")]);
  };
  c.setParams = function(b) {
    b = b.length ? b.map(function(b) {
      var c = this.Node(b);
      this.assert("object" === typeof c, "", b, "NO_SUPPORT", "GENERAL");
      return c;
    }, this) : [];
    for (var c = 0; c < b.length; c++) {
      var e = b[c];
      e.constructor == Array && e[0].length ? 0 < e.length ? (e[e.length - 1][0].params = e[0][0][0].params, b[c] = e[e.length - 1][0]) : b[c] = e[0][0] : e.constructor == Array && e[0].constructor == Object && (b[c] = e[0]);
    }
    return b.filter(function(b) {
      return b.constructor === Object;
    });
  };
  c.getVariables = function(b) {
    b.body.map(function(b) {
      b = b.expression;
      var c = b.left, d = b.right, g = !1, h = "variables_";
      Entry.generateHash();
      var k = {variableType:"variable", name:"", visible:!0, object:{}, value:""};
      if ("=" == b.operator) {
        "name" in b.left ? b = c.name : (g = this.object, b = c.property.name, g = g.id);
        "NewExpression" === d.type && "list" == d.callee.property.name ? (h = "lists_", c = d.arguments.map(this.Node, this), c = c.map(function(b) {
          return b.constructor === Object && "params" in b ? {data:b.params[0]} : {data:b};
        }), k.array = c) : k.value = this.getValue(d);
        var c = "add" + h[0].toUpperCase() + h.slice(1, h.length - 2), l = this.variableExist(b, h);
        l ? "lists_" == h ? l.array_ = k.array : l.value_ = this.getValue(d) : (k.variableType = h.slice(0, length - 2), k.name = b, k.object = g, Entry.variableContainer[c](k));
      }
    }, this);
    return [];
  };
  c.variableExist = function(b, c) {
    var d = Entry.variableContainer[c], d = d.map(function(b) {
      return b.name_;
    });
    return -1 < d.indexOf(b) ? Entry.variableContainer[c][d.indexOf(b)] : !1;
  };
  c.len = function(b) {
    var c = this.Node(b.arguments[0]);
    this.assert(!("string" === typeof c && "Identifier" === b.arguments[0].type), c, b.arguments[0], "NO_VARIABLE", "VARIABLE");
    return "get_list" === c.type ? {type:"length_of_list", params:[void 0, c.params[0]]} : {type:"length_of_string", params:[void 0, c]};
  };
  c["Hamster.note"] = function(b) {
    if (2 < b.arguments.length) {
      var c = this.blockSyntax.Hamster.note;
    } else {
      c = this.blockSyntax.Hamster["note#0"], b.arguments.shift();
    }
    var e = this.Block({}, c);
    e.params = this.Arguments(c.key, b.arguments);
    2 < b.arguments.length && (e.params[0] = Entry.CodeMap.Hamster.hamster_play_note_for[0][e.params[0].toLowerCase()]);
    return e;
  };
  c["Hamster.line_tracer_mode"] = function(b) {
    return this.Special(b, "Hamster", "line_tracer_mode");
  };
  c["Hamster.io_mode_a"] = function(b) {
    return this.Special(b, "Hamster", "io_mode_a");
  };
  c["Hamster.io_mode_b"] = function(b) {
    return this.Special(b, "Hamster", "io_mode_b");
  };
  c["Hamster.io_modes"] = function(b) {
    return this.Special(b, "Hamster", "io_modes");
  };
  c["Hamster.leds"] = function(b) {
    return this.Special(b, "Hamster", "leds");
  };
  c["Hamster.left_led"] = function(b) {
    return this.Special(b, "Hamster", "left_led");
  };
  c["Hamster.right_led"] = function(b) {
    return this.Special(b, "Hamster", "right_led");
  };
  c["__pythonRuntime.ops.in"] = function(b) {
    return {type:"is_included_in_list", params:this.Arguments("is_included_in_list", b.arguments)};
  };
  c.Special = function(b, c, e) {
    var d = {};
    b = this.Node(b.arguments[0]);
    this.isParamPrimitive(b) && (b = b.params[0]);
    this.Block(d, this.blockSyntax[c][e + "(" + b + ")"]);
    return d;
  };
  c.createFunctionMap = function() {
    this._funcMap = {};
    var b = Entry.variableContainer.functions_, c;
    for (c in b) {
      var b = Entry.block["func_" + c], e = b.template.trim().split(" ")[0].trim();
      this._funcMap[e] || (this._funcMap[e] = {});
      this._funcMap[e][b.params.length - 1] = c;
    }
  };
  c.createFunction = function(b, c, e) {
    var d = b.arguments ? b.arguments.map(this.Node, this) : [];
    b = Entry.variableContainer.functions_;
    var g = Entry.generateHash();
    for (k in b) {
      var h = Entry.block["func_" + k];
      if (h.params.length === d.length + 1 && h.template.trim().split(" ")[0].trim() === c) {
        g = k;
        break;
      }
    }
    h = {type:"function_field_label", params:[c]};
    var k = {id:g, content:[[{type:"function_create", params:[h]}]]};
    this._funcMap[c] || (this._funcMap[c] = {});
    for (this._funcMap[c][d.length] = k.id; d.length;) {
      c = d.shift();
      var l = Entry.Func.requestParamBlock("string"), m = {type:"function_field_string", params:[{type:l}]}, l = l.split("_")[1];
      this._funcParamMap[c] = l;
      h.params.push(m);
      h = m;
    }
    e = this.setParams(e);
    this._funcParamMap = {};
    k.content[0] = k.content[0].concat(e);
    k.content = JSON.stringify(k.content);
    b[g] ? (e = b[g], e.content = new Entry.Code(k.content), e.generateBlock(!0), Entry.Func.generateWsBlock(e)) : Entry.variableContainer.setFunctions([k]);
  };
  c.ClassDeclaration = function(b) {
    var c = this.Node(b.id);
    this.assert(!1, c, b, "NO_OBJECT", "OBJECT");
  };
  c.searchSyntax = function(b) {
    var c = !1;
    if (b instanceof Entry.BlockView) {
      var e = b.block._schema;
      var f = b.block.data.params;
    } else {
      b instanceof Entry.Block ? (e = b._schema, f = b.params) : (e = b, c = !0);
    }
    if (e && e.syntax) {
      for (b = e.syntax.py.concat(); b.length;) {
        e = !1;
        var g = b.shift();
        if ("string" === typeof g) {
          return {syntax:g, template:g};
        }
        if (g.params) {
          for (var h = 0; h < g.params.length; h++) {
            if (!0 !== c && g.params[h] && g.params[h] !== f[h]) {
              e = !0;
              break;
            }
          }
        }
        g.template || (g.template = g.syntax);
        if (!e) {
          return g;
        }
      }
    }
    return null;
  };
})(Entry.PyToBlockParser.prototype);
Entry.Console = function() {
  Entry.propertyPanel && (this.createView(), Entry.propertyPanel.addMode("console", this), Entry.console = this, this._isEditing = !1, this._inputData = null);
};
(function(c) {
  c.createView = function() {
    this.view = new Entry.Dom("div", {id:"entryConsole"});
    this.codeMirror = CodeMirror(this.view[0], {lineNumbers:!1, lineWrapping:!0, value:"", mode:{}, theme:"default", styleActiveLine:!1, lint:!1});
    this._doc = this.codeMirror.getDoc();
    this.codeMirror.on("beforeChange", function(b, c) {
      this._isEditing ? "+delete" === c.origin && 0 === c.to.ch && c.cancel() : c.cancel();
    }.bind(this));
    this.codeMirror.on("keyup", function(b, c) {
      this._isEditing && 13 === c.keyCode && this.endInput();
    }.bind(this));
    this.codeMirror.on("cursorActivity", function(b, c) {
      b.execCommand("goDocEnd");
    });
    Entry.addEventListener("stop", this.clear.bind(this));
    this.clear();
  };
  c.getView = function() {
    return this.view;
  };
  c.clear = function() {
    this.setEditing(!0);
    this.codeMirror.setValue("Entry Console \n");
    this.codeMirror.execCommand("goDocEnd");
    this.setEditing(!1);
  };
  c.print = function(b, c) {
    if (this.visible) {
      this.setEditing(!0);
      this.codeMirror.execCommand("goDocEnd");
      var d = this._doc.getCursor();
      this._doc.replaceRange(b + "\n", {line:d.line, ch:0});
      this._doc.addLineClass(d.line, "text", c);
      "speak" === c && this.setEditing(!1);
      this.codeMirror.execCommand("goDocEnd");
      "ask" === c && (this._doc.addLineClass(d.line + 1, "text", "answer"), this.codeMirror.focus());
    }
  };
  c.endInput = function() {
    var b = this._doc.getCursor(), c = this.codeMirror.lineInfo(b.line);
    "answer" === c.textClass ? (this._inputData = c.text, this._doc.replaceRange("\n", {line:b.line, ch:c.text.length})) : this._inputData = this._doc.getLine(b.line - 1);
    Entry.container.setInputValue(this._inputData);
    this.setEditing(!1);
  };
  c.stopInput = function(b) {
    this.setEditing(!1);
  };
  c.setEditing = function(b) {
    this._isEditing !== b && (this._isEditing = b);
  };
})(Entry.Console.prototype);
Entry.Parser = function(c, b, d, e) {
  this._mode = c;
  this.syntax = {};
  this.codeMirror = d;
  this._lang = e;
  this._type = b;
  this.availableCode = [];
  this._syntax_cache = {};
  this._pyThreadCount = 1;
  this._pyBlockCount = {};
  Entry.Parser.PARSE_GENERAL = 1;
  Entry.Parser.PARSE_SYNTAX = 2;
  Entry.Parser.PARSE_VARIABLE = 3;
  Entry.Parser.PARSE_BLOCK = 4;
  this._onRunError = this._onError = !1;
  "workspace" === Entry.type && (this._console = new Entry.Console);
};
(function(c) {
  var b = {"Hamster.LINE_TRACER_MODE_OFF":"0", "Hamster.LINE_TRACER_MODE_BLACK_LEFT_SENSOR":"1", "Hamster.LINE_TRACER_MODE_BLACK_RIGHT_SENSOR":"2", "Hamster.LINE_TRACER_MODE_BLACK_BOTH_SENSORS":"3", "Hamster.LINE_TRACER_MODE_BLACK_TURN_LEFT":"4", "Hamster.LINE_TRACER_MODE_BLACK_TURN_RIGHT":"5", "Hamster.LINE_TRACER_MODE_BLACK_MOVE_FORWARD":"6", "Hamster.LINE_TRACER_MODE_BLACK_UTURN":"7", "Hamster.LINE_TRACER_MODE_WHITE_LEFT_SENSOR":"8", "Hamster.LINE_TRACER_MODE_WHITE_RIGHT_SENSOR":"9", "Hamster.LINE_TRACER_MODE_WHITE_BOTH_SENSORS":"10", 
  "Hamster.LINE_TRACER_MODE_WHITE_TURN_LEFT":"11", "Hamster.LINE_TRACER_MODE_WHITE_TURN_RIGHT":"12", "Hamster.LINE_TRACER_MODE_WHITE_MOVE_FORWARD":"13", "Hamster.LINE_TRACER_MODE_WHITE_UTURN":"14", "Hamster.LED_OFF":"0", "Hamster.LED_BLUE":"1", "Hamster.LED_GREEN":"2", "Hamster.LED_CYAN":"3", "Hamster.LED_RED":"4", "Hamster.LED_MAGENTA":"5", "Hamster.LED_YELLOW":"6", "Hamster.LED_WHITE":"7", "Hamster.IO_MODE_ANALOG_INPUT":"0", "Hamster.IO_MODE_DIGITAL_INPUT":"1", "Hamster.IO_MODE_SERVO_OUTPUT":"8", 
  "Hamster.IO_MODE_PWM_OUTPUT":"9", "Hamster.IO_MODE_DIGITAL_OUTPUT":"10"};
  c.setParser = function(b, c, f) {
    if (this._mode !== b || this._type !== c) {
      switch(this._mode = b, this._type = c, this._cm = f, this.syntax = this.mappingSyntax(b), c) {
        case Entry.Vim.PARSER_TYPE_JS_TO_BLOCK:
          this._execParser = new Entry.JsToBlockParser(this.syntax, this);
          this._execParserType = Entry.Vim.PARSER_TYPE_JS_TO_BLOCK;
          break;
        case Entry.Vim.PARSER_TYPE_PY_TO_BLOCK:
          this._execParser = new Entry.PyToBlockParser(this.syntax);
          this._execParserType = Entry.Vim.PARSER_TYPE_PY_TO_BLOCK;
          break;
        case Entry.Vim.PARSER_TYPE_BLOCK_TO_JS:
          this._execParser = new Entry.BlockToJsParser(this.syntax, this);
          this._execParserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS;
          break;
        case Entry.Vim.PARSER_TYPE_BLOCK_TO_PY:
          this._execParser = new Entry.BlockToPyParser(this.syntax), f && f.setOption("mode", {name:"python", globalVars:!0}), this._execParserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY;
      }
    }
  };
  c.parse = function(b, c) {
    var d, e;
    var h = "";
    switch(this._type) {
      case Entry.Vim.PARSER_TYPE_JS_TO_BLOCK:
        try {
          var k = [];
          k.push(b);
          var l = [];
          for (var m in k) {
            var q = k[m];
            q = q.trim();
            var n = acorn.parse(q);
            l.push(n);
          }
          h = this._execParser.Program(l);
        } catch (v) {
          if (this.codeMirror) {
            v instanceof SyntaxError ? (h = {from:{line:v.loc.line - 1, ch:0}, to:{line:v.loc.line - 1, ch:v.loc.column}}, v.message = "\ubb38\ubc95(Syntax) \uc624\ub958\uc785\ub2c8\ub2e4.", v.type = 1) : (h = this.getLineNumber(v.node.start, v.node.end), h.message = v.message, h.severity = "converting error", v.type = 2);
            this.codeMirror.markText(h.from, h.to, {className:"CodeMirror-lint-mark-error", __annotation:h, clearOnEnter:!0});
            h = v.title ? v.title : "\ubb38\ubc95 \uc624\ub958";
            var r;
            2 == v.type && v.message ? r = v.message : 2 != v.type || v.message ? 1 == v.type && (r = "\uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ubb38\ubc95\uc744 \ud655\uc778\ud574\uc8fc\uc138\uc694.") : r = "\uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.";
            Entry.toast.alert(h, r);
            h = {};
            h.boardType = Entry.Workspace.MODE_BOARD;
            h.textType = Entry.Vim.TEXT_TYPE_JS;
            h.runType = Entry.Vim.MAZE_MODE;
            Ntry.dispatchEvent("textError", h);
            throw v;
          }
          h = [];
        }
        break;
      case Entry.Vim.PARSER_TYPE_PY_TO_BLOCK:
        try {
          this._pyBlockCount = {};
          this._pyThreadCount = 1;
          var t = new Entry.PyAstGenerator;
          k = this.makeThreads(b);
          l = [];
          for (m = e = 0; m < k.length; m++) {
            if (q = k[m], 0 !== q.length && (q = q.replace(/\t/gm, "    "), n = t.generate(q))) {
              this._pyThreadCount = e++, this._pyBlockCount[e] = q.split("\n").length - 1, 0 !== n.body.length && l.push(n);
            }
          }
          h = this._execParser.Programs(l);
          this._onError = !1;
        } catch (v) {
          if (this._onError = !0, h = [], this.codeMirror) {
            v instanceof SyntaxError ? (e = this.findSyntaxError(v), h = {from:{line:e.from.line - 1, ch:e.from.ch}, to:{line:e.to.line - 1, ch:e.to.ch}}, v.type = "syntax") : (e = v.line, h = {from:{line:e.start.line + 1, ch:e.start.column}, to:{line:e.end.line + 1, ch:e.end.column}}, v.type = "converting");
            this._marker = this.codeMirror.markText(h.from, h.to, {className:"CodeMirror-lint-mark-error", __annotation:h, clearOnEnter:!0, inclusiveLeft:!0, inclusiveRigth:!0, clearWhenEmpty:!1});
            if ("syntax" == v.type) {
              var u = v.title;
              var x = this.makeSyntaxErrorDisplay(v.subject, v.keyword, v.message, e.from.line);
            } else {
              "converting" == v.type && (u = v.title, x = v.message);
            }
            Entry.toast.alert(u, x);
            throw v;
          }
        }
        break;
      case Entry.Vim.PARSER_TYPE_BLOCK_TO_JS:
        h = x = this._execParser.Code(b, c);
        break;
      case Entry.Vim.PARSER_TYPE_BLOCK_TO_PY:
        Entry.getMainWS().blockMenu.renderText();
        h = "";
        c === Entry.Parser.PARSE_BLOCK && "func_" === b.type.substr(0, 5) && (d = Object.keys(this._execParser._funcDefMap));
        x = this._execParser.Code(b, c);
        this._pyHinter || (this._pyHinter = new Entry.PyHint(this.syntax));
        this._hasDeclaration || this.initDeclaration();
        if (c == Entry.Parser.PARSE_GENERAL) {
          this.py_variableDeclaration && (h += this.py_variableDeclaration);
          this.py_listDeclaration && (h += this.py_listDeclaration);
          if (this.py_variableDeclaration || this.py_listDeclaration) {
            h += "\n";
          }
          u = this._execParser._funcDefMap;
          r = "";
          for (e in u) {
            r += u[e] + "\n\n";
          }
          h += r;
        } else {
          c === Entry.Parser.PARSE_BLOCK && d && 0 > d.indexOf(b.type) && (h += this._execParser._funcDefMap[b.type] + "\n\n");
        }
        x && (h += x.trim());
        h = h.replace(/\t/g, "    ");
        this._hasDeclaration && this.removeDeclaration();
    }
    return h;
  };
  c.getLineNumber = function(b, c) {
    var d = this.codeMirror.getValue(), e = {from:{}, to:{}};
    b = d.substring(0, b).split(/\n/gi);
    e.from.line = b.length - 1;
    e.from.ch = b[b.length - 1].length;
    c = d.substring(0, c).split(/\n/gi);
    e.to.line = c.length - 1;
    e.to.ch = c[c.length - 1].length;
    return e;
  };
  c.mappingSyntax = function(b) {
    var c = this;
    if (this._syntax_cache[b]) {
      return this._syntax_cache[b];
    }
    var d = Object.keys(Entry.block), g = {};
    b === Entry.Vim.WORKSPACE_MODE && (g["#dic"] = {});
    for (var h = 0; h < d.length; h++) {
      var k = d[h], l = Entry.block[k];
      if (b === Entry.Vim.MAZE_MODE) {
        if (-1 < this.availableCode.indexOf(k)) {
          var m = l.syntax;
          if (m && !l.syntax.py) {
            for (var l = g, q = 0; q < m.length; q++) {
              var n = m[q];
              if (q === m.length - 2 && "function" === typeof m[q + 1]) {
                l[n] = m[q + 1];
                break;
              }
              l[n] || (l[n] = {});
              q === m.length - 1 ? l[n] = k : l = l[n];
            }
          }
        }
      } else {
        b === Entry.Vim.WORKSPACE_MODE && (n = k, k = null, l.syntax && l.syntax.py && (k = l.syntax.py), k && k.map(function(b) {
          if ("string" === typeof b) {
            var d = {};
            var e = b;
            d.key = n;
            d.syntax = b;
            d.template = b;
          } else {
            d = b, e = b.syntax, b.key = n, b.template || (d.template = b.syntax), b.dic && (g["#dic"][b.dic] = n);
          }
          e = e.split("(");
          e = e[1] && -1 < e[1].indexOf("%") ? 0 !== e[0].length ? e[0] : e.join("(") : e.join("(");
          e = e.replace("():", "");
          e = e.replace("()", "");
          b.keyOption && (e += "#" + b.keyOption);
          e = e.split(".");
          b = [];
          b.push(e.shift());
          e = e.join(".");
          "" !== e && b.push(e);
          e = b;
          b = g;
          for (var f = 0; f < e.length; f++) {
            var h = e[f];
            if (f === e.length - 1) {
              b[h] = d;
              (e = c._getAnotherSyntaxKey(h)) && (b[e] = d);
              break;
            }
            b[h] || (b[h] = {});
            b = b[h];
          }
        }));
      }
    }
    return this._syntax_cache[b] = g;
  };
  c.setAvailableCode = function(b, c) {
    var d = [], e;
    b instanceof Entry.Code ? e = b.getBlockList() : b.forEach(function(b, c) {
      e.concat(b);
    });
    e.forEach(function(b) {
      d.push(b.type);
    });
    e = [];
    c instanceof Entry.Code ? e = c.getBlockList() : c.forEach(function(b, c) {
      e.concat(b);
    });
    e.forEach(function(b) {
      -1 === d.indexOf(b.type) && d.push(b.type);
    });
    this.availableCode = this.availableCode.concat(d);
  };
  c.findSyntaxError = function(b, c) {
    c = b.loc;
    c.line += 2;
    return {from:{line:c.line, ch:c.column}, to:{line:c.line, ch:c.column + b.tokLen}};
  };
  c.makeThreads = function(b) {
    function c(b) {
      return Array(k + 1).join("\n") + b;
    }
    b = b.split("\n");
    for (var d = [], g = "", h = !1, k = 0, l = 3; l < b.length; l++) {
      var m = b[l] + "\n";
      Entry.TextCodingUtil.isEntryEventFuncByFullText(m) ? (m = this.entryEventParamConverter(m), 0 !== g.length && (d.push(c(g)), k = l - 2), g = "", g += m, h = !0) : (Entry.TextCodingUtil.isEntryEventFuncByFullText(m.trim()) && (m = this.entryEventParamConverter(m)), 1 != m.length || h ? 1 != m.length && " " != m.charAt(0) && h && (d.push(c(g)), k = l - 2, g = "", h = !1) : (d.push(c(g)), k = l - 2, g = ""), g += m);
    }
    d.push(c(g));
    return d;
  };
  c.entryEventParamConverter = function(b) {
    return b;
  };
  c.makeSyntaxErrorDisplay = function(b, c, f, g) {
    return "[" + b + "] " + (c ? "'" + c + "' " : "") + " : " + f + " (line " + g + ")";
  };
  c.initDeclaration = function() {
    this.py_variableDeclaration = Entry.TextCodingUtil.generateVariablesDeclaration();
    this.py_listDeclaration = Entry.TextCodingUtil.generateListsDeclaration();
    this._hasDeclaration = !0;
  };
  c.removeDeclaration = function() {
    this.py_listDeclaration = this.py_variableDeclaration = null;
  };
  c._getAnotherSyntaxKey = function(c) {
    var d = !1, f;
    for (f in b) {
      -1 < c.indexOf(f) && (d = !0, c = c.replace(new RegExp(f, "gm"), b[f]));
    }
    if (d) {
      return c;
    }
  };
})(Entry.Parser.prototype);
Entry.Toast = function() {
  this.toasts_ = [];
  var c = document.getElementById("entryToastContainer");
  c && document.body.removeChild(c);
  this.body_ = Entry.createElement("div", "entryToastContainer");
  this.body_.addClass("entryToastContainer");
  document.body.appendChild(this.body_);
};
Entry.Toast.prototype.warning = function(c, b, d) {
  var e = Entry.createElement("div", "entryToast");
  e.addClass("entryToast");
  e.addClass("entryToastWarning");
  e.bindOnClick(function() {
    Entry.toast.body_.removeChild(this);
  });
  var f = Entry.createElement("div", "entryToast");
  f.addClass("entryToastTitle");
  f.innerHTML = c;
  e.appendChild(f);
  c = Entry.createElement("p", "entryToast");
  c.addClass("entryToastMessage");
  c.innerHTML = b;
  e.appendChild(c);
  this.toasts_.push(e);
  this.body_.appendChild(e);
  d || window.setTimeout(function() {
    e.style.opacity = 1;
    var b = setInterval(function() {
      0.05 > e.style.opacity && (clearInterval(b), e.style.display = "none", Entry.removeElement(e));
      e.style.opacity *= 0.90;
    }, 20);
  }, 1000);
};
Entry.Toast.prototype.success = function(c, b, d) {
  var e = Entry.createElement("div", "entryToast");
  e.addClass("entryToast");
  e.addClass("entryToastSuccess");
  e.bindOnClick(function() {
    Entry.toast.body_.removeChild(this);
  });
  var f = Entry.createElement("div", "entryToast");
  f.addClass("entryToastTitle");
  f.innerHTML = c;
  e.appendChild(f);
  c = Entry.createElement("p", "entryToast");
  c.addClass("entryToastMessage");
  c.innerHTML = b;
  e.appendChild(c);
  this.toasts_.push(e);
  this.body_.appendChild(e);
  d || window.setTimeout(function() {
    e.style.opacity = 1;
    var b = setInterval(function() {
      0.05 > e.style.opacity && (clearInterval(b), e.style.display = "none", Entry.removeElement(e));
      e.style.opacity *= 0.90;
    }, 20);
  }, 1000);
};
Entry.Toast.prototype.alert = function(c, b, d) {
  var e = Entry.createElement("div", "entryToast"), f;
  e.addClass("entryToast");
  e.addClass("entryToastAlert");
  e.bindOnClick(function() {
    Entry.toast.body_.removeChild(this);
    f && clearInterval(f);
  });
  var g = Entry.createElement("div", "entryToast");
  g.addClass("entryToastTitle");
  g.innerHTML = c;
  e.appendChild(g);
  c = Entry.createElement("p", "entryToast");
  c.addClass("entryToastMessage");
  c.innerHTML = b;
  e.appendChild(c);
  this.toasts_.push(e);
  this.body_.appendChild(e);
  d || window.setTimeout(function() {
    e.style.opacity = 1;
    f = setInterval(function() {
      0.05 > e.style.opacity && (clearInterval(f), e.style.display = "none", e.parentElement && Entry.toast.body_.removeChild(e));
      e.style.opacity *= 0.90;
    }, 20);
  }, 5000);
};
Entry.TvCast = function(c) {
  this.generateView(c);
};
p = Entry.TvCast.prototype;
p.init = function(c) {
  this.tvCastHash = c;
};
p.generateView = function(c) {
  var b = Entry.createElement("div");
  b.addClass("entryContainerMovieWorkspace");
  b.addClass("entryRemove");
  this.movieContainer = b;
  b = Entry.createElement("iframe");
  b.setAttribute("id", "tvCastIframe");
  b.setAttribute("allowfullscreen", "");
  b.setAttribute("frameborder", 0);
  b.setAttribute("src", c);
  this.movieFrame = b;
  this.movieContainer.appendChild(this.movieFrame);
};
p.getView = function() {
  return this.movieContainer;
};
p.resize = function() {
  document.getElementById("entryContainerWorkspaceId");
  var c = document.getElementById("tvCastIframe");
  w = this.movieContainer.offsetWidth;
  c.width = w + "px";
  c.height = 9 * w / 16 + "px";
};
Entry.ContextMenu = {};
(function(c) {
  c.visible = !1;
  c._hideEvent = null;
  c.createDom = function() {
    this.dom = Entry.Dom("ul", {id:"entry-contextmenu", parent:$("body")});
    this.dom.bind("mousedown touchstart", function(b) {
      b.stopPropagation();
    });
    Entry.Utils.disableContextmenu(this.dom);
  };
  c.show = function(b, c, e) {
    this._hideEvent = Entry.documentMousedown.attach(this, function() {
      this.hide();
    });
    this.dom || this.createDom();
    if (0 !== b.length) {
      var d = this;
      void 0 !== c && (this._className = c, this.dom.addClass(c));
      var g = this.dom;
      g.empty();
      for (var h = 0, k = b.length; h < k; h++) {
        var l = b[h], m = l.text, q = !1 !== l.enable, n = Entry.Dom("li", {parent:g});
        l.divider ? c = "divider" : (c = q ? "menuAble" : "menuDisable", Entry.Dom("span", {parent:n}).text(m), q && l.callback && function(b, c) {
          b.mousedown(function(b) {
            b.preventDefault();
            d.hide();
            c(b);
          });
        }(n, l.callback));
        n.addClass(c);
      }
      g.removeClass("entryRemove");
      this.visible = !0;
      this.position(e || Entry.mouseCoordinate);
    }
  };
  c.position = function(b) {
    var c = this.dom;
    c.css({left:0, top:0});
    var e = c.width(), f = c.height(), g = $(window), h = g.width(), g = g.height();
    b.x + e > h && (b.x -= e + 3);
    b.y + f > g && (b.y -= f);
    c.css({left:b.x, top:b.y});
  };
  c.hide = function() {
    this.visible = !1;
    this.dom.empty();
    this.dom.addClass("entryRemove");
    this._className && (this.dom.removeClass(this._className), delete this._className);
    this._hideEvent && (Entry.documentMousedown.detach(this._hideEvent), this._hideEvent = null);
  };
  c.onContextmenu = function(b, c) {
    b.on("touchstart mousemove mouseup contextmenu", function(b) {
      switch(b.type) {
        case "touchstart":
          b = Entry.Utils.convertMouseEvent(b);
          this.coordi = {x:b.clientX, y:b.clientY};
          this.longTouchEvent = setTimeout(function() {
            c(this.coordi);
            this.longTouchEvent = void 0;
          }.bind(this), 900);
          break;
        case "mousemove":
          if (!this.coordi) {
            break;
          }
          5 < Math.sqrt(Math.pow(b.pageX - this.coordi.x, 2) + Math.pow(b.pageY - this.coordi.y, 2)) && this.longTouchEvent && (clearTimeout(this.longTouchEvent), this.longTouchEvent = void 0);
          break;
        case "mouseup":
          this.longTouchEvent && (clearTimeout(this.longTouchEvent), this.longTouchEvent = null);
          break;
        case "contextmenu":
          clearTimeout(this.longTouchEvent), this.longTouchEvent = void 0, "contextmenu" === b.type && c(this.coordi);
      }
    });
  };
})(Entry.ContextMenu);
Entry.Curtain = {};
(function() {
  this._visible = !1;
  this._targetDom = this._doms = null;
  this._createDom = function() {
    var c = {parent:$("body"), class:"entryCurtainElem entryRemove"};
    this._doms = {top:Entry.Dom("div", c), right:Entry.Dom("div", c), bottom:Entry.Dom("div", c), left:Entry.Dom("div", c)};
    for (var b in this._doms) {
      c = this._doms[b], c.addClass(b), c.bind("mousedown", function(b) {
        b.stopPropagation();
      });
    }
  };
  this.show = function(c) {
    !this._doms && this._createDom();
    c instanceof Array && (c = Entry.getDom(c));
    this._targetDom = c = $(c);
    this.align();
    for (var b in this._doms) {
      this._doms[b].removeClass("entryRemove");
    }
    this._visible = !0;
  };
  this.align = function() {
    var c = this._targetDom;
    if (c) {
      var b = $(window), d = $("body")[0].getBoundingClientRect(), e = d.width, d = d.height, f = b.width(), b = b.height();
      f < Math.round(e) && (e = f);
      b < Math.round(d) && (d = b);
      b = this._doms;
      if (c.get(0)) {
        var g = c.get(0).getBoundingClientRect(), c = Math.round(g.top), f = Math.round(g.right), h = Math.round(g.bottom);
        b.top.css({height:c});
        b.left.css({top:c, right:e - f + g.width, bottom:Math.round(d - h)});
        d = b.left[0].getBoundingClientRect();
        d = b.top[0].getBoundingClientRect().height + d.height;
        b.bottom.css({top:d || h, right:e - f});
        b.right.css({top:c, left:b.bottom[0].getBoundingClientRect().width || f});
      }
    }
  };
  this.hide = function() {
    if (this._doms) {
      for (var c in this._doms) {
        this._doms[c].addClass("entryRemove");
      }
      this._visible = !1;
      this._targetDom = null;
    }
  };
  this.isVisible = function() {
    return this._visible;
  };
  this.setVisible = function(c) {
    this._visible = c;
  };
}).call(Entry.Curtain);
Entry.fuzzy = {};
(function(c) {
  var b = {};
  c.fuzzy = b;
  b.simpleFilter = function(c, e) {
    return e.filter(function(d) {
      return b.test(c, d);
    });
  };
  b.test = function(c, e) {
    return null !== b.match(c, e);
  };
  b.match = function(b, c, f) {
    f = f || {};
    var d = 0, e = [], k = c.length, l = 0, m = 0, q = f.pre || "", n = f.post || "", r = f.caseSensitive && c || c.toLowerCase();
    b = f.caseSensitive && b || b.toLowerCase();
    for (var t = 0; t < k; t++) {
      var u = c[t];
      if (r[t] === f.escapeLetter) {
        break;
      }
      r[t] === b[d] ? (u = q + u + n, d += 1, m += 1 + m) : m = 0;
      l += m;
      e[e.length] = u;
    }
    return d === b.length ? {rendered:e.join(""), score:l} : null;
  };
  b.filter = function(c, e, f) {
    f = f || {};
    return e.reduce(function(d, e, k, l) {
      l = e;
      f.extract && (l = f.extract(e));
      l = b.match(c, l, f);
      null != l && (d[d.length] = {string:l.rendered, score:l.score, index:k, original:e});
      return d;
    }, []).sort(function(b, c) {
      var d = c.score - b.score;
      return d ? d : b.index - c.index;
    });
  };
})(Entry.Utils);
Entry.Loader = {queueCount:0, totalCount:0, loaded:!1};
Entry.Loader.addQueue = function(c) {
  this.queueCount || Entry.dispatchEvent("loadStart");
  this.queueCount++;
  this.totalCount++;
};
Entry.Loader.removeQueue = function(c) {
  this.queueCount--;
  this.queueCount || (this.totalCount = 0, this.handleLoad());
};
Entry.Loader.getLoadedPercent = function() {
  return 0 === this.totalCount ? 1 : this.queueCount / this.totalCount;
};
Entry.Loader.isLoaded = function() {
  return !this.queueCount && !this.totalCount;
};
Entry.Loader.handleLoad = function() {
  this.loaded || (this.loaded = !0, Entry.dispatchEvent("loadComplete"));
};
Entry.Restrictor = function(c) {
  this._controller = c;
  this.startEvent = new Entry.Event(this);
  this.endEvent = new Entry.Event(this);
  this.currentTooltip = null;
};
(function(c) {
  c.restrict = function(b, c) {
    this._data = b;
    this.toolTipRender = c;
    this.end();
    c = b.content.concat().shift();
    c = Entry.Command[c];
    var d = c.dom;
    this.startEvent.notify();
    d instanceof Array && (d = this.processDomQuery(d));
    b.tooltip || (b.tooltip = {title:"\uc561\uc158", content:"\uc9c0\uc2dc \uc0ac\ud56d\uc744 \ub530\ub974\uc2dc\uc624"});
    if (c.restrict) {
      this.currentTooltip = c.restrict(b, d, this.restrictEnd.bind(this), this);
    } else {
      if (this.currentTooltip = new Entry.Tooltip([{title:b.tooltip.title, content:b.tooltip.content, target:d}], {restrict:!0, dimmed:!0, callBack:this.restrictEnd.bind(this)}), window.setTimeout(this.align.bind(this)), b.skip) {
        return this.end();
      }
    }
  };
  c.end = function() {
    this.currentTooltip && (this.currentTooltip.dispose(), this.currentTooltip = null);
  };
  c.restrictEnd = function() {
    this.endEvent.notify();
  };
  c.align = function() {
    this.currentTooltip && this.currentTooltip.alignTooltips();
  };
  c.processDomQuery = function(b, c) {
    c = c || this._data.content;
    c = c.concat();
    c.shift();
    b instanceof Array && (b = b.map(function(b) {
      return "&" === b[0] ? c[Number(b.substr(1))][1] : b;
    }));
    return b;
  };
  c.renderTooltip = function() {
    this.currentTooltip && this.currentTooltip.render();
  };
  c.fadeOutTooltip = function() {
    this.currentTooltip && this.currentTooltip.fadeOut();
  };
  c.fadeInTooltip = function() {
    this.currentTooltip && this.currentTooltip.fadeIn();
  };
  c.isTooltipFaded = function() {
    return this.currentTooltip ? this.currentTooltip.isFaded() : !1;
  };
  c.requestNextData = function() {
    if (this._controller) {
      return this._controller.requestNextData();
    }
  };
})(Entry.Restrictor.prototype);
Entry.Tooltip = function(c, b) {
  this.init(c, b);
};
(function(c) {
  c.usedClasses = "up down left right edge_up edge_down edge_left edge_right";
  c.init = function(b, c) {
    this._rendered && this.dispose();
    this.data = b instanceof Array ? b : [b];
    this.opts = c || this.opts || {dimmed:!0, restirct:!1};
    this._rendered = !1;
    this._noDispose = !!this.opts.noDispose;
    this._faded = !1;
    this._tooltips = [];
    this._indicators = [];
    if (1 < b.length || c.indicator) {
      this.isIndicator = !0;
    }
    !1 !== c.render && this.render();
    this._resizeEventFunc = Entry.Utils.debounce(function() {
      this.alignTooltips();
    }.bind(this), 200);
    Entry.addEventListener("windowResized", this._resizeEventFunc);
  };
  c.render = function() {
    if (!this._rendered) {
      this.fadeIn();
      this._convertDoms();
      this.opts.dimmed && this.renderBG();
      var b = this.data[0].targetDom;
      b && "string" !== typeof b && b.length && (this.opts.restrict && this.opts.dimmed && Entry.Curtain.show(b.get(0)), this.renderTooltips(), this._rendered = !0, this.opts.restrict && this.restrictAction());
    }
  };
  c._convertDoms = function() {
    this.data.map(function(b) {
      var c = b.target;
      b.target instanceof Array && (c = Entry.getDom(b.target));
      c = $(c);
      c.length && (b.targetDom = c);
    });
  };
  c.renderBG = function() {
    this.opts.restrict ? this._bg = Entry.Dom("div", {classes:[], parent:$(document.body)}) : (this._bg = Entry.Dom("div", {classes:["entryDimmed", "entryTooltipBG"], parent:$(document.body)}), this._bg.bindOnClick(this.dispose.bind(this)));
  };
  c.renderTooltips = function() {
    this.data.map(this._renderTooltip.bind(this));
  };
  c.alignTooltips = function() {
    this._rendered && (this.data.map(this._alignTooltip.bind(this)), this.opts.dimmed && Entry.Curtain.align());
  };
  c._renderTooltip = function(b) {
    if (b.content) {
      var c = Entry.Dom("div", {classes:["entryTooltipWrapper"], parent:$(document.body)}), e = Entry.Dom("div", {classes:["entryTooltip", b.direction, b.style], parent:c});
      this.isIndicator && (b.indicator = this.renderIndicator());
      e.bind("mousedown", function(b) {
        b.stopPropagation();
      });
      e.html(b.content);
      this._tooltips.push(c);
      b.wrapper = c;
      b.dom = e;
      this._alignTooltip(b);
    }
  };
  c._alignTooltip = function(b) {
    var c = b.targetDom instanceof $ ? b.targetDom.get(0).getBoundingClientRect() : b.targetDom.getBoundingClientRect();
    var e = b.dom[0].getBoundingClientRect(), f = document.body.clientWidth, g = document.body.clientHeight;
    this.isIndicator && b.indicator.css({left:c.left + c.width / 2, top:c.top + c.height / 2});
    450 < e.width ? b.dom.addClass("shrink") : b.dom.removeClass("shrink");
    var h = b.direction;
    if (!h) {
      var k = c.left - e.width, l = f - c.left - c.width - e.width, h = "left";
      k < l && (k = l, h = "right");
      l = c.top - e.height;
      k < l && (k = l, h = "up");
      l = g - c.top - c.height - e.height;
      k < l && (h = "down");
    }
    b.dom.removeClass(this.usedClasses).addClass(h);
    var k = {top:c.top, left:c.left}, m;
    switch(h) {
      case "down":
        k.top += c.height;
      case "up":
        k.left += c.width / 2;
        k.left < e.width / 2 && (m = "edge_left");
        f - k.left < e.width / 2 && (m = "edge_right");
        break;
      case "right":
        k.left += c.width;
      case "left":
        k.top += c.height / 2, k.top < e.height / 2 && (m = "edge_up"), g - k.top < e.height / 2 && (m = "edge_down");
    }
    m && b.dom.addClass(m);
    b.wrapper.css(k);
  };
  c.renderIndicator = function(b, c) {
    b = Entry.Dom("div", {classes:["entryTooltipIndicator"], parent:$(document.body)});
    b.html("<div></div><div></div><div></div>");
    this._indicators.push(b);
    return b;
  };
  c.dispose = function(b) {
    this._bg && this._bg.remove();
    this.opts.restrict && (Entry.Utils.allowAction(), this.opts.dimmed && Entry.Curtain.hide());
    for (; this._tooltips.length;) {
      this._tooltips.pop().remove();
    }
    for (; this._indicators.length;) {
      this._indicators.pop().remove();
    }
    this.opts.callBack && this.opts.callBack.call(this, b);
    Entry.removeEventListener("windowResized", this._resizeEventFunc);
  };
  c.restrictAction = function() {
    var b = this.data.map(function(b) {
      return b.targetDom;
    });
    this._noDispose && this.opts.callBack && this.opts.callBack.call(this);
    Entry.Utils.restrictAction(b, this.dispose.bind(this), this._noDispose);
  };
  c.fadeOut = function() {
    $(document.body).addClass("hideTooltip");
    this._faded = !0;
  };
  c.fadeIn = function() {
    $(document.body).removeClass("hideTooltip");
    this._faded = !1;
  };
  c.isFaded = function() {
    return this._faded;
  };
})(Entry.Tooltip.prototype);
Entry.Variable = function(c) {
  Entry.assert("string" == typeof c.name, "Variable name must be given");
  this.name_ = c.name;
  this.id_ = c.id ? c.id : Entry.generateHash();
  this.type = c.variableType ? c.variableType : "variable";
  this.object_ = c.object || null;
  this.isCloud_ = c.isCloud || !1;
  this._valueWidth = this._nameWidth = null;
  var b = Entry.parseNumber(c.value);
  this.value_ = "number" == typeof b ? b : c.value ? c.value : 0;
  "slide" == this.type ? (this.setMinValue(c.minValue), this.setMaxValue(c.maxValue)) : "list" == this.type && (this.array_ = c.array ? c.array : []);
  c.isClone || (this.visible_ = c.visible || "boolean" == typeof c.visible ? c.visible : !0, this.x_ = c.x ? c.x : null, this.y_ = c.y ? c.y : null, "list" == this.type && (this.width_ = c.width ? c.width : 100, this.height_ = c.height ? c.height : 120, this.scrollPosition = 0), this.BORDER = 6, this.FONT = "10pt NanumGothic");
  Entry.addEventListener("workspaceChangeMode", this.updateView.bind(this));
};
Entry.Variable.prototype.generateView = function(c) {
  var b = this.type;
  if ("variable" == b || "timer" == b || "answer" == b) {
    this.view_ = new createjs.Container, this.rect_ = new createjs.Shape, this.view_.addChild(this.rect_), this.view_.variable = this, this.wrapper_ = new createjs.Shape, this.view_.addChild(this.wrapper_), this.textView_ = new createjs.Text("asdf", this.FONT, "#000000"), this.textView_.textBaseline = "alphabetic", this.textView_.x = 4, this.textView_.y = 1, this.view_.addChild(this.textView_), this.valueView_ = new createjs.Text("asdf", "10pt NanumGothic", "#ffffff"), this.valueView_.textBaseline = 
    "alphabetic", b = Entry.variableContainer.variables_.length, this.getX() && this.getY() ? (this.setX(this.getX()), this.setY(this.getY())) : (this.setX(-230 + 80 * Math.floor(b / 11)), this.setY(24 * c + 20 - 135 - 264 * Math.floor(b / 11))), this.view_.visible = this.visible_, this.view_.addChild(this.valueView_), this.view_.on("mousedown", function(b) {
      "workspace" == Entry.type && (this.offset = {x:this.x - (0.75 * b.stageX - 240), y:this.y - (0.75 * b.stageY - 135)}, this.cursor = "move");
    }), this.view_.on("pressmove", function(b) {
      "workspace" == Entry.type && (this.variable.setX(0.75 * b.stageX - 240 + this.offset.x), this.variable.setY(0.75 * b.stageY - 135 + this.offset.y), this.variable.updateView());
    });
  } else {
    if ("slide" == b) {
      var d = this;
      this.view_ = new createjs.Container;
      this.rect_ = new createjs.Shape;
      this.view_.addChild(this.rect_);
      this.view_.variable = this;
      this.wrapper_ = new createjs.Shape;
      this.view_.addChild(this.wrapper_);
      this.textView_ = new createjs.Text("name", this.FONT, "#000000");
      this.textView_.textBaseline = "alphabetic";
      this.textView_.x = 4;
      this.textView_.y = 1;
      this.view_.addChild(this.textView_);
      this.valueView_ = new createjs.Text("value", "10pt NanumGothic", "#ffffff");
      this.valueView_.textBaseline = "alphabetic";
      this.view_.on("mousedown", function(b) {
        "workspace" == Entry.type && (this.offset = {x:this.x - (0.75 * b.stageX - 240), y:this.y - (0.75 * b.stageY - 135)});
      });
      this.view_.on("pressmove", function(b) {
        "workspace" != Entry.type || d.isAdjusting || (this.variable.setX(0.75 * b.stageX - 240 + this.offset.x), this.variable.setY(0.75 * b.stageY - 135 + this.offset.y), this.variable.updateView());
      });
      this.view_.visible = this.visible_;
      this.view_.addChild(this.valueView_);
      b = this.textView_.getMeasuredWidth() + this.valueView_.getMeasuredWidth() + 26;
      b = Math.max(b, 90);
      this.maxWidth = b - 20;
      this.slideBar_ = new createjs.Shape;
      this.slideBar_.graphics.beginFill("#A0A1A1").s("#A0A1A1").ss(1).dr(10, 10, this.maxWidth, 1.5);
      this.view_.addChild(this.slideBar_);
      b = this.getSlidePosition(this.maxWidth);
      this.valueSetter_ = new createjs.Shape;
      this.valueSetter_.graphics.beginFill("#1bafea").s("#A0A1A1").ss(1).dc(b, 10.5, 3);
      this.valueSetter_.cursor = "pointer";
      this.valueSetter_.on("mousedown", function(b) {
        Entry.engine.isState("run") && (d.isAdjusting = !0, this.offsetX = -(this.x - 0.75 * b.stageX + 240));
      });
      this.valueSetter_.on("pressmove", function(b) {
        if (Entry.engine.isState("run")) {
          var c = this.offsetX;
          this.offsetX = -(this.x - 0.75 * b.stageX + 240);
          c !== this.offsetX && (b = d.getX(), d.setSlideCommandX(b + 10 > this.offsetX ? 0 : b + d.maxWidth + 10 > this.offsetX ? this.offsetX - b : d.maxWidth + 10));
        }
      });
      this.valueSetter_.on("pressup", function(b) {
        d.isAdjusting = !1;
      });
      this.view_.addChild(this.valueSetter_);
      b = Entry.variableContainer.variables_.length;
      this.getX() && this.getY() ? (this.setX(this.getX()), this.setY(this.getY())) : (this.setX(-230 + 80 * Math.floor(b / 11)), this.setY(24 * c + 20 - 135 - 264 * Math.floor(b / 11)));
    } else {
      this.view_ = new createjs.Container, this.rect_ = new createjs.Shape, this.view_.addChild(this.rect_), this.view_.variable = this, this.titleView_ = new createjs.Text("asdf", this.FONT, "#000"), this.titleView_.textBaseline = "alphabetic", this.titleView_.textAlign = "center", this.titleView_.width = this.width_ - 2 * this.BORDER, this.titleView_.y = this.BORDER + 10, this.titleView_.x = this.width_ / 2, this.view_.addChild(this.titleView_), this.resizeHandle_ = new createjs.Shape, this.resizeHandle_.graphics.f("#1bafea").ss(1, 
      0, 0).s("#1bafea").lt(0, -9).lt(-9, 0).lt(0, 0), this.view_.addChild(this.resizeHandle_), this.resizeHandle_.list = this, this.resizeHandle_.on("mouseover", function(b) {
        this.cursor = "nwse-resize";
      }), this.resizeHandle_.on("mousedown", function(b) {
        this.list.isResizing = !0;
        this.offset = {x:0.75 * b.stageX - this.list.getWidth(), y:0.75 * b.stageY - this.list.getHeight()};
        this.parent.cursor = "nwse-resize";
      }), this.resizeHandle_.on("pressmove", function(b) {
        this.list.setWidth(0.75 * b.stageX - this.offset.x);
        this.list.setHeight(0.75 * b.stageY - this.offset.y);
        this.list.updateView();
      }), this.view_.on("mouseover", function(b) {
        this.cursor = "move";
      }), this.view_.on("mousedown", function(b) {
        "workspace" != Entry.type || this.variable.isResizing || (this.offset = {x:this.x - (0.75 * b.stageX - 240), y:this.y - (0.75 * b.stageY - 135)}, this.cursor = "move");
      }), this.view_.on("pressup", function(b) {
        this.cursor = "initial";
        this.variable.isResizing = !1;
      }), this.view_.on("pressmove", function(b) {
        "workspace" != Entry.type || this.variable.isResizing || (this.variable.setX(0.75 * b.stageX - 240 + this.offset.x), this.variable.setY(0.75 * b.stageY - 135 + this.offset.y), this.variable.updateView());
      }), this.elementView = new createjs.Container, b = new createjs.Text("asdf", this.FONT, "#000"), b.textBaseline = "middle", b.y = 5, this.elementView.addChild(b), this.elementView.indexView = b, b = new createjs.Shape, this.elementView.addChild(b), this.elementView.valueWrapper = b, b = new createjs.Text("fdsa", this.FONT, "#eee"), b.x = 24, b.y = 6, b.textBaseline = "middle", this.elementView.addChild(b), this.elementView.valueView = b, this.elementView.x = this.BORDER, this.scrollButton_ = 
      new createjs.Shape, this.scrollButton_.graphics.f("#aaa").rr(0, 0, 7, 30, 3.5), this.view_.addChild(this.scrollButton_), this.scrollButton_.y = 23, this.scrollButton_.list = this, this.scrollButton_.on("mousedown", function(b) {
        this.list.isResizing = !0;
        this.cursor = "pointer";
        this.offsetY = !Entry.Utils.isNumber(this.offsetY) || 0 > this.offsetY ? b.rawY / 2 : this.offsetY;
      }), this.scrollButton_.on("pressmove", function(b) {
        void 0 === this.moveAmount ? (this.y = b.target.y, this.moveAmount = !0) : this.y = b.rawY / 2 - this.offsetY + this.list.height_ / 100 * 23;
        23 > this.y && (this.y = 23);
        this.y > this.list.getHeight() - 40 && (this.y = this.list.getHeight() - 40);
        this.list.updateView();
      }), this.scrollButton_.on("pressup", function(b) {
        this.moveAmount = void 0;
      }), this.getX() && this.getY() ? (this.setX(this.getX()), this.setY(this.getY())) : (b = Entry.variableContainer.lists_.length, this.setX(110 * -Math.floor(b / 6) + 120), this.setY(24 * c + 20 - 135 - 145 * Math.floor(b / 6)));
    }
  }
  this.setVisible(this.isVisible());
  this.updateView();
  Entry.stage.loadVariable(this);
};
Entry.Variable.prototype.updateView = function() {
  if (this.view_) {
    if (this.isVisible()) {
      if ("variable" == this.type) {
        this.view_.x = this.getX();
        this.view_.y = this.getY();
        var c = this.textView_.text;
        var b = this.object_ ? (b = Entry.container.getObject(this.object_)) ? b.name + ":" + this.getName() : this.getName() : this.getName();
        c !== b && (this.textView_.text = b, this._nameWidth = null);
        this.isNumber() ? 0 !== this.value_[0] && Entry.isInteger(this.value_) ? this.valueView_.text = "" + this.getValue() : this.valueView_.text = Number(this.getValue()).toFixed(2).replace(".00", "") : this.valueView_.text = this.getValue();
        null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth());
        this.valueView_.x = this._nameWidth + 14;
        this.valueView_.y = 1;
        null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth());
        this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4);
        this.wrapper_.graphics.clear().f("#1bafea").ss(1, 2, 0).s("#1bafea").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7);
      } else {
        if ("slide" == this.type) {
          this.view_.x = this.getX();
          this.view_.y = this.getY();
          c = this.textView_.text;
          b = this.object_ ? (b = Entry.container.getObject(this.object_)) ? b.name + ":" + this.getName() : this.getName() : this.getName();
          c !== b && (this.textView_.text = b, this._nameWidth = null);
          null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth());
          this.valueView_.x = this._nameWidth + 14;
          this.valueView_.y = 1;
          c = String(this.getValue());
          if (this.isFloatPoint()) {
            if (b = /\.(.*)/, b.exec(c)) {
              for (; 2 > b.exec(c)[1].length;) {
                c += "0";
              }
            } else {
              c += ".00";
            }
          }
          this.valueView_.text = c;
          null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth());
          c = this._nameWidth + this._valueWidth + 26;
          c = Math.max(c, 90);
          this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, c, 33, 4, 4, 4, 4);
          this.wrapper_.graphics.clear().f("#1bafea").ss(1, 2, 0).s("#1bafea").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7);
          c = this._nameWidth + this._valueWidth + 26;
          c = Math.max(c, 90);
          this.maxWidth = c - 20;
          this.slideBar_.graphics.clear().beginFill("#A0A1A1").s("#A0A1A1").ss(1).dr(10, 10, this.maxWidth, 1.5);
          c = this.getSlidePosition(this.maxWidth);
          this.valueSetter_.graphics.clear().beginFill("#1bafea").s("#A0A1A1").ss(1).dc(c, 10.5, 3);
        } else {
          if ("list" == this.type) {
            this.view_.x = this.getX();
            this.view_.y = this.getY();
            this.resizeHandle_.x = this.width_ - 2;
            this.resizeHandle_.y = this.height_ - 2;
            c = this.array_;
            var d = this.getName();
            this.object_ && (b = Entry.container.getObject(this.object_)) && (d = b.name + ":" + d);
            this.titleView_.text = d;
            if (this.titleView_.getMeasuredWidth() > this.width_) {
              for (d += ".."; this.titleView_.getMeasuredWidth() > this.width_;) {
                d = d.substr(0, d.length - 3) + "..", this.titleView_.text = d;
              }
            }
            this.titleView_.x = this.width_ / 2;
            for (this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rect(0, 0, this.width_, this.height_); this.view_.children[4];) {
              this.view_.removeChild(this.view_.children[4]);
            }
            b = Math.floor((this.getHeight() - 20) / 20);
            var e = b < c.length, f = this.getWidth(), d = f - 2 * this.BORDER - (e ? 30 : 20);
            e ? (this.scrollButton_.y > this.getHeight() - 40 && (this.scrollButton_.y = this.getHeight() - 40), this.elementView.valueWrapper.graphics.clear().f("#1bafea").rr(20, -2, d, 17, 2), this.scrollButton_.x = f - 12, this.scrollPosition = Math.floor((this.scrollButton_.y - 23) / (this.getHeight() - 23 - 40) * (c.length - b))) : (this.elementView.valueWrapper.graphics.clear().f("#1bafea").rr(20, -2, d, 17, 2), this.scrollPosition = 0);
            this.scrollButton_.visible = e;
            for (var e = {}, f = 3, d = d - 6, g = this.scrollPosition; g < this.scrollPosition + b && g < c.length; g++) {
              Entry.getMainWS() && Entry.getMainWS().getMode() === Entry.Workspace.MODE_VIMBOARD ? this.elementView.indexView.text = g : this.elementView.indexView.text = g + 1;
              var h = String(c[g].data), k = this.elementView.valueView, l = e[h.substr(0, 150)];
              if (l) {
                k.text = l;
              } else {
                var l = h.substr(0, f), m = f;
                k.text = h;
                if (k.getMeasuredWidth() > d) {
                  for (k.text = l; k.getMeasuredWidth() < d && void 0 !== h[m];) {
                    l += h[m++], k.text = l;
                  }
                  for (m = 1; k.getMeasuredWidth() > d;) {
                    l = l.substr(0, l.length - m) + "..", k.text = l, m = 3;
                  }
                } else {
                  l = h;
                }
                e[h.substr(0, 150)] = l;
                f = Math.max(l.length, f);
              }
              h = this.elementView.clone(!0);
              h.y = 20 * (g - this.scrollPosition) + 23;
              this.view_.addChild(h);
            }
          } else {
            "answer" == this.type ? (this.view_.x = this.getX(), this.view_.y = this.getY(), this.textView_.text = this.getName(), this.valueView_.y = 1, this.isNumber() ? (c = Number(this.getValue()), parseInt(this.getValue(), 10) == this.getValue() ? this.valueView_.text = c : this.valueView_.text = Number(c).toFixed(1).replace(".00", "")) : this.valueView_.text = this.getValue(), null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth()), null === this._valueWidth && (this._valueWidth = 
            this.valueView_.getMeasuredWidth()), this.valueView_.x = this._nameWidth + 14, this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4), this.wrapper_.graphics.clear().f("#E457DC").ss(1, 2, 0).s("#E457DC").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7)) : (this.view_.x = this.getX(), this.view_.y = this.getY(), this.textView_.text = this.getName(), null === this._nameWidth && (this._nameWidth = 
            this.textView_.getMeasuredWidth()), this.valueView_.x = this._nameWidth + 14, this.valueView_.y = 1, this.isNumber() ? this.valueView_.text = Number(this.getValue()).toFixed(1).replace(".00", "") : this.valueView_.text = this.getValue(), null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth()), this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4), this.wrapper_.graphics.clear().f("#ffbb14").ss(1, 
            2, 0).s("orange").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7));
          }
        }
      }
    }
    Entry.requestUpdate = !0;
  }
};
Entry.Variable.prototype.getName = function() {
  return this.name_;
};
Entry.Variable.prototype.setName = function(c) {
  Entry.assert("string" == typeof c, "Variable name must be string");
  this.name_ = c;
  this._nameWidth = null;
  this.updateView();
  Entry.requestUpdateTwice = !0;
};
Entry.Variable.prototype.getId = function() {
  return this.id_;
};
Entry.Variable.prototype.getValue = function() {
  return "slide" === this.type && this.isNumber() ? Number(this.value_) : this.value_;
};
Entry.Variable.prototype.isNumber = function() {
  return Entry.Utils.isNumber(this.value_);
};
Entry.Variable.prototype.setValue = function(c) {
  "slide" != this.type ? this.value_ = c : (c = Number(c), this.value_ = c < this.minValue_ ? this.minValue_ : c > this.maxValue_ ? this.maxValue_ : c);
  this._valueWidth = null;
  this.updateView();
  Entry.requestUpdateTwice = !0;
};
Entry.Variable.prototype.isVisible = function() {
  return this.visible_;
};
Entry.Variable.prototype.setVisible = function(c) {
  Entry.assert("boolean" == typeof c, "Variable visible state must be boolean");
  this.visible !== c && (this.visible_ = this.view_.visible = c, this.updateView());
};
Entry.Variable.prototype.setX = function(c) {
  this.x_ = c;
  this.updateView();
};
Entry.Variable.prototype.getX = function() {
  return this.x_;
};
Entry.Variable.prototype.setY = function(c) {
  this.y_ = c;
  this.updateView();
};
Entry.Variable.prototype.getY = function() {
  return this.y_;
};
Entry.Variable.prototype.setWidth = function(c) {
  this.width_ = 100 > c ? 100 : c;
  this.updateView();
};
Entry.Variable.prototype.getWidth = function() {
  return this.width_;
};
Entry.Variable.prototype.isInList = function(c, b) {
  this.getX();
  this.getY();
};
Entry.Variable.prototype.setHeight = function(c) {
  this.height_ = 100 > c ? 100 : c;
  this.updateView();
};
Entry.Variable.prototype.getHeight = function() {
  return this.height_;
};
Entry.Variable.prototype.takeSnapshot = function() {
  this.snapshot_ = this.toJSON();
};
Entry.Variable.prototype.loadSnapshot = function() {
  this.snapshot_ && this.syncModel_(this.snapshot_);
  delete this.snapshot_;
};
Entry.Variable.prototype.syncModel_ = function(c) {
  var b = this.isCloud_;
  "list" == this.type && (b || (this.array_ = c.array), this.setWidth(c.width), this.setHeight(c.height));
  b || this.setValue(c.value);
  this.setName(c.name);
  this.setX(c.x);
  this.setY(c.y);
  this.setVisible(c.visible);
  this.isCloud_ = c.isCloud;
};
Entry.Variable.prototype.toJSON = function() {
  var c = {};
  c.name = this.name_;
  c.id = this.id_;
  c.visible = this.visible_;
  c.value = this.value_;
  c.variableType = this.type;
  "list" == this.type ? (c.width = this.getWidth(), c.height = this.getHeight(), c.array = JSON.parse(JSON.stringify(this.array_))) : "slide" == this.type && (c.minValue = this.minValue_, c.maxValue = this.maxValue_);
  c.isCloud = this.isCloud_;
  c.object = this.object_;
  c.x = this.x_;
  c.y = this.y_;
  return c;
};
Entry.Variable.prototype.remove = function() {
  Entry.stage.removeVariable(this);
};
Entry.Variable.prototype.clone = function() {
  var c = this.toJSON();
  c.isClone = !0;
  return c = new Entry.Variable(c);
};
Entry.Variable.prototype.getType = function() {
  return this.type;
};
Entry.Variable.prototype.setType = function(c) {
  this.type = c;
};
Entry.Variable.prototype.getSlidePosition = function(c) {
  var b = this.minValue_;
  return Math.abs(this.value_ - b) / Math.abs(this.maxValue_ - b) * c + 10;
};
Entry.Variable.prototype.setSlideCommandX = function(c) {
  var b = this.valueSetter_.graphics.command;
  c = Math.max("undefined" == typeof c ? 10 : c, 10);
  c = Math.min(this.maxWidth + 10, c);
  b.x = c;
  this.updateSlideValueByView();
};
Entry.Variable.prototype.updateSlideValueByView = function() {
  var c = Math.max(this.valueSetter_.graphics.command.x - 10, 0) / this.maxWidth;
  0 > c && (c = 0);
  1 < c && (c = 1);
  var b = parseFloat(this.minValue_), d = parseFloat(this.maxValue_), c = (b + Number(Math.abs(d - b) * c)).toFixed(2), c = parseFloat(c);
  c < b ? c = this.minValue_ : c > d && (c = this.maxValue_);
  this.isFloatPoint() || (c = Math.round(c));
  this.setValue(c);
};
Entry.Variable.prototype.getMinValue = function() {
  return this.minValue_;
};
Entry.Variable.prototype.setMinValue = function(c) {
  this._valueWidth = null;
  this.minValue_ = c = c || 0;
  this.value_ < c && this.setValue(c);
  this.isMinFloat = Entry.isFloat(this.minValue_);
  this.updateView();
};
Entry.Variable.prototype.getMaxValue = function() {
  return this.maxValue_;
};
Entry.Variable.prototype.setMaxValue = function(c) {
  this._valueWidth = null;
  this.maxValue_ = c = c || 100;
  this.value_ > c && (this.value_ = c);
  this.isMaxFloat = Entry.isFloat(this.maxValue_);
  this.updateView();
};
Entry.Variable.prototype.isFloatPoint = function() {
  return this.isMaxFloat || this.isMinFloat;
};
Entry.VariableContainer = function() {
  this.variables_ = [];
  this.messages_ = [];
  this.lists_ = [];
  this.functions_ = {};
  this.viewMode_ = "all";
  this.selected = null;
  this.variableAddPanel = {isOpen:!1, info:{object:null, isCloud:!1}};
  this.listAddPanel = {isOpen:!1, info:{object:null, isCloud:!1}};
  this.selectedVariable = null;
  this._variableRefs = [];
  this._messageRefs = [];
  this._functionRefs = [];
  this._filterTabs = {};
  Entry.addEventListener("workspaceChangeMode", this.updateList.bind(this));
};
(function(c) {
  c.createDom = function(b) {
    var c = this;
    this.filterElements = {};
    this.view_ = b;
    var e = Entry.createElement("table");
    e.addClass("entryVariableSelectorWorkspace");
    this.view_.appendChild(e);
    var f = Entry.createElement("tr");
    e.appendChild(f);
    var g = this.createSelectButton("all");
    this.filterElements.all = g;
    g.setAttribute("rowspan", "2");
    g.addClass("selected", "allButton");
    f.appendChild(g);
    this.filterElements.variable = this.createSelectButton("variable", Entry.variableEnable);
    f.appendChild(this.filterElements.variable);
    this.filterElements.message = this.createSelectButton("message", Entry.messageEnable);
    f.appendChild(this.filterElements.message);
    f = Entry.createElement("tr");
    this.filterElements.list = this.createSelectButton("list", Entry.listEnable);
    f.appendChild(this.filterElements.list);
    this.filterElements.func = this.createSelectButton("func", Entry.functionEnable);
    f.appendChild(this.filterElements.func);
    e.appendChild(f);
    e = Entry.createElement("ul");
    e.addClass("entryVariableListWorkspace");
    this.view_.appendChild(e);
    this.listView_ = e;
    e = Entry.createElement("li");
    e.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace");
    e.innerHTML = "+ " + Lang.Workspace.variable_add;
    var h = this;
    this.variableAddButton_ = e;
    e.bindOnClick(function(b) {
      Entry.do("variableContainerClickVariableAddButton");
    });
    this.generateVariableAddView();
    this.generateListAddView();
    this.generateVariableSplitterView();
    this.generateVariableSettingView();
    this.generateListSettingView();
    e = Entry.createElement("li");
    e.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace");
    e.innerHTML = "+ " + Lang.Workspace.message_create;
    this.messageAddButton_ = e;
    e.bindOnClick(function(b) {
      c.addMessage({name:Lang.Workspace.message + " " + (c.messages_.length + 1)});
    });
    e = Entry.createElement("li");
    e.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace");
    e.innerHTML = "+ " + Lang.Workspace.list_create;
    this.listAddButton_ = e;
    e.bindOnClick(function(b) {
      b = h.listAddPanel;
      var d = b.view.name.value.trim();
      b.isOpen ? d && 0 !== d.length ? c.addList() : (b.view.addClass("entryRemove"), b.isOpen = !1) : (b.view.removeClass("entryRemove"), b.view.name.focus(), b.isOpen = !0);
    });
    e = Entry.createElement("li");
    e.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace");
    e.innerHTML = "+ " + Lang.Workspace.function_add;
    this.functionAddButton_ = e;
    e.bindOnClick(function(b) {
      b = Entry.playground;
      var d = c._getBlockMenu();
      b.changeViewMode("code");
      "func" != d.lastSelector && d.selectMenu("func");
      c.createFunction();
    });
    return b;
  };
  c.createSelectButton = function(b, c) {
    void 0 === c && (c = !0);
    var d = Entry.createElement("td");
    d.addClass("entryVariableSelectButtonWorkspace", b);
    d.innerHTML = Lang.Workspace[b];
    d.bindOnClick(function(c) {
      Entry.do("variableContainerSelectFilter", b, this.viewMode_);
    });
    !1 === c && (d.addClass("disable"), d.disabled = !0);
    return this._filterTabs[b] = d;
  };
  c.selectFilter = function(b) {
    for (var c = this.view_.getElementsByTagName("td"), e = 0; e < c.length; e++) {
      c[e].removeClass("selected"), c[e].hasClass(b) && c[e].addClass("selected");
    }
    this.viewMode_ = b;
    this.select();
    this.updateList();
  };
  c.updateVariableAddView = function(b) {
    b = "variable" == (b ? b : "variable") ? this.variableAddPanel : this.listAddPanel;
    var c = b.info, e = b.view;
    b.view.addClass("entryRemove");
    e.cloudCheck.removeClass("entryVariableAddChecked");
    e.localCheck.removeClass("entryVariableAddChecked");
    e.globalCheck.removeClass("entryVariableAddChecked");
    e.cloudWrapper.removeClass("entryVariableAddSpaceUnCheckedWorkspace");
    c.isCloud && e.cloudCheck.addClass("entryVariableAddChecked");
    b.isOpen && (e.removeClass("entryRemove"), e.name.focus());
    c.object ? (e.localCheck.addClass("entryVariableAddChecked"), e.cloudWrapper.addClass("entryVariableAddSpaceUnCheckedWorkspace")) : e.globalCheck.addClass("entryVariableAddChecked");
  };
  c.select = function(b) {
    b = this.selected == b ? null : b;
    this.selected && (this.selected.listElement.removeClass("selected"), this.selected.callerListElement && (this.listView_.removeChild(this.selected.callerListElement), delete this.selected.callerListElement), this.selected = null);
    b && (b.listElement.addClass("selected"), this.selected = b, b instanceof Entry.Variable ? (this.renderVariableReference(b), b.object_ && Entry.container.selectObject(b.object_, !0)) : b instanceof Entry.Func ? this.renderFunctionReference(b) : this.renderMessageReference(b));
  };
  c.getMessage = function(b) {
    return this.messages_.filter(function(c) {
      return c.id === b;
    })[0];
  };
  c.renderMessageReference = function(b) {
    var c = this;
    var e = this._messageRefs;
    for (var f = b.id, g = [], h = 0; h < e.length; h++) {
      -1 < e[h].block.params.indexOf(f) && g.push(e[h]);
    }
    f = Entry.createElement("ul");
    f.addClass("entryVariableListCallerListWorkspace");
    for (h in g) {
      var k = g[h];
      e = Entry.createElement("li");
      e.addClass("entryVariableListCallerWorkspace");
      !k.object.thumbnailView_ && k.object.generateView();
      e.appendChild(k.object.thumbnailView_.cloneNode());
      var l = Entry.createElement("div");
      l.addClass("entryVariableListCallerNameWorkspace");
      l.innerHTML = k.object.name + " : " + Lang.Blocks["START_" + k.block.type];
      e.appendChild(l);
      e.caller = k;
      e.message = b;
      e.bindOnClick(function(b) {
        Entry.playground.object != this.caller.object && (Entry.container.selectObject(), Entry.container.selectObject(this.caller.object.id, !0), c.select(null), c.select(this.message));
        Entry.playground.toggleOnVariableView();
        Entry.playground.changeViewMode("variable");
      });
      f.appendChild(e);
    }
    0 === g.length && (e = Entry.createElement("li"), e.addClass("entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace"), e.innerHTML = Lang.Workspace.no_use, f.appendChild(e));
    b.callerListElement = f;
    this.listView_.insertBefore(f, b.listElement);
    this.listView_.insertBefore(b.listElement, f);
  };
  c.renderVariableReference = function(b) {
    var c = this;
    var e = this._variableRefs;
    for (var f = b.id_, g = [], h = 0; h < e.length; h++) {
      -1 < e[h].block.params.indexOf(f) && g.push(e[h]);
    }
    f = Entry.createElement("ul");
    f.addClass("entryVariableListCallerListWorkspace");
    for (h in g) {
      var k = g[h];
      e = Entry.createElement("li");
      e.addClass("entryVariableListCallerWorkspace");
      !k.object.thumbnailView_ && k.object.generateView();
      e.appendChild(k.object.thumbnailView_.cloneNode());
      var l = Entry.createElement("div");
      l.addClass("entryVariableListCallerNameWorkspace");
      l.innerHTML = k.object.name + " : " + Lang.Blocks["VARIABLE_" + k.block.type];
      e.appendChild(l);
      e.caller = k;
      e.variable = b;
      e.bindOnClick(function(b) {
        Entry.playground.object != this.caller.object && (Entry.container.selectObject(), Entry.container.selectObject(this.caller.object.id, !0), c.select(null));
        b = this.caller;
        b = b.funcBlock || b.block;
        var d = b.view;
        d && d.getBoard().activateBlock(b);
        Entry.playground.toggleOnVariableView();
        Entry.playground.changeViewMode("variable");
      });
      f.appendChild(e);
    }
    0 === g.length && (e = Entry.createElement("li"), e.addClass("entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace"), e.innerHTML = Lang.Workspace.no_use, f.appendChild(e));
    b.callerListElement = f;
    this.listView_.insertBefore(f, b.listElement);
    this.listView_.insertBefore(b.listElement, f);
  };
  c.renderFunctionReference = function(b) {
    var c = this;
    var e = this._functionRefs;
    for (var f = [], g = 0; g < e.length; g++) {
      f.push(e[g]);
    }
    var h = Entry.createElement("ul");
    h.addClass("entryVariableListCallerListWorkspace");
    for (g in f) {
      var k = f[g];
      e = Entry.createElement("li");
      e.addClass("entryVariableListCallerWorkspace");
      !k.object.thumbnailView_ && k.object.generateView();
      e.appendChild(k.object.thumbnailView_.cloneNode());
      var l = Entry.createElement("div");
      l.addClass("entryVariableListCallerNameWorkspace");
      l.innerHTML = k.object.name;
      e.appendChild(l);
      e.caller = k;
      e.bindOnClick(function(d) {
        Entry.playground.object != this.caller.object && (Entry.container.selectObject(), Entry.container.selectObject(this.caller.object.id, !0), c.select(null), c.select(b));
        Entry.playground.toggleOnVariableView();
        d = this.caller.block;
        var e = d.view;
        e && e.getBoard().activateBlock(d);
        Entry.playground.changeViewMode("variable");
      });
      h.appendChild(e);
    }
    0 === f.length && (e = Entry.createElement("li"), e.addClass("entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace"), e.innerHTML = Lang.Workspace.no_use, h.appendChild(e));
    b.callerListElement = h;
    this.listView_.insertBefore(h, b.listElement);
    this.listView_.insertBefore(b.listElement, h);
  };
  c.updateList = function() {
    var b = Entry.playground;
    if (this.listView_ && (!b || "variable" === b.getViewMode() || "code" === b.getViewMode())) {
      this.variableSettingView.addClass("entryRemove");
      this.listSettingView.addClass("entryRemove");
      var c = this._isPythonMode();
      for (c ? this.listView_.addClass("entryVariableContainerTextMode") : this.listView_.removeClass("entryVariableContainerTextMode"); this.listView_.firstChild;) {
        this.listView_.removeChild(this.listView_.lastChild);
      }
      var e = this.viewMode_, b = [];
      if ("all" == e || "message" == e) {
        "message" == e && this.listView_.appendChild(this.messageAddButton_);
        for (var f in this.messages_) {
          var g = this.messages_[f];
          b.push(g);
          !g.listElement && this.createMessageView(g);
          var h = g.listElement;
          this.listView_.appendChild(h);
          g.callerListElement && this.listView_.appendChild(g.callerListElement);
        }
      }
      if ("all" == e || "variable" == e) {
        if ("variable" == e) {
          h = this.variableAddPanel.info;
          h.object && !Entry.playground.object && (h.object = null);
          this.listView_.appendChild(this.variableAddButton_);
          this.listView_.appendChild(this.variableAddPanel.view);
          this.variableSplitters.top.innerHTML = Lang.Workspace.Variable_used_at_all_objects;
          this.listView_.appendChild(this.variableSplitters.top);
          for (f in this.variables_) {
            g = this.variables_[f], g.object_ || (b.push(g), !g.listElement && this.createVariableView(g), h = g.listElement, this.listView_.appendChild(h), g.callerListElement && this.listView_.appendChild(g.callerListElement));
          }
          this.variableSplitters.bottom.innerHTML = Lang.Workspace.Variable_used_at_special_object;
          this.listView_.appendChild(this.variableSplitters.bottom);
          for (f in this.variables_) {
            g = this.variables_[f], g.object_ && (b.push(g), !g.listElement && this.createVariableView(g), h = g.listElement, this.listView_.appendChild(h), g.callerListElement && this.listView_.appendChild(g.callerListElement));
          }
          this.updateVariableAddView("variable");
        } else {
          for (f in this.variables_) {
            g = this.variables_[f], b.push(g), !g.listElement && this.createVariableView(g), h = g.listElement, this.listView_.appendChild(h), g.callerListElement && this.listView_.appendChild(g.callerListElement);
          }
        }
      }
      if ("all" == e || "list" == e) {
        if ("list" == e) {
          h = this.listAddPanel.info;
          h.object && !Entry.playground.object && (h.object = null);
          this.listView_.appendChild(this.listAddButton_);
          this.listView_.appendChild(this.listAddPanel.view);
          this.variableSplitters.top.innerHTML = Lang.Workspace.List_used_all_objects;
          this.listView_.appendChild(this.variableSplitters.top);
          this.updateVariableAddView("list");
          for (f in this.lists_) {
            g = this.lists_[f], g.object_ || (b.push(g), !g.listElement && this.createListView(g), h = g.listElement, this.listView_.appendChild(h), g.callerListElement && this.listView_.appendChild(g.callerListElement));
          }
          this.variableSplitters.bottom.innerHTML = Lang.Workspace.list_used_specific_objects;
          this.listView_.appendChild(this.variableSplitters.bottom);
          for (f in this.lists_) {
            g = this.lists_[f], g.object_ && (b.push(g), !g.listElement && this.createListView(g), h = g.listElement, this.listView_.appendChild(h), g.callerListElement && this.listView_.appendChild(g.callerListElement));
          }
          this.updateVariableAddView("variable");
        } else {
          for (f in this.lists_) {
            g = this.lists_[f], b.push(g), !g.listElement && this.createListView(g), h = g.listElement, this.listView_.appendChild(h), g.callerListElement && this.listView_.appendChild(g.callerListElement);
          }
        }
      }
      if ("all" == e || "func" == e) {
        for (f in "func" == e && (h = Entry.Workspace.MODE_BOARD, Entry.getMainWS() && (h = Entry.getMainWS().getMode()), h === Entry.Workspace.MODE_OVERLAYBOARD || c ? this.functionAddButton_.addClass("disable") : this.functionAddButton_.removeClass("disable"), this.listView_.appendChild(this.functionAddButton_)), this.functions_) {
          c = this.functions_[f], b.push(c), !c.funcElement && this.createFunctionView(c), h = c.listElement, this.listView_.appendChild(h), c.callerListElement && this.listView_.appendChild(c.callerListElement);
        }
      }
      this.listView_.appendChild(this.variableSettingView);
      this.listView_.appendChild(this.listSettingView);
    }
  };
  c.setMessages = function(b) {
    for (var c in b) {
      var e = b[c];
      e.id || (e.id = Entry.generateHash());
      this.messages_.push(e);
    }
    Entry.playground.reloadPlayground();
  };
  c.setVariables = function(b) {
    for (var c in b) {
      var e = new Entry.Variable(b[c]), f = e.getType();
      "variable" == f || "slide" == f ? (e.generateView(this.variables_.length), this.variables_.push(e)) : "list" == f ? (e.generateView(this.lists_.length), this.lists_.push(e)) : "timer" == f ? this.generateTimer(e) : "answer" == f && this.generateAnswer(e);
    }
    Entry.isEmpty(Entry.engine.projectTimer) && Entry.variableContainer.generateTimer();
    Entry.isEmpty(Entry.container.inputValue) && Entry.variableContainer.generateAnswer();
    Entry.playground.reloadPlayground();
  };
  c.setFunctions = function(b) {
    for (var c in b) {
      var e = new Entry.Func(b[c]);
      e.generateBlock();
      this.functions_[e.id] = e;
    }
  };
  c.getFunction = function(b) {
    return this.functions_[b];
  };
  c.getVariable = function(b, c) {
    var d = Entry.findObjsByKey(this.variables_, "id_", b)[0];
    c && c.isClone && d.object_ && (d = Entry.findObjsByKey(c.variables, "id_", b)[0]);
    return d;
  };
  c.getVariableByName = function(b, c, e) {
    !e && Entry.playground && Entry.playground.object && (e = Entry.playground.object.id);
    for (var d = 0; d < this.variables_.length; d++) {
      var g = this.variables_[d];
      if (!0 === c) {
        if (!g.object_ || g.object_ !== e) {
          continue;
        }
      } else {
        if (!1 === c && g.object_) {
          continue;
        }
      }
      if (g.getName() === b) {
        return g;
      }
    }
  };
  c.getList = function(b, c) {
    var d = Entry.findObjsByKey(this.lists_, "id_", b)[0];
    c && c.isClone && d.object_ && (d = Entry.findObjsByKey(c.lists, "id_", b)[0]);
    return d;
  };
  c.createFunction = function() {
    if (!Entry.Func.isEdit) {
      var b = new Entry.Func;
      Entry.Func.edit(b);
    }
  };
  c.addFunction = function(b) {
  };
  c.removeFunction = function(b) {
    var c = b.id;
    b = this.functions_;
    b[c].destroy();
    delete b[c];
    c = "func_" + c;
    Entry.container.removeFuncBlocks(c);
    for (var e in b) {
      b[e].content.removeBlocksByType(c);
    }
    this.updateList();
  };
  c.checkListPosition = function(b, c) {
    var d = b.x_ + b.width_, f = -b.y_, g = -b.y_ + -b.height_;
    return c.x > b.x_ && c.x < d && c.y < f && c.y > g ? !0 : !1;
  };
  c.getListById = function(b) {
    var c = this.lists_, e = [];
    if (0 < c.length) {
      for (var f = 0; f < c.length; f++) {
        this.checkListPosition(c[f], b) && e.push(c[f]);
      }
      return e;
    }
    return !1;
  };
  c.getListByName = function(b, c, e) {
    var d = this.lists_;
    !e && Entry.playground && Entry.playground.object && (e = Entry.playground.object.id);
    for (var g = 0; g < d.length; g++) {
      var h = d[g];
      if (!0 === c) {
        if (!h.object_ || h.object_ !== e) {
          continue;
        }
      } else {
        if (!1 === c && h.object_) {
          continue;
        }
      }
      if (h.getName() === b) {
        return h;
      }
    }
  };
  c.editFunction = function(b, c) {
  };
  c.saveFunction = function(b) {
    var c = Entry.getMainWS();
    if (c && c.overlayModefrom == Entry.Workspace.MODE_VIMBOARD && b && b.description && (c = b.description.substring(1, b.description.length - 1), alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(c, "function"))) {
      entrylms.alert(alert_msg);
      Entry.Func.cancelEdit();
      return;
    }
    this.functions_[b.id] || (this.functions_[b.id] = b, this.createFunctionView(b));
    b.listElement && (b.listElement.nameField.innerHTML = b.description);
    this.updateList();
  };
  c.createFunctionView = function(b) {
    var c = this;
    if (this.view_) {
      var e = Entry.createElement("li");
      e.addClass("entryVariableListElementWorkspace entryFunctionElementWorkspace function");
      e.bindOnClick(function(d) {
        d.stopPropagation();
        c.select(b);
      });
      var f = Entry.createElement("button");
      f.addClass("entryVariableListElementDeleteWorkspace");
      f.bindOnClick(function(d) {
        d.stopPropagation();
        entrylms.confirm(Lang.Workspace.will_you_delete_function).then(function(d) {
          !0 === d && (c.removeFunction(b), c.selected = null);
        });
      });
      var g = Entry.createElement("button");
      g.addClass("entryVariableListElementEditWorkspace notForTextMode");
      var h = this._getBlockMenu();
      g.bindOnClick(function(c) {
        c.stopPropagation();
        if (c = Entry.playground) {
          c.changeViewMode("code"), "func" != h.lastSelector && h.selectMenu("func");
        }
        Entry.Func.edit(b);
      });
      var k = Entry.createElement("div");
      k.addClass("entryVariableFunctionElementNameWorkspace");
      k.innerHTML = b.description;
      e.nameField = k;
      e.appendChild(k);
      e.appendChild(g);
      e.appendChild(f);
      b.listElement = e;
    }
  };
  c.checkAllVariableName = function(b, c) {
    c = this[c];
    for (var d = 0; d < c.length; d++) {
      if (c[d].name_ == b) {
        return !0;
      }
    }
    return !1;
  };
  c.addVariable = function(b) {
    if (Entry.isTextMode) {
      var c = this.variableAddPanel;
      if (alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(c.view.name.value, "variable")) {
        entrylms.alert(alert_msg);
        this.variableAddPanel.view.addClass("entryRemove");
        this.resetVariableAddPanel("variable");
        return;
      }
    }
    c = this.variableAddPanel;
    if (!b) {
      b = c.view.name.value.trim();
      b && 0 !== b.length || (b = Lang.Workspace.variable);
      b.length > this._maxNameLength && (b = this._truncName(b, "variable"));
      b = this.checkAllVariableName(b, "variables_") ? Entry.getOrderedName(b, this.variables_, "name_") : b;
      var e = c.info;
      b = {name:b, isCloud:e.isCloud, object:e.object, variableType:"variable"};
    }
    c.view && c.view.addClass("entryRemove");
    this.resetVariableAddPanel("variable");
    b instanceof Entry.Variable || (b = new Entry.Variable(b));
    b.generateView(this.variables_.length);
    this.createVariableView(b);
    this.variables_.unshift(b);
    Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("variable");
    Entry.playground.reloadPlayground();
    c.view && (c.view.name.value = "");
    this.updateList();
  };
  c.removeVariable = function(b) {
    b instanceof Entry.Variable || (b = this.variables_.filter(function(c) {
      return b.id === c.id_;
    })[0]);
    var c = this.variables_.indexOf(b);
    b.toJSON();
    this.selected == b && this.select(null);
    b.remove();
    this.variables_.splice(c, 1);
    Entry.playground.reloadPlayground();
    this.updateList();
  };
  c.changeVariableName = function(b, c) {
    b.name_ != c && (Entry.isTextMode && (alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(c, "variable")) ? (entrylms.alert(alert_msg), b.listElement.nameField.value = b.name_) : Entry.isExist(c, "name_", this.variables_) ? (b.listElement.nameField.value = b.name_, Entry.toast.alert(Lang.Workspace.variable_rename_failed, Lang.Workspace.variable_dup)) : 10 < c.length ? (b.listElement.nameField.value = b.name_, Entry.toast.alert(Lang.Workspace.variable_rename_failed, Lang.Workspace.variable_too_long)) : 
    (b.setName(c), Entry.playground.reloadPlayground(), Entry.toast.success(Lang.Workspace.variable_rename, Lang.Workspace.variable_rename_ok)));
  };
  c.changeListName = function(b, c) {
    b.name_ != c && (Entry.isTextMode && (alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(c, "list")) ? (entrylms.alert(alert_msg), b.listElement.nameField.value = b.name_) : Entry.isExist(c, "name_", this.lists_) ? (b.listElement.nameField.value = b.name_, Entry.toast.alert(Lang.Workspace.list_rename_failed, Lang.Workspace.list_dup)) : 10 < c.length ? (b.listElement.nameField.value = b.name_, Entry.toast.alert(Lang.Workspace.list_rename_failed, Lang.Workspace.list_too_long)) : (b.name_ = c, 
    b.updateView(), Entry.playground.reloadPlayground(), Entry.toast.success(Lang.Workspace.list_rename, Lang.Workspace.list_rename_ok)));
  };
  c.removeList = function(b) {
    var c = this.lists_.indexOf(b), e = b.toJSON();
    Entry.stateManager && Entry.stateManager.addCommand("remove list", this, this.addList, e);
    this.selected == b && this.select(null);
    b.remove();
    this.lists_.splice(c, 1);
    Entry.playground.reloadPlayground();
    this.updateList();
    return new Entry.State(this, this.addList, e);
  };
  c.createVariableView = function(b) {
    var c = this, e = Entry.createElement("li"), f = Entry.createElement("div");
    f.addClass("entryVariableListElementWrapperWorkspace variable");
    e.appendChild(f);
    var g = "entryVariableListElementWorkspace", g = b.object_ ? g + " entryVariableLocalElementWorkspace" : b.isCloud_ ? g + " entryVariableCloudElementWorkspace" : g + " entryVariableGlobalElementWorkspace";
    e.addClass(g);
    e.bindOnClick(function(d) {
      c.select(b);
    });
    g = Entry.createElement("button");
    g.addClass("entryVariableListElementDeleteWorkspace notForTextMode");
    g.bindOnClick(function(d) {
      d.stopPropagation();
      c.removeVariable(b);
      c.selectedVariable = null;
      c.variableSettingView.addClass("entryRemove");
    });
    this._removeButton = e.removeButton = g;
    var h = Entry.createElement("button");
    h.addClass("entryVariableListElementEditWorkspace");
    h.bindOnClick(function(d) {
      d.stopPropagation();
      l.removeAttribute("disabled");
      k.removeClass("entryRemove");
      this.addClass("entryRemove");
      c.updateSelectedVariable(b);
      l.focus();
    });
    e.editButton = h;
    var k = Entry.createElement("button");
    k.addClass("entryVariableListElementEditWorkspace entryRemove");
    k.bindOnClick(function(b) {
      b.stopPropagation();
      l.blur();
      l.setAttribute("disabled", "disabled");
      h.removeClass("entryRemove");
      this.addClass("entryRemove");
      c.updateSelectedVariable(null, "variable");
    });
    e.editSaveButton = k;
    var l = Entry.createElement("input");
    l.addClass("entryVariableListElementNameWorkspace");
    l.setAttribute("disabled", "disabled");
    l.value = b.name_;
    l.bindOnClick(function(b) {
      b.stopPropagation();
    });
    l.onblur = function(d) {
      (d = this.value.trim()) && 0 !== d.length ? c.changeVariableName(b, this.value) : (Entry.toast.alert(Lang.Msgs.warn, Lang.Workspace.variable_can_not_space), this.value = b.getName());
    };
    l.onkeydown = function(b) {
      13 == b.keyCode && this.blur();
    };
    e.nameField = l;
    f.appendChild(l);
    f.appendChild(h);
    f.appendChild(k);
    f.appendChild(g);
    b.listElement = e;
  };
  c.addMessage = function(b) {
    b.id || (b.id = Entry.generateHash());
    Entry.stateManager && Entry.stateManager.addCommand("add message", this, this.removeMessage, b);
    this.createMessageView(b);
    this.messages_.unshift(b);
    Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("start");
    Entry.playground.reloadPlayground();
    this.updateList();
    b.listElement.nameField.focus();
    return new Entry.State(this, this.removeMessage, b);
  };
  c.removeMessage = function(b) {
    this.selected == b && this.select(null);
    Entry.stateManager && Entry.stateManager.addCommand("remove message", this, this.addMessage, b);
    var c = this.messages_.indexOf(b);
    this.messages_.splice(c, 1);
    this.updateList();
    Entry.playground.reloadPlayground();
    return new Entry.State(this, this.addMessage, b);
  };
  c.changeMessageName = function(b, c) {
    b.name != c && (Entry.isExist(c, "name", this.messages_) ? (b.listElement.nameField.value = b.name, Entry.toast.alert(Lang.Workspace.message_rename_failed, Lang.Workspace.message_dup)) : 10 < c.length ? (b.listElement.nameField.value = b.name, Entry.toast.alert(Lang.Workspace.message_rename_failed, Lang.Workspace.message_too_long)) : (b.name = c, Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("start"), Entry.playground.reloadPlayground(), Entry.toast.success(Lang.Workspace.message_rename, 
    Lang.Workspace.message_rename_ok)));
  };
  c.createMessageView = function(b) {
    var c = this, e = Entry.createElement("li");
    e.addClass("entryVariableListElementWorkspace entryMessageElementWorkspace");
    e.bindOnClick(function(d) {
      c.select(b);
    });
    var f = Entry.createElement("button");
    f.addClass("entryVariableListElementDeleteWorkspace");
    f.bindOnClick(function(d) {
      d.stopPropagation();
      c.removeMessage(b);
    });
    var g = Entry.createElement("button");
    g.addClass("entryVariableListElementEditWorkspace");
    g.bindOnClick(function(b) {
      b.stopPropagation();
      k.removeAttribute("disabled");
      k.focus();
      h.removeClass("entryRemove");
      this.addClass("entryRemove");
    });
    var h = Entry.createElement("button");
    h.addClass("entryVariableListElementEditWorkspace entryRemove");
    h.bindOnClick(function(b) {
      b.stopPropagation();
      k.blur();
      g.removeClass("entryRemove");
      this.addClass("entryRemove");
    });
    var k = Entry.createElement("input");
    k.addClass("entryVariableListElementNameWorkspace");
    k.value = b.name;
    k.bindOnClick(function(b) {
      b.stopPropagation();
    });
    k.onblur = function(d) {
      (d = this.value.trim()) && 0 !== d.length ? (c.changeMessageName(b, this.value), g.removeClass("entryRemove"), h.addClass("entryRemove"), k.setAttribute("disabled", "disabled")) : (Entry.toast.alert(Lang.Msgs.warn, Lang.Msgs.sign_can_not_space), this.value = b.name);
    };
    k.onkeydown = function(b) {
      13 == b.keyCode && this.blur();
    };
    e.nameField = k;
    e.appendChild(k);
    e.appendChild(g);
    e.appendChild(h);
    e.appendChild(f);
    b.listElement = e;
  };
  c.addList = function(b) {
    if (Entry.isTextMode) {
      var c = this.listAddPanel;
      if (alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(c.view.name.value, "list")) {
        entrylms.alert(alert_msg);
        this.listAddPanel.view.addClass("entryRemove");
        this.resetVariableAddPanel("list");
        return;
      }
    }
    if (!b) {
      c = this.listAddPanel;
      b = c.view.name.value.trim();
      b && 0 !== b.length || (b = Lang.Workspace.list);
      var e = c.info;
      b.length > this._maxNameLength && (b = this._truncName(b, "list"));
      b = this.checkAllVariableName(b, "lists_") ? Entry.getOrderedName(b, this.lists_, "name_") : b;
      b = {name:b, isCloud:e.isCloud, object:e.object, variableType:"list"};
      c.view.addClass("entryRemove");
      this.resetVariableAddPanel("list");
    }
    b = new Entry.Variable(b);
    Entry.stateManager && Entry.stateManager.addCommand("add list", this, this.removeList, b);
    b.generateView(this.lists_.length);
    this.createListView(b);
    this.lists_.unshift(b);
    Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("variable");
    Entry.playground.reloadPlayground();
    this.updateList();
    return new Entry.State(this, this.removelist, b);
  };
  c.createListView = function(b) {
    var c = this, e = Entry.createElement("li"), f = Entry.createElement("div");
    f.addClass("entryVariableListElementWrapperWorkspace list");
    e.appendChild(f);
    e.addClass("entryVariableListElementWorkspace");
    b.object_ ? e.addClass("entryListLocalElementWorkspace") : b.isCloud_ ? e.addClass("entryListCloudElementWorkspace") : e.addClass("entryListGlobalElementWorkspace");
    e.bindOnClick(function(d) {
      c.select(b);
    });
    var g = Entry.createElement("button");
    g.addClass("entryVariableListElementDeleteWorkspace notForTextMode");
    g.bindOnClick(function(d) {
      d.stopPropagation();
      c.removeList(b);
      c.selectedList = null;
      c.listSettingView.addClass("entryRemove");
    });
    var h = Entry.createElement("button");
    h.addClass("entryVariableListElementEditWorkspace");
    h.bindOnClick(function(d) {
      d.stopPropagation();
      l.removeAttribute("disabled");
      k.removeClass("entryRemove");
      this.addClass("entryRemove");
      c.updateSelectedVariable(b);
      l.focus();
    });
    e.editButton = h;
    var k = Entry.createElement("button");
    k.addClass("entryVariableListElementEditWorkspace entryRemove");
    k.bindOnClick(function(d) {
      d.stopPropagation();
      l.blur();
      l.setAttribute("disabled", "disabled");
      h.removeClass("entryRemove");
      this.addClass("entryRemove");
      c.select(b);
      c.updateSelectedVariable(null, "list");
    });
    e.editSaveButton = k;
    var l = Entry.createElement("input");
    l.setAttribute("disabled", "disabled");
    l.addClass("entryVariableListElementNameWorkspace");
    l.value = b.name_;
    l.bindOnClick(function(b) {
      b.stopPropagation();
    });
    l.onblur = function(d) {
      (d = this.value.trim()) && 0 !== d.length ? c.changeListName(b, this.value) : (Entry.toast.alert(Lang.Msgs.warn, Lang.Msgs.list_can_not_space), this.value = b.getName());
    };
    l.onkeydown = function(b) {
      13 == b.keyCode && this.blur();
    };
    e.nameField = l;
    f.appendChild(l);
    f.appendChild(h);
    f.appendChild(k);
    f.appendChild(g);
    b.listElement = e;
  };
  c.mapVariable = function(b, c) {
    for (var d = this.variables_.length, f = 0; f < d; f++) {
      b(this.variables_[f], c);
    }
  };
  c.mapList = function(b, c) {
    for (var d = this.lists_.length, f = 0; f < d; f++) {
      b(this.lists_[f], c);
    }
  };
  c.getVariableJSON = function() {
    for (var b = [], c = 0; c < this.variables_.length; c++) {
      b.push(this.variables_[c].toJSON());
    }
    for (c = 0; c < this.lists_.length; c++) {
      b.push(this.lists_[c].toJSON());
    }
    Entry.engine.projectTimer && b.push(Entry.engine.projectTimer.toJSON());
    c = Entry.container.inputValue;
    Entry.isEmpty(c) || b.push(c.toJSON());
    return b;
  };
  c.getMessageJSON = function() {
    for (var b = [], c = 0; c < this.messages_.length; c++) {
      b.push({id:this.messages_[c].id, name:this.messages_[c].name});
    }
    return b;
  };
  c.getFunctionJSON = function() {
    var b = [], c;
    for (c in this.functions_) {
      var e = this.functions_[c], e = {id:e.id, content:JSON.stringify(e.content.toJSON())};
      b.push(e);
    }
    return b;
  };
  c.resetVariableAddPanel = function(b) {
    b = b || "variable";
    var c = "variable" == b ? this.variableAddPanel : this.listAddPanel;
    if (c.view) {
      var e = c.info;
      e.isCloud = !1;
      e.object = null;
      c.view.name.value = "";
      c.isOpen = !1;
      this.updateVariableAddView(b);
    }
  };
  c.generateVariableAddView = function() {
    var b = this, c = Entry.createElement("li");
    this.variableAddPanel.view = c;
    this.variableAddPanel.isOpen = !1;
    c.addClass("entryVariableAddSpaceWorkspace entryRemove");
    var e = Entry.createElement("div");
    e.addClass("entryVariableAddSpaceNameWrapperWorkspace");
    c.appendChild(e);
    var f = Entry.createElement("input");
    f.addClass("entryVariableAddSpaceInputWorkspace");
    f.setAttribute("placeholder", Lang.Workspace.Variable_placeholder_name);
    f.variableContainer = this;
    f.onkeypress = function(c) {
      13 === c.keyCode && (this.enterKeyDisabled ? this.blur() : b._addVariable());
    };
    f.onfocus = function(b) {
      this.blurred = !1;
    };
    f.onblur = function(b) {
      "" === this.value || this.blurred || (Entry.do("variableAddSetName", $(".entryVariableAddSpaceInputWorkspace").val()), this.blurred = !0);
    };
    this.variableAddPanel.view.name = f;
    e.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryVariableAddSpaceGlobalWrapperWorkspace");
    e.bindOnClick(function(c) {
      b.variableAddPanel.info.object = null;
      b.updateVariableAddView("variable");
    });
    c.appendChild(e);
    f = Entry.createElement("span");
    f.innerHTML = Lang.Workspace.Variable_use_all_objects;
    e.appendChild(f);
    f = Entry.createElement("span");
    f.addClass("entryVariableAddSpaceCheckWorkspace");
    this.variableAddPanel.view.globalCheck = f;
    this.variableAddPanel.info.object || f.addClass("entryVariableAddChecked");
    e.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryVariableAddSpaceLocalWrapperWorkspace");
    e.bindOnClick(function(c) {
      Entry.playground.object && (c = b.variableAddPanel.info, c.object = Entry.playground.object.id, c.isCloud = !1, b.updateVariableAddView("variable"));
    });
    c.appendChild(e);
    f = Entry.createElement("span");
    f.innerHTML = Lang.Workspace.Variable_use_this_object;
    e.appendChild(f);
    f = Entry.createElement("span");
    f.addClass("entryVariableAddSpaceCheckWorkspace");
    this.variableAddPanel.view.localCheck = f;
    this.variableAddPanel.info.object && f.addClass("entryVariableAddChecked");
    e.appendChild(f);
    e = Entry.createElement("div");
    c.cloudWrapper = e;
    e.addClass("entryVariableAddSpaceCloudWrapperWorkspace");
    e.bindOnClick(function(c) {
      c = b.variableAddPanel.info;
      c.object || (c.isCloud = !c.isCloud, b.updateVariableAddView("variable"));
    });
    c.appendChild(e);
    f = Entry.createElement("span");
    f.addClass("entryVariableAddSpaceCloudSpanWorkspace");
    f.innerHTML = Lang.Workspace.Variable_create_cloud;
    e.appendChild(f);
    f = Entry.createElement("span");
    this.variableAddPanel.view.cloudCheck = f;
    f.addClass("entryVariableAddSpaceCheckWorkspace entryVariableAddSpaceCloudCheckWorkspace");
    this.variableAddPanel.info.isCloud && f.addClass("entryVariableAddChecked");
    e.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryVariableAddSpaceButtonWrapperWorkspace");
    c.appendChild(e);
    c = Entry.createElement("span");
    c.addClass("entryVariableAddSpaceCancelWorkspace entryVariableAddSpaceButtonWorkspace");
    c.innerHTML = Lang.Buttons.cancel;
    c.bindOnClick(function(c) {
      b.variableAddPanel.view.addClass("entryRemove");
      b.resetVariableAddPanel("variable");
    });
    e.appendChild(c);
    c = Entry.createElement("span");
    c.addClass("entryVariableAddSpaceConfirmWorkspace entryVariableAddSpaceButtonWorkspace");
    c.innerHTML = Lang.Buttons.save;
    c.variableContainer = this;
    c.bindOnClick(function(c) {
      b._addVariable();
    });
    e.appendChild(c);
    this.variableAddConfirmButton = c;
  };
  c._addVariable = function() {
    $(".entryVariableAddSpaceInputWorkspace").blur();
    var b = this._makeVariableData(), b = new Entry.Variable(b);
    Entry.do("variableContainerAddVariable", b);
    this.updateSelectedVariable(this.variables_[0]);
    b = this.variables_[0].listElement;
    b.editButton.addClass("entryRemove");
    b.editSaveButton.removeClass("entryRemove");
    b.nameField.removeAttribute("disabled");
  };
  c.generateListAddView = function() {
    var b = this, c = Entry.createElement("li");
    this.listAddPanel.view = c;
    this.listAddPanel.isOpen = !1;
    c.addClass("entryVariableAddSpaceWorkspace entryRemove");
    var e = Entry.createElement("div");
    e.addClass("entryVariableAddSpaceNameWrapperWorkspace entryListAddSpaceNameWrapperWorkspace");
    c.appendChild(e);
    var f = Entry.createElement("input");
    f.addClass("entryVariableAddSpaceInputWorkspace");
    f.setAttribute("placeholder", Lang.Workspace.list_name);
    this.listAddPanel.view.name = f;
    f.variableContainer = this;
    f.onkeypress = function(c) {
      13 == c.keyCode && (b.addList(), c = b.lists_[0], b.updateSelectedVariable(c), c = c.listElement, c.editButton.addClass("entryRemove"), c.editSaveButton.removeClass("entryRemove"), c.nameField.removeAttribute("disabled"));
    };
    e.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryVariableAddSpaceGlobalWrapperWorkspace");
    e.bindOnClick(function(c) {
      b.listAddPanel.info.object = null;
      b.updateVariableAddView("list");
    });
    c.appendChild(e);
    f = Entry.createElement("span");
    f.innerHTML = Lang.Workspace.use_all_objects;
    e.appendChild(f);
    f = Entry.createElement("span");
    f.addClass("entryVariableAddSpaceCheckWorkspace");
    this.listAddPanel.view.globalCheck = f;
    this.listAddPanel.info.object || f.addClass("entryVariableAddChecked");
    e.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryVariableAddSpaceLocalWrapperWorkspace");
    e.bindOnClick(function(c) {
      Entry.playground.object && (c = b.listAddPanel.info, c.object = Entry.playground.object.id, c.isCloud = !1, b.updateVariableAddView("list"));
    });
    c.appendChild(e);
    f = Entry.createElement("span");
    f.innerHTML = Lang.Workspace.Variable_use_this_object;
    e.appendChild(f);
    f = Entry.createElement("span");
    f.addClass("entryVariableAddSpaceCheckWorkspace");
    this.listAddPanel.view.localCheck = f;
    this.variableAddPanel.info.object && addVariableLocalCheck.addClass("entryVariableAddChecked");
    e.appendChild(f);
    e = Entry.createElement("div");
    c.cloudWrapper = e;
    e.addClass("entryVariableAddSpaceCloudWrapperWorkspace");
    e.bindOnClick(function(c) {
      c = b.listAddPanel.info;
      c.object || (c.isCloud = !c.isCloud, b.updateVariableAddView("list"));
    });
    c.appendChild(e);
    f = Entry.createElement("span");
    f.addClass("entryVariableAddSpaceCloudSpanWorkspace");
    f.innerHTML = Lang.Workspace.List_create_cloud;
    e.appendChild(f);
    f = Entry.createElement("span");
    this.listAddPanel.view.cloudCheck = f;
    f.addClass("entryVariableAddSpaceCheckWorkspace entryVariableAddSpaceCloudCheckWorkspace");
    this.listAddPanel.info.isCloud && f.addClass("entryVariableAddChecked");
    e.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryVariableAddSpaceButtonWrapperWorkspace");
    c.appendChild(e);
    c = Entry.createElement("span");
    c.addClass("entryVariableAddSpaceCancelWorkspace entryVariableAddSpaceButtonWorkspace");
    c.innerHTML = Lang.Buttons.cancel;
    c.bindOnClick(function(c) {
      b.listAddPanel.view.addClass("entryRemove");
      b.resetVariableAddPanel("list");
    });
    e.appendChild(c);
    c = Entry.createElement("span");
    c.addClass("entryVariableAddSpaceConfirmWorkspace entryVariableAddSpaceButtonWorkspace");
    c.innerHTML = Lang.Buttons.save;
    c.variableContainer = this;
    c.bindOnClick(function(c) {
      b.addList();
      c = b.lists_[0];
      b.updateSelectedVariable(c);
      c = c.listElement;
      c.editButton.addClass("entryRemove");
      c.editSaveButton.removeClass("entryRemove");
      c.nameField.removeAttribute("disabled");
    });
    e.appendChild(c);
  };
  c.generateVariableSplitterView = function() {
    var b = Entry.createElement("li");
    b.addClass("entryVariableSplitterWorkspace");
    var c = Entry.createElement("li");
    c.addClass("entryVariableSplitterWorkspace");
    this.variableSplitters = {top:b, bottom:c};
  };
  c.openVariableAddPanel = function(b) {
    b = b ? b : "variable";
    Entry.playground.toggleOnVariableView();
    Entry.playground.changeViewMode("variable");
    "variable" == b ? this.variableAddPanel.isOpen = !0 : this.listAddPanel.isOpen = !0;
    this.selectFilter(b);
    this.updateVariableAddView(b);
  };
  c.getMenuXml = function(b) {
    for (var c = [], e = 0 !== this.variables_.length, f = 0 !== this.lists_.length, g, h = 0, k; k = b[h]; h++) {
      var l = k.tagName;
      l && "BLOCK" == l.toUpperCase() ? (g = k.getAttribute("bCategory"), !e && "variable" == g || !f && "list" == g || c.push(k)) : !l || "SPLITTER" != l.toUpperCase() && "BTN" != l.toUpperCase() || !e && "variable" == g || (f || "list" != g) && c.push(k);
    }
    return c;
  };
  c.addCloneLocalVariables = function(b) {
    var c = [], e = this;
    this.mapVariable(function(b, d) {
      b.object_ && b.object_ == d.objectId && (b = b.toJSON(), b.originId = b.id, b.id = Entry.generateHash(), b.object = d.newObjectId, b.name = e.checkAllVariableName(b.name, "variables_") ? Entry.getOrderedName(b.name, e.variables_, "name_") : b.name, delete b.x, delete b.y, c.push(b), d.json.script = d.json.script.replace(new RegExp(b.originId, "g"), b.id));
    }, b);
    c.map(function(b) {
      e.addVariable(b);
    });
  };
  c.generateTimer = function(b) {
    b || (b = {}, b.id = Entry.generateHash(), b.name = Lang.Workspace.Variable_Timer, b.value = 0, b.variableType = "timer", b.visible = !1, b.x = 150, b.y = -70, b = new Entry.Variable(b));
    b.generateView();
    b.tick = null;
    Entry.engine.projectTimer = b;
    Entry.addEventListener("stop", function() {
      Entry.engine.stopProjectTimer();
    }.bind(this));
  };
  c.generateAnswer = function(b) {
    b || (b = new Entry.Variable({id:Entry.generateHash(), name:Lang.Blocks.VARIABLE_get_canvas_input_value, value:0, variableType:"answer", visible:!1, x:150, y:-100}));
    b.generateView();
    Entry.container.inputValue = b;
  };
  c.generateVariableSettingView = function() {
    var b = this, c = Entry.createElement("div");
    c.bindOnClick(function(b) {
      b.stopPropagation();
    });
    this.variableSettingView = c;
    c.addClass("entryVariableSettingWorkspace");
    this.listView_.appendChild(c);
    c.addClass("entryRemove");
    var e = Entry.createElement("div");
    e.addClass("entryVariableSettingVisibleWrapperWorkspace");
    e.bindOnClick(function(c) {
      c = b.selectedVariable;
      var d = b.variableSettingView.visibleCheck;
      c.setVisible(!c.isVisible());
      c.isVisible() ? d.addClass("entryVariableSettingChecked") : d.removeClass("entryVariableSettingChecked");
    });
    c.appendChild(e);
    var f = Entry.createElement("span");
    f.innerHTML = Lang.Workspace.show_variable;
    e.appendChild(f);
    f = Entry.createElement("span");
    f.addClass("entryVariableSettingCheckWorkspace");
    c.visibleCheck = f;
    e.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryVariableSettingInitValueWrapperWorkspace");
    c.appendChild(e);
    f = Entry.createElement("span");
    f.innerHTML = Lang.Workspace.default_value;
    e.appendChild(f);
    f = Entry.createElement("input");
    f.addClass("entryVariableSettingInitValueInputWorkspace");
    c.initValueInput = f;
    f.value = 0;
    f.onkeyup = function(c) {
      b.selectedVariable.setValue(this.value);
    };
    f.onblur = function(c) {
      b.selectedVariable.setValue(this.value);
    };
    c.initValueInput = f;
    e.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryVariableSettingSplitterWorkspace");
    c.appendChild(e);
    e = Entry.createElement("div");
    e.addClass("entryVariableSettingSlideWrapperWorkspace");
    c.appendChild(e);
    f = Entry.createElement("span");
    f.innerHTML = Lang.Workspace.slide;
    e.appendChild(f);
    f = Entry.createElement("span");
    f.addClass("entryVariableSettingCheckWorkspace");
    c.slideCheck = f;
    e.appendChild(f);
    e.bindOnClick(function(c) {
      c = b.selectedVariable;
      var d = b.variables_, e = c.getType();
      if ("variable" == e) {
        var f = c.toJSON();
        f.variableType = "slide";
        f = new Entry.Variable(f);
        d.splice(d.indexOf(c), 0, f);
        0 > f.getValue() && f.setValue(0);
        100 < f.getValue() && f.setValue(100);
        g.removeAttribute("disabled");
        k.removeAttribute("disabled");
      } else {
        "slide" == e && (f = c.toJSON(), f.variableType = "variable", f = new Entry.Variable(f), d.splice(d.indexOf(c), 0, f), g.setAttribute("disabled", "disabled"), k.setAttribute("disabled", "disabled"));
      }
      b.createVariableView(f);
      b.removeVariable(c);
      b.updateSelectedVariable(f);
      f.generateView();
    });
    e = Entry.createElement("div");
    c.minMaxWrapper = e;
    e.addClass("entryVariableSettingMinMaxWrapperWorkspace");
    c.appendChild(e);
    f = Entry.createElement("span");
    f.innerHTML = Lang.Workspace.min_value;
    e.appendChild(f);
    var g = Entry.createElement("input");
    g.addClass("entryVariableSettingMinValueInputWorkspace");
    f = b.selectedVariable;
    g.value = f && "slide" == f.type ? f.minValue_ : 0;
    g.onkeypress = function(b) {
      13 === b.keyCode && this.blur();
    };
    g.onblur = function(c) {
      Entry.Utils.isNumber(this.value) && (c = b.selectedVariable, c.setMinValue(this.value), b.updateVariableSettingView(c));
    };
    c.minValueInput = g;
    e.appendChild(g);
    var h = Entry.createElement("span");
    h.addClass("entryVariableSettingMaxValueSpanWorkspace");
    h.innerHTML = Lang.Workspace.max_value;
    e.appendChild(h);
    var k = Entry.createElement("input");
    k.addClass("entryVariableSettingMaxValueInputWorkspace");
    k.value = f && "slide" == f.type ? f.maxValue_ : 100;
    k.onkeypress = function(b) {
      13 === b.keyCode && this.blur();
    };
    k.onblur = function(c) {
      Entry.Utils.isNumber(this.value) && (c = b.selectedVariable, c.setMaxValue(this.value), b.updateVariableSettingView(c));
    };
    c.maxValueInput = k;
    e.appendChild(k);
  };
  c.updateVariableSettingView = function(b) {
    var c = this.variableSettingView, e = c.visibleCheck, f = c.initValueInput, g = c.slideCheck, h = c.minValueInput, k = c.maxValueInput, l = c.minMaxWrapper;
    e.removeClass("entryVariableSettingChecked");
    b.isVisible() && e.addClass("entryVariableSettingChecked");
    g.removeClass("entryVariableSettingChecked");
    "slide" == b.getType() ? (g.addClass("entryVariableSettingChecked"), h.removeAttribute("disabled"), k.removeAttribute("disabled"), h.value = b.getMinValue(), k.value = b.getMaxValue(), l.removeClass("entryVariableMinMaxDisabledWorkspace")) : (l.addClass("entryVariableMinMaxDisabledWorkspace"), h.setAttribute("disabled", "disabled"), k.setAttribute("disabled", "disabled"));
    f.value = b.getValue();
    b.listElement.appendChild(c);
    c.removeClass("entryRemove");
  };
  c.generateListSettingView = function() {
    var b = this, c = Entry.createElement("div");
    c.bindOnClick(function(b) {
      b.stopPropagation();
    });
    this.listSettingView = c;
    c.addClass("entryListSettingWorkspace");
    this.listView_.appendChild(c);
    c.addClass("entryRemove");
    var e = Entry.createElement("div");
    e.addClass("entryListSettingVisibleWrapperWorkspace");
    e.bindOnClick(function(c) {
      c = b.selectedList;
      var d = b.listSettingView.visibleCheck;
      c.setVisible(!c.isVisible());
      c.isVisible() ? d.addClass("entryListSettingCheckedWorkspace") : d.removeClass("entryListSettingCheckedWorkspace");
    });
    c.appendChild(e);
    var f = Entry.createElement("span");
    f.innerHTML = Lang.Workspace.show_list_workspace;
    e.appendChild(f);
    f = Entry.createElement("span");
    f.addClass("entryListSettingCheckWorkspace");
    c.visibleCheck = f;
    e.appendChild(f);
    f = Entry.createElement("div");
    f.addClass("entryListSettingLengthWrapperWorkspace");
    e = Entry.createElement("span");
    e.addClass("entryListSettingLengthSpanWorkspace");
    e.innerHTML = Lang.Workspace.number_of_list;
    f.appendChild(e);
    c.appendChild(f);
    e = Entry.createElement("div");
    e.addClass("entryListSettingLengthControllerWorkspace");
    f.appendChild(e);
    f = Entry.createElement("span");
    f.addClass("entryListSettingMinusWorkspace");
    f.bindOnClick(function(c) {
      b.selectedList.array_.pop();
      b.updateListSettingView(b.selectedList);
    });
    e.appendChild(f);
    f = Entry.createElement("input");
    f.addClass("entryListSettingLengthInputWorkspace");
    f.onblur = function() {
      b.setListLength(this.value);
    };
    f.onkeypress = function(b) {
      13 == b.keyCode && this.blur();
    };
    c.lengthInput = f;
    e.appendChild(f);
    f = Entry.createElement("span");
    f.addClass("entryListSettingPlusWorkspace");
    f.bindOnClick(function(c) {
      b.selectedList.array_.push({data:0});
      b.updateListSettingView(b.selectedList);
    });
    e.appendChild(f);
    e = Entry.createElement("div");
    c.seperator = e;
    c.appendChild(e);
    e.addClass("entryListSettingSeperatorWorkspace");
    e = Entry.createElement("div");
    e.addClass("entryListSettingListValuesWorkspace");
    c.listValues = e;
    c.appendChild(e);
  };
  c.updateListSettingView = function(b) {
    var c = this;
    b = b || this.selectedList;
    var e = this.listSettingView, f = e.listValues, g = e.visibleCheck, h = e.lengthInput, k = e.seperator;
    g.removeClass("entryListSettingCheckedWorkspace");
    b.isVisible() && g.addClass("entryListSettingCheckedWorkspace");
    h.value = b.array_.length;
    for (b.listElement.appendChild(e); f.firstChild;) {
      f.removeChild(f.firstChild);
    }
    var l = b.array_;
    0 === l.length ? k.addClass("entryRemove") : k.removeClass("entryRemove");
    var m = 1;
    Entry.playground.mainWorkspace.mode === Entry.Workspace.MODE_VIMBOARD && (m = 0);
    for (g = 0; g < l.length; g++) {
      (function(d) {
        var e = Entry.createElement("div");
        e.addClass("entryListSettingValueWrapperWorkspace");
        var g = Entry.createElement("span");
        g.addClass("entryListSettingValueNumberSpanWorkspace");
        g.innerHTML = d + m;
        e.appendChild(g);
        g = Entry.createElement("input");
        g.value = l[d].data;
        g.onblur = function() {
          l[d].data = this.value;
          b.updateView();
        };
        g.onkeypress = function(b) {
          13 == b.keyCode && this.blur();
        };
        g.addClass("entryListSettingEachInputWorkspace");
        e.appendChild(g);
        g = Entry.createElement("span");
        g.bindOnClick(function() {
          l.splice(d, 1);
          c.updateListSettingView();
        });
        g.addClass("entryListSettingValueRemoveWorkspace");
        e.appendChild(g);
        f.appendChild(e);
      })(g);
    }
    b.updateView();
    e.removeClass("entryRemove");
  };
  c.setListLength = function(b) {
    b = Number(b);
    var c = this.selectedList.array_;
    if (Entry.Utils.isNumber(b)) {
      var e = c.length;
      if (e < b) {
        for (b -= e, e = 0; e < b; e++) {
          c.push({data:0});
        }
      } else {
        e > b && (c.length = b);
      }
    }
    this.updateListSettingView();
  };
  c.updateViews = function() {
    var b = this.lists_;
    this.variables_.map(function(b) {
      b.updateView();
    });
    b.map(function(b) {
      b.updateView();
    });
  };
  c.updateSelectedVariable = function(b, c) {
    b ? "variable" == b.type ? (this.selectedVariable = b, this.updateVariableSettingView(b)) : "slide" == b.type ? (this.selectedVariable = b, this.updateVariableSettingView(b)) : "list" == b.type && (this.selectedList = b, this.updateListSettingView(b)) : (this.selectedVariable = null, "variable" == (c || "variable") ? this.variableSettingView.addClass("entryRemove") : this.listSettingView.addClass("entryRemove"));
  };
  c.removeLocalVariables = function(b) {
    var c = [], e = this;
    this.mapVariable(function(b, d) {
      b.object_ && b.object_ == d && c.push(b);
    }, b);
    c.map(function(b) {
      e.removeVariable(b);
    });
  };
  c.updateCloudVariables = function() {
    var b = Entry.projectId;
    if (Entry.cloudSavable && b) {
      var c = Entry.variableContainer, b = c.variables_.filter(function(b) {
        return b.isCloud_;
      }), b = b.map(function(b) {
        return b.toJSON();
      }), c = c.lists_.filter(function(b) {
        return b.isCloud_;
      }), c = c.map(function(b) {
        return b.toJSON();
      });
      (b.length || c.length) && $.ajax({url:"/api/project/variable/" + Entry.projectId, type:"PUT", data:{variables:b, lists:c}}).done(function() {
      });
    }
  };
  c.addRef = function(b, c) {
    if (this.view_ && Entry.playground.mainWorkspace && Entry.getMainWS().getMode() === Entry.Workspace.MODE_BOARD) {
      var d = {object:c.getCode().object, block:c};
      c.funcBlock && (d.funcBlock = c.funcBlock, delete c.funcBlock);
      this[b].push(d);
      if ("_functionRefs" == b) {
        b = c.type.substr(5);
        c = Entry.variableContainer.functions_[b];
        if (c.isAdded) {
          return;
        }
        c.isAdded = !0;
        c = c.content.getBlockList();
        for (var f = 0; f < c.length; f++) {
          var g = c[f], h = g.events;
          -1 < g.type.indexOf("func_") && g.type.substr(5) == b || (h && h.viewAdd && h.viewAdd.forEach(function(b) {
            g.getCode().object = d.object;
            b && (g.funcBlock = d.block, b(g));
          }), h && h.dataAdd && h.dataAdd.forEach(function(b) {
            g.getCode().object = d.object;
            b && (g.funcBlock = d.block, b(g));
          }));
        }
      }
      return d;
    }
  };
  c.removeRef = function(b, c) {
    if (Entry.playground.mainWorkspace && Entry.getMainWS().getMode() === Entry.Workspace.MODE_BOARD) {
      for (var d = this[b], f = 0; f < d.length; f++) {
        if (d[f].block == c) {
          d.splice(f, 1);
          break;
        }
      }
      if ("_functionRefs" == b && (b = c.type.substr(5), (f = Entry.variableContainer.functions_[b]) && !f.isRemoved && (f.isRemoved = !0, f))) {
        for (d = f.content.getBlockList(), f = 0; f < d.length; f++) {
          c = d[f];
          var g = c.events;
          -1 < c.type.indexOf("func_") && c.type.substr(5) == b || (g && g.viewDestroy && g.viewDestroy.forEach(function(b) {
            b && b(c);
          }), g && g.dataDestroy && g.dataDestroy.forEach(function(b) {
            b && b(c);
          }));
        }
      }
    }
  };
  c._getBlockMenu = function() {
    return Entry.playground.mainWorkspace.getBlockMenu();
  };
  c._truncName = function(b, c) {
    b = b.substring(0, this._maxNameLength);
    Entry.toast.warning(Lang.Workspace[c + "_name_auto_edited_title"], Lang.Workspace[c + "_name_auto_edited_content"]);
    return b;
  };
  c._maxNameLength = 10;
  c.clear = function() {
    this.variables_.map(function(b) {
      b.remove();
    });
    this.variables_ = [];
    this.lists_.map(function(b) {
      b.remove();
    });
    this.lists_ = [];
    Entry.engine && Entry.engine.projectTimer && Entry.engine.projectTimer.remove();
    Entry.container && Entry.container.inputValue && Entry.container.inputValue.remove && Entry.container.inputValue.remove();
    this.messages_ = [];
    for (var b in this.functions_) {
      this.functions_[b].destroy(), delete this.functions_[b];
    }
    Entry.playground.reloadPlayground();
    this.updateList();
  };
  c._isPythonMode = function() {
    var b = Entry.getMainWS();
    return b && b.isVimMode();
  };
  c.getDom = function(b) {
    if (1 <= b.length) {
      switch(b.shift()) {
        case "filter":
          return this.filterElements[b.shift()];
        case "variableAddButton":
          return this.variableAddButton_;
        case "variableAddConfirmButton":
          return this.variableAddConfirmButton;
        case "variableAddInput":
          return this.variableAddPanel.view.name;
      }
    }
  };
  c.clickVariableAddButton = function(b, c) {
    var d = this.variableAddPanel, f = d.view.name.value.trim();
    d.isOpen && !b ? f && 0 !== f.length ? (b = this._makeVariableData(), b = new Entry.Variable(b), Entry.do("variableContainerAddVariable", b)) : (d.view.addClass("entryRemove"), d.isOpen = !1) : (d.view.removeClass("entryRemove"), document.activeElement === d.view.name || c || d.view.name.focus(), d.isOpen = !0);
  };
  c._makeVariableData = function() {
    var b = this.variableAddPanel, c = b.view.name.value.trim();
    c && 0 !== c.length || (c = Lang.Workspace.variable);
    c.length > this._maxNameLength && (c = this._truncName(c, "variable"));
    c = this.checkAllVariableName(c, "variables_") ? Entry.getOrderedName(c, this.variables_, "name_") : c;
    b = b.info;
    return {name:c, isCloud:b.isCloud, object:b.object, variableType:"variable"};
  };
  c.applyOption = function() {
    function b(b, c) {
      c ? (b.removeClass("disable"), b.disabled = !1) : (b.addClass("disable"), b.disabled = !0);
    }
    b(this._filterTabs.variable, Entry.variableEnable);
    b(this._filterTabs.message, Entry.messageEnable);
    b(this._filterTabs.list, Entry.listEnable);
    b(this._filterTabs.func, Entry.functionEnable);
  };
})(Entry.VariableContainer.prototype);
Entry.block.run = {skeleton:"basic", color:"#3BBD70", contents:["this is", "basic block"], func:function() {
}};
Entry.block.mutant = {skeleton:"basic", event:"start", color:"#3BBD70", template:"test mutant block", params:[], func:function() {
}, changeEvent:new Entry.Event};
Entry.block.jr_start = {skeleton:"pebble_event", event:"start", color:"#3BBD70", template:"%1", params:[{type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_play_image.png", highlightColor:"#3BBD70", position:{x:0, y:0}, size:22}], func:function() {
  var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
  for (b in c) {
    this._unit = c[b];
  }
  Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
}};
Entry.block.jr_repeat = {skeleton:"pebble_loop", color:"#127CDB", template:"%1 \ubc18\ubcf5", params:[{type:"Text", text:Lang.Menus.repeat_0}, {type:"Dropdown", options:[[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], value:3, fontSize:14, roundValue:3}, {type:"Text", text:Lang.Menus.repeat_1}], statements:[], func:function() {
  if (void 0 === this.repeatCount) {
    return this.repeatCount = this.block.params[0], Entry.STATIC.CONTINUE;
  }
  if (0 < this.repeatCount) {
    this.repeatCount--;
    var c = this.block.statements[0];
    if (0 === c.getBlocks().length) {
      return;
    }
    this.executor.stepInto(c);
    return Entry.STATIC.CONTINUE;
  }
  delete this.repeatCount;
}};
Entry.block.jr_item = {skeleton:"pebble_basic", color:"#F46C6C", template:"\uaf43 \ubaa8\uc73c\uae30 %1", params:[{type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_item_image.png", highlightColor:"#FFF", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.GET_ITEM, function() {
      Ntry.dispatchEvent("getItem");
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.cparty_jr_item = {skeleton:"pebble_basic", color:"#8ABC1D", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.pick_up_pencil}, {type:"Indicator", img:"/img/assets/ntry/bitmap/cpartyjr/pen.png", highlightColor:"#FFF", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.GET_ITEM, function() {
      Ntry.dispatchEvent("getItem");
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_north = {skeleton:"pebble_basic", color:"#A751E3", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.go_up}, {type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_up_image.png", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = Ntry.STATIC, b = this, d = function() {
      window.setTimeout(function() {
        Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
          b.isAction = !1;
        });
      }, 3);
    };
    switch(Ntry.unitComp.direction) {
      case Ntry.STATIC.EAST:
        var e = c.TURN_LEFT;
        break;
      case Ntry.STATIC.SOUTH:
        e = c.HALF_ROTATION;
        break;
      case Ntry.STATIC.WEST:
        e = c.TURN_RIGHT;
        break;
      default:
        d();
    }
    e && Ntry.dispatchEvent("unitAction", e, d);
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_east = {skeleton:"pebble_basic", color:"#A751E3", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.go_right}, {type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_right_image.png", position:{x:83, y:0}, size:22}], func:function() {
  var c = Ntry.STATIC;
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var b = this, d = function() {
      window.setTimeout(function() {
        Ntry.dispatchEvent("unitAction", c.WALK, function() {
          b.isAction = !1;
        });
      }, 3);
    };
    switch(Ntry.unitComp.direction) {
      case c.SOUTH:
        var e = c.TURN_LEFT;
        break;
      case c.WEST:
        e = c.HALF_ROTATION;
        break;
      case c.NORTH:
        e = c.TURN_RIGHT;
        break;
      default:
        d();
    }
    e && Ntry.dispatchEvent("unitAction", e, d);
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_south = {skeleton:"pebble_basic", color:"#A751E3", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.go_down}, {type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_down_image.png", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = Ntry.STATIC, b = this, d = function() {
      window.setTimeout(function() {
        Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
          b.isAction = !1;
        });
      }, 3);
    };
    switch(Ntry.unitComp.direction) {
      case c.EAST:
        var e = c.TURN_RIGHT;
        break;
      case c.NORTH:
        e = c.HALF_ROTATION;
        break;
      case c.WEST:
        e = c.TURN_LEFT;
        break;
      default:
        d();
    }
    e && Ntry.dispatchEvent("unitAction", e, d);
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_west = {skeleton:"pebble_basic", color:"#A751E3", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.go_left}, {type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_left_image.png", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = Ntry.STATIC, b = this, d = function() {
      window.setTimeout(function() {
        Ntry.dispatchEvent("unitAction", c.WALK, function() {
          b.isAction = !1;
        });
      }, 3);
    };
    switch(Ntry.unitComp.direction) {
      case c.SOUTH:
        var e = c.TURN_RIGHT;
        break;
      case c.EAST:
        e = c.HALF_ROTATION;
        break;
      case c.NORTH:
        e = c.TURN_LEFT;
        break;
      default:
        d();
    }
    e && Ntry.dispatchEvent("unitAction", e, d);
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_start_basic = {skeleton:"basic_event", event:"start", color:"#3BBD70", template:"%1 %2", params:[{type:"Indicator", boxMultiplier:2, img:"/img/assets/block_icon/start_icon_play.png", highlightColor:"#3BBD70", size:17, position:{x:0, y:-2}}, Lang.Menus.maze_when_run], func:function() {
  var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
  for (b in c) {
    this._unit = c[b];
  }
  Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
}};
Entry.block.jr_go_straight = {skeleton:"basic", color:"#A751E3", template:"%1 %2", params:[Lang.Menus.go_forward, {type:"Image", img:"/img/assets/ntry/bitmap/jr/cparty_go_straight.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_turn_left = {skeleton:"basic", color:"#A751E3", template:"%1 %2", params:[Lang.Menus.jr_turn_left, {type:"Image", img:"/img/assets/ntry/bitmap/jr/cparty_rotate_l.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, function() {
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_turn_right = {skeleton:"basic", color:"#A751E3", template:"%1 %2", params:[Lang.Menus.jr_turn_right, {type:"Image", img:"/img/assets/ntry/bitmap/jr/cparty_rotate_r.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, function() {
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_go_slow = {skeleton:"basic", color:"#f46c6c", template:"%1 %2", params:[Lang.Menus.go_slow, {type:"Image", img:"/img/assets/ntry/bitmap/jr/cparty_go_slow.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.GO_SLOW, function() {
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_repeat_until_dest = {skeleton:"basic_loop", color:"#498DEB", template:"%1 %2 %3 %4", syntax:["BasicWhile", "true"], params:[Lang.Menus.repeat_until_reach_2, {type:"Image", img:"/img/assets/ntry/bitmap/jr/jr_goal_image.png", size:18}, Lang.Menus.repeat_until_reach_1, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  var c = this.block.statements[0];
  if (0 !== c.getBlocks().length) {
    return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_if_construction = {skeleton:"basic_loop", color:"#498DEB", template:"%1 %2 %3 %4", params:[Lang.Menus.jr_if_1, {type:"Image", img:"/img/assets/ntry/bitmap/jr/jr_construction_image.png", size:18}, Lang.Menus.jr_if_2, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
    for (b in c) {
      var d = c[b];
    }
    c = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.UNIT);
    d = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.GRID);
    d = {x:d.x, y:d.y};
    Ntry.addVectorByDirection(d, c.direction, 1);
    d = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:d.x, y:d.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.OBSTACLE_REPAIR});
    this.isContinue = !0;
    c = this.block.statements[0];
    if (0 !== d.length && 0 !== c.getBlocks().length) {
      return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.jr_if_speed = {skeleton:"basic_loop", color:"#498DEB", template:Lang.Menus.jr_if_1 + " %1 " + Lang.Menus.jr_if_2 + " %2", params:[{type:"Image", img:"/img/assets/ntry/bitmap/jr/jr_speed_image.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
    for (b in c) {
      var d = c[b];
    }
    c = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.UNIT);
    d = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.GRID);
    d = {x:d.x, y:d.y};
    Ntry.addVectorByDirection(d, c.direction, 1);
    d = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:d.x, y:d.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.OBSTACLE_SLOW});
    this.isContinue = !0;
    c = this.block.statements[0];
    if (0 !== d.length && 0 !== c.getBlocks().length) {
      return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_step_start = {skeleton:"basic_event", mode:"maze", event:"start", color:"#3BBD70", template:"%1 \uc2dc\uc791\ud558\uae30\ub97c \ud074\ub9ad\ud588\uc744 \ub54c", syntax:["Program"], params:[{type:"Indicator", boxMultiplier:2, img:"/img/assets/block_icon/start_icon_play.png", highlightColor:"#3BBD70", size:17, position:{x:0, y:-2}}], func:function() {
  var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
  for (b in c) {
    this._unit = c[b];
  }
  Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
}};
Entry.block.maze_step_jump = {skeleton:"basic", mode:"maze", color:"#FF6E4B", template:"\ub6f0\uc5b4\ub118\uae30%1", params:[{type:"Image", img:"/img/assets/week/blocks/jump.png", size:24}], syntax:["Scope", "jump"], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.JUMP, function() {
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_for = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"%1 \ubc88 \ubc18\ubcf5\ud558\uae30%2", syntax:["BasicIteration"], params:[{type:"Dropdown", key:"REPEAT", options:[[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], value:1}, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (void 0 === this.repeatCount) {
    return this.repeatCount = this.block.params[0], Entry.STATIC.CONTINUE;
  }
  if (0 < this.repeatCount) {
    this.repeatCount--;
    var c = this.block.statements[0];
    if (0 === c.getBlocks().length) {
      return;
    }
    this.executor.stepInto(c);
    return Entry.STATIC.CONTINUE;
  }
  delete this.repeatCount;
}};
Entry.block.test = {skeleton:"basic_boolean_field", mode:"maze", color:"#127CDB", template:"%1 this is test block %2", params:[{type:"Angle", value:"90"}, {type:"Dropdown", options:[[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], value:1}], func:function() {
}};
Entry.block.maze_repeat_until_1 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"%1 \ub9cc\ub0a0 \ub54c \uae4c\uc9c0 \ubc18\ubcf5%2", syntax:["BasicWhile", "true"], params:[{type:"Image", img:"/img/assets/ntry/block_inner/repeat_goal_1.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  var c = this.block.statements[0];
  if (0 !== c.getBlocks().length) {
    return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_repeat_until_2 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ubaa8\ub4e0 %1 \ub9cc\ub0a0 \ub54c \uae4c\uc9c0 \ubc18\ubcf5%2", syntax:["BasicWhile", "true"], params:[{type:"Image", img:"/img/assets/ntry/block_inner/repeat_goal_1.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  var c = this.block.statements[0];
  if (0 !== c.getBlocks().length) {
    return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_if_1 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ub9cc\uc57d \uc55e\uc5d0 %1 \uc788\ub2e4\uba74%2", syntax:["BasicIf", 'front == "wall"'], params:[{type:"Image", img:"/img/assets/ntry/block_inner/if_target_1.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/if.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
    for (d in c) {
      var b = c[d];
    }
    c = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.UNIT);
    b = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.GRID);
    b = {x:b.x, y:b.y};
    Ntry.addVectorByDirection(b, c.direction, 1);
    var d = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:b.x, y:b.y});
    c = this.block.statements[0];
    if (0 === d.length) {
      return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
    }
    b = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:b.x, y:b.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.WALL});
    this.isContinue = !0;
    if (0 !== b.length && 0 !== c.getBlocks().length) {
      return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_step_if_2 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ub9cc\uc57d \uc55e\uc5d0 %1 \uc788\ub2e4\uba74%2", syntax:["BasicIf", 'front == "bee"'], params:[{type:"Image", img:"/img/assets/ntry/bitmap/maze2/obstacle_01.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/if.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
    for (b in c) {
      var d = c[b];
    }
    c = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.UNIT);
    d = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.GRID);
    d = {x:d.x, y:d.y};
    Ntry.addVectorByDirection(d, c.direction, 1);
    d = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:d.x, y:d.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.OBSTACLE_BEE});
    this.isContinue = !0;
    c = this.block.statements[0];
    if (0 !== d.length && 0 !== c.getBlocks().length) {
      return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_call_function = {skeleton:"basic", mode:"maze", color:"#B57242", template:"\uc57d\uc18d \ubd88\ub7ec\uc624\uae30%1", syntax:["Scope", "promise"], params:[{type:"Image", img:"/img/assets/week/blocks/function.png", size:24}], func:function() {
  if (!this.funcExecutor) {
    var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE), b;
    for (b in c) {
      this.funcExecutor = new Entry.Executor(c[b].components[Ntry.STATIC.CODE].code.getEventMap("define")[0]);
    }
  }
  this.funcExecutor.execute();
  if (null !== this.funcExecutor.scope.block) {
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_define_function = {skeleton:"basic_define", mode:"maze", color:"#B57242", event:"define", template:"\uc57d\uc18d\ud558\uae30%1", syntax:["BasicFunction"], params:[{type:"Image", img:"/img/assets/week/blocks/function.png", size:24}], statements:[{accept:"basic"}], func:function(c) {
  if (!this.executed && (c = this.block.statements[0], 0 !== c.getBlocks().length)) {
    return this.executor.stepInto(c), this.executed = !0, Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_if_3 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ub9cc\uc57d \uc55e\uc5d0 %1 \uc788\ub2e4\uba74%2", syntax:["BasicIf", 'front == "banana"'], params:[{type:"Image", img:"/img/assets/ntry/block_inner/if_target_3.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/if.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
    for (b in c) {
      var d = c[b];
    }
    c = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.UNIT);
    d = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.GRID);
    d = {x:d.x, y:d.y};
    Ntry.addVectorByDirection(d, c.direction, 1);
    d = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:d.x, y:d.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.OBSTACLE_BANANA});
    this.isContinue = !0;
    c = this.block.statements[0];
    if (0 !== d.length && 0 !== c.getBlocks().length) {
      return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_step_if_4 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ub9cc\uc57d \uc55e\uc5d0 %1 \uc788\ub2e4\uba74%2", syntax:["BasicIf", 'front == "wall"'], params:[{type:"Image", img:"/img/assets/ntry/block_inner/if_target_2.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/if.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
    for (b in c) {
      var d = c[b];
    }
    c = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.UNIT);
    d = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.GRID);
    d = {x:d.x, y:d.y};
    Ntry.addVectorByDirection(d, c.direction, 1);
    d = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:d.x, y:d.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.WALL});
    this.isContinue = !0;
    c = this.block.statements[0];
    if (0 !== d.length && 0 !== c.getBlocks().length) {
      return this.executor.stepInto(c), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_step_move_step = {skeleton:"basic", mode:"maze", color:"#A751E3", template:"\uc55e\uc73c\ub85c \ud55c \uce78 \uc774\ub3d9%1", syntax:["Scope", "move"], params:[{type:"Image", img:"/img/assets/week/blocks/moveStep.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_rotate_left = {skeleton:"basic", mode:"maze", color:"#A751E3", template:"\uc67c\ucabd\uc73c\ub85c \ud68c\uc804%1", syntax:["Scope", "left"], params:[{type:"Image", img:"/img/assets/week/blocks/turnL.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, function() {
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_rotate_right = {skeleton:"basic", mode:"maze", color:"#A751E3", template:"\uc624\ub978\ucabd\uc73c\ub85c \ud68c\uc804%1", syntax:["Scope", "right"], params:[{type:"Image", img:"/img/assets/week/blocks/turnR.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var c = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, function() {
      c.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.test_wrapper = {skeleton:"basic", mode:"maze", color:"#3BBD70", template:"%1 this is test block %2", params:[{type:"Block", accept:"basic_boolean_field", value:[{type:"test", params:[30, 50]}]}, {type:"Dropdown", options:[[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], value:1}], func:function() {
}};
Entry.block.basic_button = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"basic button", color:"#333", align:"center"}], func:function() {
}};
Entry.Thread = function(c, b, d) {
  this._data = new Entry.Collection;
  this._code = b;
  this.changeEvent = new Entry.Event(this);
  this.changeEvent.attach(this, this.handleChange);
  this._event = null;
  this.parent = d ? d : b;
  this.load(c);
};
(function(c) {
  c.load = function(b, c) {
    if (void 0 === b || null === b) {
      b = [];
    }
    if (!(b instanceof Array)) {
      return console.error("thread must be array");
    }
    for (var d = 0; d < b.length; d++) {
      var f = b[d];
      f instanceof Entry.Block || f.isDummy ? (f.setThread(this), this._data.push(f)) : this._data.push(new Entry.Block(f, this));
    }
    (b = this._code.view) && this.createView(b.board, c);
  };
  c.registerEvent = function(b, c) {
    this._event = c;
    this._code.registerEvent(b, c);
  };
  c.unregisterEvent = function(b, c) {
    this._code.unregisterEvent(b, c);
  };
  c.createView = function(b, c) {
    this.view || (this.view = new Entry.ThreadView(this, b));
    this._data.getAll().forEach(function(d) {
      d.createView(b, c);
    });
  };
  c.destroyView = function() {
    this.view = null;
    this._data.map(function(b) {
      b.destroyView();
    });
  };
  c.separate = function(b, c, e) {
    this._data.has(b.id) && (b = this._data.splice(this._data.indexOf(b), c), this._code.createThread(b, e), this.changeEvent.notify());
  };
  c.cut = function(b) {
    b = this._data.indexOf(b);
    b = this._data.splice(b);
    this.changeEvent.notify();
    return b;
  };
  c.insertByBlock = function(b, c) {
    b = b ? this._data.indexOf(b) : -1;
    for (var d = 0; d < c.length; d++) {
      c[d].setThread(this);
    }
    this._data.splice.apply(this._data, [b + 1, 0].concat(c));
    this.changeEvent.notify();
  };
  c.insertToTop = function(b) {
    b.setThread(this);
    this._data.unshift.apply(this._data, [b]);
    this.changeEvent.notify();
  };
  c.clone = function(b, c) {
    b = b || this._code;
    b = new Entry.Thread([], b);
    for (var d = this._data, f = [], g = 0, h = d.length; g < h; g++) {
      f.push(d[g].clone(b));
    }
    b.load(f, c);
    return b;
  };
  c.toJSON = function(b, c, e, f) {
    var d = [];
    void 0 === c ? c = 0 : c instanceof Entry.Block && (c = this.indexOf(c));
    var h = this._data;
    for (c; c < h.length; c++) {
      var k = h[c];
      k instanceof Entry.Block && d.push(k.toJSON(b, e, f));
    }
    return d;
  };
  c.destroy = function(b, c) {
    this.view && this.view.destroy(b);
    for (var d = this._data, f = d.length - 1; 0 <= f; f--) {
      d[f].destroy(b, null, c);
    }
    !d.length && this._code.destroyThread(this, !1);
  };
  c.getBlock = function(b) {
    return this._data[b];
  };
  c.getBlocks = function() {
    return this._data.map(function(b) {
      return b;
    });
  };
  c.countBlock = function() {
    for (var b = 0, c = 0; c < this._data.length; c++) {
      var e = this._data[c];
      if (e.type && (b++, e = e.statements)) {
        for (var f = 0; f < e.length; f++) {
          b += e[f].countBlock();
        }
      }
    }
    return b;
  };
  c.handleChange = function() {
    0 === this._data.length && this.destroy();
  };
  c.getCode = function() {
    return this._code;
  };
  c.setCode = function(b) {
    this._code = b;
  };
  c.spliceBlock = function(b) {
    this._data.remove(b);
    this.changeEvent.notify();
  };
  c.getFirstBlock = function() {
    return this._data[0];
  };
  c.getPrevBlock = function(b) {
    b = this._data.indexOf(b);
    return this._data.at(b - 1);
  };
  c.getNextBlock = function(b) {
    b = this._data.indexOf(b);
    return this._data.at(b + 1);
  };
  c.getLastBlock = function() {
    return this._data.at(this._data.length - 1);
  };
  c.getRootBlock = function() {
    return this._data.at(0);
  };
  c.hasBlockType = function(b) {
    function c(d) {
      if (b == d.type) {
        return !0;
      }
      for (var e = d.params, f = 0; f < e.length; f++) {
        var k = e[f];
        if (k && k.constructor == Entry.Block && c(k)) {
          return !0;
        }
      }
      if (d = d.statements) {
        for (e = 0; e < d.length; e++) {
          if (d[e].hasBlockType(b)) {
            return !0;
          }
        }
      }
      return !1;
    }
    for (var e = 0; e < this._data.length; e++) {
      if (c(this._data[e])) {
        return !0;
      }
    }
    return !1;
  };
  c.getCount = function(b) {
    var c = this._data.length;
    b && (c -= this._data.indexOf(b));
    return c;
  };
  c.indexOf = function(b) {
    return this._data.indexOf(b);
  };
  c.pointer = function(b, c) {
    b = b || [];
    c && b.unshift(this.indexOf(c));
    c = this.parent;
    c instanceof Entry.Block && b.unshift(c.indexOfStatements(this));
    return this._code === c ? (b.unshift(this._code.indexOf(this)), c = this._data[0], b.unshift(c.y), b.unshift(c.x), b) : c.pointer(b);
  };
  c.getBlockList = function(b, c) {
    for (var d = [], f = 0; f < this._data.length; f++) {
      var g = this._data[f];
      g.constructor === Entry.Block && (d = d.concat(g.getBlockList(b, c)));
    }
    return d;
  };
  c.stringify = function(b) {
    return JSON.stringify(this.toJSON(void 0, void 0, b));
  };
  c.isInOrigin = function() {
    var b = this.getFirstBlock();
    return b && b.isInOrigin();
  };
  c.getDom = function(b) {
    if (0 < b.length) {
      if ("magnet" === b.shift()) {
        return this.view.getMagnet("next");
      }
    } else {
      return this.view.svgGroup;
    }
  };
  c.isParamBlockType = function() {
    return !1;
  };
  c.isGlobal = function() {
    return this._code === this.parent;
  };
})(Entry.Thread.prototype);
Entry.skeleton = function() {
};
Entry.skeleton.basic = {path:function(c) {
  var b = c.contentWidth;
  c = c.contentHeight;
  c = Math.max(30, c + 2);
  var b = Math.max(0, b + 9 - c / 2), d = c / 2;
  return "m -8,0 l 8,8 8,-8 h " + b + " a " + d + "," + d + " 0 0,1 0," + c + " h -" + b + " l -8,8 -8,-8 v -" + c + " z";
}, box:function(c) {
  return {offsetX:-8, offsetY:0, width:(c ? c.contentWidth : 150) + 30, height:Math.max(30, (c ? c.contentHeight : 28) + 2), marginBottom:0};
}, magnets:function(c) {
  return {previous:{x:0, y:0}, next:{x:0, y:(c ? Math.max(c.height, 30) : 30) + 1 + c.offsetY}};
}, contentPos:function(c) {
  return {x:14, y:Math.max(c.contentHeight, 28) / 2 + 1};
}};
Entry.skeleton.basic_create = {path:function(c) {
  var b = c.contentWidth;
  c = c.contentHeight;
  c = Math.max(30, c + 2);
  b = Math.max(0, b + 9 - c / 2);
  return "m -8,0 l 16,0 h %w a %h,%h 0 0,1 0,%wh h -%w l -8,8 -8,-8 v -%wh z".replace(/%wh/gi, c).replace(/%w/gi, b).replace(/%h/gi, c / 2);
}, box:function(c) {
  return {offsetX:-8, offsetY:0, width:(c ? c.contentWidth : 150) + 30, height:Math.max(30, (c ? c.contentHeight : 28) + 2), marginBottom:0};
}, magnets:function(c) {
  return {next:{x:0, y:(c ? Math.max(c.height, 30) : 30) + 1 + c.offsetY}};
}, contentPos:function(c) {
  return {x:14, y:Math.max(c.contentHeight, 28) / 2 + 1};
}};
Entry.skeleton.basic_event = {path:function(c) {
  c = c.contentWidth;
  c = Math.max(0, c);
  return "m -8,0 m 0,-5 a 19.5,19.5 0, 0,1 16,0 c 10,5 15,5 20,5 h " + (c - 30) + " a 15,15 0 0,1 0,30 H 8 l -8,8 -8,-8 l 0,0.5 a 19.5,19.5 0, 0,1 0,-35 z";
}, box:function(c) {
  return {offsetX:-19, offsetY:-7, width:c.contentWidth + 30, height:30, marginBottom:0};
}, magnets:function(c) {
  return {next:{x:0, y:(c ? Math.max(c.height + c.offsetY + 7, 30) : 30) + 1}};
}, contentPos:function(c) {
  return {x:1, y:15};
}};
Entry.skeleton.basic_loop = {path:function(c) {
  var b = c.contentWidth, d = c.contentHeight, d = Math.max(30, d + 2), b = Math.max(0, b + 9 - d / 2);
  c = c._statements[0] ? c._statements[0].height : 20;
  c = Math.max(c, 20) + 1;
  var e = d / 2;
  return "m -8,0 l 8,8 8,-8 h " + b + " a " + e + "," + e + " 0 0,1 0," + d + " H 24 l -8,8 -8,-8 h -0.4 v " + c + " h 0.4 l 8,8 8,-8 h " + (b - 8) + " a 8,8 0 0,1 0,16 H 8 l -8,8 -8,-8 z";
}, magnets:function(c) {
  var b = Math.max(c.contentHeight + 2, 30), d = c._statements[0] ? c._statements[0].height : 20, d = Math.max(d, 20);
  return {previous:{x:0, y:0}, next:{x:0, y:d + b + 18 + c.offsetY}};
}, box:function(c) {
  var b = c.contentWidth, d = Math.max(c.contentHeight + 2, 30);
  c = c._statements[0] ? c._statements[0].height : 20;
  c = Math.max(c, 20);
  return {offsetX:-8, offsetY:0, width:b + 30, height:d + c + 17, marginBottom:0};
}, statementPos:function(c) {
  return [{x:16, y:Math.max(30, c.contentHeight + 2) + 1}];
}, contentPos:function(c) {
  return {x:14, y:Math.max(c.contentHeight, 28) / 2 + 1};
}};
Entry.skeleton.basic_define = {path:function(c) {
  var b = c.contentWidth, d = c.contentHeight, d = Math.max(30, d + 2), b = Math.max(0, b + 9 - d / 2);
  c = c._statements[0] ? c._statements[0].height : 30;
  c = Math.max(c, 20);
  return "m -8,0 l 16,0 h %w a %h,%h 0 0,1 0,%wh H 24 l -8,8 -8,-8 h -0.4 v %sh h 0.4 l 8,8 8,-8 h %bw a 8,8 0 0,1 0,16 H -8 z".replace(/%wh/gi, d).replace(/%w/gi, b).replace(/%h/gi, d / 2).replace(/%bw/gi, b - 8).replace(/%sh/gi, c + 1);
}, magnets:function() {
  return {};
}, box:function(c) {
  return {offsetX:0, offsetY:0, width:c.contentWidth, height:Math.max(c.contentHeight, 25) + 46, marginBottom:0};
}, statementPos:function(c) {
  return [{x:16, y:Math.max(30, c.contentHeight + 2)}];
}, contentPos:function() {
  return {x:14, y:15};
}};
Entry.skeleton.pebble_event = {path:function(c) {
  return "m 0,0 a 25,25 0 0,1 9,48.3 a 9,9 0 0,1 -18,0 a 25,25 0 0,1 9,-48.3 z";
}, box:function(c) {
  return {offsetX:-25, offsetY:0, width:50, height:48.3, marginBottom:0};
}, magnets:function(c) {
  return {next:{x:0, y:(c ? Math.max(c.height, 49.3) : 49.3) + c.offsetY}};
}, contentPos:function() {
  return {x:0, y:25};
}};
Entry.skeleton.pebble_loop = {fontSize:16, dropdownHeight:23, path:function(c) {
  c = Math.max(c._statements[0] ? c._statements[0].height : 50, 50);
  return "M 0,9 a 9,9 0 0,0 9,-9 h %cw q 25,0 25,25 v %ch q 0,25 -25,25 h -%cw a 9,9 0 0,1 -18,0 h -%cw q -25,0 -25,-25 v -%ch q 0,-25 25,-25 h %cw a 9,9 0 0,0 9,9 M 0,49 a 9,9 0 0,1 -9,-9 h -28 a 25,25 0 0,0 -25,25 v %cih a 25,25 0 0,0 25,25 h 28 a 9,9 0 0,0 18,0 h 28 a 25,25 0 0,0 25,-25 v -%cih a 25,25 0 0,0 -25,-25 h -28 a 9,9 0 0,1 -9,9 z".replace(/%cw/gi, 41).replace(/%ch/gi, c + 4).replace(/%cih/gi, c - 50);
}, magnets:function(c) {
  var b = Math.max(c.contentHeight + 2, 41), d = c._statements[0] ? c._statements[0].height : 20, d = Math.max(d, 51);
  return {previous:{x:0, y:0}, next:{x:0, y:d + b + 13 + c.offsetY}};
}, box:function(c) {
  var b = c.contentWidth, d = Math.max(c.contentHeight + 2, 41);
  c = c._statements[0] ? c._statements[0].height : 20;
  c = Math.max(c, 51);
  return {offsetX:-(b / 2 + 13), offsetY:0, width:b + 30, height:d + c + 13, marginBottom:0};
}, statementPos:function(c) {
  return [{x:0, y:Math.max(39, c.contentHeight + 2) + 1.5}];
}, contentPos:function() {
  return {x:-46, y:25};
}};
Entry.skeleton.pebble_basic = {fontSize:15, morph:["prev", "next"], path:function(c) {
  return "m 0,9 a 9,9 0 0,0 9,-9 h 28 q 25,0 25,25q 0,25 -25,25h -28 a 9,9 0 0,1 -18,0 h -28 q -25,0 -25,-25q 0,-25 25,-25h 28 a 9,9 0 0,0 9,9 z";
}, magnets:function(c) {
  return {previous:{x:0, y:0}, next:{x:0, y:(c ? Math.max(c.height, 51) : 51) + c.offsetY}};
}, box:function() {
  return {offsetX:-62, offsetY:0, width:124, height:50, marginBottom:0};
}, contentPos:function() {
  return {x:-46, y:25};
}};
Entry.skeleton.basic_string_field = {path:function(c) {
  var b = c.contentWidth;
  c = c.contentHeight;
  c = Math.max(18, c + 2);
  var b = Math.max(0, b - c + 12), d = c / 2;
  return "m " + d + ",0 h " + b + " a " + d + "," + d + " 0 1,1 0," + c + " H " + d + " A " + d + "," + d + " 0 1,1 " + d + ",0 z";
}, color:"#000", outerLine:"#768dce", box:function(c) {
  return {offsetX:0, offsetY:0, width:(c ? c.contentWidth : 5) + 12, height:Math.max((c ? c.contentHeight : 18) + 2, 18), marginBottom:0};
}, magnets:function() {
  return {string:{}};
}, contentPos:function(c) {
  return {x:6, y:Math.max(c.contentHeight, 16) / 2 + 1};
}};
Entry.skeleton.basic_boolean_field = {path:function(c) {
  var b = c.contentWidth;
  c = c.contentHeight;
  c = Math.max(18, c + 2);
  b = Math.max(0, b - c + 19);
  c /= 2;
  return "m " + c + ",0 h " + b + " l " + c + "," + c + " -" + c + "," + c + " H " + c + " l -" + c + ",-" + c + " " + c + ",-" + c + " z";
}, color:"#000", outerLine:"#768dce", box:function(c) {
  return {offsetX:0, offsetY:0, width:(c ? c.contentWidth : 5) + 19, height:Math.max((c ? c.contentHeight : 18) + 2, 18), marginBottom:0};
}, magnets:function() {
  return {boolean:{}};
}, contentPos:function(c) {
  return {x:10, y:Math.max(c.contentHeight, 16) / 2 + 1};
}};
Entry.skeleton.basic_param = {path:function(c) {
  var b = c.contentWidth;
  (c = c._contents[c._contents.length - 1]) && (b -= c.box.width + Entry.BlockView.PARAM_SPACE - 2);
  b = Math.max(0, b);
  return "m 4,0 h 10 h %w l 2,2 0,3 3,0 1,1 0,12 -1,1 -3,0 0,3 -2,2h -%w h -10 l -2,-2 0,-3 3,0 1,-1 0,-12 -1,-1 -3,0 0,-3 2,-2".replace(/%w/gi, b);
}, outerLine:"#768dce", box:function(c) {
  return {offsetX:0, offsetY:0, width:(c ? c.contentWidth : 5) + 11, height:24, marginBottom:0};
}, magnets:function() {
  return {param:{}};
}, contentPos:function(c) {
  return {x:11, y:12};
}};
Entry.skeleton.basic_button = {path:function() {
  return "m -64,0 h 128 a 6,6 0, 0,1 6,6 v 18 a 6,6 0, 0,1 -6,6 h -128 a 6,6 0, 0,1 -6,-6 v -18 a 6,6 0, 0,1 6,-6 z";
}, box:function() {
  return {offsetX:-80, offsetY:0, width:140, height:30};
}, contentPos:function() {
  return {x:0, y:15};
}, movable:!1, readOnly:!0, nextShadow:!0, classes:["basicButtonView"]};
Entry.skeleton.basic_without_next = {box:Entry.skeleton.basic.box, contentPos:Entry.skeleton.basic.contentPos, path:function(c) {
  var b = c.contentWidth;
  c = c.contentHeight;
  c = Math.max(30, c + 2);
  var b = Math.max(0, b + 9 - c / 2), d = c / 2;
  return "m -8,0 l 8,8 8,-8 h " + b + " a " + d + "," + d + " 0 0,1 0, " + c + " H -8 z";
}, magnets:function(c) {
  return {previous:{x:0, y:0}};
}};
Entry.skeleton.basic_double_loop = {path:function(c) {
  var b = c.contentWidth, d = c.contentHeight % 1000000, e = Math.floor(c.contentHeight / 1000000), d = Math.max(30, d + 2), e = Math.max(30, e + 2), b = Math.max(0, b + 5 - d / 2), f = c._statements;
  c = f[0] ? f[0].height : 20;
  var f = f[1] ? f[1].height : 20, g = b - 8, h = d / 2, k = e / 2;
  c = Math.max(c, 20) + 1;
  f = Math.max(f, 20) + 1;
  return "m -8,0 l 8,8 8,-8 h " + b + " a " + h + "," + h + " 0 0,1 0," + d + " H 24 l -8,8 -8,-8 h -0.4 v " + c + " h 0.4 l 8,8 8,-8 h " + g + " a " + k + "," + k + " 0 0,1 0," + e + " H 24 l -8,8 -8,-8 h -0.4 v " + f + " h 0.4 l 8,8 8,-8 h " + g + " a 8,8 0 0,1 0,16 H 8 l -8,8 -8,-8 z";
}, magnets:function(c) {
  var b = Math.max(c.contentHeight % 1000000 + 2, 30), d = Math.max(Math.floor(c.contentHeight / 1000000) + 2, 30), e = c._statements[0] ? c._statements[0].height : 20, f = c._statements[1] ? c._statements[1].height : 20, e = Math.max(e, 20), f = Math.max(f, 20);
  return {previous:{x:0, y:0}, next:{x:0, y:e + f + b + d + 19 + c.offsetY}};
}, box:function(c) {
  var b = c.contentWidth, d = Math.max(Math.floor(c.contentHeight / 1000000) + 2, 30), e = Math.max(c.contentHeight % 1000000 + 2, 30), f = c._statements[0] ? c._statements[0].height % 1000000 : 20;
  c = c._statements[1] ? c._statements[1].height : 20;
  f = Math.max(f, 20);
  c = Math.max(c, 20);
  return {offsetX:-8, offsetY:0, width:b + 30, height:d + e + f + c + 17, marginBottom:0};
}, statementPos:function(c) {
  var b = Math.max(30, c.contentHeight % 1000000 + 2) + 1;
  return [{x:16, y:b}, {x:16, y:b + Math.max(c._statements[0] ? c._statements[0].height % 1000000 : 20, 20) + Math.max(Math.floor(c.contentHeight / 1000000) + 2, 30) + 1}];
}, contentPos:function(c) {
  return {x:14, y:Math.max(c.contentHeight % 1000000, 28) / 2 + 1};
}};
Entry.Block = function(c, b) {
  var d = this;
  Entry.Model(this, !1);
  this._schema = null;
  c._backupParams && (this._backupParams = c._backupParams);
  this.setThread(b);
  this.load(c);
  if (b = c.category) {
    this.category = b, Entry.block[this.type] && (Entry.block[this.type].isFor = ["category_" + b]);
  }
  b = this.getCode();
  void 0 !== c.display && (this.display = c.display);
  b.registerBlock(this);
  (c = this.events.dataAdd) && b.object && c.forEach(function(b) {
    Entry.Utils.isFunction(b) && b(d);
  });
  c = this.events.viewAdd;
  b = b.board;
  c && Entry.getMainWS() && Entry.isTextMode && (!b || b && b.constructor !== Entry.BlockMenu) && c.forEach(function(b) {
    Entry.Utils.isFunction(b) && b.apply(d, [d]);
  });
};
Entry.Block.MAGNET_RANGE = 10;
Entry.Block.MAGNET_OFFSET = 0.4;
Entry.Block.DELETABLE_TRUE = 1;
Entry.Block.DELETABLE_FALSE = 2;
Entry.Block.DELETABLE_FALSE_LIGHTEN = 3;
(function(c) {
  c.schema = {id:null, x:0, y:0, type:null, params:[], statements:[], view:null, thread:null, movable:null, deletable:Entry.Block.DELETABLE_TRUE, emphasized:!1, readOnly:null, copyable:!0, events:{}, extensions:[]};
  c.load = function(b) {
    b.id || (b.id = Entry.Utils.generateId());
    this.set(b);
    this.loadSchema();
  };
  c.changeSchema = function(b, c) {
    b = [];
    if (c) {
      if (c.isRestore) {
        b = this._backupParams || [], delete this._backupParams;
      } else {
        switch(c.type) {
          case "noChange":
            b = this.params;
            break;
          case "cut":
            this.params.splice(c.pos);
            b = this.params;
            break;
          case "insert":
            var d = c.startPos;
            c = c.endPos;
            var f = Entry.block[this.type].params;
            b = Array(f.length);
            for (var g = 0; g < d; g++) {
              b[g] = this.params[g];
            }
            d = c - d + 1;
            for (g = c + 1; g < f.length; g++) {
              b[g] = this.params[g - d];
            }
        }
      }
    }
    b.forEach(function(b) {
      b instanceof Entry.Block && b.destroyView();
    });
    this.set({params:b});
    this.loadSchema();
    this.view && this.view.changeType();
  };
  c.getSchema = function() {
    this._schema || this.loadSchema();
    return this._schema;
  };
  c.loadSchema = function() {
    if (this._schema = Entry.block[this.type]) {
      !this._schemaChangeEvent && this._schema.changeEvent && (this._schemaChangeEvent = this._schema.changeEvent.attach(this, this.changeSchema));
      !this._paramsBackupEvent && this._schema.paramsBackupEvent && (this._paramsBackupEvent = this._schema.paramsBackupEvent.attach(this, this.paramsBackup));
      !this._destroyParamsBackupEvent && this._schema.destroyParamsBackupEvent && (this._destroyParamsBackupEvent = this._schema.destroyParamsBackupEvent.attach(this, this.destroyParamsBackup));
      var b = this._schema.events;
      if (b) {
        for (var c in b) {
          this.events[c] || (this.events[c] = []);
          for (var e = b[c], f = 0; f < e.length; f++) {
            var g = e[f];
            g && 0 > this.events[c].indexOf(g) && this.events[c].push(g);
          }
        }
      }
      this._schema.event && this.thread.registerEvent(this, this._schema.event);
      b = this.params;
      c = this._schema.params;
      for (f = 0; c && f < c.length; f++) {
        e = void 0 === b[f] || null === b[f] ? c[f].value : b[f], g = b[f] || f < b.length, !e || "Output" !== c[f].type && "Block" !== c[f].type || ("object" !== typeof e && (e = {type:"number", params:[e]}), e = new Entry.Block(e, this.thread)), g ? b.splice(f, 1, e) : b.push(e);
      }
      if (b = this._schema.statements) {
        for (f = 0; f < b.length; f++) {
          this.statements.splice(f, 1, new Entry.Thread(this.statements[f], this.getCode(), this));
        }
      }
    }
  };
  c.changeType = function(b) {
    this._schemaChangeEvent && this._schemaChangeEvent.destroy();
    this._backupEvent && this._backupEvent.destroy();
    this._destroyBackupEvent && this._destroyBackupEvent.destroy();
    this.set({type:b});
    this.loadSchema();
    this.view && this.view.changeType(b);
  };
  c.setThread = function(b) {
    this.set({thread:b});
  };
  c.getThread = function() {
    return this.thread;
  };
  c.insertAfter = function(b) {
    this.thread.insertByBlock(this, b);
  };
  c._updatePos = function() {
    this.view && this.set({x:this.view.x, y:this.view.y});
  };
  c.moveTo = function(b, c) {
    this.view && this.view._moveTo(b, c);
    this._updatePos();
    this.getCode().changeEvent.notify();
  };
  c.createView = function(b, c) {
    b = b || this.getCode().view.board;
    this.view || (this.set({view:new Entry.BlockView(this, b, c)}), this._updatePos());
  };
  c.destroyView = function() {
    this.view && this.view.destroy();
  };
  c.clone = function(b) {
    return new Entry.Block(this.toJSON(!0), b);
  };
  c.toJSON = function(b, c, e) {
    var d = this._toJSON();
    delete d.view;
    delete d.thread;
    delete d.events;
    e = e || {};
    b && delete d.id;
    for (var g = [], h = 0; h < d.params.length; h++) {
      var k = d.params[h];
      k instanceof Entry.Block ? k = k.toJSON(b, c, e) : e.captureDynamic && this.view.getParam(h) instanceof Entry.FieldDropdownDynamic && (k = this.view.getParam(h).getTextValue());
      g.push(k);
    }
    d.params = g;
    d.statements = d.statements.map(function(d) {
      return d.toJSON(b, void 0, c, e);
    });
    d.x = this.x;
    d.y = this.y;
    d.movable = this.movable;
    d.deletable = this.deletable;
    d.emphasized = this.emphasized;
    d.readOnly = this.readOnly;
    this._backupParams && (d._backupParams = this._backupParams.map(function(b) {
      return b instanceof Entry.Block ? b.toJSON() : b;
    }));
    c && c instanceof Array && c.forEach(function(b) {
      delete d[b];
    });
    return d;
  };
  c.destroy = function(b, c, e) {
    if (!e || this.isDeletable()) {
      if ("output" === this.getBlockType() && !c) {
        e = this.getPrevOutputBlock();
        var d = this.getOutputBlock();
        this.separate(1);
        d && (d.separate(), d.doInsert(e.view._contents[1]));
      }
      var g = this;
      if (d = this.params) {
        for (e = 0; e < d.length; e++) {
          var h = d[e];
          h instanceof Entry.Block && (h.doNotSplice = !(h.thread instanceof Entry.FieldOutput), h.destroy(b));
        }
      }
      if (d = this.statements) {
        for (e = 0; e < d.length; e++) {
          d[e].destroy(b);
        }
      }
      e = this.getCode();
      e.unregisterBlock(this);
      d = this.getThread();
      this._schema && this._schema.event && d.unregisterEvent(this, this._schema.event);
      if ("basic" === this.getBlockType()) {
        var k = this.getPrevBlock();
        if (h = this.getNextBlock()) {
          c ? h.destroy(b, c) : k ? h.view && h.view.bindPrev(k, !0) : d.view && (c = d.view.getParent(), c.constructor === Entry.FieldStatement ? (h.view && h.view.bindPrev(c), c.insertTopBlock(h)) : c.constructor === Entry.FieldStatement ? h.replace(c._valueBlock) : h.view && h.view._toGlobalCoordinate());
        }
      }
      var l = this.doNotSplice;
      !this.doNotSplice && d.spliceBlock ? d.spliceBlock(this) : delete this.doNotSplice;
      this.view && this.view.destroy(b);
      this._schemaChangeEvent && this._schemaChangeEvent.destroy();
      this._paramsBackupEvent && this._paramsBackupEvent.destroy();
      this._destroyParamsBackupEvent && this._destroyParamsBackupEvent.destroy();
      (b = this.events.dataDestroy) && e.object && b.forEach(function(b) {
        Entry.Utils.isFunction(b) && b.apply(g, [g, l]);
      });
      b = this.events.viewDestroy;
      c = this.getCode().board;
      b && Entry.getMainWS() && Entry.isTextMode && (!c || c && c.constructor !== Entry.BlockMenu) && b.forEach(function(b) {
        Entry.Utils.isFunction(b) && b.apply(g, [g, l]);
      });
    }
  };
  c.getView = function() {
    return this.view;
  };
  c.setMovable = function(b) {
    this.movable != b && this.set({movable:b});
  };
  c.setCopyable = function(b) {
    this.copyable != b && this.set({copyable:b});
  };
  c.isMovable = function() {
    return this.movable;
  };
  c.isCopyable = function() {
    return this.copyable;
  };
  c.setDeletable = function(b) {
    this.deletable != b && this.set({deletable:b});
  };
  c.isDeletable = function() {
    return this.deletable === Entry.Block.DELETABLE_TRUE || !0 === this.deletable;
  };
  c.isReadOnly = function() {
    return this.readOnly;
  };
  c.getCode = function() {
    return this.thread.getCode();
  };
  c.doAdd = function() {
    this.getCode().changeEvent.notify();
  };
  c.doMove = function() {
    this._updatePos();
    this.getCode().changeEvent.notify();
  };
  c.doInsert = function(b) {
    "basic" === this.getBlockType() ? this.insert(b) : this.replace(b);
  };
  c.doDestroy = function(b) {
    this.destroy(b);
    this.getCode().changeEvent.notify();
    return this;
  };
  c.doDestroyBelow = function(b) {
    this.destroy(b, !0);
    this.getCode().changeEvent.notify();
    return this;
  };
  c.copy = function() {
    var b = this.getThread(), c = [];
    if (b instanceof Entry.Thread) {
      for (var e = b.getBlocks().indexOf(this), b = b.toJSON(!0, e), e = 0; e < b.length; e++) {
        c.push(b[e]);
      }
    } else {
      c.push(this.toJSON(!0));
    }
    b = this.view.getAbsoluteCoordinate();
    e = c[0];
    e.x = b.x + 15;
    e.y = b.y + 15;
    e.id = Entry.Utils.generateId();
    return c;
  };
  c.copyToClipboard = function() {
    Entry.clipboard = this.copy();
  };
  c.separate = function(b, c) {
    this.thread.separate(this, b, c);
    this._updatePos();
    this.getCode().changeEvent.notify();
  };
  c.doSeparate = c.separate;
  c.insert = function(b) {
    var c = this.thread.cut(this);
    b instanceof Entry.Thread ? b.insertByBlock(null, c) : b.insertAfter(c);
    this._updatePos();
    this.getCode().changeEvent.notify();
  };
  c.replace = function(b) {
    this.thread.cut(this);
    b.getThread().replace(this);
    this.getCode().changeEvent.notify();
  };
  c.getPrevBlock = function() {
    return this.thread.getPrevBlock(this);
  };
  c.getNextBlock = function() {
    return this.thread.getNextBlock(this) || null;
  };
  c.getLastBlock = function() {
    return this.thread.getLastBlock();
  };
  c.getPrevOutputBlock = function() {
    return this.thread instanceof Entry.FieldOutput ? this.thread._block : null;
  };
  c.getOutputBlock = function() {
    for (var b = this._schema.params, c = 0; b && c < b.length; c++) {
      if ("Output" === b[c].type) {
        return this.params[c];
      }
    }
    return null;
  };
  c.getTerminateOutputBlock = function() {
    for (var b = this;;) {
      var c = b.getOutputBlock();
      if (!c) {
        return b;
      }
      b = c;
    }
  };
  c.getOutputBlockCount = function(b) {
    b = b || 0;
    var c = this.getOutputBlock();
    return c ? c.getOutputBlockCount(b + 1) : b;
  };
  c.getBlockType = function() {
    if (!this.view) {
      return null;
    }
    var b = Entry.skeleton[this._schema.skeleton];
    if (!b.magnets) {
      return null;
    }
    b = b.magnets(this.view);
    return b.next || b.previous ? "basic" : b.boolean || b.string ? "field" : b.output || b.param ? "output" : null;
  };
  c.indexOfStatements = function(b) {
    return this.statements.indexOf(b);
  };
  c.pointer = function(b) {
    return this.thread.pointer(b || [], this);
  };
  c.targetPointer = function() {
    var b = this.thread.pointer([], this);
    4 === b.length && 0 === b[3] ? b.pop() : -1 < b[b.length - 2] && (0 === b[b.length - 1] ? b.pop() : --b[b.length - 1]);
    return b;
  };
  c.getDataByPointer = function(b) {
    b = b.concat();
    var c = this.params[b.shift()];
    return b.length ? c.getDataByPointer ? c.getDataByPointer(b) : null : c;
  };
  c.getBlockList = function(b, c) {
    var d = [];
    if (!this._schema) {
      return [];
    }
    if (b && this._schema.isPrimitive) {
      return d;
    }
    (c || this.type) === this.type && d.push(this);
    for (var f = this.params, g = 0; g < f.length; g++) {
      var h = f[g];
      h && h.constructor == Entry.Block && (d = d.concat(h.getBlockList(b, c)));
    }
    if (f = this.statements) {
      for (g = 0; g < f.length; g++) {
        h = f[g], h.constructor === Entry.Thread && (d = d.concat(h.getBlockList(b, c)));
      }
    }
    return d;
  };
  c.stringify = function(b) {
    return JSON.stringify(this.toJSON(!1, b));
  };
  c.isInOrigin = function() {
    return 0 === this.x && 0 === this.y;
  };
  c.isSameParamWith = function(b) {
    if ("wildcard" === b.type.substr(0, 8) || "wildcard" === this.type.substr(0, 8)) {
      return !0;
    }
    var c = b.type, e = this.type;
    if (!("angle" === c && "text" === e || "text" === c && "angle" === e) && c !== e) {
      return !1;
    }
    for (c = 0; c < this.params.length; c++) {
      if (e = this.params[c], e instanceof Entry.Block) {
        if (!e.isSameParamWith(b.params[c])) {
          return !1;
        }
      } else {
        var e = this.params[c], f = b.params[c], e = "number" === typeof e ? e + "" : e, f = "number" === typeof f ? f + "" : f;
        if (e !== f) {
          return !1;
        }
      }
    }
    return !0;
  };
  c.paramsBackup = function() {
    this.view && this.view.isInBlockMenu || (this._backupParams = this.params.slice());
  };
  c.destroyParamsBackup = function() {
    this._backupParams = null;
  };
  c.getDom = function(b) {
    return 0 < b.length && "magnet" === b.shift() ? this.view.getMagnet(b) : this.view.svgGroup;
  };
  c.getParam = function(b) {
    return this.params[b];
  };
  c.isParamBlockType = function() {
    return "basic_string_field" === this._schema.skeleton || "basic_boolean_field" === this._schema.skeleton;
  };
  c.getFuncId = function() {
    var b = /func_(.*)/.exec(this.type);
    if (b) {
      return b[1];
    }
  };
})(Entry.Block.prototype);
Entry.BlockMenu = function(c, b, d, e, f) {
  Entry.Model(this, !1);
  this.reDraw = Entry.Utils.debounce(this.reDraw, 100);
  this._dAlign = this.align;
  this._setDynamic = Entry.Utils.debounce(this._setDynamic, 150);
  this._dSelectMenu = Entry.Utils.debounce(this.selectMenu, 0);
  this._align = b || "CENTER";
  this.setAlign(this._align);
  this._scroll = void 0 !== e ? e : !1;
  this._bannedClass = [];
  this._categories = [];
  this.suffix = "blockMenu";
  this._isSelectingMenu = !1;
  this._dynamicThreads = [];
  this._setDynamicTimer = null;
  this._renderedCategories = {};
  this.categoryRendered = !1;
  this.readOnly = void 0 === f ? !0 : f;
  c = "string" === typeof c ? $("#" + c) : $(c);
  if ("DIV" !== c.prop("tagName")) {
    return console.error("Dom is not div element");
  }
  this.view = c;
  this.visible = !0;
  this.hwCodeOutdated = !1;
  this._svgId = "blockMenu" + (new Date).getTime();
  this._clearCategory();
  this._categoryData = d;
  this._generateView(d);
  this._splitters = [];
  this.setWidth();
  this.svg = Entry.SVG(this._svgId);
  Entry.Utils.addFilters(this.svg, this.suffix);
  this.pattern = Entry.Utils.addBlockPattern(this.svg, this.suffix).pattern;
  this.svgGroup = this.svg.elem("g");
  this.svgThreadGroup = this.svgGroup.elem("g");
  this.svgThreadGroup.board = this;
  this.svgBlockGroup = this.svgGroup.elem("g");
  this.svgBlockGroup.board = this;
  this.changeEvent = new Entry.Event(this);
  this.categoryDoneEvent = new Entry.Event(this);
  this.observe(this, "_handleDragBlock", ["dragBlock"]);
  this.changeCode(new Entry.Code([]));
  d && this._generateCategoryCodes();
  this._scroll && (this._scroller = new Entry.BlockMenuScroller(this), this._addControl(c));
  Entry.documentMousedown && Entry.documentMousedown.attach(this, this.setSelectedBlock);
  this.code && Entry.keyPressed && Entry.keyPressed.attach(this, this._captureKeyEvent);
  Entry.windowResized && (c = _.debounce(this.updateOffset, 200), Entry.windowResized.attach(this, c));
  Entry.addEventListener("setBlockMenuDynamic", function() {
    this._setDynamicTimer = this._setDynamic.apply(this, arguments);
  }.bind(this));
  Entry.addEventListener("cancelBlockMenuDynamic", this._cancelDynamic.bind(this));
  Entry.addEventListener("fontLoaded", this.reDraw.bind(this));
};
(function(c) {
  c.schema = {code:null, dragBlock:null, closeBlock:null, selectedBlockView:null};
  c._generateView = function(b) {
    var c = this.view, e = this;
    b && this._generateCategoryView(b);
    this.blockMenuContainer = Entry.Dom("div", {"class":"blockMenuContainer", parent:c});
    this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="blockMenu" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:this.blockMenuContainer});
    this.svgDom.mouseenter(function(b) {
      e._scroller && e._scroller.setOpacity(1);
      b = e.workspace.selectedBlockView;
      if (!(!Entry.playground || Entry.playground.resizing || b && b.dragMode === Entry.DRAG_MODE_DRAG)) {
        Entry.playground.focusBlockMenu = !0;
        var c = e.svgGroup.getBBox();
        b = e.hasCategory() ? 64 : 0;
        c = c.width + c.x + b;
        c > Entry.interfaceState.menuWidth && (this.widthBackup = Entry.interfaceState.menuWidth - b, $(this).stop().animate({width:c - b}, 200));
      }
    });
    this.svgDom.mouseleave(function(b) {
      Entry.playground && !Entry.playground.resizing && (e._scroller && e._scroller.setOpacity(0), (b = this.widthBackup) && $(this).stop().animate({width:b}, 200), delete this.widthBackup, delete Entry.playground.focusBlockMenu);
    });
    $(window).scroll(function() {
      e.updateOffset();
    });
  };
  c.changeCode = function(b, c) {
    b instanceof Array && (b = new Entry.Code(b));
    if (!(b instanceof Entry.Code)) {
      return console.error("You must inject code instance");
    }
    this.codeListener && this.code.changeEvent.detach(this.codeListener);
    var d = this;
    this.set({code:b});
    this.codeListener = this.code.changeEvent.attach(this, function() {
      d.changeEvent.notify();
    });
    b.createView(this);
    c ? this.align() : this._dAlign();
  };
  c.bindCodeView = function(b) {
    this.svgBlockGroup.remove();
    this.svgThreadGroup.remove();
    this.svgBlockGroup = b.svgBlockGroup;
    this.svgThreadGroup = b.svgThreadGroup;
    this.svgGroup.appendChild(this.svgThreadGroup);
    this.svgGroup.appendChild(this.svgBlockGroup);
    this._scroller && this.svgGroup.appendChild(this._scroller.svgGroup);
  };
  c.align = function() {
    var b = this.code;
    if (this._isOn() && b) {
      this._clearSplitters();
      var c = 10, e = "LEFT" == this._align ? 10 : this.svgDom.width() / 2, f, b = this._getSortedBlocks(), g = b[0];
      b[1].forEach(function(b) {
        b = b.view;
        b.set({display:!1});
        b.detach();
      });
      var h = !this._renderedCategories[this.lastSelector];
      g.forEach(function(b) {
        var d = b.view;
        d.attach();
        d.set({display:!0});
        h && d.reDraw();
        b = Entry.block[b.type].class;
        f && f !== b && (this._createSplitter(c), c += 15);
        f = b;
        b = e - d.offsetX;
        "CENTER" == this._align && (b -= d.width / 2);
        c -= d.offsetY;
        d._moveTo(b, c, !1);
        c += d.height + 15;
      }.bind(this));
      this.updateSplitters();
      if (this.workspace) {
        switch(this.workspace.getMode()) {
          case Entry.Workspace.MODE_BOARD:
          case Entry.Workspace.MODE_OVERLAYBOARD:
            this.renderBlock(b);
            break;
          case Entry.Workspace.MODE_VIMBOARD:
            this.renderText(b);
            break;
          default:
            this.renderBlock(b);
        }
      }
      "func" !== this.lastSelector && (this._renderedCategories[this.lastSelector] = !0);
      this.changeEvent.notify();
    }
  };
  c.cloneToGlobal = function(b) {
    var c = this.dragBlock;
    if (!this._boardBlockView && null !== c) {
      var e = Entry.GlobalSvg, f = this.workspace, g = f.getMode(), h = Entry.Workspace, k = this._svgWidth, l = f.selectedBoard, m = c.mouseDownCoordinate, q = f = 0;
      m && (f = b.pageX - m.x, q = b.pageY - m.y);
      !l || g !== h.MODE_BOARD && g !== h.MODE_OVERLAYBOARD ? e.setView(c, g) && (e.adjust(f, q), e.addControl(b)) : l.code ? (h = c.block, c = h.getThread(), h && c && (l = this.offset().top - l.offset().top - $(window).scrollTop(), c = c.toJSON(!0), c[0].x = c[0].x - k + (f || 0), c[0].y = c[0].y + l + (q || 0), k = this._boardBlockView = Entry.do("addThreadFromBlockMenu", c).value.getFirstBlock().view, k.onMouseDown.call(k, b), k.dragInstance.set({isNew:!0}), e.setView(k, g))) : (Entry.toast && 
      Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.add_object_alert_msg), this.selectedBlockView && (this.selectedBlockView.removeSelected(), this.set({selectedBlockView:null, dragBlock:null})));
    }
  };
  c.terminateDrag = function() {
    if (this._boardBlockView) {
      var b = this._boardBlockView;
      if (b) {
        this.workspace.getBoard();
        this._boardBlockView = null;
        var c = Entry.GlobalSvg.left, e = Entry.GlobalSvg.width / 2, b = b.getBoard().offset().left;
        return c < b - e;
      }
    }
  };
  c.getCode = function(b) {
    return this.code;
  };
  c.setSelectedBlock = function(b) {
    var c = this.selectedBlockView;
    c && c.removeSelected();
    b instanceof Entry.BlockView ? b.addSelected() : b = null;
    this.set({selectedBlockView:b});
  };
  c.hide = function() {
    this.view.addClass("entryRemove");
  };
  c.show = function() {
    this.view.removeClass("entryRemove");
  };
  c.renderText = function(b) {
    if (this._isOn()) {
      b = b || this._getSortedBlocks();
      var c = Entry.BlockView.RENDER_MODE_TEXT;
      b[0].forEach(function(b) {
        c !== b.view.renderMode && (b = b.getThread(), b.view ? b.view.renderText() : b.createView(this, Entry.BlockView.RENDER_MODE_TEXT));
      }.bind(this));
      return b;
    }
  };
  c.renderBlock = function(b) {
    if (this._isOn()) {
      b = b || this._getSortedBlocks();
      var c = Entry.BlockView.RENDER_MODE_BLOCK;
      b[0].forEach(function(b) {
        c !== b.view.renderMode && (b = b.getThread(), b.view ? b.view.renderBlock() : b.createView(this, Entry.BlockView.RENDER_MODE_BLOCK));
      }.bind(this));
      return b;
    }
  };
  c._createSplitter = function(b) {
    b = this.svgBlockGroup.elem("line", {x1:20, y1:b, x2:this._svgWidth - 20, y2:b, stroke:"#b5b5b5"});
    this._splitters.push(b);
  };
  c.updateSplitters = function(b) {
    b = void 0 === b ? 0 : b;
    var c = this._svgWidth - 20, e;
    this._splitters.forEach(function(d) {
      e = parseFloat(d.getAttribute("y1")) + b;
      d.attr({x2:c, y1:e, y2:e});
    });
  };
  c._clearSplitters = function() {
    for (var b = this._splitters, c = b.length - 1; 0 <= c; c--) {
      b[c].remove(), b.pop();
    }
  };
  c.setWidth = function() {
    this._svgWidth = this.blockMenuContainer.width();
    this.updateSplitters();
  };
  c.setMenu = function(b) {
    this.hasCategory() && (this._categoryData.forEach(function(b) {
      var c = b.category;
      b = b.blocks;
      if ("func" === c) {
        var d = this.code.getThreadsByCategory("func").map(function(b) {
          return b.getFirstBlock().type;
        });
        b = d.length ? d : b;
      }
      for (var d = b.length, g = 0; g < b.length; g++) {
        this.checkBanClass(Entry.block[b[g]]) && d--;
      }
      c = this._categoryElems[c];
      0 === d ? c.addClass("entryRemove") : c.removeClass("entryRemove");
    }.bind(this)), this.selectMenu(0, !0, b));
  };
  c.getCategoryCodes = function(b) {
  };
  c._convertSelector = function(b) {
    if (!Entry.Utils.isNumber(b)) {
      return b;
    }
    b = Number(b);
    for (var c = this._categories, e = this._categoryElems, f = 0; f < c.length; f++) {
      var g = c[f];
      if (!e[g].hasClass("entryRemove") && 0 === b--) {
        return g;
      }
    }
  };
  c.selectMenu = function(b, c, e) {
    if (this._isOn() && this._categoryData) {
      var d = this._selectedCategoryView, g = this._convertSelector(b);
      if (void 0 === b || g) {
        g && (this.lastSelector = g);
        this._isSelectingMenu = !0;
        switch(g) {
          case "variable":
            Entry.playground.checkVariables();
            break;
          case "arduino":
            this._generateHwCode(), this.align();
        }
        b = this._categoryElems[g];
        var h = !1, k = this.workspace.board, l = k.view;
        d && d.removeClass("entrySelectedCategory");
        c = c || !this.hasCategory();
        b != d || c ? !d && this.hasCategory() ? (this.visible || (h = !0, l.addClass("foldOut"), Entry.playground.showTabs()), l.removeClass("folding"), this.visible = !0) : g || (this._selectedCategoryView = null) : (l.addClass("folding"), this._selectedCategoryView = null, b && b.removeClass("entrySelectedCategory"), Entry.playground.hideTabs(), h = !0, this.visible = !1);
        h && Entry.bindAnimationCallbackOnce(l, function() {
          k.scroller.resizeScrollBar.call(k.scroller);
          l.removeClass("foldOut");
          Entry.windowResized.notify();
        });
        this._isSelectingMenu = !1;
        this.visible && (this._selectedCategoryView = b) && b.addClass("entrySelectedCategory");
        !0 !== e && this._dAlign();
      } else {
        this._dAlign();
      }
    }
  };
  c._generateCategoryCodes = function(b) {
    b || (this.categoryRendered = !1, this.view.addClass("init"), b = Object.keys(this._categoryElems));
    if (b.length) {
      var c = b.shift();
      "arduino" !== c ? this._generateCategoryCode(c) : this._generateHwCode(!0);
      b.length ? this._generateCodesTimer = setTimeout(function() {
        this._generateCategoryCodes(b);
      }.bind(this), 0) : (this._generateCodesTimer = null, this.view.removeClass("init"), this.align(), this.categoryRendered = !0, this.categoryDoneEvent.notify());
    }
  };
  c._generateCategoryCode = function(b) {
    if (this._categoryData) {
      var c = this.code, e = [], f = this._categoryData.filter(function(c) {
        return c.category == b;
      })[0];
      if (f) {
        f.blocks.forEach(function(c) {
          var d = Entry.block[c];
          d.category = f.category;
          if (d && d.def) {
            if (d.defs) {
              for (d.defs.forEach(function(c) {
                c.category = b;
              }), c = 0; c < d.defs.length; c++) {
                e.push([d.defs[c]]);
              }
            } else {
              d.def.category = b, e.push([d.def]);
            }
          } else {
            e.push([{type:c, category:b}]);
          }
        });
        this._categories.push(b);
        var g;
        if ("func" == b) {
          var h = this.code.getThreadsByCategory("func");
          h.length && (g = this.code.getThreadIndex(h[0]));
        }
        e.forEach(function(b) {
          b && b[0] && (b[0].x = -99999, c.createThread(b, g), void 0 !== g && g++, delete b[0].x);
        });
      }
    }
  };
  c.banClass = function(b, c) {
    0 > this._bannedClass.indexOf(b) && (this._bannedClass.push(b), !0 !== c && this._dAlign());
  };
  c.unbanClass = function(b, c) {
    b = this._bannedClass.indexOf(b);
    -1 < b && (this._bannedClass.splice(b, 1), !0 !== c && this._dAlign());
  };
  c.checkBanClass = function(b) {
    if (b) {
      b = b.isNotFor;
      if (!b || 0 === b.length) {
        return !1;
      }
      for (var c, e = this._bannedClass, f = 0; f < b.length; f++) {
        if ((c = b[f]) && -1 === e.indexOf(c)) {
          return !1;
        }
      }
      return !0;
    }
  };
  c.checkCategory = function(b) {
    if (this.hasCategory() && b) {
      if (!this.lastSelector || this._selectDynamic) {
        return !0;
      }
      var c = "category_" + this.lastSelector;
      b = b.isFor;
      if (this.lastSelector && b && 0 > b.indexOf(c)) {
        return !0;
      }
    }
  };
  c._addControl = function(b) {
    var c = this;
    b.on("wheel", function() {
      c._mouseWheel.apply(c, arguments);
    });
    c._scroller && $(this.svg).bind("mousedown touchstart", function(b) {
      c.onMouseDown.apply(c, arguments);
    });
  };
  c.removeControl = function(b) {
    this.svgDom.off(b);
  };
  c.onMouseDown = function(b) {
    function c(b) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
      b = Entry.Utils.convertMouseEvent(b);
      var c = f.dragInstance;
      f._scroller.scroll(-b.pageY + c.offsetY);
      c.set({offsetY:b.pageY});
    }
    function e(b) {
      $(document).unbind(".blockMenu");
      delete f.dragInstance;
    }
    b.stopPropagation && b.stopPropagation();
    b.preventDefault && b.preventDefault();
    var f = this;
    if (0 === b.button || b.originalEvent && b.originalEvent.touches) {
      b = Entry.Utils.convertMouseEvent(b);
      Entry.documentMousedown && Entry.documentMousedown.notify(b);
      var g = $(document);
      g.bind("mousemove.blockMenu", c);
      g.bind("mouseup.blockMenu", e);
      g.bind("touchmove.blockMenu", c);
      g.bind("touchend.blockMenu", e);
      this.dragInstance = new Entry.DragInstance({startY:b.pageY, offsetY:b.pageY});
    }
  };
  c._mouseWheel = function(b) {
    b = b.originalEvent;
    b.preventDefault();
    var c = Entry.disposeEvent;
    c && c.notify(b);
    this._scroller.scroll(-b.wheelDeltaY || b.deltaY / 3);
  };
  c.dominate = function(b) {
    this.svgBlockGroup.appendChild(b.view.svgGroup);
  };
  c.reDraw = function() {
    if (this._isOn()) {
      var b = this.lastSelector;
      this._selectDynamic && (b = void 0);
      this.selectMenu(b, !0);
      this._getSortedBlocks().shift().forEach(function(b) {
        b.view.reDraw();
      });
    }
  };
  c._handleDragBlock = function() {
    this._boardBlockView = null;
    this._scroller && this._scroller.setOpacity(0);
  };
  c._captureKeyEvent = function(b) {
    var c = b.keyCode;
    b.ctrlKey && "workspace" == Entry.type && 48 < c && 58 > c && (b.preventDefault(), setTimeout(function() {
      this._cancelDynamic(!0);
      this._dSelectMenu(c - 49, !0);
    }.bind(this), 200));
  };
  c.enablePattern = function() {
    this.pattern.removeAttribute("style");
  };
  c.disablePattern = function() {
    this.pattern.attr({style:"display: none"});
  };
  c._clearCategory = function() {
    this._generateCodesTimer && (clearTimeout(this._generateCodesTimer), this._generateCodesTimer = null);
    this._selectedCategoryView = null;
    this._categories = [];
    var b = this._categoryElems, c;
    for (c in b) {
      b[c].remove();
    }
    this._categoryElems = {};
    this.code && this.code.constructor == Entry.Code && this.code.clear();
    this._categoryCol && this._categoryCol.remove();
    this._categoryData = null;
  };
  c.clearCategory = c._clearCategory;
  c.setCategoryData = function(b) {
    this._clearCategory();
    this._categoryData = b;
    this._generateCategoryView(b);
    this._generateCategoryCodes();
    this.setMenu();
    Entry.resizeElement();
  };
  c.setNoCategoryData = function(b) {
    this._clearCategory();
    Entry.resizeElement();
    this.changeCode(b, !0);
    this.categoryDoneEvent.notify();
  };
  c._generateCategoryView = function(b) {
    if (b) {
      this._categoryCol && this._categoryCol.remove && this._categoryCol.remove();
      this._categoryCol = Entry.Dom("ul", {class:"entryCategoryListWorkspace"});
      this.view.prepend(this._categoryCol);
      for (var c = 0; c < b.length; c++) {
        this._generateCategoryElement(b[c].category);
      }
    }
  };
  c._generateCategoryElement = function(b) {
    var c = this;
    (function(b, d) {
      b.text(Lang.Blocks[d.toUpperCase()]);
      c._categoryElems[d] = b;
      b.bindOnClick(function(b) {
        c._cancelDynamic(!0, function() {
          c.selectMenu(d, void 0, !0);
          c.align();
        });
      });
    })(Entry.Dom("li", {id:"entryCategory" + b, class:"entryCategoryElementWorkspace entryRemove", parent:this._categoryCol}), b);
  };
  c.updateOffset = function() {
    this._offset = this.svgDom.offset();
  };
  c.offset = function() {
    (!this._offset || 0 === this._offset.top && 0 === this._offset.left) && this.updateOffset();
    return this._offset;
  };
  c._generateHwCode = function(b) {
    var c = this.code, e = c.getThreadsByCategory("arduino");
    if (this._categoryData && this.shouldGenerateHwCode(e)) {
      e.forEach(function(b) {
        b.destroy();
      });
      for (var e = this._categoryData, f, g = e.length - 1; 0 <= g; g--) {
        if ("arduino" === e[g].category) {
          f = e[g].blocks;
          break;
        }
      }
      if (f) {
        e = [];
        for (g = 0; g < f.length; g++) {
          var h = f[g], k = Entry.block[h];
          if (!this.checkBanClass(k)) {
            if (k && k.def) {
              if (k.defs) {
                for (k.defs.forEach(function(b) {
                  b.category = "arduino";
                }), g = 0; g < k.defs.length; g++) {
                  e.push([k.defs[g]]);
                }
              } else {
                k.def.category = "arduino", e.push([k.def]);
              }
            } else {
              e.push([{type:h, category:"arduino"}]);
            }
          }
        }
        e.forEach(function(d) {
          b && (d[0].x = -99999);
          c.createThread(d);
          delete d[0].x;
        });
        this.hwCodeOutdated = !1;
      }
    }
  };
  c.setAlign = function(b) {
    this._align = b || "CENTER";
  };
  c._isNotVisible = function(b) {
    return this.checkCategory(b) || this.checkBanClass(b);
  };
  c._getSortedBlocks = function() {
    var b, c = [], e = [], f = this.code.getThreads();
    if (this._selectDynamic) {
      for (var c = Array(this._dynamicThreads.length), g = 0; g < f.length; g++) {
        if (b = f[g].getFirstBlock()) {
          var h = b.type;
          h = this._dynamicThreads.indexOf(h);
          -1 < h ? c[h] = b : e.push(b);
        }
      }
      c = c.filter(function(b) {
        return b instanceof Entry.Block;
      });
    } else {
      for (g = 0; g < f.length; g++) {
        if (b = f[g].getFirstBlock()) {
          h = b.type, this._isNotVisible(Entry.block[h]) ? e.push(b) : c.push(b);
        }
      }
    }
    return [c, e];
  };
  c._setDynamic = function(b) {
    this._isOn() && (this._selectDynamic = !0, this._dynamicThreads = b, this.selectMenu(void 0, !0));
  };
  c._cancelDynamic = function(b, c) {
    this._setDynamicTimer && (clearTimeout(this._setDynamicTimer), this._setDynamicTimer = null);
    this._selectDynamic = !1;
    this._dynamicThreads = [];
    !0 !== b && this.selectMenu(this.lastSelector, !0);
    c && c();
  };
  c._isOn = function() {
    return "none" !== this.view.css("display");
  };
  c.deleteRendered = function(b) {
    delete this._renderedCategories[b];
  };
  c.hasCategory = function() {
    return !!this._categoryData;
  };
  c.getDom = function(b) {
    if (1 <= b.length) {
      if ("category" === b[0]) {
        return this._categoryElems[b[1]];
      }
      b = b[0][0].type;
      var c = this.getSvgDomByType(b);
      this.align();
      this.scrollToType(b);
      return c;
    }
  };
  c.getSvgDomByType = function(b) {
    for (var c = this.code.getThreads(), e = 0; e < c.length; e++) {
      var f = c[e].getFirstBlock();
      if (f.type === b) {
        return f.view.svgGroup;
      }
    }
  };
  c.scrollToType = function(b) {
    if (b) {
      var c = this.code.getBlockList(!1, b)[0].view;
      this.getSvgDomByType(b).getBoundingClientRect().bottom > $(window).height() - 10 && this._scroller.scrollByPx(c.y - 20);
    }
  };
  c.shouldGenerateHwCode = function(b) {
    return this.hwCodeOutdated || 0 === b.length;
  };
})(Entry.BlockMenu.prototype);
Entry.BlockMenuScroller = function(c) {
  var b = this;
  this.board = c;
  this.board.changeEvent.attach(this, this._reset);
  this.svgGroup = null;
  this.vRatio = this.vY = this.vWidth = this.hX = 0;
  this._visible = !0;
  this._opacity = -1;
  this.mouseHandler = function() {
    b.onMouseDown.apply(b, arguments);
  };
  this.createScrollBar();
  this.setOpacity(0);
  this._addControl();
  this._domHeight = 0;
  this._dResizeScrollBar = Entry.Utils.debounce(this.resizeScrollBar, 50);
  Entry.windowResized && Entry.windowResized.attach(this, this._dResizeScrollBar);
};
Entry.BlockMenuScroller.RADIUS = 7;
(function(c) {
  c.createScrollBar = function() {
    this.svgGroup = this.board.svgGroup.elem("g", {class:"boardScrollbar"});
    this.vScrollbar = this.svgGroup.elem("rect", {rx:4, ry:4});
  };
  c.resizeScrollBar = function() {
    this._updateRatio();
    var b = this.board.blockMenuContainer, c = b.height();
    if (c !== this._domHeight) {
      return this._domHeight = c, this.board.align();
    }
    this._visible && 0 !== this.vRatio && this.vScrollbar.attr({width:9, height:b.height() / this.vRatio, x:b.width() - 9});
  };
  c.updateScrollBar = function(b) {
    this.vY += b;
    this.vScrollbar.attr({y:this.vY});
  };
  c.scroll = function(b) {
    this.isVisible() && (b = this._adjustValue(b) - this.vY, 0 !== b && (this.board.code.moveBy(0, -b * this.vRatio), this.updateScrollBar(b)));
  };
  c.scrollByPx = function(b) {
    this.vRatio || this._updateRatio();
    this.scroll(b / this.vRatio);
  };
  c._adjustValue = function(b) {
    var c = this.board.svgDom.height(), c = c - c / this.vRatio;
    b = this.vY + b;
    b = Math.max(0, b);
    return b = Math.min(c, b);
  };
  c.setVisible = function(b) {
    b != this.isVisible() && (this._visible = b, this.svgGroup.attr({display:!0 === b ? "block" : "none"}));
  };
  c.setOpacity = function(b) {
    this._opacity != b && (this.vScrollbar.attr({opacity:b}), this._opacity = b);
  };
  c.isVisible = function() {
    return this._visible;
  };
  c._updateRatio = function() {
    var b = this.board, c = b.svgBlockGroup.getBBox(), b = b.blockMenuContainer.height();
    this.vRatio = c = (c.height + 20) / b;
    1 >= c ? this.setVisible(!1) : this.setVisible(!0);
  };
  c._reset = function() {
    this.vY = 0;
    this.vScrollbar.attr({y:this.vY});
    this._dResizeScrollBar();
  };
  c.onMouseDown = function(b) {
    function c(b) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
      b = b.originalEvent && b.originalEvent.touches ? b.originalEvent.touches[0] : b;
      var c = f.dragInstance;
      f.scroll(b.pageY - c.offsetY);
      c.set({offsetY:b.pageY});
    }
    function e(b) {
      $(document).unbind(".scroll");
      delete f.dragInstance;
    }
    var f = this;
    b.stopPropagation && b.stopPropagation();
    b.preventDefault && b.preventDefault();
    if (0 === b.button || b.originalEvent && b.originalEvent.touches) {
      Entry.documentMousedown && Entry.documentMousedown.notify(b);
      var g = b.originalEvent && b.originalEvent.touches ? b.originalEvent.touches[0] : b;
      var h = $(document);
      h.bind("mousemove.scroll", c);
      h.bind("mouseup.scroll", e);
      h.bind("touchmove.scroll", c);
      h.bind("touchend.scroll", e);
      f.dragInstance = new Entry.DragInstance({startY:g.pageY, offsetY:g.pageY});
    }
    b.stopPropagation();
  };
  c._addControl = function() {
    $(this.vScrollbar).bind("mousedown touchstart", this.mouseHandler);
  };
})(Entry.BlockMenuScroller.prototype);
Entry.BlockView = function(c, b, d) {
  var e = this;
  Entry.Model(this, !1);
  this.block = c;
  this._lazyUpdatePos = Entry.Utils.debounce(c._updatePos.bind(c), 200);
  this.mouseUpEvent = new Entry.Event(this);
  this.disableMouseEvent = !1;
  this.dAlignContent = this.alignContent;
  this._board = b;
  this._observers = [];
  this.set(c);
  this.svgGroup = b.svgBlockGroup.elem("g");
  this.svgGroup.blockView = this;
  this._schema = Entry.skinContainer.getSkin(c);
  if (void 0 === this._schema) {
    this.block.destroy(!1, !1);
  } else {
    if (void 0 === d) {
      var f = this.getBoard().workspace;
      this.renderMode = f && f.getBlockViewRenderMode ? f.getBlockViewRenderMode() : Entry.BlockView.RENDER_MODE_BLOCK;
    } else {
      this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK;
    }
    this._schema.deletable && this.block.setDeletable(this._schema.deletable);
    this._schema.copyable && this.block.setCopyable(this._schema.copyable);
    !1 !== this._schema.display && !1 !== c.display || this.set({display:!1});
    f = this._skeleton = Entry.skeleton[this._schema.skeleton];
    this._contents = [];
    this._statements = [];
    this._extensions = [];
    this.magnet = {};
    this._paramMap = {};
    f.magnets && f.magnets(this).next && (this.svgGroup.nextMagnet = this.block, this._nextGroup = this.svgGroup.elem("g", {class:"entryBlockNextGroup"}), this._observers.push(this.observe(this, "_updateMagnet", ["contentHeight"])));
    this.isInBlockMenu = this.getBoard() instanceof Entry.BlockMenu;
    this.mouseHandler = function() {
      var b = e.block.events;
      b && b.mousedown && b.mousedown.forEach(function(b) {
        b(e);
      });
      e.onMouseDown.apply(e, arguments);
    };
    this._startRender(c, d);
    d = this.block;
    this._observers.push(d.observe(this, "_setMovable", ["movable"]));
    this._observers.push(d.observe(this, "_setReadOnly", ["movable"]));
    this._observers.push(d.observe(this, "_setCopyable", ["copyable"]));
    this._observers.push(d.observe(this, "_updateColor", ["deletable"], !1));
    this._observers.push(this.observe(this, "_updateBG", ["magneting"], !1));
    this._observers.push(this.observe(this, "_updateOpacity", ["visible"], !1));
    this._observers.push(this.observe(this, "_updateDisplay", ["display"]));
    this._observers.push(this.observe(this, "_updateShadow", ["shadow"]));
    this._observers.push(this.observe(this, "_updateMagnet", ["offsetY"]));
    this._observers.push(b.code.observe(this, "_setBoard", ["board"], !1));
    this.dragMode = Entry.DRAG_MODE_NONE;
    Entry.Utils.disableContextmenu(this.svgGroup.node);
    b = c.events.viewAdd;
    "workspace" == Entry.type && b && !this.isInBlockMenu && b.forEach(function(b) {
      Entry.Utils.isFunction(b) && b(c);
    });
  }
};
Entry.BlockView.PARAM_SPACE = 5;
Entry.BlockView.DRAG_RADIUS = 5;
Entry.BlockView.pngMap = {};
Entry.BlockView.RENDER_MODE_BLOCK = 1;
Entry.BlockView.RENDER_MODE_TEXT = 2;
(function(c) {
  c.schema = {id:0, type:Entry.STATIC.BLOCK_RENDER_MODEL, x:0, y:0, offsetX:0, offsetY:0, width:0, height:0, contentWidth:0, contentHeight:0, magneting:!1, visible:!0, animating:!1, shadow:!0, display:!0};
  c._startRender = function(b, c) {
    var d = this;
    b = this._skeleton;
    var f = {class:"block"};
    !1 === this.display && (f.display = "none");
    var g = this.svgGroup;
    g.attr(f);
    this._schema.css && g.attr({style:this._schema.css});
    (f = b.classes) && 0 !== f.length && f.forEach(function(b) {
      g.addClass(b);
    });
    f = b.path(this);
    this.pathGroup = g.elem("g");
    this._updateMagnet();
    this._path = this.pathGroup.elem("path");
    Entry.isMobile() || ($(this._path).mouseenter(function(b) {
      d._mouseEnable && d._changeFill(!0);
    }), $(this._path).mouseleave(function(b) {
      d._mouseEnable && d._changeFill(!1);
    }));
    var h = this._schema.color;
    if (this.block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this.block.emphasized) {
      h = Entry.Utils.getEmphasizeColor(h);
    }
    this._fillColor = h;
    f = {d:f, fill:h, class:"blockPath"};
    if (this.magnet.next || this._skeleton.nextShadow) {
      h = this.getBoard().suffix, this.pathGroup.attr({filter:"url(#entryBlockShadowFilter_" + h + ")"});
    } else {
      if (this.magnet.string || this.magnet.boolean) {
        f.stroke = b.outerLine;
      }
    }
    b.outerLine && (f["stroke-width"] = "0.6");
    this._path.attr(f);
    this._moveTo(this.x, this.y, !1);
    this._startContentRender(c);
    this._startExtension(c);
    !0 !== this._board.disableMouseEvent && this._addControl();
    (c = this.guideSvgGroup) && g.insertBefore(c, g.firstChild);
    this.bindPrev();
  };
  c._startContentRender = function(b) {
    b = void 0 === b ? this.renderMode : b;
    this.contentSvgGroup && this.contentSvgGroup.remove();
    this.statementSvgGroup && this.statementSvgGroup.remove();
    this.contentSvgGroup = this.svgGroup.elem("g", {class:"contentsGroup"});
    this._contents = [];
    var c = this._schema;
    c.statements && c.statements.length && (this.statementSvgGroup = this.svgGroup.elem("g", {class:"statementGroup"}));
    var e = /(%\d+)/mi, f = /%(\d+)/mi, g, h = this._getTemplate(b), k = this._getSchemaParams(b);
    b === Entry.BlockView.RENDER_MODE_TEXT && /(if)+(.|\n)+(else)+/gmi.test(h) && !e.test(h) && this.isInBlockMenu && (h = h.replace("else", "%" + k.length + " else"));
    h = h.split(e);
    for (e = 0; e < h.length; e++) {
      var l = h[e];
      " " === l[0] && (l = l.substring(1));
      " " === l[l.length - 1] && (l = l.substring(0, l.length - 1));
      0 !== l.length && ((g = f.exec(l)) ? (g = g[1] - 1, l = k[g], l = new Entry["Field" + l.type](l, this, g, b || this.renderMode, e), this._contents.push(l), this._paramMap[g] = l) : this._contents.push(new Entry.FieldText({text:l}, this)));
    }
    b = c.statements || [];
    for (e = 0; e < b.length; e++) {
      this._statements.push(new Entry.FieldStatement(b[e], this, e));
    }
    this.alignContent(!1);
  };
  c._startExtension = function(b) {
    this._extensions = this.block.extensions.map(function(c) {
      return new Entry["Ext" + c.type](c, this, b);
    }.bind(this));
  };
  c._updateSchema = function() {
    this._startContentRender();
  };
  c.changeType = function(b) {
    this._schema = Entry.block[b || this.type];
    this._updateSchema();
  };
  c.alignContent = function(b) {
    !0 !== b && (b = !1);
    for (var c = 0, e = 0, f = 0, g = 0, h = 0, k = 0, l = 0; l < this._contents.length; l++) {
      var m = this._contents[l];
      m instanceof Entry.FieldLineBreak ? (this._alignStatement(b, g), m.align(g), g++, e = m.box.y, c = 8) : (m.align(c, e, b), l === this._contents.length - 1 || m instanceof Entry.FieldText && 0 === m._text.length || (c += Entry.BlockView.PARAM_SPACE));
      m = m.box;
      0 !== g ? k = Math.max(1000000 * Math.round(m.height), k) : f = Math.max(m.height, f);
      c += m.width;
      h = Math.max(h, c);
      this.contentWidth === h && this.contentHeight === f || this.set({contentWidth:h, contentHeight:f});
    }
    k && this.set({contentHeight:f + k});
    this._statements.length != g && this._alignStatement(b, g);
    b = this.getContentPos();
    this.contentSvgGroup.attr("transform", "translate(" + b.x + "," + b.y + ")");
    this.contentPos = b;
    this._render();
    this._updateMagnet();
    (b = this.getBoard().workspace) && (this.isFieldEditing() || b.widgetUpdateEveryTime) && b.widgetUpdateEvent.notify();
  };
  c.isFieldEditing = function() {
    for (var b = this._contents, c = 0; c < b.length; c++) {
      var e = b[c];
      if (e && void 0 !== e.isEditing && e.isEditing()) {
        return !0;
      }
    }
    return !1;
  };
  c._alignStatement = function(b, c) {
    var d = this._skeleton.statementPos ? this._skeleton.statementPos(this) : [], f = this._statements[c];
    f && (c = d[c]) && f.align(c.x, c.y, b);
  };
  c._render = function() {
    this._renderPath();
    this.set(this._skeleton.box(this));
  };
  c._renderPath = function() {
    var b = this._path.getAttribute("d"), c = this._skeleton.path(this);
    b !== c && (this._path.attr({d:c}), this.set({animating:!1}));
  };
  c._setPosition = function(b) {
    this.svgGroup.attr("transform", "translate(" + this.x + "," + this.y + ")");
  };
  c._toLocalCoordinate = function(b) {
    this.disableMouseEvent = !1;
    this._moveTo(0, 0, !1);
    b.appendChild(this.svgGroup);
  };
  c._toGlobalCoordinate = function(b, c) {
    this.disableMouseEvent = !1;
    b = this.getAbsoluteCoordinate(b);
    this._moveTo(b.x, b.y, !1, c);
    this.getBoard().svgBlockGroup.appendChild(this.svgGroup);
  };
  c._moveTo = function(b, c, e, f) {
    var d = this.x, h = this.y;
    this.display || (c = b = -99999);
    d === b && h === c || this.set({x:b, y:c});
    !0 !== f && this._lazyUpdatePos();
    this.visible && this.display && this._setPosition(e);
  };
  c._moveBy = function(b, c, e, f) {
    return this._moveTo(this.x + b, this.y + c, e, f);
  };
  c.moveBy = c._moveBy;
  c._addControl = function() {
    var b = this;
    this._mouseEnable = !0;
    $(this.svgGroup).bind("mousedown.blockViewMousedown touchstart.blockViewMousedown", b.mouseHandler);
    var c = b.block.events;
    c && c.dblclick && $(this.svgGroup).dblclick(function() {
      b._board.readOnly || c.dblclick.forEach(function(c) {
        c && c(b);
      });
    });
  };
  c.removeControl = function() {
    this._mouseEnable = !1;
    $(this.svgGroup).unbind(".blockViewMousedown");
  };
  c.onMouseDown = function(b) {
    function d(b) {
      b.stopPropagation();
      var d = h.workspace.getMode();
      d === Entry.Workspace.MODE_VIMBOARD && c.vimBoardEvent(b, "dragOver");
      var e = b.originalEvent && b.originalEvent.touches ? b.originalEvent.touches[0] : b;
      var k = g.mouseDownCoordinate, k = Math.sqrt(Math.pow(e.pageX - k.x, 2) + Math.pow(e.pageY - k.y, 2));
      if (g.dragMode == Entry.DRAG_MODE_DRAG || k > Entry.BlockView.DRAG_RADIUS) {
        f && (clearTimeout(f), f = null), g.movable && (g.isInBlockMenu ? h.cloneToGlobal(b) : (b = !1, g.dragMode != Entry.DRAG_MODE_DRAG && (g._toGlobalCoordinate(void 0, !0), g.dragMode = Entry.DRAG_MODE_DRAG, g.block.getThread().changeEvent.notify(), Entry.GlobalSvg.setView(g, d), q.dominate(), b = !0), this.animating && this.set({animating:!1}), 0 === g.dragInstance.height && g.dragInstance.set({height:-1 + g.height}), d = g.dragInstance, g._moveBy(e.pageX - d.offsetX, e.pageY - d.offsetY, !1, 
        !0), d.set({offsetX:e.pageX, offsetY:e.pageY}), Entry.GlobalSvg.position(), g.originPos || (g.originPos = {x:g.x, y:g.y}), b && h.generateCodeMagnetMap(), g._updateCloseBlock()));
      }
    }
    function e(b) {
      f && (clearTimeout(f), f = null);
      $(document).unbind(".block", e);
      $(document).unbind(".block", d);
      g.terminateDrag(b);
      h && h.set({dragBlock:null});
      g._changeFill(!1);
      Entry.GlobalSvg.remove();
      g.mouseUpEvent.notify();
      delete this.mouseDownCoordinate;
      delete g.dragInstance;
    }
    b.stopPropagation && b.stopPropagation();
    b.preventDefault && b.preventDefault();
    var f = null, g = this;
    this._changeFill(!1);
    var h = this.getBoard();
    Entry.documentMousedown && Entry.documentMousedown.notify(b);
    if (!this.readOnly && !h.viewOnly) {
      h.setSelectedBlock(this);
      if ((0 === b.button || b.originalEvent && b.originalEvent.touches) && !this._board.readOnly) {
        var k = b.type;
        var l = b.originalEvent && b.originalEvent.touches ? b.originalEvent.touches[0] : b;
        this.mouseDownCoordinate = {x:l.pageX, y:l.pageY};
        var m = $(document);
        this.disableMouseEvent || m.bind("mousemove.block touchmove.block", d);
        m.bind("mouseup.block touchend.block", e);
        this.dragInstance = new Entry.DragInstance({startX:l.pageX, startY:l.pageY, offsetX:l.pageX, offsetY:l.pageY, height:0, mode:!0});
        h.set({dragBlock:this});
        this.addDragging();
        this.dragMode = Entry.DRAG_MODE_MOUSEDOWN;
        "touchstart" === k && (f = setTimeout(function() {
          f && (f = null, e(), g._rightClick(b, "longPress"));
        }, 1000));
      } else {
        Entry.Utils.isRightButton(b) && this._rightClick(b);
      }
      h.workspace.getMode() === Entry.Workspace.MODE_VIMBOARD && b && (vimBoard = $(".entryVimBoard>.CodeMirror")[0], document.getElementsByClassName("CodeMirror")[0].dispatchEvent(Entry.Utils.createMouseEvent("dragStart", event)));
      var q = this;
    }
  };
  c.vimBoardEvent = function(b, c, e) {
    b && (b = Entry.Utils.createMouseEvent(c, b), e && (b.block = e), $(".entryVimBoard>.CodeMirror")[0].dispatchEvent(b));
  };
  c.terminateDrag = function(b) {
    var c = Entry.GlobalSvg, e = this.getBoard(), f = this.dragMode;
    var g = this.block;
    var h = e.workspace.getMode();
    this.removeDragging();
    this.set({visible:!0});
    this.dragMode = Entry.DRAG_MODE_NONE;
    var k = c.terminateDrag(this);
    if (h === Entry.Workspace.MODE_VIMBOARD) {
      e instanceof Entry.BlockMenu ? (e.terminateDrag(), k === c.DONE && this.vimBoardEvent(b, "dragEnd", g)) : e.clear();
    } else {
      if (b = this.dragInstance && this.dragInstance.isNew, f === Entry.DRAG_MODE_DRAG) {
        var h = !1, l = this.block.getPrevBlock(this.block), m = this._board.workspace.trashcan.isOver ? "ForDestroy" : "";
        switch(k) {
          case c.DONE:
            c = e.magnetedBlockView;
            c instanceof Entry.BlockView && (c = c.block);
            l && !c ? Entry.do("separateBlock" + m, g) : l || c || b ? (m = b ? "FromBlockMenu" : "", c ? ("next" === c.view.magneting ? (g.getLastBlock(), this.dragMode = f, f = c.pointer(), f[3] = -1, Entry.do("insertBlock" + m, g, f).isPass(b), Entry.ConnectionRipple.setView(c.view).dispose(), this.dragMode = Entry.DRAG_MODE_NONE) : (c.getThread && (h = c.getThread(), (f = c.type) && h instanceof Entry.FieldBlock && !Entry.block[f].isPrimitive && (m += "FollowSeparate")), Entry.do("insertBlock" + 
            m, g, c).isPass(b), h = !0), createjs.Sound.play("entryMagneting")) : Entry.do("moveBlock" + m, g).isPass(b)) : g.getThread().view.isGlobal() ? Entry.do("moveBlock" + m, g) : Entry.do("separateBlock" + m, g);
            break;
          case c.RETURN:
            g = this.block;
            b ? Entry.do("destroyBlockBelow", this.block).isPass(!0) : l ? (this.set({animating:!1}), createjs.Sound.play("entryMagneting"), this.bindPrev(l), g.insert(l)) : (b = g.getThread().view.getParent(), b instanceof Entry.Board ? (b = this.originPos, this._moveTo(b.x, b.y, !1)) : (createjs.Sound.play("entryMagneting"), Entry.do("insertBlock", g, b)));
            break;
          case c.REMOVE:
            createjs.Sound.play("entryDelete"), Entry.do("destroyBlockBelow", this.block).isPass(b);
        }
        e.setMagnetedBlock(null);
        h && Entry.ConnectionRipple.setView(g.view).dispose();
      } else {
        k === c.REMOVE && b && f === Entry.DRAG_MODE_MOUSEDOWN && Entry.do("destroyBlockBelow", this.block).isPass(!0);
      }
    }
    this.destroyShadow();
    delete this.originPos;
  };
  c._updateCloseBlock = function() {
    var b = this.getBoard(), c;
    if (this._skeleton.magnets) {
      for (var e in this.magnet) {
        if (c = "next" === e ? this.getBoard().getNearestMagnet(this.x, this.y + this.getBelowHeight(), e) : this.getBoard().getNearestMagnet(this.x, this.y, e)) {
          return b.setMagnetedBlock(c.view, e);
        }
      }
      b.setMagnetedBlock(null);
    }
  };
  c.dominate = function() {
    this.block.getThread().view.dominate();
  };
  c.getSvgRoot = function() {
    for (var b = this.getBoard().svgBlockGroup, c = this.svgGroup; c.parentNode !== b;) {
      c = c.parentNode;
    }
    return c;
  };
  c.getBoard = function() {
    return this._board;
  };
  c._setBoard = function() {
    this._board = this._board.code.board;
  };
  c.destroy = function(b) {
    this.block.set({view:null});
    $(this.svgGroup).unbind(".blockViewMousedown");
    this._destroyObservers();
    var c = this.svgGroup;
    b ? $(c).fadeOut(100, function() {
      c.remove();
    }) : c.remove();
    this._contents && this._contents.forEach(function(b) {
      b.destroy();
    });
    this._statements && this._statements.forEach(function(b) {
      b.destroy();
    });
    var e = this.block;
    b = e.events.viewDestroy;
    "workspace" == Entry.type && b && !this.isInBlockMenu && b.forEach(function(b) {
      Entry.Utils.isFunction(b) && b(e);
    });
  };
  c.getShadow = function() {
    this._shadow || (this._shadow = Entry.SVG.createElement(this.svgGroup.cloneNode(!0), {opacity:0.5}), this.getBoard().svgGroup.appendChild(this._shadow));
    return this._shadow;
  };
  c.destroyShadow = function() {
    this._shadow && (this._shadow.remove(), delete this._shadow);
  };
  c._updateMagnet = function() {
    if (this._skeleton.magnets) {
      var b = this._skeleton.magnets(this);
      b.next && this._nextGroup.attr("transform", "translate(" + b.next.x + "," + b.next.y + ")");
      this.magnet = b;
      this.block.getThread().changeEvent.notify();
    }
  };
  c._updateBG = function() {
    if (this._board.dragBlock && this._board.dragBlock.dragInstance) {
      var b = this.svgGroup;
      if (this.magnet.next || this.magnet.previous) {
        if (b = this.magneting) {
          var c = this._board.dragBlock.getShadow(), e = this.getAbsoluteCoordinate();
          if ("previous" === b) {
            var f = this.magnet.next;
            f = "translate(" + (e.x + f.x) + "," + (e.y + f.y) + ")";
          } else {
            if ("next" === b) {
              f = this.magnet.previous;
              var g = this._board.dragBlock.getBelowHeight();
              f = "translate(" + (e.x + f.x) + "," + (e.y + f.y - g) + ")";
            }
          }
          $(c).attr({transform:f, display:"block"});
          this._clonedShadow = c;
          this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground);
          "previous" === b && (b = this._board.dragBlock.getBelowHeight() + this.offsetY, this.originalHeight = this.offsetY, this.set({offsetY:b}));
        } else {
          this._clonedShadow && (this._clonedShadow.attr({display:"none"}), delete this._clonedShadow), b = this.originalHeight, void 0 !== b && (this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground), this.set({offsetY:b}), delete this.originalHeight);
        }
        (b = this.block.thread.changeEvent) && b.notify();
      } else {
        this.magneting ? (b.attr({filter:"url(#entryBlockHighlightFilter_" + this.getBoard().suffix + ")"}), b.addClass("outputHighlight")) : (b.removeClass("outputHighlight"), b.removeAttr("filter"));
      }
    }
  };
  c.addDragging = function() {
    this.svgGroup.addClass("dragging");
  };
  c.removeDragging = function() {
    this.svgGroup.removeClass("dragging");
  };
  c.addSelected = function() {
    this.svgGroup.addClass("selected");
  };
  c.removeSelected = function() {
    this.svgGroup.removeClass("selected");
  };
  c.getSkeleton = function() {
    return this._skeleton;
  };
  c.getContentPos = function() {
    return this._skeleton.contentPos(this);
  };
  c.renderText = function() {
    this.renderMode = Entry.BlockView.RENDER_MODE_TEXT;
    this._startContentRender(Entry.BlockView.RENDER_MODE_TEXT);
  };
  c.renderBlock = function() {
    this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK;
    this._startContentRender(Entry.BlockView.RENDER_MODE_BLOCK);
  };
  c.renderByMode = function(b, c) {
    if (!this.isRenderMode(b) || c) {
      this.renderMode = b, this._startContentRender(b);
    }
  };
  c._updateOpacity = function() {
    this.svgGroup.attr({opacity:!1 === this.visible ? 0 : 1});
    this.visible && this._setPosition();
  };
  c._updateShadow = function() {
    this.shadow && Entry.Utils.colorDarken(this._schema.color, 0.7);
  };
  c._setMovable = function() {
    this.movable = null !== this.block.isMovable() ? this.block.isMovable() : void 0 !== this._skeleton.movable ? this._skeleton.movable : !0;
  };
  c._setReadOnly = function() {
    this.readOnly = null !== this.block.isReadOnly() ? this.block.isReadOnly() : void 0 !== this._skeleton.readOnly ? this._skeleton.readOnly : !1;
  };
  c._setCopyable = function() {
    this.copyable = null !== this.block.isCopyable() ? this.block.isCopyable() : void 0 !== this._skeleton.copyable ? this._skeleton.copyable : !0;
  };
  c.bumpAway = function(b, c) {
    var d = this;
    b = b || 15;
    if (c) {
      var f = this.x, g = this.y;
      window.setTimeout(function() {
        f === d.x && g === d.y && d._moveBy(b, b, !1);
      }, c);
    } else {
      d._moveBy(b, b, !1);
    }
  };
  c.bindPrev = function(b, c) {
    var d;
    if (b) {
      if (this._toLocalCoordinate(b.view._nextGroup), (d = b.getNextBlock()) && d && d !== this.block) {
        var f = this.block.getLastBlock();
        c ? d.view._toLocalCoordinate(b.view._nextGroup) : f.view.magnet.next ? d.view._toLocalCoordinate(f.view._nextGroup) : (d.view._toGlobalCoordinate(), d.separate(), d.view.bumpAway(null, 100));
      }
    } else {
      if (b = this.block.getPrevBlock()) {
        this._toLocalCoordinate(b.view._nextGroup), (d = this.block.getNextBlock()) && d.view && d.view._toLocalCoordinate(this._nextGroup);
      }
    }
  };
  c.getAbsoluteCoordinate = function(b) {
    b = void 0 !== b ? b : this.dragMode;
    if (b === Entry.DRAG_MODE_DRAG) {
      return {x:this.x, y:this.y};
    }
    b = this.block.getThread().view.requestAbsoluteCoordinate(this);
    b.x += this.x;
    b.y += this.y;
    return b;
  };
  c.getBelowHeight = function() {
    return this.block.getThread().view.requestPartHeight(this);
  };
  c._updateDisplay = function() {
    this.svgGroup.attr({display:!1 === this.display ? "none" : "block"});
    this.display && this._setPosition();
  };
  c._updateColor = function() {
    var b = this._schema.color;
    if (this.block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this.block.emphasized) {
      b = Entry.Utils.getEmphasizeColor(b);
    }
    this._fillColor = b;
    this._path.attr({fill:b});
    this._updateContents();
  };
  c._updateContents = function(b) {
    this._contents.forEach(function(c) {
      c.renderStart(void 0, void 0, this.renderMode, b);
    }.bind(this));
    this.alignContent(!1);
  };
  c._destroyObservers = function() {
    for (var b = this._observers; b.length;) {
      b.pop().destroy();
    }
  };
  c._changeFill = function(b) {
    var c = this.getBoard();
    if (!c.dragBlock) {
      var e = this._fillColor, f = this._path, c = this.getBoard();
      b ? (e = "url(#blockHoverPattern_" + this.getBoard().suffix + ")", this._setBackgroundPath(), c.enablePattern()) : (c.disablePattern(), this._removeBackgroundPath());
      f.attr({fill:e});
    }
  };
  c.addActivated = function() {
    this.svgGroup.addClass("activated");
  };
  c.removeActivated = function() {
    this.svgGroup.removeClass("activated");
  };
  c.reDraw = function() {
    if (this.visible && this.display) {
      var b = this.block;
      this._updateContents(!0);
      for (var c = b.statements || [], b = 0; b < c.length; b++) {
        c[b].view.reDraw();
      }
      c = this._extensions || [];
      for (b = 0; b < c.length; b++) {
        var e = c[b];
        e.updatePos && e.updatePos();
      }
    }
  };
  c.getParam = function(b) {
    return this._paramMap[b];
  };
  c.getDataUrl = function(b, c) {
    function d() {
      h = h.replace("(svgGroup)", (new XMLSerializer).serializeToString(l)).replace("%W", k.width * m).replace("%H", k.height * m).replace("(defs)", (new XMLSerializer).serializeToString(n[0])).replace(/>\s+/g, ">").replace(/\s+</g, "<");
      var b = "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(h)));
      h = null;
      c ? (g.resolve({src:b, width:k.width, height:k.height}), l = null) : f(b, k.width, k.height, 1.5).then(function(b) {
        l = null;
        g.resolve({src:b, width:k.width, height:k.height});
      }, function(b) {
        g.reject("error occured");
      });
      b = null;
    }
    function f(b, c, d, e) {
      var f = $.Deferred();
      e || (e = 1);
      void 0 !== Entry.BlockView.pngMap[b] && f.resolve(Entry.BlockView.pngMap[b]);
      c *= e;
      d *= e;
      c = Math.ceil(c);
      d = Math.ceil(d);
      var g = document.createElement("img");
      g.crossOrigin = "Anonymous";
      var h = document.createElement("canvas");
      h.width = c;
      h.height = d;
      var k = h.getContext("2d");
      g.onload = function() {
        k.drawImage(g, 0, 0, c, d);
        var e = h.toDataURL("image/png");
        /\.png$/.test(b) && (Entry.BlockView.pngMap[b] = e);
        f.resolve(e);
      };
      g.onerror = function() {
        f.reject("error occured");
      };
      g.src = b;
      return f.promise();
    }
    var g = $.Deferred(), h = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 %W %H">(svgGroup)(defs)</svg>', k = this.svgGroup.getBoundingClientRect(), l = b ? this.svgGroup : this.svgGroup.cloneNode(!0);
    b = this._skeleton.box(this);
    var m = c ? 1 : 1.5, q = function() {
      var b = window.platform;
      return b && "windows" === b.name.toLowerCase() && "7" === b.version[0] ? !0 : !1;
    }() ? 0.9 : 0.95;
    -1 < this.type.indexOf("func_") && (q *= 0.99);
    l.setAttribute("transform", "scale(%SCALE) translate(%X,%Y)".replace("%X", -b.offsetX).replace("%Y", -b.offsetY).replace("%SCALE", m));
    var n = this.getBoard().svgDom.find("defs"), r = l.getElementsByTagName("image");
    b = l.getElementsByTagName("text");
    for (var t = ["\u2265", "\u2264"], u = "\u2265\u2264-><=+-x/".split(""), x = 0; x < b.length; x++) {
      (function(b) {
        b.setAttribute("font-family", "'nanumBarunRegular', 'NanumGothic', '\ub098\ub214\uace0\ub515','NanumGothicWeb', '\ub9d1\uc740 \uace0\ub515', 'Malgun Gothic', Dotum");
        var c = parseInt(b.getAttribute("font-size")), d = $(b).text();
        -1 < t.indexOf(d) && b.setAttribute("font-weight", "500");
        if ("q" == d) {
          var e = parseInt(b.getAttribute("y"));
          b.setAttribute("y", e - 1);
        }
        -1 < u.indexOf(d) ? b.setAttribute("font-size", c + "px") : b.setAttribute("font-size", c * q + "px");
        b.setAttribute("alignment-baseline", "baseline");
      })(b[x]);
    }
    var v = 0;
    if (0 === r.length) {
      d();
    } else {
      for (x = 0; x < r.length; x++) {
        (function(b) {
          var c = b.getAttribute("href");
          f(c, b.getAttribute("width"), b.getAttribute("height")).then(function(c) {
            b.setAttribute("href", c);
            if (++v == r.length) {
              return d();
            }
          });
        })(r[x]);
      }
    }
    return g.promise();
  };
  c.downloadAsImage = function(b) {
    this.getDataUrl().then(function(c) {
      var d = document.createElement("a");
      d.href = c.src;
      c = "\uc5d4\ud2b8\ub9ac \ube14\ub85d";
      b && (c += b);
      d.download = c + ".png";
      d.click();
    });
  };
  c._rightClick = function(b, c) {
    var d = Entry.disposeEvent;
    d && d.notify(b);
    var f = this, g = f.block;
    if (this.isInBlockMenu) {
      if ("longPress" === c && g.getFuncId()) {
        this._schema.events.dblclick[0](this);
      }
    } else {
      c = [];
      var h = this._board.readOnly, d = {text:Lang.Blocks.Duplication_option, enable:this.copyable && !h, callback:function() {
        Entry.do("cloneBlock", g.copy());
      }}, k = {text:Lang.Blocks.CONTEXT_COPY_option, enable:this.copyable && !h, callback:function() {
        f.block.copyToClipboard();
      }}, h = {text:Lang.Blocks.Delete_Blocks, enable:g.isDeletable() && !h, callback:function() {
        Entry.do("destroyBlock", f.block);
      }}, l = {text:Lang.Menus.save_as_image, callback:function() {
        f.downloadAsImage();
      }};
      c.push(d);
      c.push(k);
      c.push(h);
      Entry.Utils.isChrome() && "workspace" == Entry.type && !Entry.isMobile() && c.push(l);
      b.originalEvent && b.originalEvent.touches && (b = b.originalEvent.touches[0]);
      Entry.ContextMenu.show(c, null, {x:b.clientX, y:b.clientY});
    }
  };
  c.clone = function() {
    return this.svgGroup.cloneNode(!0);
  };
  c._setBackgroundPath = function() {
    this._removeBackgroundPath();
    var b = this._path.cloneNode(!0);
    b.setAttribute("class", "blockBackgroundPath");
    b.setAttribute("fill", this._fillColor);
    this._backgroundPath = b;
    this.pathGroup.insertBefore(b, this._path);
  };
  c._removeBackgroundPath = function() {
    this._backgroundPath && $(this._backgroundPath).remove();
    this._backgroundPath = null;
  };
  c._getTemplate = function(b) {
    var c = this._schema, c = c.template ? c.template : Lang.template[this.block.type], e, f = this.getBoard();
    if (b === Entry.BlockView.RENDER_MODE_TEXT) {
      var g, h = f.workspace;
      h && h.vimBoard ? g = h.vimBoard.getBlockSyntax(this) : f.getBlockSyntax && (g = f.getBlockSyntax(this, b));
      g && (e = "string" === typeof g ? g : g.template);
    }
    return e || c;
  };
  c._getSchemaParams = function(b) {
    var c = this._schema.params;
    b === Entry.BlockView.RENDER_MODE_TEXT && (b = this.getBoard().workspace) && b.vimBoard && (b = b.vimBoard.getBlockSyntax(this)) && b.textParams && (c = b.textParams);
    return c;
  };
  c.detach = function() {
    this.svgGroup.remove();
  };
  c.attach = function(b) {
    (b || this._board.svgBlockGroup).appendChild(this.svgGroup);
  };
  c.getMagnet = function(b) {
    var c = b.shift() || "next", e = b.shift();
    void 0 === e && (e = 20);
    return {getBoundingClientRect:function() {
      var b = this.getAbsoluteCoordinate(), d = this._board.relativeOffset, h = this.magnet[c];
      return {top:b.y + d.top + h.y - e, left:b.x + d.left + h.x - e, width:2 * e, height:2 * e};
    }.bind(this)};
  };
  c.isRenderMode = function(b) {
    return this.renderMode === b;
  };
})(Entry.BlockView.prototype);
Entry.Field = function() {
};
(function(c) {
  c.TEXT_LIMIT_LENGTH = 20;
  c.destroy = function() {
    var b = this.svgGroup;
    b && (b._isBinded = !1, $(b).off(".fieldBindEvent"));
    this.destroyOption(!0);
  };
  c.command = function(b) {
    this._blockView.isInBlockMenu || void 0 === this._startValue || !b && this._startValue === this.getValue() || (Entry.do("setFieldValue", this.pointer(), this._nextValue || this.getValue(), this._code), delete this._nextValue, delete this._code);
    delete this._startValue;
  };
  c.destroyOption = function(b, c) {
    this.isEditing() && Entry.Utils.blur();
    this.documentDownEvent && (Entry.documentMousedown.detach(this.documentDownEvent), delete this.documentDownEvent);
    this.disposeEvent && (Entry.disposeEvent.detach(this.disposeEvent), delete this.documentDownEvent);
    this.optionGroup && (this.optionGroup.remove(), delete this.optionGroup);
    this._isEditing = !1;
    !0 !== b && this.command(c);
  };
  c._attachDisposeEvent = function(b) {
    var c = this;
    b = b || function(b) {
      c.destroyOption(b);
    };
    c.disposeEvent = Entry.disposeEvent.attach(c, b);
  };
  c.align = function(b, c, e) {
    var d = this.svgGroup;
    this._position && (this._position.x && (b = this._position.x), this._position.y && (c = this._position.y));
    var g = "translate(" + b + "," + c + ")";
    void 0 === e || e ? d.animate({transform:g}, 300, mina.easeinout) : d.attr({transform:g});
    this.box.set({x:b, y:c});
  };
  c.getAbsolutePosFromBoard = function() {
    var b = this._block.view, c = b.getContentPos(), b = b.getAbsoluteCoordinate();
    return {x:b.x + this.box.x + c.x, y:b.y + this.box.y + c.y};
  };
  c.getAbsolutePosFromDocument = function() {
    var b = this._block.view, c = b.getContentPos(), e = b.getAbsoluteCoordinate(), b = b.getBoard().svgDom.offset();
    return {x:e.x + this.box.x + c.x + b.left, y:e.y + this.box.y + c.y + b.top - $(window).scrollTop()};
  };
  c.getRelativePos = function() {
    var b = this._block.view.getContentPos(), c = this.box;
    return {x:c.x + b.x, y:c.y + b.y};
  };
  c.truncate = function() {
    var b = String(this._convert(this.getValue())), c = this.TEXT_LIMIT_LENGTH, e = b.substring(0, c);
    b.length > c && (e += "...");
    return e;
  };
  c.appendSvgOptionGroup = function() {
    return this._block.view.getBoard().svgGroup.elem("g");
  };
  c.getValue = function() {
    var b = this._block.params[this._index];
    if (this._contents && this._contents.reference && this._contents.reference.length) {
      var c = this._contents.reference.concat();
      "%" === c[0][0] && (b = this._block.params[parseInt(c.shift().substr(1)) - 1]);
      return b ? b.getDataByPointer(c) : b;
    }
    return b;
  };
  c.setValue = function(b, c) {
    if (this.value != b) {
      this.value = b;
      if (this._contents && this._contents.reference && this._contents.reference.length) {
        var d = this._contents.reference.concat(), f = d.pop(), g = this._block.params[this._index];
        d.length && "%" === d[0][0] && (g = this._block.params[parseInt(d.shift().substr(1)) - 1]);
        d.length && (g = g.getDataByPointer(d));
        g.params[f] = b;
      } else {
        this._block.params[this._index] = b;
      }
      c && this._blockView.reDraw();
    }
  };
  c._isEditable = function() {
    if (Entry.ContextMenu.visible || this._blockView.getBoard().readOnly || this._block.view.dragMode == Entry.DRAG_MODE_DRAG) {
      return !1;
    }
    var b = this._block.view, c = b.getBoard();
    if (!0 === c.disableMouseEvent) {
      return !1;
    }
    var e = c.workspace.selectedBlockView;
    if (!e || c != e.getBoard()) {
      return !1;
    }
    c = b.getSvgRoot();
    return c == e.svgGroup || $(c).has($(b.svgGroup));
  };
  c._selectBlockView = function() {
    var b = this._block.view;
    b.getBoard().setSelectedBlock(b);
  };
  c._bindRenderOptions = function() {
    if (!this.svgGroup._isBinded) {
      var b = this;
      this.svgGroup._isBinded = !0;
      $(this.svgGroup).on("mouseup.fieldBindEvent touchend.fieldBindEvent", function(c) {
        b._isEditable() && (b._code = b.getCode(), b.destroyOption(), b._startValue = b.getValue(), b.renderOptions(), b._isEditing = !0);
      });
    }
  };
  c.pointer = function(b) {
    b = b || [];
    b.unshift(this._index);
    b.unshift(Entry.PARAM);
    return this._block.pointer(b);
  };
  c.getFontSize = function(b) {
    return b || this._blockView.getSkeleton().fontSize || 12;
  };
  c.getContentHeight = function() {
    return Entry.isMobile() ? 22 : 16;
  };
  c._getRenderMode = function() {
    var b = this._blockView.renderMode;
    return void 0 !== b ? b : Entry.BlockView.RENDER_MODE_BLOCK;
  };
  c._convert = function(b, c) {
    c = void 0 !== c ? c : this.getValue();
    var d = /&value/gm;
    return d.test(c) ? c.replace(d, "") : this._contents.converter ? this._contents.converter(b, c) : b;
  };
  c._updateOptions = function() {
    var b = Entry.block[this._blockView.type];
    if (b) {
      var b = b.syntax, c;
      for (c in b) {
        var e = b[c];
        e && 0 !== e.length && (e = e[0].textParams) && (e[this._index].options = this._contents.options);
      }
    }
  };
  c._shouldReturnValue = function(b) {
    var c = this._block.getCode().object;
    return "?" === b || !c || c.constructor !== Entry.EntryObject;
  };
  c.isEditing = function(b) {
    return !!this._isEditing;
  };
  c.getDom = function(b) {
    return b.length && "option" === b.shift() ? this.optionGroup : this.svgGroup;
  };
  c.optionDomCreated = function() {
    this._blockView.getBoard().workspace.widgetUpdateEvent.notify();
  };
  c.fixNextValue = function(b) {
    this._nextValue = b;
  };
  c.getFieldRawType = function() {
    if (this instanceof Entry.FieldTextInput) {
      return "textInput";
    }
    if (this instanceof Entry.FieldDropdown) {
      return "dropdown";
    }
    if (this instanceof Entry.FieldDropdownDynamic) {
      return "dropdownDynamic";
    }
    if (this instanceof Entry.FieldKeyboard) {
      return "keyboard";
    }
  };
  c.getTextValueByValue = function(b) {
    switch(this.getFieldRawType()) {
      case "keyboard":
        return Entry.getKeyCodeMap()[b];
      case "dropdown":
      case "dropdownDynamic":
        for (var c = this._contents.options, e = 0; e < c.length; e++) {
          var f = c[e];
          if (f[1] === b) {
            return f[0];
          }
        }
        break;
      case "textInput":
        return b;
    }
  };
  c.getBoard = function() {
    var b = this._blockView;
    return b && b.getBoard();
  };
  c.getCode = function() {
    var b = this.getBoard();
    return b && b.code;
  };
  c.getTextValue = function() {
    return this.getValue();
  };
  c.getTextBBox = function() {
    var b = {}, c, e = Entry.Utils.debounce(function() {
      c && $(c).empty();
    }, 500);
    return function() {
      window.fontLoaded && !c && (c = Entry.Dom($('<svg id="invisibleBoard" class="entryBoard" width="1px" height="1px"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:$("body")}));
      var d = this.getTextValue();
      if (!d) {
        return {width:0, height:0};
      }
      var g = this._font_size || "", d = d + "&&" + g, h = b[d];
      if (h) {
        return h;
      }
      h = this.textElement;
      c && (h = h.cloneNode(!0), c.append(h));
      h = h.getBoundingClientRect();
      e();
      h = {width:Math.round(100 * h.width) / 100, height:Math.round(100 * h.height) / 100};
      g && window.fontLoaded && h.width && h.height && (b[d] = h);
      return h;
    };
  }();
})(Entry.Field.prototype);
Entry.FieldBlock = function(c, b, d, e, f) {
  Entry.Model(this, !1);
  this._blockView = b;
  this._block = b.block;
  this._oldPrimitiveValue = this._valueBlock = null;
  this.box = new Entry.BoxModel;
  this.changeEvent = new Entry.Event(this);
  this._index = d;
  this.contentIndex = f;
  this._content = c;
  this.acceptType = c.accept;
  this._restoreCurrent = c.restore;
  this.view = this;
  this.svgGroup = null;
  this._position = c.position;
  this.observe(this, "_updateBG", ["magneting"], !1);
  this.renderStart(b.getBoard(), e);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldBlock);
(function(c) {
  c.schema = {magneting:!1};
  c.renderStart = function(b, c, e, f) {
    this.svgGroup || (this.svgGroup = this._blockView.contentSvgGroup.elem("g"));
    this.renderMode = void 0 !== c ? c : this._blockView.renderMode;
    this.view = this;
    this._nextGroup = this.svgGroup;
    if (c = this.getValue()) {
      c.constructor !== Entry.Block && (c = new Entry.Block(c, this._block.thread)), c.view || (c.setThread(this), c.createView(b, this.renderMode), this.view.setParent(this));
    }
    this.updateValueBlock(c);
    this._valueBlock.view.renderByMode(this.renderMode, f);
    this._blockView.getBoard().constructor !== Entry.Board && this._valueBlock.view.removeControl();
    this.box.observe(this._blockView, "dAlignContent", ["width", "height"], !1);
  };
  c.align = function(b, c, e) {
    var d = this.svgGroup;
    this._position && (this._position.x && (b = this._position.x), this._position.y && (c = this._position.y));
    var g = this._valueBlock;
    g && g.view && (c = -0.5 * g.view.height);
    g = "translate(" + b + "," + c + ")";
    void 0 === e || e ? d.animate({transform:g}, 300, mina.easeinout) : d.attr({transform:g});
    b = Math.round(100 * b) / 100;
    c = Math.round(100 * c) / 100;
    e = this.box;
    if (e.x !== b || e.y !== c) {
      d = e.y, e.x === b && d === c || e.set({x:b, y:c});
    }
  };
  c.calcWH = function() {
    var b = this._valueBlock, c = this.box, e = c.width, f = c.height, g;
    (g = b && b.view) ? (b = g.width, g = g.height) : (b = 15, g = 20);
    b !== e && c.set({width:b});
    g !== f && c.set({height:g});
  };
  c.calcHeight = c.calcWH;
  c.destroy = function() {
    this._valueBlock && this._valueBlock.destroyView();
  };
  c.inspectBlock = function() {
    var b = null;
    if (this._originBlock) {
      b = this._originBlock.type, delete this._originBlock;
    } else {
      switch(this.acceptType.toLowerCase()) {
        case "boolean":
          b = "True";
          break;
        case "string":
          b = "text";
          break;
        case "param":
          b = "function_field_label";
      }
    }
    return this._createBlockByType(b);
  };
  c._setValueBlock = function(b) {
    this._restoreCurrent && (this._originBlock = this._valueBlock);
    b || (b = this.inspectBlock());
    this._valueBlock = b;
    this.setValue(b);
    b.setThread(this);
    this.view.setParent(this);
    return this._valueBlock;
  };
  c.getValueBlock = function() {
    return this._valueBlock;
  };
  c.updateValueBlock = function(b) {
    b instanceof Entry.Block || (b = void 0);
    b && b === this._valueBlock ? this.calcWH() : (this._destroyObservers(), b = this._setValueBlock(b).view, b.bindPrev(this), this._blockView.alignContent(), this._posObserver = b.observe(this, "updateValueBlock", ["x", "y"], !1), this._sizeObserver = b.observe(this, "calcWH", ["width", "height"]));
  };
  c._destroyObservers = function() {
    this._sizeObserver && this._sizeObserver.destroy();
    this._posObserver && this._posObserver.destroy();
  };
  c.getPrevBlock = function(b) {
    return this._valueBlock === b ? this : null;
  };
  c.getNextBlock = function() {
    return null;
  };
  c.requestAbsoluteCoordinate = function(b) {
    b = this._blockView;
    var c = b.contentPos;
    b = b.getAbsoluteCoordinate();
    b.x += this.box.x + c.x;
    b.y += this.box.y + c.y;
    return b;
  };
  c.dominate = function() {
    this._blockView.dominate();
  };
  c.isGlobal = function() {
    return !1;
  };
  c.separate = function(b) {
    this.getCode().createThread([b]);
    this.calcWH();
    this.changeEvent.notify();
  };
  c.getCode = function() {
    return this._block.thread.getCode();
  };
  c.cut = function(b) {
    return this._valueBlock === b ? [b] : null;
  };
  c.replace = function(b) {
    "string" === typeof b && (b = this._createBlockByType(b));
    var c = this._valueBlock;
    Entry.block[c.type].isPrimitive ? (c.doNotSplice = !0, this._oldPrimitiveValue = c.getParam(0), c.destroy()) : "param" === this.acceptType ? (this._destroyObservers(), c.view._toGlobalCoordinate(), b.getTerminateOutputBlock().view._contents[1].replace(c)) : (this._destroyObservers(), c.view._toGlobalCoordinate(), Entry.do("separateBlockByCommand", c).isPass(!0), c.view.bumpAway(30, 150));
    this.updateValueBlock(b);
    b.view._toLocalCoordinate(this.svgGroup);
    this.calcWH();
    this.changeEvent.notify();
  };
  c.setParent = function(b) {
    this._parent = b;
  };
  c.getParent = function() {
    return this._parent;
  };
  c._createBlockByType = function(b) {
    this._block.getThread();
    var c = this._blockView.getBoard();
    if (c.workspace) {
      var e = c.workspace.selectedBlockView;
      e = !(!e || !e.dragInstance);
    }
    b = new Entry.Block({type:b, params:[e ? void 0 : this._oldPrimitiveValue]}, this);
    b.createView(c, this.renderMode);
    delete this._oldPrimitiveValue;
    return b;
  };
  c.spliceBlock = function() {
    this.updateValueBlock();
  };
  c._updateBG = function() {
    this.magneting ? this._bg = this.svgGroup.elem("path", {d:"m 8,12 l -4,0 -2,-2 0,-3 3,0 1,-1 0,-12 -1,-1 -3,0 0,-3 2,-2 l 4,0 z", fill:"#fff", stroke:"#fff", "fill-opacity":0.7, transform:"translate(0,12)"}) : this._bg && (this._bg.remove(), delete this._bg);
  };
  c.getThread = function() {
    return this;
  };
  c.pointer = function(b) {
    b = b || [];
    b.unshift(this._index);
    b.unshift(Entry.PARAM);
    return this._block.pointer(b);
  };
  c.isParamBlockType = function() {
    return !0;
  };
})(Entry.FieldBlock.prototype);
Entry.Scroller = function(c, b, d) {
  this._horizontal = void 0 === b ? !0 : b;
  this._vertical = void 0 === d ? !0 : d;
  this.board = c;
  this.svgGroup = null;
  this.vRatio = this.vY = this.vWidth = this.hRatio = this.hX = this.hWidth = 0;
  this._visible = !0;
  this._opacity = -1;
  this.createScrollBar();
  this.setOpacity(0);
  this._bindEvent();
  this._scrollCommand = _.debounce(Entry.do, 200);
};
Entry.Scroller.RADIUS = 7;
(function(c) {
  c.createScrollBar = function() {
    var b = Entry.Scroller.RADIUS, c = this;
    this.svgGroup = this.board.svg.elem("g").attr({class:"boardScrollbar"});
    this._horizontal && (this.hScrollbar = this.svgGroup.elem("rect", {height:2 * b, rx:b, ry:b}), this.hScrollbar.mousedown = function(b) {
      function d(b) {
        b.stopPropagation();
        b.preventDefault();
        b.originalEvent.touches && (b = b.originalEvent.touches[0]);
        var d = c.dragInstance;
        c.scroll((b.pageX - d.offsetX) / c.hRatio, 0);
        d.set({offsetX:b.pageX, offsetY:b.pageY});
      }
      function e(b) {
        $(document).unbind(".scroll");
        delete c.dragInstance;
      }
      if (0 === b.button || b instanceof Touch) {
        Entry.documentMousedown && Entry.documentMousedown.notify(b);
        var h = $(document);
        h.bind("mousemove.scroll", d);
        h.bind("mouseup.scroll", e);
        h.bind("touchmove.scroll", d);
        h.bind("touchend.scroll", e);
        c.dragInstance = new Entry.DragInstance({startX:b.pageX, startY:b.pageY, offsetX:b.pageX, offsetY:b.pageY});
      }
      b.stopPropagation();
    });
    this._vertical && (this.vScrollbar = this.svgGroup.elem("rect", {width:2 * b, rx:b, ry:b}), this.vScrollbar.mousedown = function(b) {
      function d(b) {
        b.stopPropagation();
        b.preventDefault();
        b.originalEvent.touches && (b = b.originalEvent.touches[0]);
        var d = c.dragInstance;
        c.scroll(0, (b.pageY - d.offsetY) / c.vRatio);
        d.set({offsetX:b.pageX, offsetY:b.pageY});
      }
      function e(b) {
        $(document).unbind(".scroll");
        delete c.dragInstance;
      }
      if (0 === b.button || b instanceof Touch) {
        Entry.documentMousedown && Entry.documentMousedown.notify(b);
        var h = $(document);
        h.bind("mousemove.scroll", d);
        h.bind("mouseup.scroll", e);
        h.bind("touchmove.scroll", d);
        h.bind("touchend.scroll", e);
        c.dragInstance = new Entry.DragInstance({startX:b.pageX, startY:b.pageY, offsetX:b.pageX, offsetY:b.pageY});
      }
      b.stopPropagation();
    });
  };
  c.updateScrollBar = function(b, c) {
    this._horizontal && (this.hX += b * this.hRatio, this.hScrollbar.attr({x:this.hX}));
    this._vertical && (this.vY += c * this.vRatio, this.vScrollbar.attr({y:this.vY}));
  };
  c.scroll = function(b, c, e) {
    if (this.board.code) {
      var d = this.board, g = d.getSvgDomRect(), d = d.svgBlockGroup.getBoundingClientRect(), h = d.left - this.board.offset().left, k = d.top - this.board.offset().top, l = d.height;
      b = Math.max(-d.width + Entry.BOARD_PADDING - h, b);
      c = Math.max(-l + Entry.BOARD_PADDING - k, c);
      c = Math.min(g.height - Entry.BOARD_PADDING - k, c);
      this._scroll(b, c);
      !0 !== e && (this._diffs || (this._diffs = [0, 0]), this._diffs[0] += b, this._diffs[1] += c, this._scrollCommand("scrollBoard", this._diffs[0], this._diffs[1], !0));
    }
  };
  c._scroll = function(b, c) {
    this.board.code.moveBy(b, c);
    this.updateScrollBar(b, c);
  };
  c.setVisible = function(b) {
    b != this.isVisible() && (this._visible = b, this.svgGroup.attr({display:!0 === b ? "block" : "none"}));
  };
  c.isVisible = function() {
    return this._visible;
  };
  c.setOpacity = function(b) {
    this._opacity != b && (this.hScrollbar.attr({opacity:b}), this.vScrollbar.attr({opacity:b}), this._opacity = b);
  };
  c.resizeScrollBar = function() {
    if (this._visible) {
      var b = this.board, c = b.offset(), e = b.getSvgDomRect(), f = b.svgBlockGroup.getBoundingClientRect(), b = e.width, e = e.height, g = f.left - c.left, c = f.top - c.top, h = f.width, f = f.height;
      if (this._horizontal) {
        var k = -h + Entry.BOARD_PADDING, l = b - Entry.BOARD_PADDING, h = (b + 2 * Entry.Scroller.RADIUS) * h / (l - k + h);
        Entry.Utils.isNumber(h) || (h = 0);
        this.hX = (g - k) / (l - k) * (b - h - 2 * Entry.Scroller.RADIUS);
        this.hScrollbar.attr({width:h, x:this.hX, y:e - 2 * Entry.Scroller.RADIUS});
        this.hRatio = (b - h - 2 * Entry.Scroller.RADIUS) / (l - k);
      }
      this._vertical && (g = -f + Entry.BOARD_PADDING, h = e - Entry.BOARD_PADDING, f = (e + 2 * Entry.Scroller.RADIUS) * f / (h - g + f), this.vY = (c - g) / (h - g) * (e - f - 2 * Entry.Scroller.RADIUS), this.vScrollbar.attr({height:f, y:this.vY, x:b - 2 * Entry.Scroller.RADIUS}), this.vRatio = (e - f - 2 * Entry.Scroller.RADIUS) / (h - g));
    }
  };
  c._bindEvent = function() {
    var b = _.debounce(this.resizeScrollBar, 250);
    this.board.changeEvent.attach(this, b);
    Entry.windowResized && Entry.windowResized.attach(this, b);
  };
})(Entry.Scroller.prototype);
Entry.Board = function(c) {
  Entry.Model(this, !1);
  this.readOnly = void 0 === c.readOnly ? !1 : c.readOnly;
  this.changeEvent = new Entry.Event(this);
  this.createView(c);
  this.updateOffset();
  this.scroller = new Entry.Scroller(this, !0, !0);
  this._magnetMap = {};
  Entry.ANIMATION_DURATION = 200;
  Entry.BOARD_PADDING = 100;
  this._initContextOptions();
  Entry.Utils.disableContextmenu(this.svgDom);
  this._addControl();
  this._bindEvent();
  Entry.addEventListener("fontLoaded", this.reDraw.bind(this));
};
Entry.Board.OPTION_PASTE = 0;
Entry.Board.OPTION_ALIGN = 1;
Entry.Board.OPTION_CLEAR = 2;
Entry.Board.OPTION_DOWNLOAD = 3;
Entry.Board.DRAG_RADIUS = 5;
(function(c) {
  c.schema = {code:null, dragBlock:null, magnetedBlockView:null, selectedBlockView:null};
  c.createView = function(b) {
    var c = b.dom, c = "string" === typeof c ? $("#" + c) : $(c);
    if ("DIV" !== c.prop("tagName")) {
      return console.error("Dom is not div element");
    }
    this.view = c;
    this._svgId = "play" + (new Date).getTime();
    this.workspace = b.workspace;
    this._activatedBlockView = null;
    this.wrapper = Entry.Dom("div", {parent:c, class:"entryBoardWrapper"});
    this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="entryBoard" width="100%" height="100%"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:this.wrapper});
    this.visible = !0;
    var e = this;
    this.svg = Entry.SVG(this._svgId);
    $(window).scroll(function() {
      e.updateOffset();
    });
    this.svgGroup = this.svg.elem("g");
    this.svgThreadGroup = this.svgGroup.elem("g");
    this.svgThreadGroup.board = this;
    this.svgBlockGroup = this.svgGroup.elem("g");
    this.svgBlockGroup.board = this;
    b.isOverlay ? (this.wrapper.addClass("entryOverlayBoard"), this.generateButtons(), this.suffix = "overlayBoard") : this.suffix = "board";
    Entry.Utils.addFilters(this.svg, this.suffix);
    this.pattern = Entry.Utils.addBlockPattern(this.svg, this.suffix).pattern;
  };
  c.changeCode = function(b, c, e) {
    this.code && this.codeListener && this.code.changeEvent.detach(this.codeListener);
    this.set({code:b});
    var d = this;
    b && !c && (this.codeListener = this.code.changeEvent.attach(this, function() {
      d.changeEvent.notify();
    }), this.svgBlockGroup.remove(), this.svgThreadGroup.remove(), b.createView(this), b.isAllThreadsInOrigin() && this.alignThreads(), e && e());
    this.scroller.resizeScrollBar();
  };
  c.bindCodeView = function(b) {
    this.svgBlockGroup.remove();
    this.svgThreadGroup.remove();
    this.svgBlockGroup = b.svgBlockGroup;
    this.svgThreadGroup = b.svgThreadGroup;
    this.svgGroup.appendChild(this.svgThreadGroup);
    this.svgGroup.appendChild(this.svgBlockGroup);
  };
  c.setMagnetedBlock = function(b, c) {
    this.magnetedBlockView !== b && (this.magnetedBlockView && this.magnetedBlockView.set({magneting:!1}), this.set({magnetedBlockView:b}), b && (b.set({magneting:c}), b.dominate()));
  };
  c.getCode = function() {
    return this.code;
  };
  c.findById = function(b) {
    return this.code.findById(b);
  };
  c._addControl = function() {
    var b = this.svgDom, c = this;
    b.mousedown(function() {
      c.onMouseDown.apply(c, arguments);
    });
    b.bind("touchstart", function() {
      c.onMouseDown.apply(c, arguments);
    });
    b.on("wheel", function() {
      c.mouseWheel.apply(c, arguments);
    });
    var e = c.scroller;
    e && (b.mouseenter(function(b) {
      e.setOpacity(1);
    }), b.mouseleave(function(b) {
      e.setOpacity(0);
    }));
  };
  c.removeControl = function(b) {
    this.svgDom.off(b);
  };
  c.onMouseDown = function(b) {
    function c(b) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
      b = Entry.Utils.convertMouseEvent(b);
      var c = f.mouseDownCoordinate;
      Math.sqrt(Math.pow(b.pageX - c.x, 2) + Math.pow(b.pageY - c.y, 2)) < Entry.Board.DRAG_RADIUS || (g && (clearTimeout(g), g = null), c = f.dragInstance, f.scroller.scroll(b.pageX - c.offsetX, b.pageY - c.offsetY), c.set({offsetX:b.pageX, offsetY:b.pageY}));
    }
    function e(b) {
      g && (clearTimeout(g), g = null);
      $(document).unbind(".entryBoard");
      delete f.mouseDownCoordinate;
      delete f.dragInstance;
    }
    if (this.workspace.getMode() != Entry.Workspace.MODE_VIMBOARD) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
      var f = this, g = null;
      if (0 === b.button || b.originalEvent && b.originalEvent.touches) {
        var h = b.type, k = Entry.Utils.convertMouseEvent(b);
        Entry.documentMousedown && Entry.documentMousedown.notify(k);
        var l = $(document);
        this.mouseDownCoordinate = {x:k.pageX, y:k.pageY};
        l.bind("mousemove.entryBoard", c);
        l.bind("mouseup.entryBoard", e);
        l.bind("touchmove.entryBoard", c);
        l.bind("touchend.entryBoard", e);
        this.dragInstance = new Entry.DragInstance({startX:k.pageX, startY:k.pageY, offsetX:k.pageX, offsetY:k.pageY});
        "touchstart" === h && (g = setTimeout(function() {
          g && (g = null, e(), f._rightClick(b));
        }, 1000));
      } else {
        Entry.Utils.isRightButton(b) && this._rightClick(b);
      }
    }
  };
  c.mouseWheel = function(b) {
    b = b.originalEvent;
    b.preventDefault();
    var c = Entry.disposeEvent;
    c && c.notify(b);
    this.scroller.scroll(b.wheelDeltaX || -b.deltaX, b.wheelDeltaY || -b.deltaY);
  };
  c.setSelectedBlock = function(b) {
    var c = this.selectedBlockView;
    c && c.removeSelected();
    b instanceof Entry.BlockView ? b.addSelected() : b = null;
    this.set({selectedBlockView:b});
  };
  c.hide = function() {
    this.wrapper.addClass("entryRemove");
    this.visible = !1;
  };
  c.show = function() {
    this.wrapper.removeClass("entryRemove");
    this.visible = !0;
  };
  c.alignThreads = function(b) {
    for (var c = this.svgDom.height(), e = this.code.getThreads(), f = 15, g = 0, c = c - 30, h = 50, k = 0; k < e.length; k++) {
      var l = e[k], m = l.getFirstBlock();
      if (m && (b && l.view.reDraw(), l = m.view, l.movable)) {
        var m = l.svgGroup.getBBox(), q = f + 15;
        q > c && (h = h + g + 10, g = 0, f = 15);
        g = Math.max(g, m.width);
        q = f + 15;
        l._moveTo(h - m.x, q, !1);
        f = f + m.height + 15;
      }
    }
    this.scroller.resizeScrollBar();
  };
  c.clear = function() {
    this.svgBlockGroup.remove();
    this.svgThreadGroup.remove();
  };
  c.updateOffset = function() {
    this._offset = this.svg.getBoundingClientRect();
    var b = $(window), c = b.scrollTop(), e = b.scrollLeft(), b = this._offset;
    this.relativeOffset = {top:b.top - c, left:b.left - e};
    if (c = this.svgDom) {
      this._svgDomRect = {width:c.width(), height:c.height()};
    }
    this.btnWrapper && this.btnWrapper.attr({transform:"translate(" + (b.width / 2 - 65) + "," + (b.height - 200) + ")"});
  };
  c.generateButtons = function() {
    var b = this, c = this.svgGroup.elem("g");
    this.btnWrapper = c;
    var e = c.elem("text", {x:27, y:33, class:"entryFunctionButtonText"});
    e.textContent = Lang.Buttons.save;
    var f = c.elem("text", {x:102.5, y:33, class:"entryFunctionButtonText"});
    f.textContent = Lang.Buttons.cancel;
    var g = c.elem("circle", {cx:27.5, cy:27.5, r:27.5, class:"entryFunctionButton"}), c = c.elem("circle", {cx:102.5, cy:27.5, r:27.5, class:"entryFunctionButton"});
    $(g).bind("mousedown touchstart", function() {
      b.save();
    });
    $(e).bind("mousedown touchstart", function() {
      b.save();
    });
    $(c).bind("mousedown touchstart", function() {
      b.cancelEdit();
    });
    $(f).bind("mousedown touchstart", function() {
      b.cancelEdit();
    });
  };
  c.cancelEdit = function() {
    this.workspace.setMode(Entry.Workspace.MODE_BOARD, "cancelEdit");
  };
  c.save = function() {
    var b = {};
    b.boardType = Entry.Workspace.MODE_BOARD;
    this.workspace.setMode(b, "save");
  };
  c.generateCodeMagnetMap = function() {
    var b = this.code, c = this.dragBlock;
    if (b && c) {
      this._magnetMap = {};
      for (var e in c.magnet) {
        if ("next" !== e || void 0 !== c.block.getLastBlock().view.magnet.next) {
          var f = this._getCodeBlocks(b, e);
          f.sort(function(b, c) {
            return b.point - c.point;
          });
          f.unshift({point:-Number.MAX_VALUE, blocks:[]});
          for (var g = 1; g < f.length; g++) {
            var h = f[g], k = h, l = h.startBlock;
            if (l) {
              for (var m = h.endPoint, q = g; m > k.point && (k.blocks.push(l), q++, k = f[q], k);) {
              }
              delete h.startBlock;
            }
            h.endPoint = Number.MAX_VALUE;
            f[g - 1].endPoint = h.point;
          }
          this._magnetMap[e] = f;
        }
      }
    }
  };
  c._getCodeBlocks = function(b, c) {
    b = b.getThreads();
    var d = [];
    switch(c) {
      case "previous":
        var f = this._getNextMagnets;
        break;
      case "next":
        f = this._getPreviousMagnets;
        break;
      case "string":
      case "boolean":
        f = this._getFieldMagnets;
        break;
      case "param":
        f = this._getOutputMagnets;
        break;
      default:
        return [];
    }
    for (var g = 0; g < b.length; g++) {
      var h = b[g], d = d.concat(f.call(this, h, h.view.zIndex, null, c));
    }
    return d;
  };
  c._getNextMagnets = function(b, c, e, f) {
    var d = b.getBlocks(), h = [], k = [];
    e || (e = {x:0, y:0});
    var l = e.x;
    e = e.y;
    for (var m = 0; m < d.length; m++) {
      var q = d[m], n = q.view;
      n.zIndex = c;
      if (n.dragInstance) {
        break;
      }
      e += n.y;
      l += n.x;
      b = e + 1;
      n.magnet.next && (b += n.height, k.push({point:e, endPoint:b, startBlock:q, blocks:[]}), k.push({point:b, blocks:[]}), n.absX = l);
      q.statements && (c += 0.01);
      for (var r = 0; r < q.statements.length; r++) {
        b = q.statements[r];
        var t = q.view._statements[r];
        t.zIndex = c;
        t.absX = l + t.x;
        k.push({point:t.y + e - 30, endPoint:t.y + e, startBlock:t, blocks:[]});
        k.push({point:t.y + e + t.height, blocks:[]});
        c += 0.01;
        h = h.concat(this._getNextMagnets(b, c, {x:t.x + l, y:t.y + e}, f));
      }
      n.magnet.next && (e += n.magnet.next.y, l += n.magnet.next.x);
    }
    return h.concat(k);
  };
  c._getPreviousMagnets = function(b, c, e, f) {
    var d = b.getBlocks();
    b = [];
    e || (e = {x:0, y:0});
    f = e.x;
    e = e.y;
    var d = d[0], h = d.view;
    h.zIndex = c;
    if (h.dragInstance) {
      return [];
    }
    e += h.y - 15;
    f += h.x;
    return h.magnet.previous ? (c = e + 1 + h.height, b.push({point:e, endPoint:c, startBlock:d, blocks:[]}), b.push({point:c, blocks:[]}), h.absX = f, b) : [];
  };
  c._getFieldMagnets = function(b, c, e, f) {
    var d = b.getBlocks(), h = [], k = [];
    e || (e = {x:0, y:0});
    var l = e.x;
    e = e.y;
    for (var m = 0; m < d.length; m++) {
      var q = d[m], n = q.view;
      if (n.dragInstance) {
        break;
      }
      n.zIndex = c;
      e += n.y;
      l += n.x;
      k = k.concat(this._getFieldBlockMetaData(n, l, e, c, f));
      q.statements && (c += 0.01);
      for (var r = 0; r < q.statements.length; r++) {
        b = q.statements[r];
        var t = q.view._statements[r], h = h.concat(this._getFieldMagnets(b, c, {x:t.x + l, y:t.y + e}, f));
      }
      n.magnet.next && (e += n.magnet.next.y, l += n.magnet.next.x);
    }
    return h.concat(k);
  };
  c._getFieldBlockMetaData = function(b, c, e, f, g) {
    var d = b._contents, k = [];
    e += b.contentPos.y;
    for (var l = 0; l < d.length; l++) {
      var m = d[l];
      if (m instanceof Entry.FieldBlock) {
        var q = m._valueBlock;
        if (!q.view.dragInstance && (m.acceptType === g || "boolean" === m.acceptType)) {
          var n = c + m.box.x, r = e + m.box.y + b.contentHeight % 1000 * -0.5, t = e + m.box.y + m.box.height;
          m.acceptType === g && (k.push({point:r, endPoint:t, startBlock:q, blocks:[]}), k.push({point:t, blocks:[]}));
          m = q.view;
          m.absX = n;
          m.zIndex = f;
          k = k.concat(this._getFieldBlockMetaData(m, n + m.contentPos.x, r + m.contentPos.y, f + 0.01, g));
        }
      }
    }
    return k;
  };
  c._getOutputMagnets = function(b, c, e, f) {
    var d = b.getBlocks(), h = [], k = [];
    e || (e = {x:0, y:0});
    var l = e.x;
    e = e.y;
    for (var m = 0; m < d.length; m++) {
      var q = d[m], n = q.view;
      if (n.dragInstance) {
        break;
      }
      n.zIndex = c;
      e += n.y;
      l += n.x;
      k = k.concat(this._getOutputMetaData(n, l, e, c, f));
      q.statements && (c += 0.01);
      for (var r = 0; r < q.statements.length; r++) {
        b = q.statements[r];
        var t = q.view._statements[r], h = h.concat(this._getOutputMagnets(b, c, {x:t.x + l, y:t.y + e}, f));
      }
      n.magnet.next && (e += n.magnet.next.y, l += n.magnet.next.x);
    }
    return h.concat(k);
  };
  c._getOutputMetaData = function(b, c, e, f, g) {
    var d = b._contents, k = [];
    c += b.contentPos.x;
    e += b.contentPos.y;
    for (b = 0; b < d.length; b++) {
      var l = d[b], m = c + l.box.x;
      var q = e - 24;
      var n = e;
      l instanceof Entry.FieldBlock ? (l.acceptType === g && (k.push({point:q, endPoint:n, startBlock:l, blocks:[]}), k.push({point:n, blocks:[]}), l.absX = m, l.zIndex = f, l.width = 20), (q = l._valueBlock) && (k = k.concat(this._getOutputMetaData(q.view, m, e + l.box.y, f + 0.01, g)))) : l instanceof Entry.FieldOutput && l.acceptType === g && (k.push({point:q, endPoint:n, startBlock:l, blocks:[]}), k.push({point:n, blocks:[]}), l.absX = m, l.zIndex = f, l.width = 20, (q = l._valueBlock) && (q.view.dragInstance || 
      (k = k.concat(this._getOutputMetaData(q.view, c + l.box.x, e + l.box.y, f + 0.01, g)))));
    }
    return k;
  };
  c.getNearestMagnet = function(b, c, e) {
    var d = this._magnetMap[e];
    if (d && 0 !== d.length) {
      var g = 0, h = d.length - 1, k = null, l = "previous" === e ? c - 15 : c;
      for (c = -1 < ["previous", "next"].indexOf(e) ? 20 : 0; g <= h;) {
        var m = (g + h) / 2 | 0;
        e = d[m];
        if (l < e.point) {
          h = m - 1;
        } else {
          if (l > e.endPoint) {
            g = m + 1;
          } else {
            d = e.blocks;
            for (g = 0; g < d.length; g++) {
              if (h = d[g].view, h.absX - c < b && b < h.absX + h.width && (h = e.blocks[g], !k || k.view.zIndex < h.view.zIndex)) {
                k = e.blocks[g];
              }
            }
            return k;
          }
        }
      }
      return null;
    }
  };
  c.dominate = function(b) {
    b && (b = b.getFirstBlock()) && (this.svgBlockGroup.appendChild(b.view.svgGroup), this.code.dominate(b.thread));
  };
  c.enablePattern = function() {
    this.pattern.removeAttribute("style");
  };
  c.disablePattern = function() {
    this.pattern.attr({style:"display: none"});
  };
  c._removeActivated = function() {
    this._activatedBlockView && (this._activatedBlockView.removeActivated(), this._activatedBlockView = null);
  };
  c.activateBlock = function(b) {
    b = b.view;
    var c = b.getAbsoluteCoordinate(), e = c.x, c = c.y, f = this.getSvgDomRect();
    this.scroller.scroll(f.width / 2 - e, f.height / 2 - c - 100);
    b.addActivated();
    this._activatedBlockView = b;
  };
  c.reDraw = function() {
    this.code && this.code.view && this.code.view.reDraw();
  };
  c.separate = function(b, c, e) {
    "string" === typeof b && (b = this.findById(b));
    b.view && b.view._toGlobalCoordinate();
    if ("output" === b.getBlockType()) {
      if (c) {
        for (var d = b.getPrevOutputBlock(), g = b, h = 0; h < c; h++) {
          g = g.getOutputBlock();
        }
        b.separate(c, e);
        d && g && (g.separate(), g.doInsert(d.view._contents[1]));
      }
    } else {
      h = b.getPrevBlock(), !h && b.thread instanceof Entry.Thread && b.thread.parent instanceof Entry.Code && (d = b.thread.getBlock(b.thread.indexOf(b) + c)) && (g = d.view.getAbsoluteCoordinate()), b.separate(c, e), h && h.getNextBlock() ? h.getNextBlock().view.bindPrev() : d && (d.view._toGlobalCoordinate(), d.moveTo(g.x, g.y));
    }
  };
  c.insert = function(b, c, e) {
    "string" === typeof b && (b = this.findById(b));
    if (3 === c.length) {
      this.separate(b, e, c[2]), b.moveTo(c[0], c[1]);
    } else {
      if (4 === c.length && -1 == c[3]) {
        c[3] = 0;
        var d = this.code.getByPointer(c);
        this.separate(b, e, c[2]);
        b = b.getLastBlock();
        d.view.bindPrev(b);
        d.doInsert(b);
      } else {
        this.separate(b, e), c = c instanceof Array ? this.code.getByPointer(c) : c, c instanceof Entry.Block ? ("basic" === b.getBlockType() && b.view.bindPrev(c), b.doInsert(c)) : c instanceof Entry.FieldStatement ? (b.view.bindPrev(c), c.insertTopBlock(b)) : c instanceof Entry.Thread ? (c = c.view.getParent(), b.view.bindPrev(c), c.insertTopBlock(b)) : b.doInsert(c);
      }
    }
  };
  c.adjustThreadsPosition = function() {
    var b = this.code;
    b && b.view && (b = b.getThreads()) && 0 !== b.length && (b = b.sort(function(b, c) {
      return b.getFirstBlock().view.x - c.getFirstBlock().view.x;
    }), b = b[0].getFirstBlock()) && (b = b.view, b = b.getAbsoluteCoordinate(), this.scroller.scroll(50 - b.x, 30 - b.y, !0));
  };
  c._initContextOptions = function() {
    var b = this;
    this._contextOptions = [{activated:!0, option:{text:Lang.Blocks.Paste_blocks, enable:!!Entry.clipboard && !this.readOnly, callback:function() {
      Entry.do("addThread", Entry.clipboard).value.getFirstBlock().copyToClipboard();
    }}}, {activated:!0, option:{text:Lang.Blocks.tidy_up_block, enable:!this.readOnly, callback:function() {
      b.alignThreads();
    }}}, {activated:!0, option:{text:Lang.Blocks.Clear_all_blocks, enable:!this.readOnly, callback:function() {
      Entry.do("destroyThreads");
    }}}, {activated:"workspace" === Entry.type && Entry.Utils.isChrome() && !Entry.isMobile(), option:{text:Lang.Menus.save_as_image_all, enable:!this.readOnly, callback:function() {
      var c = b.code.getThreads(), e = [];
      c.forEach(function(b, d) {
        if (b = b.getFirstBlock()) {
          console.log("threads.length=", c.length), 1 < c.length && Entry.isOffline ? b.view.getDataUrl().then(function(b) {
            e.push(b);
            e.length == c.length && Entry.dispatchEvent("saveBlockImages", {images:e});
          }) : b.view.downloadAsImage(++d);
        }
      });
    }}}];
  };
  c.activateContextOption = function(b) {
    this._contextOptions[b].activated = !0;
  };
  c.deActivateContextOption = function(b) {
    this._contextOptions[b].activated = !1;
  };
  c._bindEvent = function() {
    Entry.documentMousedown && (Entry.documentMousedown.attach(this, this.setSelectedBlock), Entry.documentMousedown.attach(this, this._removeActivated));
    Entry.windowResized && Entry.windowResized.attach(this, _.debounce(this.updateOffset, 200));
  };
  c.offset = function() {
    (!this._offset || 0 === this._offset.top && 0 === this._offset.left) && this.updateOffset();
    return this._offset;
  };
  c._rightClick = function(b) {
    var c = Entry.disposeEvent;
    c && c.notify(b);
    if (this.visible) {
      var c = [], e = this._contextOptions;
      e[Entry.Board.OPTION_PASTE].option.enable = !!Entry.clipboard;
      e[Entry.Board.OPTION_DOWNLOAD].option.enable = 0 !== this.code.getThreads().length;
      for (var f = 0; f < this._contextOptions.length; f++) {
        e[f].activated && c.push(e[f].option);
      }
      b = Entry.Utils.convertMouseEvent(b);
      Entry.ContextMenu.show(c, null, {x:b.clientX, y:b.clientY});
    }
  };
  c.getDom = function(b) {
    b = b.concat();
    var c = b.shift();
    if ("trashcan" === c) {
      return this.workspace.trashcan.svgGroup;
    }
    if ("coord" === c) {
      return {getBoundingClientRect:function() {
        var c = this.relativeOffset;
        return {top:b[1] + c.top - 20, left:b[0] + c.left - 20, width:40, height:40};
      }.bind(this)};
    }
    if (c instanceof Array) {
      return c = this.code.getByPointer(c), c.getDom ? c.getDom(b) : c.svgGroup;
    }
  };
  c.findBlock = function(b) {
    return "string" === typeof b ? this.findById(b) : b && b.id ? this.findById(b.id) || b : b instanceof Array ? this.code.getByPointer(b) : b;
  };
  c.scrollToPointer = function(b, c) {
    b = this.code.getByPointer(b);
    if (b instanceof Entry.Block) {
      var d = b.view.getAbsoluteCoordinate();
      b.view.dominate();
    } else {
      b instanceof Entry.Thread ? d = b.view.requestAbsoluteCoordinate() : b.getAbsolutePosFromBoard && (d = b.getAbsolutePosFromBoard());
    }
    c = b = 0;
    var f = this._offset, g = f.width, f = f.height;
    d.x > g - 200 ? b = g - 200 - d.x : 100 > d.x && (b = 100 - d.x);
    d.y > f - 200 ? c = f - 200 - d.y : 100 > d.y && (c = 100 - d.y);
    this.scroller.scroll(b, c, !0);
    return [b, c];
  };
  c.getSvgDomRect = function() {
    this._svgDomRect || this.updateOffset();
    return this._svgDomRect;
  };
})(Entry.Board.prototype);
Entry.Code = function(c, b) {
  Entry.Model(this, !1);
  b && (this.object = b);
  this._data = new Entry.Collection;
  this._eventMap = {};
  this._blockMap = {};
  this.executors = [];
  this.watchEvent = new Entry.Event(this);
  this.executeEndEvent = new Entry.Event(this);
  this.changeEvent = new Entry.Event(this);
  this.changeEvent.attach(this, this._handleChange);
  this._maxZIndex = 0;
  this.load(c);
};
Entry.STATEMENT = 0;
Entry.PARAM = -1;
(function(c) {
  c.schema = {view:null, board:null};
  c.load = function(b) {
    if (!Entry.engine || !Entry.engine.isState("run")) {
      b instanceof Array || (b = JSON.parse(b));
      this.clear();
      for (var c = 0; c < b.length; c++) {
        this._data.push(new Entry.Thread(b[c], this));
      }
      return this;
    }
  };
  c.clear = function(b) {
    b = void 0 === b ? !1 : b;
    for (var c = this._data.length - 1; 0 <= c; c--) {
      this._data[c].destroy(!1, b);
    }
    this.clearExecutors();
  };
  c.createView = function(b) {
    null === this.view ? this.set({view:new Entry.CodeView(this, b), board:b}) : (this.set({board:b}), b.bindCodeView(this.view));
  };
  c.destroyView = function() {
    this.view && (this.view.destroy(), this.set({view:null}));
  };
  c.recreateView = function() {
    this.view && (this.destroyView(), this.set({view:new Entry.CodeView(this, this.board), board:this.board}));
  };
  c.registerEvent = function(b, c) {
    this._eventMap[c] || (this._eventMap[c] = []);
    this._eventMap[c].push(b);
  };
  c.unregisterEvent = function(b, c) {
    (c = this._eventMap[c]) && 0 !== c.length && (b = c.indexOf(b), 0 > b || c.splice(b, 1));
  };
  c.raiseEvent = function(b, c, e) {
    b = this._eventMap[b];
    var d = [];
    if (void 0 !== b) {
      for (var g = 0; g < b.length; g++) {
        var h = b[g], k = h.pointer();
        0 === k[3] && 4 === k.length && (void 0 === e || -1 < h.params.indexOf(e)) && (h = new Entry.Executor(b[g], c), this.executors.push(h), d.push(h));
      }
      return d;
    }
  };
  c.getEventMap = function(b) {
    return this._eventMap[b];
  };
  c.map = function(b) {
    this._data.map(b);
  };
  c.tick = function() {
    for (var b = this.executors, c = this.watchEvent, e = c.hasListeners(), f, g = [], h = 0; h < b.length; h++) {
      f = b[h], f.isEnd() ? (b.splice(h--, 1), 0 === b.length && this.executeEndEvent.notify()) : (f = f.execute(!0), e && (g = g.concat(f)));
    }
    e && c.notify(g);
  };
  c.removeExecutor = function(b) {
    b = this.executors.indexOf(b);
    -1 < b && this.executors.splice(b, 1);
  };
  c.clearExecutors = function() {
    this.executors.forEach(function(b) {
      b.end();
    });
    this.executors = [];
  };
  c.clearExecutorsByEntity = function(b) {
    for (var c = this.executors, e = 0; e < c.length; e++) {
      var f = c[e];
      f.entity === b && f.end();
    }
  };
  c.addExecutor = function(b) {
    this.executors.push(b);
  };
  c.createThread = function(b, c) {
    if (!(b instanceof Array)) {
      return console.error("blocks must be array");
    }
    b = new Entry.Thread(b, this);
    void 0 === c || null === c ? this._data.push(b) : this._data.insert(b, c);
    this.changeEvent.notify();
    return b;
  };
  c.getThreadIndex = function(b) {
    return this._data.indexOf(b);
  };
  c.getThreadCount = function() {
    return this._data.length;
  };
  c.cloneThread = function(b, c) {
    b = b.clone(this, c);
    this._data.push(b);
    return b;
  };
  c.destroyThread = function(b, c) {
    c = this._data;
    b = c.indexOf(b);
    0 > b || c.splice(b, 1);
  };
  c.doDestroyThread = function(b, c) {
    c = this._data;
    b = c.indexOf(b);
    0 > b || c.splice(b, 1);
  };
  c.getThread = function(b) {
    return this._data[b];
  };
  c.getThreads = function() {
    return this._data.map(function(b) {
      return b;
    });
  };
  c.getThreadsByCategory = function(b) {
    for (var c = [], e = 0; e < this._data.length; e++) {
      var f = this._data[e], g = f.getFirstBlock();
      g && g.category === b && c.push(f);
    }
    return c;
  };
  c.toJSON = function(b, c) {
    for (var d = this.getThreads(), f = [], g = 0, h = d.length; g < h; g++) {
      f.push(d[g].toJSON(!1, void 0, b, c));
    }
    return f;
  };
  c.countBlock = function() {
    for (var b = this.getThreads(), c = 0, e = 0; e < b.length; e++) {
      c += b[e].countBlock();
    }
    return c;
  };
  c.moveBy = function(b, c) {
    for (var d = this.getThreads(), f = 0, g = d.length; f < g; f++) {
      var h = d[f].getFirstBlock();
      h && h.view && h.view.display && h.view._moveBy(b, c, !1);
    }
    b = this.board;
    b instanceof Entry.BlockMenu && b.updateSplitters(c);
  };
  c.stringify = function(b) {
    return JSON.stringify(this.toJSON(b));
  };
  c.dominate = function(b) {
    b.view.setZIndex(this._maxZIndex++);
  };
  c.indexOf = function(b) {
    return this._data.indexOf(b);
  };
  c._handleChange = function() {
    Entry.creationChangedEvent && this.view && this.view.board.constructor !== Entry.BlockMenu && Entry.creationChangedEvent.notify();
  };
  c.hasBlockType = function(b) {
    for (var c = this.getThreads(), e = 0; e < c.length; e++) {
      if (c[e].hasBlockType(b)) {
        return !0;
      }
    }
    return !1;
  };
  c.findById = function(b) {
    return this._blockMap[b];
  };
  c.registerBlock = function(b) {
    this._blockMap[b.id] = b;
  };
  c.unregisterBlock = function(b) {
    delete this._blockMap[b.id];
  };
  c.getByPointer = function(b) {
    b = b.concat();
    b.splice(0, 2);
    for (var c = this._data[b.shift()].getBlock(b.shift()); b.length;) {
      c instanceof Entry.Block || (c = c.getValueBlock());
      var e = b.shift(), f = b.shift();
      if (-1 < e) {
        c = c.statements[e];
        if (void 0 === f) {
          break;
        }
        c = c.getBlock(f);
      } else {
        -1 === e && (c = c.view.getParam(f));
      }
    }
    return c;
  };
  c.getTargetByPointer = function(b) {
    b = b.concat();
    b.splice(0, 2);
    var c = this._data[b.shift()];
    if (1 === b.length) {
      var e = c.getBlock(b.shift() - 1);
    } else {
      for (e = c.getBlock(b.shift()); b.length;) {
        e instanceof Entry.Block || (e = e.getValueBlock());
        var f = b.shift(), c = b.shift();
        -1 < f ? (e = e.statements[f], e = b.length ? 0 > c ? e : e.getBlock(c) : 0 === c ? e.view.getParent() : void 0 === c ? e : e.getBlock(c - 1)) : -1 === f && (e = e.view.getParam(c));
      }
    }
    return e;
  };
  c.getBlockList = function(b, c) {
    for (var d = this.getThreads(), f = [], g = 0; g < d.length; g++) {
      f = f.concat(d[g].getBlockList(b, c));
    }
    return f;
  };
  c.removeBlocksByType = function(b) {
    this.getBlockList(!1, b).forEach(function(b) {
      b.doDestroy();
    });
  };
  c.isAllThreadsInOrigin = function() {
    for (var b = this.getThreads(), c = b.length - 1; 0 <= c; c--) {
      if (!b[c].isInOrigin()) {
        return !1;
      }
    }
    return !0;
  };
  c.destroy = function() {
    this.clear();
    this.destroyView();
  };
})(Entry.Code.prototype);
Entry.CodeView = function(c, b) {
  Entry.Model(this, !1);
  this.code = c;
  this.set({board:b});
  this.svgThreadGroup = b.svgGroup.elem("g");
  this.svgThreadGroup.attr({class:"svgThreadGroup"});
  this.svgThreadGroup.board = b;
  this.svgBlockGroup = b.svgGroup.elem("g");
  this.svgBlockGroup.attr({class:"svgBlockGroup"});
  this.svgBlockGroup.board = b;
  b.bindCodeView(this);
  this.code._data.getAll().forEach(function(c) {
    c.createView(b);
  });
  c.observe(this, "_setBoard", ["board"]);
};
(function(c) {
  c.schema = {board:null, scrollX:0, scrollY:0};
  c._setBoard = function() {
    this.set({board:this.code.board});
  };
  c.reDraw = function() {
    this.code.map(function(b) {
      b.view ? b.view.reDraw() : b.createView(this.board);
    }.bind(this));
  };
  c.destroy = function() {
    this.code.map(function(b) {
      b.destroyView();
    });
  };
})(Entry.CodeView.prototype);
Entry.ConnectionRipple = {};
(function(c) {
  c.createDom = function(b) {
    this.svgDom || (this._ripple = b.getBoard().svgGroup.elem("circle", {cx:0, cy:0, r:0, stroke:"#888", "stroke-width":10}));
  };
  c.setView = function(b) {
    this._ripple || this.createDom(b);
    var c = this._ripple, e = b.getBoard().svgGroup;
    c.remove();
    b = b.getAbsoluteCoordinate();
    c.attr({cx:b.x, cy:b.y});
    e.appendChild(c);
    c._startTime = new Date;
    return this;
  };
  c.dispose = function() {
    var b = this, c = this._ripple, e = (new Date - c._startTime) / 150;
    1 < e ? c.remove() : (c.attr({r:25 * e, opacity:1 - e}), window.setTimeout(function() {
      b.dispose();
    }, 10));
  };
})(Entry.ConnectionRipple);
Entry.Executor = function(c, b) {
  this.scope = new Entry.Scope(c, this);
  this.entity = b;
  this._callStack = [];
  this.register = {};
  this.parentExecutor = null;
  this.id = Entry.Utils.generateId();
};
Entry.Executor.MAXIMUM_CALLSTACK = 100;
(function(c) {
  c.execute = function(b) {
    if (!this.isEnd()) {
      var c = [];
      b && (Entry.callStackLength = 0);
      for (b = this.entity;;) {
        var e = null;
        c.push(this.scope.block);
        try {
          var f = this.scope.block.getSchema();
          f && (e = f.func.call(this.scope, b, this.scope));
        } catch (g) {
          if ("AsyncError" === g.name) {
            e = Entry.STATIC.BREAK;
          } else {
            if (this.isFuncExecutor) {
              throw Error();
            }
            Entry.Utils.stopProjectWithToast(this.scope, void 0, g);
          }
        }
        if (this.isEnd()) {
          break;
        }
        if (void 0 === e || null === e || e === Entry.STATIC.PASS) {
          if (this.scope = new Entry.Scope(this.scope.block.getNextBlock(), this), null === this.scope.block) {
            if (this._callStack.length) {
              if (e = this.scope, this.scope = this._callStack.pop(), this.scope.isLooped !== e.isLooped) {
                break;
              }
            } else {
              break;
            }
          }
        } else {
          if (e !== Entry.STATIC.CONTINUE && (e === Entry.STATIC.BREAK || this.scope === e)) {
            break;
          }
        }
      }
      return c;
    }
  };
  c.stepInto = function(b) {
    b instanceof Entry.Thread || console.error("Must step in to thread");
    b = b.getFirstBlock();
    if (!b) {
      return Entry.STATIC.BREAK;
    }
    this._callStack.push(this.scope);
    this.scope = new Entry.Scope(b, this);
    return Entry.STATIC.CONTINUE;
  };
  c.break = function() {
    this._callStack.length && (this.scope = this._callStack.pop());
    return Entry.STATIC.PASS;
  };
  c.breakLoop = function() {
    this._callStack.length && (this.scope = this._callStack.pop());
    for (; this._callStack.length && "repeat" !== Entry.block[this.scope.block.type].class;) {
      this.scope = this._callStack.pop();
    }
    return Entry.STATIC.PASS;
  };
  c.end = function() {
    this.scope.block = null;
  };
  c.isEnd = function() {
    return null === this.scope.block;
  };
})(Entry.Executor.prototype);
Entry.Scope = function(c, b) {
  this.type = (this.block = c) ? c.type : null;
  this.executor = b;
  this.entity = b.entity;
};
(function(c) {
  c.callReturn = function() {
  };
  c.getParam = function(b) {
    b = this.block.params[b];
    var c = new Entry.Scope(b, this.executor);
    return Entry.block[b.type].func.call(c, this.entity, c);
  };
  c.getParams = function() {
    var b = this;
    return this.block.params.map(function(c) {
      if (c instanceof Entry.Block) {
        var d = new Entry.Scope(c, b.executor);
        return Entry.block[c.type].func.call(d, b.entity, d);
      }
      return c;
    });
  };
  c.getValue = function(b, c) {
    b = this.block.params[this._getParamIndex(b, c)];
    c = new Entry.Scope(b, this.executor);
    return Entry.block[b.type].func.call(c, this.entity, c);
  };
  c.getStringValue = function(b, c) {
    return String(this.getValue(b, c));
  };
  c.getNumberValue = function(b, c) {
    return Number(this.getValue(b));
  };
  c.getBooleanValue = function(b, c) {
    return Number(this.getValue(b, c)) ? !0 : !1;
  };
  c.getField = function(b, c) {
    return this.block.params[this._getParamIndex(b)];
  };
  c.getStringField = function(b, c) {
    return String(this.getField(b));
  };
  c.getNumberField = function(b) {
    return Number(this.getField(b));
  };
  c.getStatement = function(b, c) {
    return this.executor.stepInto(this.block.statements[this._getStatementIndex(b, c)]);
  };
  c._getParamIndex = function(b) {
    this._schema || (this._schema = Entry.block[this.type]);
    return this._schema.paramsKeyMap[b];
  };
  c._getStatementIndex = function(b) {
    this._schema || (this._schema = Entry.block[this.type]);
    return this._schema.statementsKeyMap[b];
  };
  c.die = function() {
    this.block = null;
    return Entry.STATIC.BREAK;
  };
})(Entry.Scope.prototype);
Entry.BlockExtension = function(c, b) {
};
(function(c) {
})(Entry.BlockExtension.prototype);
Entry.ExtGuide = function(c, b, d) {
  this.blockView = b;
  this.block = b.block;
  this.model = c.model ? c.model : [];
  this.render();
};
(function(c) {
  c.render = function() {
    if (this.model) {
      var b = this.blockView.getBoard();
      this.svgGroup = this.blockView.svgGroup.elem("g", {class:"extension guideGroup"});
      this.blockView.guideSvgGroup = this.svgGroup;
      $(this.svgGroup).bind("mousedown touchstart", function(b) {
        b.stopPropagation && b.stopPropagation();
        b.preventDefault && b.preventDefault();
      });
      var c = this.block.getCode();
      this.model[0].x = -99999;
      this.model[0].y = -99999;
      c = c.createThread(this.model);
      !c.view && c.createView(b);
      b = c.getFirstBlock().view.clone();
      b.removeAttribute("transform");
      this.svgGroup.appendChild(b);
      this.updatePos();
      this.block.getThread().view.setHasGuide(!0);
      c.destroy(!1);
    }
  };
  c.updatePos = function() {
    this.svgGroup.attr("transform", this._getTransform());
  };
  c._getTransform = function() {
    return "translate(0,%y)".replace("%y", this.blockView.magnet.next.y);
  };
})(Entry.ExtGuide.prototype);
Entry.ExtSideTag = function(c, b, d) {
  this.blockView = b;
  this.color = c.color ? c.color : "#EBC576";
  this.text = c.text ? c.text : "";
  this.height = c.height ? Number(c.height) : 31 * Number(c.count);
  this.render();
  this.updatePos();
};
(function(c) {
  c.render = function() {
    this.svgGroup = this.blockView.svgGroup.elem("g");
    $(this.svgGroup).bind("mousedown touchstart", function(b) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
    });
    this.path = this.svgGroup.elem("path").attr({d:"m0,2 h-9 v" + (this.height - 4) + " h9", stroke:this.color, fill:"transparent", "stroke-width":"3"});
    this.textElement = this.svgGroup.elem("text").attr({style:"white-space: pre;", "font-size":"10px", "font-family":"nanumBarunRegular", "class":"dragNone", fill:"#000000"});
    this.tspans = this.text.split("\n").map(function(b) {
      var c = this.textElement.elem("tspan").attr({dy:"1.2em", x:"0", "class":"extension sideTagTspan"});
      c.textContent = b;
      return c;
    }.bind(this));
  };
  c.updatePos = function() {
    this.positionX = 8 * -(this.blockView.block.pointer().length - 2);
    this.svgGroup.attr("transform", "translate(" + this.positionX + ",0)");
    this.textElement.attr({y:this.height / 2 - 12 * (this.tspans.length - 1) - 2});
    var b = this.textElement.getBoundingClientRect();
    this.tspans.map(function(c) {
      c.attr({x:-b.width - 14});
    });
  };
})(Entry.ExtSideTag.prototype);
Entry.FieldAngle = function(c, b, d) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this.position = c.position;
  this._contents = c;
  this._index = d;
  c = this.getValue();
  this.setValue(this.modValue(void 0 !== c ? c : 90));
  this._CONTENT_HEIGHT = this.getContentHeight();
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldAngle);
(function(c) {
  c.renderStart = function(b, c) {
    this.svgGroup && $(this.svgGroup).remove();
    this.svgGroup = this._blockView.contentSvgGroup.elem("g", {class:"entry-input-field"});
    this.textElement = this.svgGroup.elem("text", {x:4, y:4, "font-size":"11px"});
    this._setTextValue();
    b = this.getTextWidth();
    c = this._CONTENT_HEIGHT;
    this._header = this.svgGroup.elem("rect", {x:0, y:(this.position && this.position.y ? this.position.y : 0) - c / 2, rx:3, ry:3, width:b, height:c, fill:"#fff", "fill-opacity":0.4});
    this.svgGroup.appendChild(this.textElement);
    this._bindRenderOptions();
    this.box.set({x:0, y:0, width:b, height:c});
  };
  c.renderOptions = function() {
    var b = this;
    this._attachDisposeEvent(function(c) {
      !0 !== c && b.applyValue();
      b.destroyOption(c);
    });
    this.optionGroup = Entry.Dom("input", {class:"entry-widget-input-field", parent:$("body")});
    this.optionGroup.val(this.value);
    this.optionGroup.on("mousedown touchstart", function(b) {
      b.stopPropagation();
    });
    this.optionGroup.on("keyup", function(c) {
      var d = c.keyCode || c.which;
      b.applyValue(c);
      -1 < [13, 27].indexOf(d) && b.destroyOption(void 0, !0);
    });
    var c = this.getAbsolutePosFromDocument();
    c.y -= this.box.height / 2;
    this.optionGroup.css({height:this._CONTENT_HEIGHT, left:c.x, top:c.y, width:b.box.width});
    this.angleOptionGroup = this.appendSvgOptionGroup();
    this.angleOptionGroup.elem("circle", {x:0, y:0, r:49, class:"entry-field-angle-circle"});
    $(this.angleOptionGroup).on("mousedown touchstart", function(c) {
      c.stopPropagation();
      b._updateByCoord(c);
    });
    this._dividerGroup = this.angleOptionGroup.elem("g");
    for (c = 0; 360 > c; c += 15) {
      this._dividerGroup.elem("line", {x1:49, y1:0, x2:49 - (0 === c % 45 ? 10 : 5), y2:0, transform:"rotate(" + c + ", 0, 0)", class:"entry-angle-divider"});
    }
    c = this.getAbsolutePosFromBoard();
    c.x += this.box.width / 2;
    c.y = c.y + this.box.height / 2 + 49 + 1;
    this.angleOptionGroup.attr({class:"entry-field-angle", transform:"translate(" + c.x + "," + c.y + ")"});
    $(this.angleOptionGroup).bind("mousemove touchmove", this._updateByCoord.bind(this));
    $(this.angleOptionGroup).bind("mouseup touchend", this.destroyOption.bind(this));
    this.updateGraph();
    this.optionGroup.focus();
    this.optionGroup.select();
    this.optionDomCreated();
  };
  c._updateByCoord = function(b) {
    b.originalEvent && b.originalEvent.touches && (b = b.originalEvent.touches[0]);
    b = [b.clientX, b.clientY];
    var c = this.getAbsolutePosFromDocument();
    this.optionGroup.val(this.modValue(function(b, c) {
      var d = c[0] - b[0];
      b = c[1] - b[1] - 49 - 1;
      c = Math.atan(-b / d);
      c = Entry.toDegrees(c);
      c = 90 - c;
      0 > d ? c += 180 : 0 < b && (c += 360);
      return 15 * Math.round(c / 15);
    }([c.x + this.box.width / 2, c.y + this.box.height / 2 + 1], b)));
    this.applyValue();
  };
  c.updateGraph = function() {
    this._fillPath && this._fillPath.remove();
    var b = Entry.toRadian(this.getValue()), c = 49 * Math.sin(b), e = -49 * Math.cos(b), b = b > Math.PI ? 1 : 0;
    this._fillPath = this.angleOptionGroup.elem("path", {d:"M 0,0 v -49 A 49,49 0 %LARGE 1 %X,%Y z".replace("%X", c).replace("%Y", e).replace("%LARGE", b), class:"entry-angle-fill-area"});
    this.angleOptionGroup.appendChild(this._dividerGroup);
    this._indicator && this._indicator.remove();
    this._indicator = this.angleOptionGroup.elem("line", {x1:0, y1:0, x2:c, y2:e});
    this._indicator.attr({class:"entry-angle-indicator"});
  };
  c.applyValue = function() {
    var b = this.optionGroup.val();
    Entry.Utils.isNumber(b) && "" !== b && (b = this.modValue(b), this.setValue(b), this.updateGraph(), this.textElement.textContent = this.getValue(), this.optionGroup && this.optionGroup.val(b), this.resize());
  };
  c.resize = function() {
    var b = this.getTextWidth();
    this._header.attr({width:b});
    this.optionGroup && this.optionGroup.css({width:b});
    this.box.set({width:b});
    this._block.view.dAlignContent();
  };
  c.getTextWidth = function() {
    return this.textElement ? this.getTextBBox().width + 8 : 8;
  };
  c.getText = function() {
    var b = this.getValue(), c = /&value/gm;
    return c.test(b) ? b.replace(c, "") : b + "\u00b0";
  };
  c.modValue = function(b) {
    return /&value/gm.test(b) ? b : b % 360;
  };
  c.destroyOption = function(b, c) {
    this.disposeEvent && (Entry.disposeEvent.detach(this.disposeEvent), delete this.documentDownEvent);
    this.optionGroup && (this.optionGroup.remove(), delete this.optionGroup);
    this.angleOptionGroup && (this.angleOptionGroup.remove(), delete this.angleOptionGroup);
    this._setTextValue();
    !0 !== b && this.command(c);
  };
  c._setTextValue = function() {
    var b = this._convert(this.getText(), this.getValue());
    this.textElement.textContent = b;
  };
})(Entry.FieldAngle.prototype);
Entry.FieldColor = function(c, b, d) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this._contents = c;
  this._index = d;
  this._position = c.position;
  this._fontSize = c.fontSize || b.getSkeleton().fontSize || 12;
  this._color = c.color || this._block.getSchema().fontColor || b.getSkeleton().color || "black";
  this.key = c.key;
  this.setValue(this.getValue() || "#FF0000");
  this._CONTENT_HEIGHT = this.getContentHeight();
  this._CONTENT_WIDTH = this.getContentWidth();
  this.renderStart(b);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldColor);
(function(c) {
  c.renderStart = function() {
    var b;
    this.svgGroup && $(this.svgGroup).remove();
    this.svgGroup = this._blockView.contentSvgGroup.elem("g", {class:"entry-field-color"});
    if (this._blockView.renderMode === Entry.BlockView.RENDER_MODE_TEXT) {
      var c = this.svgGroup.elem("rect", {x:0, rx:3, ry:3, fill:"#fff", "fill-opacity":0.4});
      this.textElement = this.svgGroup.elem("text").attr({style:"white-space: pre;", "font-size":this._fontSize + "px", "font-family":"nanumBarunRegular", "class":"dragNone", fill:this._color});
      this.textElement.textContent = this._convert(this.getValue(), this.getValue());
      var e = this.textElement.getBoundingClientRect();
      var f = e.width + 12;
      var g = e.height;
      c.attr({y:-g / 2, width:f, height:g});
      this.textElement.attr({x:6, y:0.25 * e.height});
    } else {
      g = this._CONTENT_HEIGHT;
      f = this._CONTENT_WIDTH;
      if (b = this._position) {
        var h = b.x || 0;
        b = b.y || 0;
      } else {
        h = 0, b = -g / 2;
      }
      this._header = this.svgGroup.elem("rect", {x:h, y:b, width:f, height:g, fill:this.getValue()});
    }
    this._bindRenderOptions();
    this.box.set({x:h, y:b, width:f, height:g});
  };
  c.renderOptions = function() {
    var b = this;
    this._attachDisposeEvent();
    var c = Entry.FieldColor.getWidgetColorList();
    this.optionGroup = Entry.Dom("table", {class:"entry-widget-color-table", parent:$("body")});
    for (var e = 0; e < c.length; e++) {
      for (var f = Entry.Dom("tr", {class:"entry-widget-color-row", parent:this.optionGroup}), g = 0; g < c[e].length; g++) {
        var h = Entry.Dom("td", {class:"entry-widget-color-cell", parent:f}), k = c[e][g];
        h.css({"background-color":k});
        h.attr({"data-color-value":k});
        (function(c, d) {
          c.mousedown(function(b) {
            b.stopPropagation();
          });
          c.mouseup(function(c) {
            b.applyValue(d);
            b.destroyOption();
            b._selectBlockView();
          });
        })(h, k);
      }
    }
    c = this.getAbsolutePosFromDocument();
    c.y += this.box.height / 2 + 1;
    this.optionGroup.css({left:c.x, top:c.y});
    this.optionDomCreated();
  };
  c.applyValue = function(b) {
    this.value != b && (this.setValue(b), this._header ? this._header.attr({fill:b}) : this.textElement && (this.textElement.textContent = this._convert(this.getValue(), this.getValue())));
  };
  c.getContentWidth = function() {
    return Entry.isMobile() ? 20 : 14.5;
  };
})(Entry.FieldColor.prototype);
Entry.FieldColor.getWidgetColorList = function() {
  return ["#FFFFFF #CCCCCC #C0C0C0 #999999 #666666 #333333 #000000".split(" "), "#FFCCCC #FF6666 #FF0000 #CC0000 #990000 #660000 #330000".split(" "), "#FFCC99 #FF9966 #FF9900 #FF6600 #CC6600 #993300 #663300".split(" "), "#FFFF99 #FFFF66 #FFCC66 #FFCC33 #CC9933 #996633 #663333".split(" "), "#FFFFCC #FFFF33 #FFFF00 #FFCC00 #999900 #666600 #333300".split(" "), "#99FF99 #66FF99 #33FF33 #33CC00 #009900 #006600 #003300".split(" "), "#99FFFF #33FFFF #66CCCC #00CCCC #339999 #336666 #003333".split(" "), "#CCFFFF #66FFFF #33CCFF #3366FF #3333FF #000099 #000066".split(" "), 
  "#CCCCFF #9999FF #6666CC #6633FF #6609CC #333399 #330099".split(" "), "#FFCCFF #FF99FF #CC66CC #CC33CC #993399 #663366 #330033".split(" ")];
};
Entry.FieldDropdown = function(c, b, d) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this._contents = c;
  this._noArrow = c.noArrow;
  var e = c.arrowColor;
  if (this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this._block.emphasized) {
    e = b._fillColor;
  }
  this._arrowColor = e;
  this._index = d;
  this.setValue(this.getValue());
  this._CONTENT_HEIGHT = this.getContentHeight(c.dropdownHeight);
  this._font_size = this.getFontSize(c.fontSize);
  this._ROUND = c.roundValue || 3;
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldDropdown);
(function(c) {
  c.renderStart = function() {
    var b = this._blockView, c = Entry.isMobile(), e = c ? 33 : 20, c = c ? 24 : 10, f = this._CONTENT_HEIGHT, g = this.getArrow();
    this.svgGroup || (this.svgGroup = b.contentSvgGroup.elem("g", {class:"entry-field-dropdown"}));
    this._header || (this._header = this.svgGroup.elem("rect", {height:f, y:-f / 2, rx:this._ROUND, ry:this._ROUND, fill:"#fff", "fill-opacity":0.4}));
    this.textElement || (this.textElement = this.svgGroup.elem("text", {x:5, style:"white-space: pre;", "font-size":+this._font_size + "px"}));
    this._noArrow || this._arrow || (this._arrow = this.svgGroup.elem("polygon", {points:g.points, fill:g.color, stroke:g.color}));
    this instanceof Entry.FieldDropdownDynamic && this._updateValue();
    this._setTextValue();
    b = this.getTextBBox();
    this.textElement.attr({y:0.27 * b.height});
    e = b.width + e;
    this._noArrow && (e -= c);
    this._header.attr({width:e});
    this._noArrow || this._arrow.attr({transform:"translate(" + (e - g.width - 5) + "," + -g.height / 2 + ")"});
    this._bindRenderOptions();
    this.box.set({x:0, y:0, width:e, height:f});
  };
  c.resize = function() {
    var b = Entry.isMobile(), c = b ? 33 : 20, b = b ? 24 : 10, c = this.textElement.getBoundingClientRect().width + c;
    this._noArrow ? c -= b : (b = this.getArrow(), this._arrow.attr({transform:"translate(" + (c - b.width - 5) + "," + -b.height / 2 + ")"}));
    this._header.attr({width:c});
    this.box.set({width:c});
    this._block.view.dAlignContent();
  };
  c.renderOptions = function() {
    var b = this;
    this._attachDisposeEvent();
    this.optionGroup = Entry.Dom("ul", {class:"entry-widget-dropdown", parent:$("body")});
    this.optionGroup.bind("mousedown touchstart", function(b) {
      b.stopPropagation();
    });
    for (var c = this._contents.options, e = 0, f = c.length; e < f; e++) {
      var g = c[e], h = g[0] = this._convert(g[0], g[1]), g = g[1], k = Entry.Dom("li", {class:"rect", parent:this.optionGroup}), l = Entry.Dom("span", {class:"left", parent:k});
      Entry.Dom("span", {class:"right", parent:k}).text(h);
      this.getValue() == g && l.text("\u2713");
      (function(c, d) {
        c.bind("mousedown touchstart", function(b) {
          b.stopPropagation();
        });
        c.bind("mouseup touchend", function(c) {
          c.stopPropagation();
          b.applyValue(d);
          b.destroyOption(void 0, !0);
          b._selectBlockView();
        });
      })(k, g);
    }
    this._position();
    this.optionDomCreated();
  };
  c._position = function() {
    var b = this.getAbsolutePosFromDocument();
    b.y += this.box.height / 2;
    var c = $(document).height(), e = this.optionGroup.height(), f = this.optionGroup.width() + 30;
    if (c < b.y + e + 30) {
      var c = this._blockView.getBoard().svgDom.height(), g = this.getAbsolutePosFromBoard();
      this._blockView.y < c / 2 ? (b.x += this.box.width / 2 - f / 2, c -= g.y + 30, this.optionGroup.height(c)) : (b.x += this.box.width + 1, c -= c - g.y, c - 30 < e && this.optionGroup.height(c - c % 30), b.y -= this.optionGroup.height());
    } else {
      b.x += this.box.width / 2 - f / 2;
    }
    this.optionGroup.addClass("rendered");
    this.optionGroup.css({left:b.x, top:b.y, width:f});
    this.optionGroup.find(".right").width(f - 20);
  };
  c.applyValue = function(b) {
    this.value != b && this.setValue(b);
    this._setTextValue();
    this.resize();
  };
  c.getTextByValue = function(b) {
    var c = /&value/gm;
    if (c.test(b)) {
      return b.replace(c, "");
    }
    if (!b && "number" !== typeof b || "null" === b) {
      return Lang.Blocks.no_target;
    }
    for (var c = this._contents.options, e = 0, f = c.length; e < f; e++) {
      var g = c[e];
      if (g[1] == b) {
        return g[0];
      }
    }
    return this._shouldReturnValue(b) ? b : Lang.Blocks.no_target;
  };
  c.getContentHeight = function(b) {
    return b = b || this._blockView.getSkeleton().dropdownHeight || (Entry.isMobile() ? 22 : 16);
  };
  c.getArrow = function() {
    var b = Entry.isMobile();
    return {color:this._arrowColor || this._blockView._schema.color, points:b ? "0,0 19,0 9.5,13" : "0,0 6.4,0 3.2,4.2", height:b ? 13 : 4.2, width:b ? 19 : 6.4};
  };
  c._setTextValue = function() {
    var b = this.getTextByValue(this.getValue()), b = this._convert(b, this.getValue());
    this.getTextValue() !== b && (this.textElement.textContent = b);
  };
  c.getTextValue = function() {
    return this.textElement.textContent;
  };
})(Entry.FieldDropdown.prototype);
Entry.FieldDropdownDynamic = function(c, b, d) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this._contents = c;
  this._index = d;
  d = c.arrowColor;
  if (this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this._block.emphasized) {
    d = b._fillColor;
  }
  this._arrowColor = d;
  d = this._contents.menuName;
  Entry.Utils.isFunction(d) ? this._menuGenerator = d : this._menuName = d;
  this._CONTENT_HEIGHT = this.getContentHeight(c.dropdownHeight);
  this._font_size = this.getFontSize(c.fontSize);
  this._ROUND = c.roundValue || 3;
  this.renderStart(b);
  b && b.getBoard() && b.getBoard().workspace && b.getBoard().workspace.changeEvent && b.getBoard().workspace.changeEvent.attach(this, this._updateValue);
};
Entry.Utils.inherit(Entry.FieldDropdown, Entry.FieldDropdownDynamic);
(function(c) {
  c.constructor = Entry.FieldDropDownDynamic;
  c._updateValue = function() {
    var b = this._block.getCode().object, c = [];
    Entry.container && (c = this._menuName ? Entry.container.getDropdownList(this._menuName, b) : this._menuGenerator());
    this._contents.options = c;
    b = this.getValue();
    if (this._blockView.isInBlockMenu || !b || "null" == b) {
      b = 0 !== c.length ? c[0][1] : null;
    }
    this._updateOptions();
    this.setValue(b);
  };
  c.renderOptions = function() {
    var b = this;
    this._attachDisposeEvent();
    this.optionGroup = Entry.Dom("ul", {class:"entry-widget-dropdown", parent:$("body")});
    this.optionGroup.bind("mousedown touchstart", function(b) {
      b.stopPropagation();
    });
    var c = this._menuName ? Entry.container.getDropdownList(this._contents.menuName) : this._menuGenerator();
    this._contents.options = c;
    for (var e = 0; e < c.length; e++) {
      var f = c[e], g = f[0] = this._convert(f[0], f[1]), f = f[1], h = Entry.Dom("li", {class:"rect", parent:this.optionGroup}), k = Entry.Dom("span", {class:"left", parent:h});
      Entry.Dom("span", {class:"right", parent:h}).text(g);
      this.getValue() == f && k.text("\u2713");
      (function(c, d) {
        c.mousedown(function(b) {
          b.stopPropagation();
        });
        c.mouseup(function(c) {
          c.stopPropagation();
          b.applyValue(d);
          b.destroyOption(void 0, !0);
          b._selectBlockView();
        });
      })(h, f);
    }
    this._position();
    this.optionDomCreated();
  };
})(Entry.FieldDropdownDynamic.prototype);
Entry.FieldImage = function(c, b, d) {
  this._block = b.block;
  this._blockView = b;
  this._content = c;
  this.box = new Entry.BoxModel;
  this._size = c.size;
  this._highlightColor = c.highlightColor ? c.highlightColor : "#F59900";
  this._position = c.position;
  this._imgElement = this._path = this.svgGroup = null;
  this._index = d;
  this.setValue(null);
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldImage);
(function(c) {
  c.renderStart = function() {
    this.svgGroup && this.svgGroup.remove();
    this._imgUrl = this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN ? this._content.img.replace(".png", "_un.png") : this._content.img;
    this.svgGroup = this._blockView.contentSvgGroup.elem("g");
    this._imgElement = this.svgGroup.elem("image", {href:this._imgUrl, x:0, y:-0.5 * this._size, width:this._size, height:this._size});
    this.box.set({x:this._size, y:0, width:this._size, height:this._size});
  };
})(Entry.FieldImage.prototype);
Entry.FieldIndicator = function(c, b, d) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this._size = c.size;
  c.img ? this._imgUrl = this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN ? c.img.replace(".png", "_un.png") : c.img : c.color && (this._color = c.color);
  this._boxMultiplier = c.boxMultiplier || 2;
  this._highlightColor = c.highlightColor ? c.highlightColor : "#F59900";
  this._position = c.position;
  this._index = d;
  this._imgElement = this._path = this.svgGroup = null;
  this.setValue(null);
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldIndicator);
(function(c) {
  c.renderStart = function() {
    this.svgGroup || (this.svgGroup = this._blockView.contentSvgGroup.elem("g"));
    if (this._imgUrl) {
      var b = {href:Entry.mediaFilePath + this._imgUrl, x:this._position ? -1 * this._size : 0, y:-1 * this._size, width:2 * this._size, height:2 * this._size};
      this._imgElement || (this._imgElement = this.svgGroup.elem("image"));
      this._imgElement.attr(b);
      this._block.emphasized && -1 === this._imgUrl.lastIndexOf("_un.png") && (this._imgUrl = this._imgUrl.replace(".png", "_un.png"));
    }
    b = {d:"m %s,-%s a %s,%s 0 1,1 -0.1,0 z".replace(/%s/gi, this._size), x:this._position ? -1 * this._size : 0, y:-1 * this._size, stroke:"none", fill:this._color ? this._color : "none"};
    this._path || (this._path = this.svgGroup.elem("path"));
    this._path.attr(b);
    this.box.set({width:this._size * this._boxMultiplier + (this._position ? -this._size : 0), height:this._size * this._boxMultiplier});
  };
  c.enableHighlight = function() {
    var b = this._path.getTotalLength(), c = this._path;
    this._path.attr({stroke:this._highlightColor, strokeWidth:2, "stroke-linecap":"round", "stroke-dasharray":b + " " + b, "stroke-dashoffset":b});
    setInterval(function() {
      c.attr({"stroke-dashoffset":b}).animate({"stroke-dashoffset":0}, 300);
    }, 1400, mina.easeout);
    setTimeout(function() {
      setInterval(function() {
        c.animate({"stroke-dashoffset":-b}, 300);
      }, 1400, mina.easeout);
    }, 500);
  };
})(Entry.FieldIndicator.prototype);
Entry.Keyboard = {};
Entry.FieldKeyboard = function(c, b, d) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this.position = c.position;
  this._contents = c;
  this._index = d;
  this.setValue(String(this.getValue()));
  this._CONTENT_HEIGHT = this.getContentHeight();
  this._optionVisible = !1;
  this.renderStart(b);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldKeyboard);
(function(c) {
  c.renderStart = function() {
    this.svgGroup && $(this.svgGroup).remove();
    this.svgGroup = this._blockView.contentSvgGroup.elem("g", {class:"entry-input-field"});
    this.textElement = this.svgGroup.elem("text").attr({x:5, y:4, "font-size":"11px"});
    this._setTextValue();
    var b = this.getTextWidth() + 1, c = this._CONTENT_HEIGHT;
    this._header = this.svgGroup.elem("rect", {x:0, y:(this.position && this.position.y ? this.position.y : 0) - c / 2, width:b, height:c, rx:3, ry:3, fill:"#fff", "fill-opacity":0.4});
    this.svgGroup.appendChild(this.textElement);
    this._bindRenderOptions();
    this.box.set({x:0, y:0, width:b, height:c});
  };
  c.renderOptions = function() {
    Entry.keyPressed && (this.keyPressed = Entry.keyPressed.attach(this, this._keyboardControl));
    this._optionVisible = !0;
    this._attachDisposeEvent();
    var b = this.getAbsolutePosFromDocument();
    b.x -= 17;
    b.x += this.box.width / 2;
    b.y += this.box.height / 2 + 1;
    this.optionGroup = Entry.Dom("img", {class:"entry-widget-keyboard-input", parent:$("body")});
    this.optionGroup.on("load", this.optionDomCreated.bind(this));
    this.optionGroup[0].src = Entry.mediaFilePath + "/media/keyboard_workspace_widget.png";
    this.optionGroup.on("mousedown", function(b) {
      b.stopPropagation();
    });
    this.optionGroup.css({left:b.x, top:b.y});
  };
  c.destroyOption = function(b) {
    this.disposeEvent && (Entry.disposeEvent.detach(this.disposeEvent), delete this.disposeEvent);
    this.optionGroup && (this.optionGroup.remove(), delete this.optionGroup);
    this._isEditing = this._optionVisible = !1;
    this.command(b);
    this.keyPressed && (Entry.keyPressed.detach(this.keyPressed), delete this.keyPressed);
  };
  c._keyboardControl = function(b) {
    b.stopPropagation && b.stopPropagation();
    b.preventDefault && b.preventDefault();
    if (this._optionVisible) {
      b = b.keyCode;
      var c = Entry.getKeyCodeMap()[b];
      void 0 !== c && this.applyValue(c, b, !0);
    }
  };
  c.applyValue = function(b, c, e) {
    this.setValue(String(c));
    this._setTextValue();
    this.resize();
    this.destroyOption(e);
  };
  c.resize = function() {
    var b = this.getTextWidth() + 1;
    this._header.attr({width:b});
    this.box.set({width:b});
    this._blockView.dAlignContent();
  };
  c.getTextWidth = function() {
    return this.textElement.getComputedTextLength() + 10;
  };
  c.destroy = function() {
    this.destroyOption();
    Entry.keyPressed && this.keyPressed && Entry.keyPressed.detach(this.keyPressed);
  };
  c._setTextValue = function() {
    var b = Entry.getKeyCodeMap()[this.getValue()], b = this._convert(b, this.getValue());
    this.textElement.textContent = void 0 === b ? Lang.Blocks.no_target : b;
  };
})(Entry.FieldKeyboard.prototype);
Entry.FieldLineBreak = function(c, b, d) {
  this._block = b.block;
  this._blockView = b;
  this._index = d;
  this.box = new Entry.BoxModel;
  this.setValue(null);
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldLineBreak);
(function(c) {
  c.renderStart = function() {
  };
  c.align = function(b) {
    var c = this._blockView;
    0 !== c._statements.length && this.box.set({y:(c._statements[b].height || 20) + Math.max(c.contentHeight % 1000, 30)});
  };
})(Entry.FieldLineBreak.prototype);
Entry.FieldOutput = function(c, b, d, e, f) {
  Entry.Model(this, !1);
  this._blockView = b;
  this._block = b.block;
  this._valueBlock = null;
  this.box = new Entry.BoxModel;
  this.changeEvent = new Entry.Event(this);
  this._index = d;
  this.contentIndex = f;
  this._content = c;
  this.acceptType = c.accept;
  this.view = this;
  this.svgGroup = null;
  this._position = c.position;
  this.box.observe(b, "dAlignContent", ["width", "height"]);
  this.observe(this, "_updateBG", ["magneting"], !1);
  this.renderStart(b.getBoard(), e);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldOutput);
(function(c) {
  c.schema = {magneting:!1};
  c.renderStart = function(b, c) {
    this.svgGroup || (this.svgGroup = this._blockView.contentSvgGroup.elem("g"));
    this.view = this;
    this._nextGroup = this.svgGroup;
    this.box.set({x:0, y:0, width:0, height:20});
    var d = this.getValue();
    d && !d.view && (d.setThread(this), d.createView(b, c));
    this._updateValueBlock(d);
    this._valueBlock && this._valueBlock.view._startContentRender(this.renderMode);
    this._blockView.getBoard().constructor == Entry.BlockMenu && this._valueBlock && this._valueBlock.view.removeControl();
  };
  c.align = function(b, c, e) {
    var d = this.svgGroup;
    this._position && (this._position.x && (b = this._position.x), this._position.y && (c = this._position.y));
    var g = this._valueBlock;
    g && g.view && (c = -0.5 * g.view.height);
    g = "translate(" + b + "," + c + ")";
    void 0 === e || e ? d.animate({transform:g}, 300, mina.easeinout) : d.attr({transform:g});
    this.box.set({x:b, y:c});
  };
  c.calcWH = function() {
    var b = this._valueBlock;
    b && b.view ? (b = b.view, this.box.set({width:b.width, height:b.height})) : this.box.set({width:0, height:20});
  };
  c.calcHeight = c.calcWH;
  c.destroy = function() {
    this._valueBlock && this._valueBlock.destroyView();
  };
  c._inspectBlock = function() {
  };
  c._setValueBlock = function(b) {
    if (b != this._valueBlock || !this._valueBlock) {
      return this._valueBlock = b, this.setValue(b), b && b.setThread(this), this._valueBlock;
    }
  };
  c.spliceBlock = function() {
    this._updateValueBlock();
  };
  c._updateValueBlock = function(b) {
    b instanceof Entry.Block || (b = void 0);
    b && b === this._valueBlock ? this.calcWH() : (this._sizeObserver && this._sizeObserver.destroy(), this._posObserver && this._posObserver.destroy(), (b = this._setValueBlock(b)) ? (b = b.view, b.bindPrev(), this._posObserver = b.observe(this, "_updateValueBlock", ["x", "y"], !1), this._sizeObserver = b.observe(this, "calcWH", ["width", "height"])) : this.calcWH(), this._blockView.dAlignContent());
  };
  c.getPrevBlock = function(b) {
    return this._valueBlock === b ? this : null;
  };
  c.getNextBlock = function() {
    return null;
  };
  c.requestAbsoluteCoordinate = function(b) {
    b = this._blockView;
    var c = b.contentPos;
    b = b.getAbsoluteCoordinate();
    b.x += this.box.x + c.x;
    b.y += this.box.y + c.y;
    return b;
  };
  c.dominate = function() {
    this._blockView.dominate();
  };
  c.isGlobal = function() {
    return !1;
  };
  c.separate = function(b) {
    this.getCode().createThread([b]);
    this._updateValueBlock(null);
    this.changeEvent.notify();
  };
  c.getCode = function() {
    return this._block.thread.getCode();
  };
  c.cut = function(b) {
    return this._valueBlock === b ? (delete this._valueBlock, [b]) : null;
  };
  c._updateBG = function() {
    this.magneting ? this._bg = this.svgGroup.elem("path", {d:"m -4,-12 h 3 l 2,2 0,3 3,0 1,1 0,12 -1,1 -3,0 0,3 -2,2 h -3 ", fill:"#fff", stroke:"#fff", "fill-opacity":0.7, transform:"translate(0," + (this._valueBlock ? 12 : 0) + ")"}) : this._bg && (this._bg.remove(), delete this._bg);
  };
  c.replace = function(b) {
    var c = this._valueBlock;
    c && (c.view._toGlobalCoordinate(), b.getTerminateOutputBlock().view._contents[1].replace(c));
    this._updateValueBlock(b);
    b.view._toLocalCoordinate(this.svgGroup);
    this.calcWH();
  };
  c.setParent = function(b) {
    this._parent = b;
  };
  c.getParent = function() {
    return this._parent;
  };
  c.getThread = function() {
    return this;
  };
  c.getValueBlock = function() {
    return this._valueBlock;
  };
  c.pointer = function(b) {
    b = b || [];
    b.unshift(this._index);
    b.unshift(Entry.PARAM);
    return this._block.pointer(b);
  };
})(Entry.FieldOutput.prototype);
Entry.FieldStatement = function(c, b, d) {
  Entry.Model(this, !1);
  this._blockView = b;
  this.block = b.block;
  this.view = this;
  this._index = d;
  this.acceptType = c.accept;
  this._thread = this.statementSvgGroup = this.svgGroup = null;
  this._position = c.position;
  this._events = [];
  this.observe(b, "alignContent", ["height"], !1);
  this.observe(this, "_updateBG", ["magneting"], !1);
  this.renderStart(b.getBoard());
};
(function(c) {
  c.schema = {x:0, y:0, width:100, height:31, magneting:!1};
  c.magnet = {next:{x:0, y:0}};
  c.renderStart = function(b) {
    this.svgGroup = this._blockView.statementSvgGroup.elem("g");
    this._nextGroup = this.statementSvgGroup = this.svgGroup.elem("g");
    this._initThread(b);
    this._board = b;
  };
  c._initThread = function(b) {
    var c = this.getValue();
    this._thread = c;
    c.createView(b);
    c.view.setParent(this);
    if (b = c.getFirstBlock()) {
      b.view._toLocalCoordinate(this.statementSvgGroup), this.firstBlock = b;
    }
    b = c.changeEvent.attach(this, this.calcHeight);
    var e = c.changeEvent.attach(this, this.checkTopBlock);
    this._events.push([c.changeEvent, b]);
    this._events.push([c.changeEvent, e]);
    this.calcHeight();
  };
  c.align = function(b, c, e) {
    e = void 0 === e ? !0 : e;
    var d = this.svgGroup;
    this._position && (this._position.x && (b = this._position.x), this._position.y && (c = this._position.y));
    var g = "translate(" + b + "," + c + ")";
    this.x === b && this.y === c || this.set({x:b, y:c});
    e ? d.animate({transform:g}, 300, mina.easeinout) : d.attr({transform:g});
  };
  c.calcHeight = function() {
    var b = this._thread.view.requestPartHeight(null);
    this.height !== b && this.set({height:b});
  };
  c.getValue = function() {
    return this.block.statements[this._index];
  };
  c.requestAbsoluteCoordinate = function() {
    var b = this._blockView.getAbsoluteCoordinate();
    b.x += this.x;
    b.y += this.y;
    return b;
  };
  c.dominate = function() {
    this._blockView.dominate();
  };
  c.destroy = function() {
    for (; this._events.length;) {
      var b = this._events.pop();
      b[0].detach(b[1]);
    }
  };
  c._updateBG = function() {
    if (this._board.dragBlock && this._board.dragBlock.dragInstance) {
      if (this.magneting) {
        var b = this._board.dragBlock.getShadow();
        var c = this.requestAbsoluteCoordinate(), c = "translate(" + c.x + "," + c.y + ")";
        $(b).attr({transform:c, display:"block"});
        this._clonedShadow = b;
        this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground);
        b = this._board.dragBlock.getBelowHeight();
        this.statementSvgGroup.attr({transform:"translate(0," + b + ")"});
        this.set({height:this.height + b});
      } else {
        this._clonedShadow && (this._clonedShadow.attr({display:"none"}), delete this._clonedShadow), b = this.originalHeight, void 0 !== b && (this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground), delete this.originalHeight), this.statementSvgGroup.attr({transform:"translate(0,0)"}), this.calcHeight();
      }
      (b = this.block.thread.changeEvent) && b.notify();
    }
  };
  c.insertTopBlock = function(b) {
    this._posObserver && this._posObserver.destroy();
    var c = this.firstBlock;
    (this.firstBlock = b) && b.doInsert(this._thread);
    return c;
  };
  c.getNextBlock = function() {
    return this.firstBlock;
  };
  c.checkTopBlock = function() {
    var b = this._thread.getFirstBlock();
    b && this.firstBlock !== b ? (this.firstBlock = b, b.view.bindPrev(this), b._updatePos()) : b || (this.firstBlock = null);
  };
  c.pointer = function(b) {
    b = b || [];
    b.unshift(this._index);
    return this.block.pointer(b);
  };
  c.isParamBlockType = function() {
    return !1;
  };
})(Entry.FieldStatement.prototype);
Entry.FieldText = function(c, b, d) {
  this._block = b.block;
  this._blockView = b;
  this._index = d;
  this.box = new Entry.BoxModel;
  this._font_size = c.fontSize || b.getSkeleton().fontSize || 12;
  this._color = c.color || this._block.getSchema().fontColor || b.getSkeleton().color || "white";
  this._align = c.align || "left";
  this._text = this.getValue() || c.text;
  this.setValue(null);
  this.textElement = null;
  this.renderStart(b);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldText);
(function(c) {
  c.renderStart = function() {
    var b = this._blockView;
    this.svgGroup || (this.svgGroup = b.contentSvgGroup.elem("g"));
    this.textElement || (this.textElement = this.svgGroup.elem("text").attr({style:"white-space: pre;", "font-size":this._font_size + "px", "font-family":"nanumBarunRegular", "class":"dragNone", fill:this._color}));
    b = this.textElement.textContent;
    this._text = this._text.replace(/(\r\n|\n|\r)/gm, " ");
    b !== this._text && (this.textElement.textContent = this._text);
    var b = 0, c = this.getTextBBox();
    "center" == this._align && (b = -c.width / 2);
    this.textElement.attr({x:b, y:0.25 * c.height});
    this.box.set({x:0, y:0, width:c.width, height:c.height});
  };
  c.getTextValue = function() {
    return this._text;
  };
})(Entry.FieldText.prototype);
Entry.FieldTextInput = function(c, b, d) {
  this._blockView = b;
  this._block = b.block;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this.position = c.position;
  this._contents = c;
  this._isClearBG = c.clearBG || !1;
  this._index = d;
  this.value = this.getValue() || "";
  this._CONTENT_HEIGHT = this.getContentHeight();
  this._font_size = 12;
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldTextInput);
(function(c) {
  c.renderStart = function() {
    var b = this._blockView;
    this.svgGroup || (this.svgGroup = b.contentSvgGroup.elem("g"));
    this.textElement || (this.textElement = this.svgGroup.elem("text", {x:3, y:4, fill:this._contents.color || "black", "font-size":this._font_size + "px"}));
    this.svgGroup.attr({class:"entry-input-field"});
    this._setTextValue();
    var b = this.getTextWidth(), c = this.position && this.position.y ? this.position.y : 0, e = this._CONTENT_HEIGHT, c = c - e / 2;
    this._header ? this._header.setAttribute("width", b) : this._header = this.svgGroup.elem("rect", {width:b, height:e, y:c, rx:3, ry:3, fill:"#fff", "fill-opacity":this._isClearBG ? 0 : 0.4});
    this._isClearBG && $(this._header).css({stroke:"none"});
    this.svgGroup.appendChild(this.textElement);
    this._bindRenderOptions();
    this.box.set({x:0, y:0, width:b, height:e});
  };
  c.renderOptions = function() {
    var b = this;
    this._attachDisposeEvent(function(c) {
      !0 !== c && b.applyValue();
      b.destroyOption(c);
    });
    this.optionGroup = Entry.Dom("input", {class:"entry-widget-input-field", parent:$("body")});
    this.optionGroup.val(this.getValue());
    this.optionGroup.on("mousedown", function(b) {
      b.stopPropagation();
    });
    this.optionGroup.on("keyup", function(c) {
      var d = c.keyCode || c.which;
      b.applyValue(c);
      -1 < [13, 27].indexOf(d) && b.destroyOption(void 0, !0);
    });
    var c = this.getAbsolutePosFromDocument();
    c.y -= this.box.height / 2;
    this.optionGroup.css({height:this._CONTENT_HEIGHT, left:c.x, top:c.y, width:b.box.width});
    this.optionGroup.focus && this.optionGroup.focus();
    c = this.optionGroup[0];
    c.setSelectionRange(0, c.value.length, "backward");
    this.optionDomCreated();
  };
  c.applyValue = function(b) {
    b = this.optionGroup.val();
    this.setValue(b);
    this._setTextValue();
    this.resize();
  };
  c.resize = function() {
    var b = this.getTextWidth();
    this._header.attr({width:b});
    this.optionGroup.css({width:b});
    this.box.set({width:b});
    this._blockView.dAlignContent();
  };
  c.getTextWidth = function() {
    return this.getTextBBox().width + 6 + 2;
  };
  c._setTextValue = function() {
    var b = this._convert(this.getValue(), this.getValue());
    this.textElement.textContent !== b && (this.textElement.textContent = b);
  };
})(Entry.FieldTextInput.prototype);
Entry.GlobalSvg = {};
(function(c) {
  c.DONE = 0;
  c._inited = !1;
  c.REMOVE = 1;
  c.RETURN = 2;
  c.createDom = function() {
    if (!this.inited) {
      $("#globalSvgSurface").remove();
      $("#globalSvg").remove();
      var b = $("body");
      this._container = Entry.Dom("div", {classes:["globalSvgSurface", "entryRemove"], id:"globalSvgSurface", parent:b});
      this.svgDom = Entry.Dom($('<svg id="globalSvg" width="10" height="10"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:this._container});
      this.svg = Entry.SVG("globalSvg");
      this.top = this.left = 0;
      this._inited = !0;
    }
  };
  c.setView = function(b, c) {
    if (b != this._view && !b.block.isReadOnly() && b.movable) {
      return this._view = b, this._mode = c, c !== Entry.Workspace.MODE_VIMBOARD && b.set({visible:!1}), this.draw(), this.show(), this.align(), this.position(), !0;
    }
  };
  c.draw = function() {
    var b = this._view;
    this._svg && this.remove();
    var c = this._mode == Entry.Workspace.MODE_VIMBOARD, e = b.svgGroup.getBBox();
    this.svgDom.attr({width:Math.round(e.width + 4) + "px", height:Math.round(e.height + 4) + "px"});
    this.svgGroup = Entry.SVG.createElement(b.svgGroup.cloneNode(!0), {opacity:1});
    this.svg.appendChild(this.svgGroup);
    c && (b = $(this.svgGroup), b.find("g").css({filter:"none"}), b.find("path, rect, polygon").velocity({opacity:0}, {duration:500}), b.find("text").velocity({fill:"#000000"}, {duration:530}));
  };
  c.remove = function() {
    this.svgGroup && (this.svgGroup.remove(), delete this.svgGroup, delete this._view, delete this._offsetX, delete this._offsetY, delete this._startX, delete this._startY, this.hide());
  };
  c.align = function() {
    var b = this._view.getSkeleton().box(this._view).offsetX || 0, c = this._view.getSkeleton().box(this._view).offsetY || 0, b = -1 * b + 1, c = -1 * c + 1;
    this._offsetX = b;
    this._offsetY = c;
    this.svgGroup.attr({transform:"translate(" + b + "," + c + ")"});
  };
  c.show = function() {
    this._container.removeClass("entryRemove");
  };
  c.hide = function() {
    this._container.addClass("entryRemove");
  };
  c.position = function() {
    var b = this._view;
    if (b) {
      var c = b.getAbsoluteCoordinate(), b = b.getBoard().offset();
      this.left = c.x + b.left - this._offsetX;
      this.top = c.y + b.top - this._offsetY;
      this._applyDomPos(this.left, this.top);
    }
  };
  c.adjust = function(b, c) {
    b = this.left + (b || 0);
    c = this.top + (c || 0);
    if (b !== this.left || c !== this.top) {
      this.left = b, this.top = c, this._applyDomPos(this.left, this.top);
    }
  };
  c._applyDomPos = function(b, c) {
    this.svgDom.css({transform:"translate3d(" + b + "px," + c + "px, 0px)"});
  };
  c.terminateDrag = function(b) {
    var c = Entry.mouseCoordinate, e = b.getBoard(), f = e.workspace.blockMenu, g = f.offset().left, h = f.offset().top, k = f.visible ? f.svgDom.width() : 0;
    return c.y > e.offset().top - 20 && c.x > g + k ? this.DONE : c.y > h && c.x > g && f.visible ? b.block.isDeletable() ? this.REMOVE : this.RETURN : this.RETURN;
  };
  c.addControl = function(b) {
    this.onMouseDown.apply(this, arguments);
  };
  c.onMouseDown = function(b) {
    function c(b) {
      var c = b.pageX;
      b = b.pageY;
      var d = f.left + (c - f._startX), e = f.top + (b - f._startY);
      f._applyDomPos(d, e);
      f._startX = c;
      f._startY = b;
      f.left = d;
      f.top = e;
    }
    function e(b) {
      $(document).unbind(".block");
    }
    this._startY = b.pageY;
    var f = this;
    b.stopPropagation();
    b.preventDefault();
    var g = $(document);
    g.bind("mousemove.block", c);
    g.bind("mouseup.block", e);
    g.bind("touchmove.block", c);
    g.bind("touchend.block", e);
    this._startX = b.pageX;
    this._startY = b.pageY;
  };
})(Entry.GlobalSvg);
Entry.Mutator = function() {
};
(function(c) {
  c.mutate = function(b, c, e) {
    b = Entry.block[b];
    void 0 === b.changeEvent && (b.changeEvent = new Entry.Event);
    void 0 === b.paramsBackupEvent && (b.paramsBackupEvent = new Entry.Event);
    void 0 === b.destroyParamsBackupEvent && (b.destroyParamsBackupEvent = new Entry.Event);
    b.template = c.template;
    b.params = c.params;
    b.changeEvent.notify(1, e);
  };
})(Entry.Mutator);
(function(c) {
})(Entry.Mutator.prototype);
Entry.RenderView = function(c, b, d, e) {
  this._align = b || "CENTER";
  c = "string" === typeof c ? $("#" + c) : $(c);
  if ("DIV" !== c.prop("tagName")) {
    return console.error("Dom is not div element");
  }
  this.view = c;
  this.viewOnly = !0;
  this.suffix = "renderView";
  this._scale = void 0 === d ? 1 : d;
  this._parserType = e;
  this.disableMouseEvent = this.visible = !0;
  this._svgId = "renderView_" + (new Date).getTime();
  this._generateView();
  this.offset = this.svgDom.offset();
  this._minBlockOffsetX = 0;
  this._setSize();
  this.svg = Entry.SVG(this._svgId, this.svgDom[0]);
  Entry.Utils.addFilters(this.svg, this.suffix);
  this.svg && (this.svgGroup = this.svg.elem("g"), this.svgThreadGroup = this.svgGroup.elem("g"), this.svgThreadGroup.board = this, this.svgBlockGroup = this.svgGroup.elem("g"), this.svgBlockGroup.board = this);
};
(function(c) {
  c.schema = {code:null, dragBlock:null, closeBlock:null, selectedBlockView:null};
  c._generateView = function() {
    this.renderViewContainer = Entry.Dom("div", {"class":"renderViewContainer", parent:this.view});
    this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="renderView" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:this.renderViewContainer});
  };
  c.changeCode = function(b, c) {
    if (!(b instanceof Entry.Code)) {
      return console.error("You must inject code instance");
    }
    this.code = b;
    this.svg || (this.svg = Entry.SVG(this._svgId, this.svgDom[0]), this.svgGroup = this.svg.elem("g"), this.svgThreadGroup = this.svgGroup.elem("g"), this.svgThreadGroup.board = this, this.svgBlockGroup = this.svgGroup.elem("g"), this.svgBlockGroup.board = this);
    b.createView(this);
    this.align();
    this.resize(c);
  };
  c.align = function() {
    var b = this.code.getThreads();
    if (b && 0 !== b.length) {
      for (var c = 0, e = this._getHorizontalPadding(), f = 0, g = b.length; f < g; f++) {
        var h = b[f].getFirstBlock().view, k = h.svgGroup.getBBox().height, l = 0, m = $(h.svgGroup).find(".extension");
        if (m) {
          for (var q = 0; q < m.length; q++) {
            var n = parseFloat(m[q].getAttribute("x")), l = Math.min(l, n);
          }
        }
        this._minBlockOffsetX = Math.min(this._minBlockOffsetX, h.offsetX);
        h._moveTo(e - l - h.offsetX, c - h.offsetY, !1);
        c += k + 15;
      }
      this._setSize();
    }
  };
  c.hide = function() {
    this.view.addClass("entryRemove");
  };
  c.show = function() {
    this.view.removeClass("entryRemove");
  };
  c._setSize = function() {
    this.svgDom && (this._svgWidth = this.svgDom.width(), this.offset = this.svgDom.offset());
    this.svgGroup && (this._bBox = this.svgGroup.getBBox());
  };
  c.bindCodeView = function(b) {
    this.svgBlockGroup.remove();
    this.svgThreadGroup.remove();
    this.svgBlockGroup = b.svgBlockGroup;
    this.svgThreadGroup = b.svgThreadGroup;
    this.svgGroup.appendChild(this.svgThreadGroup);
    this.svgGroup.appendChild(this.svgBlockGroup);
  };
  c.resize = function(b) {
    function c() {
      this._setSize();
      var b = Math.round(this._bBox.width), c = Math.round(this._bBox.height);
      0 !== b && 0 !== c && ($(this.svg).css({width:b + this._getHorizontalPadding() - this._minBlockOffsetX, height:c + 5}), setTimeout(function() {
        var d = this.svgGroup.getBBox();
        Math.round(d.width) === b && Math.round(d.height) === c || this.resize();
      }.bind(this), 1000));
    }
    this.svg && this._bBox && (b ? c.call(this) : setTimeout(function() {
      c.call(this);
    }.bind(this), 0));
  };
  c.setDomSize = function(b) {
    this.svgBlockGroup && this.svgBlockGroup.attr("transform", "scale(1)");
    this.code.view.reDraw();
    this.align();
    this.resize(b);
    1 !== this._scale && window.setTimeout(function() {
      this.svgBlockGroup.attr("transform", "scale(%scale)".replace("%scale", this._scale));
      this.align();
      this.resize();
    }.bind(this), 0);
  };
  c._getHorizontalPadding = function() {
    var b = {LEFT:20, LEFT_MOST:0}[this._align];
    return void 0 !== b ? b : this.svgDom.width() / 2;
  };
  c.getBlockSyntax = function(b, c) {
    var d = null;
    2 === c && (this._parser || (this._parser = new Entry.Parser(null, null)), this._parser.setParser(1, this._parserType), this._parser._execParser && (d = this._parser._execParser.searchSyntax(b)));
    return d;
  };
  c.setParserType = function(b) {
    this._parserType = b;
  };
})(Entry.RenderView.prototype);
Entry.skinContainer = {_skins:{}};
(function(c) {
  c.skinSchema = {type:"", condition:[]};
  c.loadSkins = function(b) {
    b.map(this.addSkin.bind(this));
  };
  c.addSkin = function(b) {
    var c = function() {
    };
    c.prototype = Entry.block[b.type];
    var c = new c, e;
    for (e in b) {
      c[e] = b[e];
    }
    this._skins[b.type] || (this._skins[b.type] = []);
    this._skins[b.type].push(c);
  };
  c.getSkin = function(b) {
    if (this._skins[b.type]) {
      for (var c = this._skins[b.type], e = 0; e < c.length; e++) {
        var f = c[e];
        if (!f.conditions || !f.conditions.length) {
          return f;
        }
        for (var g = 0; g < f.conditions.length; g++) {
          var h = f.conditions[g];
          if (b.getDataByPointer(h.pointer) !== h.value) {
            break;
          }
          if (g === f.conditions.length - 1) {
            return f;
          }
        }
      }
    }
    return Entry.block[b.type];
  };
})(Entry.skinContainer);
Entry.ThreadView = function(c, b) {
  Entry.Model(this, !1);
  this.thread = c;
  this.svgGroup = b.svgThreadGroup.elem("g");
  this.parent = this.board = b;
  this._hasGuide = !1;
};
(function(c) {
  c.schema = {height:0, zIndex:0};
  c.destroy = function() {
    this.svgGroup.remove();
  };
  c.setParent = function(b) {
    this.parent = b;
  };
  c.getParent = function() {
    return this.parent;
  };
  c.renderText = function() {
    for (var b = this.thread.getBlocks(), c = 0; c < b.length; c++) {
      b[c].view.renderText();
    }
  };
  c.renderBlock = function() {
    for (var b = this.thread.getBlocks(), c = 0; c < b.length; c++) {
      b[c].view.renderBlock();
    }
  };
  c.requestAbsoluteCoordinate = function(b) {
    var c = this.thread.getBlocks(), e = c.shift(), f = {x:0, y:0};
    for (this.parent instanceof Entry.Board || this.parent instanceof Entry.BlockMenu || (f = this.parent.requestAbsoluteCoordinate()); e && e.view !== b && e.view;) {
      e = e.view, f.x += e.x + e.magnet.next.x, f.y += e.y + e.magnet.next.y, e = c.shift();
    }
    return f;
  };
  c.requestPartHeight = function(b, c) {
    c = this.thread.getBlocks();
    for (var d = c.pop(), f = b ? b.magnet.next ? b.magnet.next.y : b.height : 0; d && d.view !== b && d.view;) {
      d = d.view, f = d.magnet.next ? f + d.magnet.next.y : f + d.height, d.dragMode === Entry.DRAG_MODE_DRAG && (f = 0), d = c.pop();
    }
    return f;
  };
  c.getMagnet = function(b) {
    return {getBoundingClientRect:function() {
      var b = this.parent.requestAbsoluteCoordinate(), c = this.board.relativeOffset;
      return {top:b.y + c.top - 20, left:b.x + c.left - 20, width:40, height:40};
    }.bind(this)};
  };
  c.dominate = function() {
    !this._hasGuide && this.parent.dominate(this.thread);
  };
  c.isGlobal = function() {
    return this.parent instanceof Entry.Board;
  };
  c.reDraw = function() {
    for (var b = this.thread._data, c = b.length - 1; 0 <= c; c--) {
      var e = b[c];
      e.view ? e.view.reDraw() : e.createView(this.thread._code.view.board);
    }
  };
  c.setZIndex = function(b) {
    this.set({zIndex:b});
  };
  c.setHasGuide = function(b) {
    this._hasGuide = b;
  };
})(Entry.ThreadView.prototype);
Entry.Vim = function(c, b) {
  c = "string" === typeof c ? $("#" + c) : $(c);
  if ("DIV" !== c.prop("tagName")) {
    return console.error("Dom is not div element");
  }
  this._parentView = c;
  this.createDom(c);
  this._parser = new Entry.Parser(null, null, this.codeMirror);
  Entry.addEventListener("hwChanged", function(b) {
    Entry.hw.hwModule ? (b = Entry.hw.hwModule.name, b = b[0].toUpperCase() + b.slice(1), "ArduinoExt" == b && (b = "Arduino"), Entry.Vim.PYTHON_IMPORT_HW = "\nimport " + b + "\n", Entry.Vim.INEDITABLE_LINE_PY = 4) : (Entry.Vim.PYTHON_IMPORT_HW = "", Entry.Vim.INEDITABLE_LINE_PY = 3);
  });
};
Entry.Vim.MAZE_MODE = 1;
Entry.Vim.WORKSPACE_MODE = 2;
Entry.Vim.TEXT_TYPE_JS = 0;
Entry.Vim.TEXT_TYPE_PY = 1;
Entry.Vim.PARSER_TYPE_JS_TO_BLOCK = 0;
Entry.Vim.PARSER_TYPE_PY_TO_BLOCK = 1;
Entry.Vim.PARSER_TYPE_BLOCK_TO_JS = 2;
Entry.Vim.PARSER_TYPE_BLOCK_TO_PY = 3;
Entry.Vim.INEDITABLE_LINE_PY = 3;
Entry.Vim.PYTHON_IMPORT_ENTRY = "import Entry";
Entry.Vim.PYTHON_IMPORT_HW = "";
(function(c) {
  c.createDom = function(b) {
    function c(b) {
      var c = b.block;
      if (c) {
        var d = h.codeMirror, e = h.getCodeToText(c, Entry.Parser.PARSE_BLOCK);
        d.display.dragFunctions.leave(b);
        d.display.scroller.dispatchEvent(Entry.Utils.createMouseEvent("mousedown", b));
        var e = e.split("\n"), f = e.length - 1, g = h.doc.getCursor().line;
        e.forEach(function(b, c) {
          c != f && (b += "\n");
          d.replaceSelection(b);
        });
        c.statements && c.statements.length && (g++, d.setCursor(g), d.getLine(g) && (d.replaceSelection("\n"), d.setCursor(g)), CodeMirror.commands.indentAuto(d));
        d.display.scroller.dispatchEvent(Entry.Utils.createMouseEvent("mouseup", b));
      }
    }
    function e(b) {
      h.codeMirror.display.dragFunctions.over(b);
    }
    this.view = Entry.Dom("div", {parent:b, class:"entryVimBoard"});
    this.codeMirror = CodeMirror(this.view[0], {lineNumbers:!0, value:"", mode:{name:"javascript", globalVars:!0}, theme:"default", indentUnit:4, indentWithTabs:!0, styleActiveLine:!0, extraKeys:{"Ctrl-Space":"autocomplete", Tab:function(b) {
      var c = Array(b.getOption("indentUnit") + 1).join(" ");
      b.replaceSelection(c);
    }}, lint:!0, viewportMargin:10});
    var f = Entry.Utils.debounce(function() {
      Entry.isTextMode && this.codeMirror.showHint({completeSingle:!1, globalScope:this._getAssistScope()});
    }.bind(this), 250);
    this.codeMirror.on("keydown", function(b, c) {
      Entry && Entry.keyPressed && Entry.keyPressed.notify(c, !0);
      1 === c.key.length && f();
    }.bind(this));
    var g = Entry.Utils.debounce(function() {
      var b = this.codeMirror.display && this.codeMirror.display.input ? this.codeMirror.display.input : void 0;
      b && b.composing && (b.poll(), b.composing.range.clear(), b.composing = null);
    }.bind(this), 250);
    this.codeMirror.on("keyup", function(b, c) {
      g();
      "Backspace" === c.key && f();
    }.bind(this));
    this.doc = this.codeMirror.getDoc();
    var h = this;
    b = this.view[0];
    b.removeEventListener("dragEnd", c);
    b.removeEventListener("dragOver", e);
    b.addEventListener("dragEnd", c);
    b.addEventListener("dragOver", e);
  };
  c.hide = function() {
    this.view.addClass("entryRemove");
    this.view.remove();
  };
  c.show = function() {
    this.view.removeClass("entryRemove");
    this._parentView.append(this.view);
  };
  c.clearText = function() {
    this.codeMirror.setValue("");
  };
  c.textToCode = function(b) {
    b === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_JS_TO_BLOCK, this._parser.setParser(this._mode, this._parserType, this.codeMirror)) : b === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_PY_TO_BLOCK, this._parser.setParser(this._mode, this._parserType, this.codeMirror));
    b = this.codeMirror.getValue();
    var c = this.doc.getCursor();
    b = b.replace(/\t/gm, "    ");
    this.codeMirror.setValue(b);
    this.doc.setCursor(c);
    return this._parser.parse(b);
  };
  c.codeToText = function(b, c) {
    var d;
    c && (this._mode = c.runType);
    this._oldParserType = d = c.textType;
    d === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS, this._oldParserType != this._parserType && this._parser.setParser(this._mode, this._parserType, this.codeMirror), this._oldParserType = this._parserType) : d === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY, this._oldParserType != this._parserType && this._parser.setParser(this._mode, this._parserType, this.codeMirror), this._oldParserType = this._parserType);
    Entry.playground && (this._currentObject = Entry.playground.object);
    this._parser._hasDeclaration = !1;
    d == Entry.Vim.TEXT_TYPE_PY ? this._currentObject ? (c = "# " + this._currentObject.name + Lang.TextCoding.python_code, b = this._parser.parse(b, Entry.Parser.PARSE_GENERAL), d === Entry.Vim.TEXT_TYPE_PY && (b = c.concat("\n\n").concat(Entry.Vim.PYTHON_IMPORT_ENTRY).concat(Entry.Vim.PYTHON_IMPORT_HW).concat("\n\n").concat(b)), this.codeMirror.setValue(b), d == Entry.Vim.TEXT_TYPE_PY && this.codeMirror.getDoc().markText({line:0, ch:0}, {line:Entry.Vim.INEDITABLE_LINE_PY, ch:0}, {readOnly:!0, inclusiveLeft:!0}), 
    d = this.codeMirror.getDoc(), d.setCursor({line:d.lastLine() - 1})) : this.clearText() : d == Entry.Vim.TEXT_TYPE_JS && (b = this._parser.parse(b, Entry.Parser.PARSE_GENERAL), this.codeMirror.setValue(b), d = this.codeMirror.getDoc(), d.setCursor({line:d.lastLine() - 1}));
    Entry.isTextMode && (this._parser._onRunError = !1);
  };
  c.getCodeToText = function(b, c) {
    var d = this.workspace.oldTextType;
    d === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS, this._parser.setParser(this._mode, this._parserType, this.codeMirror)) : d === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY, this._parser.setParser(this._mode, this._parserType, this.codeMirror));
    return c ? this._parser.parse(b, c) : this._parser.parse(b, Entry.Parser.PARSE_SYNTAX);
  };
  c.setParserAvailableCode = function(b, c) {
    this._parser.setAvailableCode(b, c);
  };
  c.getBlockSyntax = function(b) {
    var c = null, e = this.workspace.oldTextType;
    e === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS, this._parser.setParser(this._mode, this._parserType, this.codeMirror)) : e === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY, this._parser.setParser(this._mode, this._parserType, this.codeMirror));
    this._parser._execParser && (c = this._parser._execParser.searchSyntax(b));
    return c;
  };
  c._getAssistScope = function() {
    var b = this._parser._execParser;
    if (b && b.getAssistScope) {
      return b.getAssistScope();
    }
  };
})(Entry.Vim.prototype);
Entry.Xml = {};
Entry.Xml.isTypeOf = function(c, b) {
  return b.getAttribute("type") == c;
};
Entry.Xml.getNextBlock = function(c) {
  c = c.childNodes;
  for (var b = 0; b < c.length; b++) {
    if ("NEXT" == c[b].tagName.toUpperCase()) {
      return c[b].children[0];
    }
  }
  return null;
};
Entry.Xml.getStatementBlock = function(c, b) {
  var d = b.getElementsByTagName("statement");
  if (!d.length) {
    return b;
  }
  for (var e in d) {
    if (d[e].getAttribute("name") == c) {
      return d[e].children[0];
    }
  }
  return null;
};
Entry.Xml.getParentLoop = function(c) {
  for (;;) {
    if (!c) {
      return null;
    }
    if ((c = c.parentNode) && "STATEMENT" == c.tagName.toUpperCase()) {
      return c.parentNode;
    }
    if (c) {
      c = c.parentNode;
    } else {
      return null;
    }
  }
};
Entry.Xml.getParentIterateLoop = function(c) {
  for (;;) {
    if (!c) {
      return null;
    }
    if ((c = c.parentNode) && c.getAttribute("type") && "REPEAT" == c.getAttribute("type").toUpperCase().substr(0, 6)) {
      return c;
    }
    if (!c) {
      return null;
    }
  }
};
Entry.Xml.getParentBlock = function(c) {
  return (c = c.parentNode) ? c.parentNode : null;
};
Entry.Xml.callReturn = function(c) {
  var b = Entry.Xml.getNextBlock(c);
  return b ? b : Entry.Xml.getParentLoop(c);
};
Entry.Xml.isRootBlock = function(c) {
};
Entry.Xml.getValue = function(c, b) {
  b = b.childNodes;
  if (!b.length) {
    return null;
  }
  for (var d in b) {
    if ("VALUE" == b[d].tagName.toUpperCase() && b[d].getAttribute("name") == c) {
      return b[d].children[0];
    }
  }
  return null;
};
Entry.Xml.getNumberValue = function(c, b, d) {
  d = d.childNodes;
  if (!d.length) {
    return null;
  }
  for (var e in d) {
    if (d[e].tagName && "VALUE" == d[e].tagName.toUpperCase() && d[e].getAttribute("name") == b) {
      return Number(Entry.Xml.operate(c, d[e].children[0]));
    }
  }
  return null;
};
Entry.Xml.getField = function(c, b) {
  b = b.childNodes;
  if (!b.length) {
    return null;
  }
  for (var d in b) {
    if (b[d].tagName && "FIELD" == b[d].tagName.toUpperCase() && b[d].getAttribute("name") == c) {
      return b[d].textContent;
    }
  }
};
Entry.Xml.getNumberField = function(c, b) {
  b = b.childNodes;
  if (!b.length) {
    return null;
  }
  for (var d in b) {
    if ("FIELD" == b[d].tagName.toUpperCase() && b[d].getAttribute("name") == c) {
      return Number(b[d].textContent);
    }
  }
};
Entry.Xml.getBooleanValue = function(c, b, d) {
  d = d.getElementsByTagName("value");
  if (!d.length) {
    return null;
  }
  for (var e in d) {
    if (d[e].getAttribute("name") == b) {
      return Entry.Xml.operate(c, d[e].children[0]);
    }
  }
  return null;
};
Entry.Xml.operate = function(c, b) {
  return Entry.block[b.getAttribute("type")](c, b);
};
Entry.Xml.cloneBlock = function(c, b, d) {
  var e = c.cloneNode();
  c.parentNode && "xml" != c.parentNode.tagName && Entry.Xml.cloneBlock(c.parentNode, e, "parent");
  for (var f = 0; f < c.childNodes.length; f++) {
    var g = c.childNodes[f];
    g instanceof Text ? e.textContent = g.textContent : "parent" == d ? e.appendChild(b) : e.appendChild(Entry.Xml.cloneBlock(g, e, "child"));
  }
  return e;
};
Entry.Youtube = function(c) {
  this.generateView(c);
};
p = Entry.Youtube.prototype;
p.init = function(c) {
  this.youtubeHash = c;
  this.generateView();
};
p.generateView = function(c) {
  var b = Entry.createElement("div");
  b.addClass("entryContainerMovieWorkspace");
  b.addClass("entryRemove");
  this.movieContainer = b;
  b = Entry.createElement("iframe");
  b.setAttribute("id", "youtubeIframe");
  b.setAttribute("allowfullscreen", "");
  b.setAttribute("frameborder", 0);
  b.setAttribute("src", "https://www.youtube.com/embed/" + c);
  this.movieFrame = b;
  this.movieContainer.appendChild(b);
};
p.getView = function() {
  return this.movieContainer;
};
p.resize = function() {
  var c = document.getElementsByClassName("propertyContent")[0], b = document.getElementById("youtubeIframe"), c = c.offsetWidth;
  b.width = c + "px";
  b.height = 9 * c / 16 + "px";
};

